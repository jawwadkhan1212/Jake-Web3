/*! For license information please see web3wallet.js.LICENSE.txt */
(()=>{var e,t,r={8099:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(7117);function s(e,t,r){return void 0===t&&(t=new Uint8Array(2)),void 0===r&&(r=0),t[r+0]=e>>>8,t[r+1]=e>>>0,t}function n(e,t,r){return void 0===t&&(t=new Uint8Array(2)),void 0===r&&(r=0),t[r+0]=e>>>0,t[r+1]=e>>>8,t}function o(e,t){return void 0===t&&(t=0),e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3]}function a(e,t){return void 0===t&&(t=0),(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0}function c(e,t){return void 0===t&&(t=0),e[t+3]<<24|e[t+2]<<16|e[t+1]<<8|e[t]}function h(e,t){return void 0===t&&(t=0),(e[t+3]<<24|e[t+2]<<16|e[t+1]<<8|e[t])>>>0}function u(e,t,r){return void 0===t&&(t=new Uint8Array(4)),void 0===r&&(r=0),t[r+0]=e>>>24,t[r+1]=e>>>16,t[r+2]=e>>>8,t[r+3]=e>>>0,t}function l(e,t,r){return void 0===t&&(t=new Uint8Array(4)),void 0===r&&(r=0),t[r+0]=e>>>0,t[r+1]=e>>>8,t[r+2]=e>>>16,t[r+3]=e>>>24,t}function f(e,t,r){return void 0===t&&(t=new Uint8Array(8)),void 0===r&&(r=0),u(e/4294967296>>>0,t,r),u(e>>>0,t,r+4),t}function p(e,t,r){return void 0===t&&(t=new Uint8Array(8)),void 0===r&&(r=0),l(e>>>0,t,r),l(e/4294967296>>>0,t,r+4),t}t.readInt16BE=function(e,t){return void 0===t&&(t=0),(e[t+0]<<8|e[t+1])<<16>>16},t.readUint16BE=function(e,t){return void 0===t&&(t=0),(e[t+0]<<8|e[t+1])>>>0},t.readInt16LE=function(e,t){return void 0===t&&(t=0),(e[t+1]<<8|e[t])<<16>>16},t.readUint16LE=function(e,t){return void 0===t&&(t=0),(e[t+1]<<8|e[t])>>>0},t.writeUint16BE=s,t.writeInt16BE=s,t.writeUint16LE=n,t.writeInt16LE=n,t.readInt32BE=o,t.readUint32BE=a,t.readInt32LE=c,t.readUint32LE=h,t.writeUint32BE=u,t.writeInt32BE=u,t.writeUint32LE=l,t.writeInt32LE=l,t.readInt64BE=function(e,t){void 0===t&&(t=0);var r=o(e,t),i=o(e,t+4);return 4294967296*r+i-4294967296*(i>>31)},t.readUint64BE=function(e,t){return void 0===t&&(t=0),4294967296*a(e,t)+a(e,t+4)},t.readInt64LE=function(e,t){void 0===t&&(t=0);var r=c(e,t);return 4294967296*c(e,t+4)+r-4294967296*(r>>31)},t.readUint64LE=function(e,t){void 0===t&&(t=0);var r=h(e,t);return 4294967296*h(e,t+4)+r},t.writeUint64BE=f,t.writeInt64BE=f,t.writeUint64LE=p,t.writeInt64LE=p,t.readUintBE=function(e,t,r){if(void 0===r&&(r=0),e%8!=0)throw new Error("readUintBE supports only bitLengths divisible by 8");if(e/8>t.length-r)throw new Error("readUintBE: array is too short for the given bitLength");for(var i=0,s=1,n=e/8+r-1;n>=r;n--)i+=t[n]*s,s*=256;return i},t.readUintLE=function(e,t,r){if(void 0===r&&(r=0),e%8!=0)throw new Error("readUintLE supports only bitLengths divisible by 8");if(e/8>t.length-r)throw new Error("readUintLE: array is too short for the given bitLength");for(var i=0,s=1,n=r;n<r+e/8;n++)i+=t[n]*s,s*=256;return i},t.writeUintBE=function(e,t,r,s){if(void 0===r&&(r=new Uint8Array(e/8)),void 0===s&&(s=0),e%8!=0)throw new Error("writeUintBE supports only bitLengths divisible by 8");if(!i.isSafeInteger(t))throw new Error("writeUintBE value must be an integer");for(var n=1,o=e/8+s-1;o>=s;o--)r[o]=t/n&255,n*=256;return r},t.writeUintLE=function(e,t,r,s){if(void 0===r&&(r=new Uint8Array(e/8)),void 0===s&&(s=0),e%8!=0)throw new Error("writeUintLE supports only bitLengths divisible by 8");if(!i.isSafeInteger(t))throw new Error("writeUintLE value must be an integer");for(var n=1,o=s;o<s+e/8;o++)r[o]=t/n&255,n*=256;return r},t.readFloat32BE=function(e,t){return void 0===t&&(t=0),new DataView(e.buffer,e.byteOffset,e.byteLength).getFloat32(t)},t.readFloat32LE=function(e,t){return void 0===t&&(t=0),new DataView(e.buffer,e.byteOffset,e.byteLength).getFloat32(t,!0)},t.readFloat64BE=function(e,t){return void 0===t&&(t=0),new DataView(e.buffer,e.byteOffset,e.byteLength).getFloat64(t)},t.readFloat64LE=function(e,t){return void 0===t&&(t=0),new DataView(e.buffer,e.byteOffset,e.byteLength).getFloat64(t,!0)},t.writeFloat32BE=function(e,t,r){return void 0===t&&(t=new Uint8Array(4)),void 0===r&&(r=0),new DataView(t.buffer,t.byteOffset,t.byteLength).setFloat32(r,e),t},t.writeFloat32LE=function(e,t,r){return void 0===t&&(t=new Uint8Array(4)),void 0===r&&(r=0),new DataView(t.buffer,t.byteOffset,t.byteLength).setFloat32(r,e,!0),t},t.writeFloat64BE=function(e,t,r){return void 0===t&&(t=new Uint8Array(8)),void 0===r&&(r=0),new DataView(t.buffer,t.byteOffset,t.byteLength).setFloat64(r,e),t},t.writeFloat64LE=function(e,t,r){return void 0===t&&(t=new Uint8Array(8)),void 0===r&&(r=0),new DataView(t.buffer,t.byteOffset,t.byteLength).setFloat64(r,e,!0),t}},5439:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(8099),s=r(7309);function n(e,t,r){for(var s=1634760805,n=857760878,o=2036477234,a=1797285236,c=r[3]<<24|r[2]<<16|r[1]<<8|r[0],h=r[7]<<24|r[6]<<16|r[5]<<8|r[4],u=r[11]<<24|r[10]<<16|r[9]<<8|r[8],l=r[15]<<24|r[14]<<16|r[13]<<8|r[12],f=r[19]<<24|r[18]<<16|r[17]<<8|r[16],p=r[23]<<24|r[22]<<16|r[21]<<8|r[20],d=r[27]<<24|r[26]<<16|r[25]<<8|r[24],g=r[31]<<24|r[30]<<16|r[29]<<8|r[28],y=t[3]<<24|t[2]<<16|t[1]<<8|t[0],w=t[7]<<24|t[6]<<16|t[5]<<8|t[4],b=t[11]<<24|t[10]<<16|t[9]<<8|t[8],m=t[15]<<24|t[14]<<16|t[13]<<8|t[12],v=s,_=n,E=o,S=a,I=c,R=h,O=u,A=l,N=f,x=p,P=d,U=g,L=y,T=w,C=b,M=m,j=0;j<20;j+=2)I=(I^=N=N+(L=(L^=v=v+I|0)>>>16|L<<16)|0)>>>20|I<<12,R=(R^=x=x+(T=(T^=_=_+R|0)>>>16|T<<16)|0)>>>20|R<<12,O=(O^=P=P+(C=(C^=E=E+O|0)>>>16|C<<16)|0)>>>20|O<<12,A=(A^=U=U+(M=(M^=S=S+A|0)>>>16|M<<16)|0)>>>20|A<<12,O=(O^=P=P+(C=(C^=E=E+O|0)>>>24|C<<8)|0)>>>25|O<<7,A=(A^=U=U+(M=(M^=S=S+A|0)>>>24|M<<8)|0)>>>25|A<<7,R=(R^=x=x+(T=(T^=_=_+R|0)>>>24|T<<8)|0)>>>25|R<<7,I=(I^=N=N+(L=(L^=v=v+I|0)>>>24|L<<8)|0)>>>25|I<<7,R=(R^=P=P+(M=(M^=v=v+R|0)>>>16|M<<16)|0)>>>20|R<<12,O=(O^=U=U+(L=(L^=_=_+O|0)>>>16|L<<16)|0)>>>20|O<<12,A=(A^=N=N+(T=(T^=E=E+A|0)>>>16|T<<16)|0)>>>20|A<<12,I=(I^=x=x+(C=(C^=S=S+I|0)>>>16|C<<16)|0)>>>20|I<<12,A=(A^=N=N+(T=(T^=E=E+A|0)>>>24|T<<8)|0)>>>25|A<<7,I=(I^=x=x+(C=(C^=S=S+I|0)>>>24|C<<8)|0)>>>25|I<<7,O=(O^=U=U+(L=(L^=_=_+O|0)>>>24|L<<8)|0)>>>25|O<<7,R=(R^=P=P+(M=(M^=v=v+R|0)>>>24|M<<8)|0)>>>25|R<<7;i.writeUint32LE(v+s|0,e,0),i.writeUint32LE(_+n|0,e,4),i.writeUint32LE(E+o|0,e,8),i.writeUint32LE(S+a|0,e,12),i.writeUint32LE(I+c|0,e,16),i.writeUint32LE(R+h|0,e,20),i.writeUint32LE(O+u|0,e,24),i.writeUint32LE(A+l|0,e,28),i.writeUint32LE(N+f|0,e,32),i.writeUint32LE(x+p|0,e,36),i.writeUint32LE(P+d|0,e,40),i.writeUint32LE(U+g|0,e,44),i.writeUint32LE(L+y|0,e,48),i.writeUint32LE(T+w|0,e,52),i.writeUint32LE(C+b|0,e,56),i.writeUint32LE(M+m|0,e,60)}function o(e,t,r,i,o){if(void 0===o&&(o=0),32!==e.length)throw new Error("ChaCha: key size must be 32 bytes");if(i.length<r.length)throw new Error("ChaCha: destination is shorter than source");var c,h;if(0===o){if(8!==t.length&&12!==t.length)throw new Error("ChaCha nonce must be 8 or 12 bytes");h=(c=new Uint8Array(16)).length-t.length,c.set(t,h)}else{if(16!==t.length)throw new Error("ChaCha nonce with counter must be 16 bytes");c=t,h=o}for(var u=new Uint8Array(64),l=0;l<r.length;l+=64){n(u,c,e);for(var f=l;f<l+64&&f<r.length;f++)i[f]=r[f]^u[f-l];a(c,0,h)}return s.wipe(u),0===o&&s.wipe(c),i}function a(e,t,r){for(var i=1;r--;)i=i+(255&e[t])|0,e[t]=255&i,i>>>=8,t++;if(i>0)throw new Error("ChaCha: counter overflow")}t.streamXOR=o,t.stream=function(e,t,r,i){return void 0===i&&(i=0),s.wipe(r),o(e,t,r,r,i)}},5501:(e,t,r)=>{"use strict";var i=r(5439),s=r(3027),n=r(7309),o=r(8099),a=r(4153);t.Cv=32,t.WH=12,t.pg=16;var c=new Uint8Array(16),h=function(){function e(e){if(this.nonceLength=t.WH,this.tagLength=t.pg,e.length!==t.Cv)throw new Error("ChaCha20Poly1305 needs 32-byte key");this._key=new Uint8Array(e)}return e.prototype.seal=function(e,t,r,s){if(e.length>16)throw new Error("ChaCha20Poly1305: incorrect nonce length");var o=new Uint8Array(16);o.set(e,o.length-e.length);var a=new Uint8Array(32);i.stream(this._key,o,a,4);var c,h=t.length+this.tagLength;if(s){if(s.length!==h)throw new Error("ChaCha20Poly1305: incorrect destination length");c=s}else c=new Uint8Array(h);return i.streamXOR(this._key,o,t,c,4),this._authenticate(c.subarray(c.length-this.tagLength,c.length),a,c.subarray(0,c.length-this.tagLength),r),n.wipe(o),c},e.prototype.open=function(e,t,r,s){if(e.length>16)throw new Error("ChaCha20Poly1305: incorrect nonce length");if(t.length<this.tagLength)return null;var o=new Uint8Array(16);o.set(e,o.length-e.length);var c=new Uint8Array(32);i.stream(this._key,o,c,4);var h=new Uint8Array(this.tagLength);if(this._authenticate(h,c,t.subarray(0,t.length-this.tagLength),r),!a.equal(h,t.subarray(t.length-this.tagLength,t.length)))return null;var u,l=t.length-this.tagLength;if(s){if(s.length!==l)throw new Error("ChaCha20Poly1305: incorrect destination length");u=s}else u=new Uint8Array(l);return i.streamXOR(this._key,o,t.subarray(0,t.length-this.tagLength),u,4),n.wipe(o),u},e.prototype.clean=function(){return n.wipe(this._key),this},e.prototype._authenticate=function(e,t,r,i){var a=new s.Poly1305(t);i&&(a.update(i),i.length%16>0&&a.update(c.subarray(i.length%16))),a.update(r),r.length%16>0&&a.update(c.subarray(r.length%16));var h=new Uint8Array(8);i&&o.writeUint64LE(i.length,h),a.update(h),o.writeUint64LE(r.length,h),a.update(h);for(var u=a.digest(),l=0;l<u.length;l++)e[l]=u[l];a.clean(),n.wipe(u),n.wipe(h)},e}();t.OK=h},4153:(e,t)=>{"use strict";function r(e,t){if(e.length!==t.length)return 0;for(var r=0,i=0;i<e.length;i++)r|=e[i]^t[i];return 1&r-1>>>8}Object.defineProperty(t,"__esModule",{value:!0}),t.select=function(e,t,r){return~(e-1)&t|e-1&r},t.lessOrEqual=function(e,t){return(0|e)-(0|t)-1>>>31&1},t.compare=r,t.equal=function(e,t){return 0!==e.length&&0!==t.length&&0!==r(e,t)}},1050:(e,t,r)=>{"use strict";t.Xx=t._w=t.aP=t.KS=t.jQ=void 0;r(1416);const i=r(3350);r(7309);function s(e){const t=new Float64Array(16);if(e)for(let r=0;r<e.length;r++)t[r]=e[r];return t}t.jQ=64,t.KS=64,t.aP=32,new Uint8Array(32)[0]=9;const n=s(),o=s([1]),a=(s([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),s([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222])),c=s([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),h=s([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]);s([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function u(e,t){for(let r=0;r<16;r++)e[r]=0|t[r]}function l(e){let t=1;for(let r=0;r<16;r++){let i=e[r]+t+65535;t=Math.floor(i/65536),e[r]=i-65536*t}e[0]+=t-1+37*(t-1)}function f(e,t,r){const i=~(r-1);for(let r=0;r<16;r++){const s=i&(e[r]^t[r]);e[r]^=s,t[r]^=s}}function p(e,t){const r=s(),i=s();for(let e=0;e<16;e++)i[e]=t[e];l(i),l(i),l(i);for(let e=0;e<2;e++){r[0]=i[0]-65517;for(let e=1;e<15;e++)r[e]=i[e]-65535-(r[e-1]>>16&1),r[e-1]&=65535;r[15]=i[15]-32767-(r[14]>>16&1);const e=r[15]>>16&1;r[14]&=65535,f(i,r,1-e)}for(let t=0;t<16;t++)e[2*t]=255&i[t],e[2*t+1]=i[t]>>8}function d(e){const t=new Uint8Array(32);return p(t,e),1&t[0]}function g(e,t,r){for(let i=0;i<16;i++)e[i]=t[i]+r[i]}function y(e,t,r){for(let i=0;i<16;i++)e[i]=t[i]-r[i]}function w(e,t,r){let i,s,n=0,o=0,a=0,c=0,h=0,u=0,l=0,f=0,p=0,d=0,g=0,y=0,w=0,b=0,m=0,v=0,_=0,E=0,S=0,I=0,R=0,O=0,A=0,N=0,x=0,P=0,U=0,L=0,T=0,C=0,M=0,j=r[0],D=r[1],k=r[2],B=r[3],z=r[4],$=r[5],q=r[6],V=r[7],K=r[8],J=r[9],H=r[10],W=r[11],F=r[12],G=r[13],Y=r[14],X=r[15];i=t[0],n+=i*j,o+=i*D,a+=i*k,c+=i*B,h+=i*z,u+=i*$,l+=i*q,f+=i*V,p+=i*K,d+=i*J,g+=i*H,y+=i*W,w+=i*F,b+=i*G,m+=i*Y,v+=i*X,i=t[1],o+=i*j,a+=i*D,c+=i*k,h+=i*B,u+=i*z,l+=i*$,f+=i*q,p+=i*V,d+=i*K,g+=i*J,y+=i*H,w+=i*W,b+=i*F,m+=i*G,v+=i*Y,_+=i*X,i=t[2],a+=i*j,c+=i*D,h+=i*k,u+=i*B,l+=i*z,f+=i*$,p+=i*q,d+=i*V,g+=i*K,y+=i*J,w+=i*H,b+=i*W,m+=i*F,v+=i*G,_+=i*Y,E+=i*X,i=t[3],c+=i*j,h+=i*D,u+=i*k,l+=i*B,f+=i*z,p+=i*$,d+=i*q,g+=i*V,y+=i*K,w+=i*J,b+=i*H,m+=i*W,v+=i*F,_+=i*G,E+=i*Y,S+=i*X,i=t[4],h+=i*j,u+=i*D,l+=i*k,f+=i*B,p+=i*z,d+=i*$,g+=i*q,y+=i*V,w+=i*K,b+=i*J,m+=i*H,v+=i*W,_+=i*F,E+=i*G,S+=i*Y,I+=i*X,i=t[5],u+=i*j,l+=i*D,f+=i*k,p+=i*B,d+=i*z,g+=i*$,y+=i*q,w+=i*V,b+=i*K,m+=i*J,v+=i*H,_+=i*W,E+=i*F,S+=i*G,I+=i*Y,R+=i*X,i=t[6],l+=i*j,f+=i*D,p+=i*k,d+=i*B,g+=i*z,y+=i*$,w+=i*q,b+=i*V,m+=i*K,v+=i*J,_+=i*H,E+=i*W,S+=i*F,I+=i*G,R+=i*Y,O+=i*X,i=t[7],f+=i*j,p+=i*D,d+=i*k,g+=i*B,y+=i*z,w+=i*$,b+=i*q,m+=i*V,v+=i*K,_+=i*J,E+=i*H,S+=i*W,I+=i*F,R+=i*G,O+=i*Y,A+=i*X,i=t[8],p+=i*j,d+=i*D,g+=i*k,y+=i*B,w+=i*z,b+=i*$,m+=i*q,v+=i*V,_+=i*K,E+=i*J,S+=i*H,I+=i*W,R+=i*F,O+=i*G,A+=i*Y,N+=i*X,i=t[9],d+=i*j,g+=i*D,y+=i*k,w+=i*B,b+=i*z,m+=i*$,v+=i*q,_+=i*V,E+=i*K,S+=i*J,I+=i*H,R+=i*W,O+=i*F,A+=i*G,N+=i*Y,x+=i*X,i=t[10],g+=i*j,y+=i*D,w+=i*k,b+=i*B,m+=i*z,v+=i*$,_+=i*q,E+=i*V,S+=i*K,I+=i*J,R+=i*H,O+=i*W,A+=i*F,N+=i*G,x+=i*Y,P+=i*X,i=t[11],y+=i*j,w+=i*D,b+=i*k,m+=i*B,v+=i*z,_+=i*$,E+=i*q,S+=i*V,I+=i*K,R+=i*J,O+=i*H,A+=i*W,N+=i*F,x+=i*G,P+=i*Y,U+=i*X,i=t[12],w+=i*j,b+=i*D,m+=i*k,v+=i*B,_+=i*z,E+=i*$,S+=i*q,I+=i*V,R+=i*K,O+=i*J,A+=i*H,N+=i*W,x+=i*F,P+=i*G,U+=i*Y,L+=i*X,i=t[13],b+=i*j,m+=i*D,v+=i*k,_+=i*B,E+=i*z,S+=i*$,I+=i*q,R+=i*V,O+=i*K,A+=i*J,N+=i*H,x+=i*W,P+=i*F,U+=i*G,L+=i*Y,T+=i*X,i=t[14],m+=i*j,v+=i*D,_+=i*k,E+=i*B,S+=i*z,I+=i*$,R+=i*q,O+=i*V,A+=i*K,N+=i*J,x+=i*H,P+=i*W,U+=i*F,L+=i*G,T+=i*Y,C+=i*X,i=t[15],v+=i*j,_+=i*D,E+=i*k,S+=i*B,I+=i*z,R+=i*$,O+=i*q,A+=i*V,N+=i*K,x+=i*J,P+=i*H,U+=i*W,L+=i*F,T+=i*G,C+=i*Y,M+=i*X,n+=38*_,o+=38*E,a+=38*S,c+=38*I,h+=38*R,u+=38*O,l+=38*A,f+=38*N,p+=38*x,d+=38*P,g+=38*U,y+=38*L,w+=38*T,b+=38*C,m+=38*M,s=1,i=n+s+65535,s=Math.floor(i/65536),n=i-65536*s,i=o+s+65535,s=Math.floor(i/65536),o=i-65536*s,i=a+s+65535,s=Math.floor(i/65536),a=i-65536*s,i=c+s+65535,s=Math.floor(i/65536),c=i-65536*s,i=h+s+65535,s=Math.floor(i/65536),h=i-65536*s,i=u+s+65535,s=Math.floor(i/65536),u=i-65536*s,i=l+s+65535,s=Math.floor(i/65536),l=i-65536*s,i=f+s+65535,s=Math.floor(i/65536),f=i-65536*s,i=p+s+65535,s=Math.floor(i/65536),p=i-65536*s,i=d+s+65535,s=Math.floor(i/65536),d=i-65536*s,i=g+s+65535,s=Math.floor(i/65536),g=i-65536*s,i=y+s+65535,s=Math.floor(i/65536),y=i-65536*s,i=w+s+65535,s=Math.floor(i/65536),w=i-65536*s,i=b+s+65535,s=Math.floor(i/65536),b=i-65536*s,i=m+s+65535,s=Math.floor(i/65536),m=i-65536*s,i=v+s+65535,s=Math.floor(i/65536),v=i-65536*s,n+=s-1+37*(s-1),s=1,i=n+s+65535,s=Math.floor(i/65536),n=i-65536*s,i=o+s+65535,s=Math.floor(i/65536),o=i-65536*s,i=a+s+65535,s=Math.floor(i/65536),a=i-65536*s,i=c+s+65535,s=Math.floor(i/65536),c=i-65536*s,i=h+s+65535,s=Math.floor(i/65536),h=i-65536*s,i=u+s+65535,s=Math.floor(i/65536),u=i-65536*s,i=l+s+65535,s=Math.floor(i/65536),l=i-65536*s,i=f+s+65535,s=Math.floor(i/65536),f=i-65536*s,i=p+s+65535,s=Math.floor(i/65536),p=i-65536*s,i=d+s+65535,s=Math.floor(i/65536),d=i-65536*s,i=g+s+65535,s=Math.floor(i/65536),g=i-65536*s,i=y+s+65535,s=Math.floor(i/65536),y=i-65536*s,i=w+s+65535,s=Math.floor(i/65536),w=i-65536*s,i=b+s+65535,s=Math.floor(i/65536),b=i-65536*s,i=m+s+65535,s=Math.floor(i/65536),m=i-65536*s,i=v+s+65535,s=Math.floor(i/65536),v=i-65536*s,n+=s-1+37*(s-1),e[0]=n,e[1]=o,e[2]=a,e[3]=c,e[4]=h,e[5]=u,e[6]=l,e[7]=f,e[8]=p,e[9]=d,e[10]=g,e[11]=y,e[12]=w,e[13]=b,e[14]=m,e[15]=v}function b(e,t){w(e,t,t)}function m(e,t){const r=s(),i=s(),n=s(),o=s(),c=s(),h=s(),u=s(),l=s(),f=s();y(r,e[1],e[0]),y(f,t[1],t[0]),w(r,r,f),g(i,e[0],e[1]),g(f,t[0],t[1]),w(i,i,f),w(n,e[3],t[3]),w(n,n,a),w(o,e[2],t[2]),g(o,o,o),y(c,i,r),y(h,o,n),g(u,o,n),g(l,i,r),w(e[0],c,h),w(e[1],l,u),w(e[2],u,h),w(e[3],c,l)}function v(e,t,r){for(let i=0;i<4;i++)f(e[i],t[i],r)}function _(e,t){const r=s(),i=s(),n=s();(function(e,t){const r=s();let i;for(i=0;i<16;i++)r[i]=t[i];for(i=253;i>=0;i--)b(r,r),2!==i&&4!==i&&w(r,r,t);for(i=0;i<16;i++)e[i]=r[i]})(n,t[2]),w(r,t[0],n),w(i,t[1],n),p(e,i),e[31]^=d(r)<<7}function E(e,t){const r=[s(),s(),s(),s()];u(r[0],c),u(r[1],h),u(r[2],o),w(r[3],c,h),function(e,t,r){u(e[0],n),u(e[1],o),u(e[2],o),u(e[3],n);for(let i=255;i>=0;--i){const s=r[i/8|0]>>(7&i)&1;v(e,t,s),m(t,e),m(e,e),v(e,t,s)}}(e,r,t)}t._w=function(e){if(e.length!==t.aP)throw new Error(`ed25519: seed must be ${t.aP} bytes`);const r=(0,i.hash)(e);r[0]&=248,r[31]&=127,r[31]|=64;const n=new Uint8Array(32),o=[s(),s(),s(),s()];E(o,r),_(n,o);const a=new Uint8Array(64);return a.set(e),a.set(n,32),{publicKey:n,secretKey:a}};const S=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function I(e,t){let r,i,s,n;for(i=63;i>=32;--i){for(r=0,s=i-32,n=i-12;s<n;++s)t[s]+=r-16*t[i]*S[s-(i-32)],r=Math.floor((t[s]+128)/256),t[s]-=256*r;t[s]+=r,t[i]=0}for(r=0,s=0;s<32;s++)t[s]+=r-(t[31]>>4)*S[s],r=t[s]>>8,t[s]&=255;for(s=0;s<32;s++)t[s]-=r*S[s];for(i=0;i<32;i++)t[i+1]+=t[i]>>8,e[i]=255&t[i]}function R(e){const t=new Float64Array(64);for(let r=0;r<64;r++)t[r]=e[r];for(let t=0;t<64;t++)e[t]=0;I(e,t)}t.Xx=function(e,t){const r=new Float64Array(64),n=[s(),s(),s(),s()],o=(0,i.hash)(e.subarray(0,32));o[0]&=248,o[31]&=127,o[31]|=64;const a=new Uint8Array(64);a.set(o.subarray(32),32);const c=new i.SHA512;c.update(a.subarray(32)),c.update(t);const h=c.digest();c.clean(),R(h),E(n,h),_(a,n),c.reset(),c.update(a.subarray(0,32)),c.update(e.subarray(32)),c.update(t);const u=c.digest();R(u);for(let e=0;e<32;e++)r[e]=h[e];for(let e=0;e<32;e++)for(let t=0;t<32;t++)r[e+t]+=u[e]*o[t];return I(a.subarray(32),r),a}},9984:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isSerializableHash=function(e){return void 0!==e.saveState&&void 0!==e.restoreState&&void 0!==e.cleanSavedState}},512:(e,t,r)=>{"use strict";var i=r(5629),s=r(7309),n=function(){function e(e,t,r,s){void 0===r&&(r=new Uint8Array(0)),this._counter=new Uint8Array(1),this._hash=e,this._info=s;var n=i.hmac(this._hash,r,t);this._hmac=new i.HMAC(e,n),this._buffer=new Uint8Array(this._hmac.digestLength),this._bufpos=this._buffer.length}return e.prototype._fillBuffer=function(){this._counter[0]++;var e=this._counter[0];if(0===e)throw new Error("hkdf: cannot expand more");this._hmac.reset(),e>1&&this._hmac.update(this._buffer),this._info&&this._hmac.update(this._info),this._hmac.update(this._counter),this._hmac.finish(this._buffer),this._bufpos=0},e.prototype.expand=function(e){for(var t=new Uint8Array(e),r=0;r<t.length;r++)this._bufpos===this._buffer.length&&this._fillBuffer(),t[r]=this._buffer[this._bufpos++];return t},e.prototype.clean=function(){this._hmac.clean(),s.wipe(this._buffer),s.wipe(this._counter),this._bufpos=0},e}();t.t=n},5629:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(9984),s=r(4153),n=r(7309),o=function(){function e(e,t){this._finished=!1,this._inner=new e,this._outer=new e,this.blockSize=this._outer.blockSize,this.digestLength=this._outer.digestLength;var r=new Uint8Array(this.blockSize);t.length>this.blockSize?this._inner.update(t).finish(r).clean():r.set(t);for(var s=0;s<r.length;s++)r[s]^=54;for(this._inner.update(r),s=0;s<r.length;s++)r[s]^=106;this._outer.update(r),i.isSerializableHash(this._inner)&&i.isSerializableHash(this._outer)&&(this._innerKeyedState=this._inner.saveState(),this._outerKeyedState=this._outer.saveState()),n.wipe(r)}return e.prototype.reset=function(){if(!i.isSerializableHash(this._inner)||!i.isSerializableHash(this._outer))throw new Error("hmac: can't reset() because hash doesn't implement restoreState()");return this._inner.restoreState(this._innerKeyedState),this._outer.restoreState(this._outerKeyedState),this._finished=!1,this},e.prototype.clean=function(){i.isSerializableHash(this._inner)&&this._inner.cleanSavedState(this._innerKeyedState),i.isSerializableHash(this._outer)&&this._outer.cleanSavedState(this._outerKeyedState),this._inner.clean(),this._outer.clean()},e.prototype.update=function(e){return this._inner.update(e),this},e.prototype.finish=function(e){return this._finished?(this._outer.finish(e),this):(this._inner.finish(e),this._outer.update(e.subarray(0,this.digestLength)).finish(e),this._finished=!0,this)},e.prototype.digest=function(){var e=new Uint8Array(this.digestLength);return this.finish(e),e},e.prototype.saveState=function(){if(!i.isSerializableHash(this._inner))throw new Error("hmac: can't saveState() because hash doesn't implement it");return this._inner.saveState()},e.prototype.restoreState=function(e){if(!i.isSerializableHash(this._inner)||!i.isSerializableHash(this._outer))throw new Error("hmac: can't restoreState() because hash doesn't implement it");return this._inner.restoreState(e),this._outer.restoreState(this._outerKeyedState),this._finished=!1,this},e.prototype.cleanSavedState=function(e){if(!i.isSerializableHash(this._inner))throw new Error("hmac: can't cleanSavedState() because hash doesn't implement it");this._inner.cleanSavedState(e)},e}();t.HMAC=o,t.hmac=function(e,t,r){var i=new o(e,t);i.update(r);var s=i.digest();return i.clean(),s},t.equal=s.equal},7117:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mul=Math.imul||function(e,t){var r=65535&e,i=65535&t;return r*i+((e>>>16&65535)*i+r*(t>>>16&65535)<<16>>>0)|0},t.add=function(e,t){return e+t|0},t.sub=function(e,t){return e-t|0},t.rotl=function(e,t){return e<<t|e>>>32-t},t.rotr=function(e,t){return e<<32-t|e>>>t},t.isInteger=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e},t.MAX_SAFE_INTEGER=9007199254740991,t.isSafeInteger=function(e){return t.isInteger(e)&&e>=-t.MAX_SAFE_INTEGER&&e<=t.MAX_SAFE_INTEGER}},3027:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(4153),s=r(7309);t.DIGEST_LENGTH=16;var n=function(){function e(e){this.digestLength=t.DIGEST_LENGTH,this._buffer=new Uint8Array(16),this._r=new Uint16Array(10),this._h=new Uint16Array(10),this._pad=new Uint16Array(8),this._leftover=0,this._fin=0,this._finished=!1;var r=e[0]|e[1]<<8;this._r[0]=8191&r;var i=e[2]|e[3]<<8;this._r[1]=8191&(r>>>13|i<<3);var s=e[4]|e[5]<<8;this._r[2]=7939&(i>>>10|s<<6);var n=e[6]|e[7]<<8;this._r[3]=8191&(s>>>7|n<<9);var o=e[8]|e[9]<<8;this._r[4]=255&(n>>>4|o<<12),this._r[5]=o>>>1&8190;var a=e[10]|e[11]<<8;this._r[6]=8191&(o>>>14|a<<2);var c=e[12]|e[13]<<8;this._r[7]=8065&(a>>>11|c<<5);var h=e[14]|e[15]<<8;this._r[8]=8191&(c>>>8|h<<8),this._r[9]=h>>>5&127,this._pad[0]=e[16]|e[17]<<8,this._pad[1]=e[18]|e[19]<<8,this._pad[2]=e[20]|e[21]<<8,this._pad[3]=e[22]|e[23]<<8,this._pad[4]=e[24]|e[25]<<8,this._pad[5]=e[26]|e[27]<<8,this._pad[6]=e[28]|e[29]<<8,this._pad[7]=e[30]|e[31]<<8}return e.prototype._blocks=function(e,t,r){for(var i=this._fin?0:2048,s=this._h[0],n=this._h[1],o=this._h[2],a=this._h[3],c=this._h[4],h=this._h[5],u=this._h[6],l=this._h[7],f=this._h[8],p=this._h[9],d=this._r[0],g=this._r[1],y=this._r[2],w=this._r[3],b=this._r[4],m=this._r[5],v=this._r[6],_=this._r[7],E=this._r[8],S=this._r[9];r>=16;){var I=e[t+0]|e[t+1]<<8;s+=8191&I;var R=e[t+2]|e[t+3]<<8;n+=8191&(I>>>13|R<<3);var O=e[t+4]|e[t+5]<<8;o+=8191&(R>>>10|O<<6);var A=e[t+6]|e[t+7]<<8;a+=8191&(O>>>7|A<<9);var N=e[t+8]|e[t+9]<<8;c+=8191&(A>>>4|N<<12),h+=N>>>1&8191;var x=e[t+10]|e[t+11]<<8;u+=8191&(N>>>14|x<<2);var P=e[t+12]|e[t+13]<<8;l+=8191&(x>>>11|P<<5);var U=e[t+14]|e[t+15]<<8,L=0,T=L;T+=s*d,T+=n*(5*S),T+=o*(5*E),T+=a*(5*_),L=(T+=c*(5*v))>>>13,T&=8191,T+=h*(5*m),T+=u*(5*b),T+=l*(5*w),T+=(f+=8191&(P>>>8|U<<8))*(5*y);var C=L+=(T+=(p+=U>>>5|i)*(5*g))>>>13;C+=s*g,C+=n*d,C+=o*(5*S),C+=a*(5*E),L=(C+=c*(5*_))>>>13,C&=8191,C+=h*(5*v),C+=u*(5*m),C+=l*(5*b),C+=f*(5*w),L+=(C+=p*(5*y))>>>13,C&=8191;var M=L;M+=s*y,M+=n*g,M+=o*d,M+=a*(5*S),L=(M+=c*(5*E))>>>13,M&=8191,M+=h*(5*_),M+=u*(5*v),M+=l*(5*m),M+=f*(5*b);var j=L+=(M+=p*(5*w))>>>13;j+=s*w,j+=n*y,j+=o*g,j+=a*d,L=(j+=c*(5*S))>>>13,j&=8191,j+=h*(5*E),j+=u*(5*_),j+=l*(5*v),j+=f*(5*m);var D=L+=(j+=p*(5*b))>>>13;D+=s*b,D+=n*w,D+=o*y,D+=a*g,L=(D+=c*d)>>>13,D&=8191,D+=h*(5*S),D+=u*(5*E),D+=l*(5*_),D+=f*(5*v);var k=L+=(D+=p*(5*m))>>>13;k+=s*m,k+=n*b,k+=o*w,k+=a*y,L=(k+=c*g)>>>13,k&=8191,k+=h*d,k+=u*(5*S),k+=l*(5*E),k+=f*(5*_);var B=L+=(k+=p*(5*v))>>>13;B+=s*v,B+=n*m,B+=o*b,B+=a*w,L=(B+=c*y)>>>13,B&=8191,B+=h*g,B+=u*d,B+=l*(5*S),B+=f*(5*E);var z=L+=(B+=p*(5*_))>>>13;z+=s*_,z+=n*v,z+=o*m,z+=a*b,L=(z+=c*w)>>>13,z&=8191,z+=h*y,z+=u*g,z+=l*d,z+=f*(5*S);var $=L+=(z+=p*(5*E))>>>13;$+=s*E,$+=n*_,$+=o*v,$+=a*m,L=($+=c*b)>>>13,$&=8191,$+=h*w,$+=u*y,$+=l*g,$+=f*d;var q=L+=($+=p*(5*S))>>>13;q+=s*S,q+=n*E,q+=o*_,q+=a*v,L=(q+=c*m)>>>13,q&=8191,q+=h*b,q+=u*w,q+=l*y,q+=f*g,s=T=8191&(L=(L=((L+=(q+=p*d)>>>13)<<2)+L|0)+(T&=8191)|0),n=C+=L>>>=13,o=M&=8191,a=j&=8191,c=D&=8191,h=k&=8191,u=B&=8191,l=z&=8191,f=$&=8191,p=q&=8191,t+=16,r-=16}this._h[0]=s,this._h[1]=n,this._h[2]=o,this._h[3]=a,this._h[4]=c,this._h[5]=h,this._h[6]=u,this._h[7]=l,this._h[8]=f,this._h[9]=p},e.prototype.finish=function(e,t){void 0===t&&(t=0);var r,i,s,n,o=new Uint16Array(10);if(this._leftover){for(n=this._leftover,this._buffer[n++]=1;n<16;n++)this._buffer[n]=0;this._fin=1,this._blocks(this._buffer,0,16)}for(r=this._h[1]>>>13,this._h[1]&=8191,n=2;n<10;n++)this._h[n]+=r,r=this._h[n]>>>13,this._h[n]&=8191;for(this._h[0]+=5*r,r=this._h[0]>>>13,this._h[0]&=8191,this._h[1]+=r,r=this._h[1]>>>13,this._h[1]&=8191,this._h[2]+=r,o[0]=this._h[0]+5,r=o[0]>>>13,o[0]&=8191,n=1;n<10;n++)o[n]=this._h[n]+r,r=o[n]>>>13,o[n]&=8191;for(o[9]-=8192,i=(1^r)-1,n=0;n<10;n++)o[n]&=i;for(i=~i,n=0;n<10;n++)this._h[n]=this._h[n]&i|o[n];for(this._h[0]=65535&(this._h[0]|this._h[1]<<13),this._h[1]=65535&(this._h[1]>>>3|this._h[2]<<10),this._h[2]=65535&(this._h[2]>>>6|this._h[3]<<7),this._h[3]=65535&(this._h[3]>>>9|this._h[4]<<4),this._h[4]=65535&(this._h[4]>>>12|this._h[5]<<1|this._h[6]<<14),this._h[5]=65535&(this._h[6]>>>2|this._h[7]<<11),this._h[6]=65535&(this._h[7]>>>5|this._h[8]<<8),this._h[7]=65535&(this._h[8]>>>8|this._h[9]<<5),s=this._h[0]+this._pad[0],this._h[0]=65535&s,n=1;n<8;n++)s=(this._h[n]+this._pad[n]|0)+(s>>>16)|0,this._h[n]=65535&s;return e[t+0]=this._h[0]>>>0,e[t+1]=this._h[0]>>>8,e[t+2]=this._h[1]>>>0,e[t+3]=this._h[1]>>>8,e[t+4]=this._h[2]>>>0,e[t+5]=this._h[2]>>>8,e[t+6]=this._h[3]>>>0,e[t+7]=this._h[3]>>>8,e[t+8]=this._h[4]>>>0,e[t+9]=this._h[4]>>>8,e[t+10]=this._h[5]>>>0,e[t+11]=this._h[5]>>>8,e[t+12]=this._h[6]>>>0,e[t+13]=this._h[6]>>>8,e[t+14]=this._h[7]>>>0,e[t+15]=this._h[7]>>>8,this._finished=!0,this},e.prototype.update=function(e){var t,r=0,i=e.length;if(this._leftover){(t=16-this._leftover)>i&&(t=i);for(var s=0;s<t;s++)this._buffer[this._leftover+s]=e[r+s];if(i-=t,r+=t,this._leftover+=t,this._leftover<16)return this;this._blocks(this._buffer,0,16),this._leftover=0}if(i>=16&&(t=i-i%16,this._blocks(e,r,t),r+=t,i-=t),i){for(s=0;s<i;s++)this._buffer[this._leftover+s]=e[r+s];this._leftover+=i}return this},e.prototype.digest=function(){if(this._finished)throw new Error("Poly1305 was finished");var e=new Uint8Array(16);return this.finish(e),e},e.prototype.clean=function(){return s.wipe(this._buffer),s.wipe(this._r),s.wipe(this._h),s.wipe(this._pad),this._leftover=0,this._fin=0,this._finished=!0,this},e}();t.Poly1305=n,t.oneTimeAuth=function(e,t){var r=new n(e);r.update(t);var i=r.digest();return r.clean(),i},t.equal=function(e,r){return e.length===t.DIGEST_LENGTH&&r.length===t.DIGEST_LENGTH&&i.equal(e,r)}},1416:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.randomStringForEntropy=t.randomString=t.randomUint32=t.randomBytes=t.defaultRandomSource=void 0;const i=r(6008),s=r(8099),n=r(7309);function o(e,r=t.defaultRandomSource){return r.randomBytes(e)}t.defaultRandomSource=new i.SystemRandomSource,t.randomBytes=o,t.randomUint32=function(e=t.defaultRandomSource){const r=o(4,e),i=(0,s.readUint32LE)(r);return(0,n.wipe)(r),i};const a="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";function c(e,r=a,i=t.defaultRandomSource){if(r.length<2)throw new Error("randomString charset is too short");if(r.length>256)throw new Error("randomString charset is too long");let s="";const c=r.length,h=256-256%c;for(;e>0;){const t=o(Math.ceil(256*e/h),i);for(let i=0;i<t.length&&e>0;i++){const n=t[i];n<h&&(s+=r.charAt(n%c),e--)}(0,n.wipe)(t)}return s}t.randomString=c,t.randomStringForEntropy=function(e,r=a,i=t.defaultRandomSource){return c(Math.ceil(e/(Math.log(r.length)/Math.LN2)),r,i)}},5455:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BrowserRandomSource=void 0,t.BrowserRandomSource=class{constructor(){this.isAvailable=!1,this.isInstantiated=!1;const e="undefined"!=typeof self?self.crypto||self.msCrypto:null;e&&void 0!==e.getRandomValues&&(this._crypto=e,this.isAvailable=!0,this.isInstantiated=!0)}randomBytes(e){if(!this.isAvailable||!this._crypto)throw new Error("Browser random byte generator is not available.");const t=new Uint8Array(e);for(let e=0;e<t.length;e+=65536)this._crypto.getRandomValues(t.subarray(e,e+Math.min(t.length-e,65536)));return t}}},8871:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NodeRandomSource=void 0;const i=r(7309);t.NodeRandomSource=class{constructor(){this.isAvailable=!1,this.isInstantiated=!1;{const e=r(5883);e&&e.randomBytes&&(this._crypto=e,this.isAvailable=!0,this.isInstantiated=!0)}}randomBytes(e){if(!this.isAvailable||!this._crypto)throw new Error("Node.js random byte generator is not available.");let t=this._crypto.randomBytes(e);if(t.length!==e)throw new Error("NodeRandomSource: got fewer bytes than requested");const r=new Uint8Array(e);for(let e=0;e<r.length;e++)r[e]=t[e];return(0,i.wipe)(t),r}}},6008:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SystemRandomSource=void 0;const i=r(5455),s=r(8871);t.SystemRandomSource=class{constructor(){return this.isAvailable=!1,this.name="",this._source=new i.BrowserRandomSource,this._source.isAvailable?(this.isAvailable=!0,void(this.name="Browser")):(this._source=new s.NodeRandomSource,this._source.isAvailable?(this.isAvailable=!0,void(this.name="Node")):void 0)}randomBytes(e){if(!this.isAvailable)throw new Error("System random byte generator is not available.");return this._source.randomBytes(e)}}},3294:(e,t,r)=>{"use strict";var i=r(8099),s=r(7309);t.k=32,t.cn=64;var n=function(){function e(){this.digestLength=t.k,this.blockSize=t.cn,this._state=new Int32Array(8),this._temp=new Int32Array(64),this._buffer=new Uint8Array(128),this._bufferLength=0,this._bytesHashed=0,this._finished=!1,this.reset()}return e.prototype._initState=function(){this._state[0]=1779033703,this._state[1]=3144134277,this._state[2]=1013904242,this._state[3]=2773480762,this._state[4]=1359893119,this._state[5]=2600822924,this._state[6]=528734635,this._state[7]=1541459225},e.prototype.reset=function(){return this._initState(),this._bufferLength=0,this._bytesHashed=0,this._finished=!1,this},e.prototype.clean=function(){s.wipe(this._buffer),s.wipe(this._temp),this.reset()},e.prototype.update=function(e,t){if(void 0===t&&(t=e.length),this._finished)throw new Error("SHA256: can't update because hash was finished.");var r=0;if(this._bytesHashed+=t,this._bufferLength>0){for(;this._bufferLength<this.blockSize&&t>0;)this._buffer[this._bufferLength++]=e[r++],t--;this._bufferLength===this.blockSize&&(a(this._temp,this._state,this._buffer,0,this.blockSize),this._bufferLength=0)}for(t>=this.blockSize&&(r=a(this._temp,this._state,e,r,t),t%=this.blockSize);t>0;)this._buffer[this._bufferLength++]=e[r++],t--;return this},e.prototype.finish=function(e){if(!this._finished){var t=this._bytesHashed,r=this._bufferLength,s=t/536870912|0,n=t<<3,o=t%64<56?64:128;this._buffer[r]=128;for(var c=r+1;c<o-8;c++)this._buffer[c]=0;i.writeUint32BE(s,this._buffer,o-8),i.writeUint32BE(n,this._buffer,o-4),a(this._temp,this._state,this._buffer,0,o),this._finished=!0}for(c=0;c<this.digestLength/4;c++)i.writeUint32BE(this._state[c],e,4*c);return this},e.prototype.digest=function(){var e=new Uint8Array(this.digestLength);return this.finish(e),e},e.prototype.saveState=function(){if(this._finished)throw new Error("SHA256: cannot save finished state");return{state:new Int32Array(this._state),buffer:this._bufferLength>0?new Uint8Array(this._buffer):void 0,bufferLength:this._bufferLength,bytesHashed:this._bytesHashed}},e.prototype.restoreState=function(e){return this._state.set(e.state),this._bufferLength=e.bufferLength,e.buffer&&this._buffer.set(e.buffer),this._bytesHashed=e.bytesHashed,this._finished=!1,this},e.prototype.cleanSavedState=function(e){s.wipe(e.state),e.buffer&&s.wipe(e.buffer),e.bufferLength=0,e.bytesHashed=0},e}();t.mE=n;var o=new Int32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]);function a(e,t,r,s,n){for(;n>=64;){for(var a=t[0],c=t[1],h=t[2],u=t[3],l=t[4],f=t[5],p=t[6],d=t[7],g=0;g<16;g++){var y=s+4*g;e[g]=i.readUint32BE(r,y)}for(g=16;g<64;g++){var w=e[g-2],b=(w>>>17|w<<15)^(w>>>19|w<<13)^w>>>10,m=((w=e[g-15])>>>7|w<<25)^(w>>>18|w<<14)^w>>>3;e[g]=(b+e[g-7]|0)+(m+e[g-16]|0)}for(g=0;g<64;g++)b=(((l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))+(l&f^~l&p)|0)+(d+(o[g]+e[g]|0)|0)|0,m=((a>>>2|a<<30)^(a>>>13|a<<19)^(a>>>22|a<<10))+(a&c^a&h^c&h)|0,d=p,p=f,f=l,l=u+b|0,u=h,h=c,c=a,a=b+m|0;t[0]+=a,t[1]+=c,t[2]+=h,t[3]+=u,t[4]+=l,t[5]+=f,t[6]+=p,t[7]+=d,s+=64,n-=64}return s}t.vp=function(e){var t=new n;t.update(e);var r=t.digest();return t.clean(),r}},3350:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(8099),s=r(7309);t.DIGEST_LENGTH=64,t.BLOCK_SIZE=128;var n=function(){function e(){this.digestLength=t.DIGEST_LENGTH,this.blockSize=t.BLOCK_SIZE,this._stateHi=new Int32Array(8),this._stateLo=new Int32Array(8),this._tempHi=new Int32Array(16),this._tempLo=new Int32Array(16),this._buffer=new Uint8Array(256),this._bufferLength=0,this._bytesHashed=0,this._finished=!1,this.reset()}return e.prototype._initState=function(){this._stateHi[0]=1779033703,this._stateHi[1]=3144134277,this._stateHi[2]=1013904242,this._stateHi[3]=2773480762,this._stateHi[4]=1359893119,this._stateHi[5]=2600822924,this._stateHi[6]=528734635,this._stateHi[7]=1541459225,this._stateLo[0]=4089235720,this._stateLo[1]=2227873595,this._stateLo[2]=4271175723,this._stateLo[3]=1595750129,this._stateLo[4]=2917565137,this._stateLo[5]=725511199,this._stateLo[6]=4215389547,this._stateLo[7]=327033209},e.prototype.reset=function(){return this._initState(),this._bufferLength=0,this._bytesHashed=0,this._finished=!1,this},e.prototype.clean=function(){s.wipe(this._buffer),s.wipe(this._tempHi),s.wipe(this._tempLo),this.reset()},e.prototype.update=function(e,r){if(void 0===r&&(r=e.length),this._finished)throw new Error("SHA512: can't update because hash was finished.");var i=0;if(this._bytesHashed+=r,this._bufferLength>0){for(;this._bufferLength<t.BLOCK_SIZE&&r>0;)this._buffer[this._bufferLength++]=e[i++],r--;this._bufferLength===this.blockSize&&(a(this._tempHi,this._tempLo,this._stateHi,this._stateLo,this._buffer,0,this.blockSize),this._bufferLength=0)}for(r>=this.blockSize&&(i=a(this._tempHi,this._tempLo,this._stateHi,this._stateLo,e,i,r),r%=this.blockSize);r>0;)this._buffer[this._bufferLength++]=e[i++],r--;return this},e.prototype.finish=function(e){if(!this._finished){var t=this._bytesHashed,r=this._bufferLength,s=t/536870912|0,n=t<<3,o=t%128<112?128:256;this._buffer[r]=128;for(var c=r+1;c<o-8;c++)this._buffer[c]=0;i.writeUint32BE(s,this._buffer,o-8),i.writeUint32BE(n,this._buffer,o-4),a(this._tempHi,this._tempLo,this._stateHi,this._stateLo,this._buffer,0,o),this._finished=!0}for(c=0;c<this.digestLength/8;c++)i.writeUint32BE(this._stateHi[c],e,8*c),i.writeUint32BE(this._stateLo[c],e,8*c+4);return this},e.prototype.digest=function(){var e=new Uint8Array(this.digestLength);return this.finish(e),e},e.prototype.saveState=function(){if(this._finished)throw new Error("SHA256: cannot save finished state");return{stateHi:new Int32Array(this._stateHi),stateLo:new Int32Array(this._stateLo),buffer:this._bufferLength>0?new Uint8Array(this._buffer):void 0,bufferLength:this._bufferLength,bytesHashed:this._bytesHashed}},e.prototype.restoreState=function(e){return this._stateHi.set(e.stateHi),this._stateLo.set(e.stateLo),this._bufferLength=e.bufferLength,e.buffer&&this._buffer.set(e.buffer),this._bytesHashed=e.bytesHashed,this._finished=!1,this},e.prototype.cleanSavedState=function(e){s.wipe(e.stateHi),s.wipe(e.stateLo),e.buffer&&s.wipe(e.buffer),e.bufferLength=0,e.bytesHashed=0},e}();t.SHA512=n;var o=new Int32Array([1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591]);function a(e,t,r,s,n,a,c){for(var h,u,l,f,p,d,g,y,w=r[0],b=r[1],m=r[2],v=r[3],_=r[4],E=r[5],S=r[6],I=r[7],R=s[0],O=s[1],A=s[2],N=s[3],x=s[4],P=s[5],U=s[6],L=s[7];c>=128;){for(var T=0;T<16;T++){var C=8*T+a;e[T]=i.readUint32BE(n,C),t[T]=i.readUint32BE(n,C+4)}for(T=0;T<80;T++){var M,j,D=w,k=b,B=m,z=v,$=_,q=E,V=S,K=R,J=O,H=A,W=N,F=x,G=P,Y=U;if(p=65535&(u=L),d=u>>>16,g=65535&(h=I),y=h>>>16,p+=65535&(u=(x>>>14|_<<18)^(x>>>18|_<<14)^(_>>>9|x<<23)),d+=u>>>16,g+=65535&(h=(_>>>14|x<<18)^(_>>>18|x<<14)^(x>>>9|_<<23)),y+=h>>>16,p+=65535&(u=x&P^~x&U),d+=u>>>16,g+=65535&(h=_&E^~_&S),y+=h>>>16,h=o[2*T],p+=65535&(u=o[2*T+1]),d+=u>>>16,g+=65535&h,y+=h>>>16,h=e[T%16],d+=(u=t[T%16])>>>16,g+=65535&h,y+=h>>>16,g+=(d+=(p+=65535&u)>>>16)>>>16,p=65535&(u=f=65535&p|d<<16),d=u>>>16,g=65535&(h=l=65535&g|(y+=g>>>16)<<16),y=h>>>16,p+=65535&(u=(R>>>28|w<<4)^(w>>>2|R<<30)^(w>>>7|R<<25)),d+=u>>>16,g+=65535&(h=(w>>>28|R<<4)^(R>>>2|w<<30)^(R>>>7|w<<25)),y+=h>>>16,d+=(u=R&O^R&A^O&A)>>>16,g+=65535&(h=w&b^w&m^b&m),y+=h>>>16,M=65535&(g+=(d+=(p+=65535&u)>>>16)>>>16)|(y+=g>>>16)<<16,j=65535&p|d<<16,p=65535&(u=W),d=u>>>16,g=65535&(h=z),y=h>>>16,d+=(u=f)>>>16,g+=65535&(h=l),y+=h>>>16,b=D,m=k,v=B,_=z=65535&(g+=(d+=(p+=65535&u)>>>16)>>>16)|(y+=g>>>16)<<16,E=$,S=q,I=V,w=M,O=K,A=J,N=H,x=W=65535&p|d<<16,P=F,U=G,L=Y,R=j,T%16==15)for(C=0;C<16;C++)h=e[C],p=65535&(u=t[C]),d=u>>>16,g=65535&h,y=h>>>16,h=e[(C+9)%16],p+=65535&(u=t[(C+9)%16]),d+=u>>>16,g+=65535&h,y+=h>>>16,l=e[(C+1)%16],p+=65535&(u=((f=t[(C+1)%16])>>>1|l<<31)^(f>>>8|l<<24)^(f>>>7|l<<25)),d+=u>>>16,g+=65535&(h=(l>>>1|f<<31)^(l>>>8|f<<24)^l>>>7),y+=h>>>16,l=e[(C+14)%16],d+=(u=((f=t[(C+14)%16])>>>19|l<<13)^(l>>>29|f<<3)^(f>>>6|l<<26))>>>16,g+=65535&(h=(l>>>19|f<<13)^(f>>>29|l<<3)^l>>>6),y+=h>>>16,y+=(g+=(d+=(p+=65535&u)>>>16)>>>16)>>>16,e[C]=65535&g|y<<16,t[C]=65535&p|d<<16}p=65535&(u=R),d=u>>>16,g=65535&(h=w),y=h>>>16,h=r[0],d+=(u=s[0])>>>16,g+=65535&h,y+=h>>>16,y+=(g+=(d+=(p+=65535&u)>>>16)>>>16)>>>16,r[0]=w=65535&g|y<<16,s[0]=R=65535&p|d<<16,p=65535&(u=O),d=u>>>16,g=65535&(h=b),y=h>>>16,h=r[1],d+=(u=s[1])>>>16,g+=65535&h,y+=h>>>16,y+=(g+=(d+=(p+=65535&u)>>>16)>>>16)>>>16,r[1]=b=65535&g|y<<16,s[1]=O=65535&p|d<<16,p=65535&(u=A),d=u>>>16,g=65535&(h=m),y=h>>>16,h=r[2],d+=(u=s[2])>>>16,g+=65535&h,y+=h>>>16,y+=(g+=(d+=(p+=65535&u)>>>16)>>>16)>>>16,r[2]=m=65535&g|y<<16,s[2]=A=65535&p|d<<16,p=65535&(u=N),d=u>>>16,g=65535&(h=v),y=h>>>16,h=r[3],d+=(u=s[3])>>>16,g+=65535&h,y+=h>>>16,y+=(g+=(d+=(p+=65535&u)>>>16)>>>16)>>>16,r[3]=v=65535&g|y<<16,s[3]=N=65535&p|d<<16,p=65535&(u=x),d=u>>>16,g=65535&(h=_),y=h>>>16,h=r[4],d+=(u=s[4])>>>16,g+=65535&h,y+=h>>>16,y+=(g+=(d+=(p+=65535&u)>>>16)>>>16)>>>16,r[4]=_=65535&g|y<<16,s[4]=x=65535&p|d<<16,p=65535&(u=P),d=u>>>16,g=65535&(h=E),y=h>>>16,h=r[5],d+=(u=s[5])>>>16,g+=65535&h,y+=h>>>16,y+=(g+=(d+=(p+=65535&u)>>>16)>>>16)>>>16,r[5]=E=65535&g|y<<16,s[5]=P=65535&p|d<<16,p=65535&(u=U),d=u>>>16,g=65535&(h=S),y=h>>>16,h=r[6],d+=(u=s[6])>>>16,g+=65535&h,y+=h>>>16,y+=(g+=(d+=(p+=65535&u)>>>16)>>>16)>>>16,r[6]=S=65535&g|y<<16,s[6]=U=65535&p|d<<16,p=65535&(u=L),d=u>>>16,g=65535&(h=I),y=h>>>16,h=r[7],d+=(u=s[7])>>>16,g+=65535&h,y+=h>>>16,y+=(g+=(d+=(p+=65535&u)>>>16)>>>16)>>>16,r[7]=I=65535&g|y<<16,s[7]=L=65535&p|d<<16,a+=128,c-=128}return a}t.hash=function(e){var t=new n;t.update(e);var r=t.digest();return t.clean(),r}},7309:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.wipe=function(e){for(var t=0;t<e.length;t++)e[t]=0;return e}},7664:(e,t,r)=>{"use strict";t.gi=t.Au=t.KS=t.kz=void 0;const i=r(1416),s=r(7309);function n(e){const t=new Float64Array(16);if(e)for(let r=0;r<e.length;r++)t[r]=e[r];return t}t.kz=32,t.KS=32;const o=new Uint8Array(32);o[0]=9;const a=n([56129,1]);function c(e){let t=1;for(let r=0;r<16;r++){let i=e[r]+t+65535;t=Math.floor(i/65536),e[r]=i-65536*t}e[0]+=t-1+37*(t-1)}function h(e,t,r){const i=~(r-1);for(let r=0;r<16;r++){const s=i&(e[r]^t[r]);e[r]^=s,t[r]^=s}}function u(e,t,r){for(let i=0;i<16;i++)e[i]=t[i]+r[i]}function l(e,t,r){for(let i=0;i<16;i++)e[i]=t[i]-r[i]}function f(e,t,r){let i,s,n=0,o=0,a=0,c=0,h=0,u=0,l=0,f=0,p=0,d=0,g=0,y=0,w=0,b=0,m=0,v=0,_=0,E=0,S=0,I=0,R=0,O=0,A=0,N=0,x=0,P=0,U=0,L=0,T=0,C=0,M=0,j=r[0],D=r[1],k=r[2],B=r[3],z=r[4],$=r[5],q=r[6],V=r[7],K=r[8],J=r[9],H=r[10],W=r[11],F=r[12],G=r[13],Y=r[14],X=r[15];i=t[0],n+=i*j,o+=i*D,a+=i*k,c+=i*B,h+=i*z,u+=i*$,l+=i*q,f+=i*V,p+=i*K,d+=i*J,g+=i*H,y+=i*W,w+=i*F,b+=i*G,m+=i*Y,v+=i*X,i=t[1],o+=i*j,a+=i*D,c+=i*k,h+=i*B,u+=i*z,l+=i*$,f+=i*q,p+=i*V,d+=i*K,g+=i*J,y+=i*H,w+=i*W,b+=i*F,m+=i*G,v+=i*Y,_+=i*X,i=t[2],a+=i*j,c+=i*D,h+=i*k,u+=i*B,l+=i*z,f+=i*$,p+=i*q,d+=i*V,g+=i*K,y+=i*J,w+=i*H,b+=i*W,m+=i*F,v+=i*G,_+=i*Y,E+=i*X,i=t[3],c+=i*j,h+=i*D,u+=i*k,l+=i*B,f+=i*z,p+=i*$,d+=i*q,g+=i*V,y+=i*K,w+=i*J,b+=i*H,m+=i*W,v+=i*F,_+=i*G,E+=i*Y,S+=i*X,i=t[4],h+=i*j,u+=i*D,l+=i*k,f+=i*B,p+=i*z,d+=i*$,g+=i*q,y+=i*V,w+=i*K,b+=i*J,m+=i*H,v+=i*W,_+=i*F,E+=i*G,S+=i*Y,I+=i*X,i=t[5],u+=i*j,l+=i*D,f+=i*k,p+=i*B,d+=i*z,g+=i*$,y+=i*q,w+=i*V,b+=i*K,m+=i*J,v+=i*H,_+=i*W,E+=i*F,S+=i*G,I+=i*Y,R+=i*X,i=t[6],l+=i*j,f+=i*D,p+=i*k,d+=i*B,g+=i*z,y+=i*$,w+=i*q,b+=i*V,m+=i*K,v+=i*J,_+=i*H,E+=i*W,S+=i*F,I+=i*G,R+=i*Y,O+=i*X,i=t[7],f+=i*j,p+=i*D,d+=i*k,g+=i*B,y+=i*z,w+=i*$,b+=i*q,m+=i*V,v+=i*K,_+=i*J,E+=i*H,S+=i*W,I+=i*F,R+=i*G,O+=i*Y,A+=i*X,i=t[8],p+=i*j,d+=i*D,g+=i*k,y+=i*B,w+=i*z,b+=i*$,m+=i*q,v+=i*V,_+=i*K,E+=i*J,S+=i*H,I+=i*W,R+=i*F,O+=i*G,A+=i*Y,N+=i*X,i=t[9],d+=i*j,g+=i*D,y+=i*k,w+=i*B,b+=i*z,m+=i*$,v+=i*q,_+=i*V,E+=i*K,S+=i*J,I+=i*H,R+=i*W,O+=i*F,A+=i*G,N+=i*Y,x+=i*X,i=t[10],g+=i*j,y+=i*D,w+=i*k,b+=i*B,m+=i*z,v+=i*$,_+=i*q,E+=i*V,S+=i*K,I+=i*J,R+=i*H,O+=i*W,A+=i*F,N+=i*G,x+=i*Y,P+=i*X,i=t[11],y+=i*j,w+=i*D,b+=i*k,m+=i*B,v+=i*z,_+=i*$,E+=i*q,S+=i*V,I+=i*K,R+=i*J,O+=i*H,A+=i*W,N+=i*F,x+=i*G,P+=i*Y,U+=i*X,i=t[12],w+=i*j,b+=i*D,m+=i*k,v+=i*B,_+=i*z,E+=i*$,S+=i*q,I+=i*V,R+=i*K,O+=i*J,A+=i*H,N+=i*W,x+=i*F,P+=i*G,U+=i*Y,L+=i*X,i=t[13],b+=i*j,m+=i*D,v+=i*k,_+=i*B,E+=i*z,S+=i*$,I+=i*q,R+=i*V,O+=i*K,A+=i*J,N+=i*H,x+=i*W,P+=i*F,U+=i*G,L+=i*Y,T+=i*X,i=t[14],m+=i*j,v+=i*D,_+=i*k,E+=i*B,S+=i*z,I+=i*$,R+=i*q,O+=i*V,A+=i*K,N+=i*J,x+=i*H,P+=i*W,U+=i*F,L+=i*G,T+=i*Y,C+=i*X,i=t[15],v+=i*j,_+=i*D,E+=i*k,S+=i*B,I+=i*z,R+=i*$,O+=i*q,A+=i*V,N+=i*K,x+=i*J,P+=i*H,U+=i*W,L+=i*F,T+=i*G,C+=i*Y,M+=i*X,n+=38*_,o+=38*E,a+=38*S,c+=38*I,h+=38*R,u+=38*O,l+=38*A,f+=38*N,p+=38*x,d+=38*P,g+=38*U,y+=38*L,w+=38*T,b+=38*C,m+=38*M,s=1,i=n+s+65535,s=Math.floor(i/65536),n=i-65536*s,i=o+s+65535,s=Math.floor(i/65536),o=i-65536*s,i=a+s+65535,s=Math.floor(i/65536),a=i-65536*s,i=c+s+65535,s=Math.floor(i/65536),c=i-65536*s,i=h+s+65535,s=Math.floor(i/65536),h=i-65536*s,i=u+s+65535,s=Math.floor(i/65536),u=i-65536*s,i=l+s+65535,s=Math.floor(i/65536),l=i-65536*s,i=f+s+65535,s=Math.floor(i/65536),f=i-65536*s,i=p+s+65535,s=Math.floor(i/65536),p=i-65536*s,i=d+s+65535,s=Math.floor(i/65536),d=i-65536*s,i=g+s+65535,s=Math.floor(i/65536),g=i-65536*s,i=y+s+65535,s=Math.floor(i/65536),y=i-65536*s,i=w+s+65535,s=Math.floor(i/65536),w=i-65536*s,i=b+s+65535,s=Math.floor(i/65536),b=i-65536*s,i=m+s+65535,s=Math.floor(i/65536),m=i-65536*s,i=v+s+65535,s=Math.floor(i/65536),v=i-65536*s,n+=s-1+37*(s-1),s=1,i=n+s+65535,s=Math.floor(i/65536),n=i-65536*s,i=o+s+65535,s=Math.floor(i/65536),o=i-65536*s,i=a+s+65535,s=Math.floor(i/65536),a=i-65536*s,i=c+s+65535,s=Math.floor(i/65536),c=i-65536*s,i=h+s+65535,s=Math.floor(i/65536),h=i-65536*s,i=u+s+65535,s=Math.floor(i/65536),u=i-65536*s,i=l+s+65535,s=Math.floor(i/65536),l=i-65536*s,i=f+s+65535,s=Math.floor(i/65536),f=i-65536*s,i=p+s+65535,s=Math.floor(i/65536),p=i-65536*s,i=d+s+65535,s=Math.floor(i/65536),d=i-65536*s,i=g+s+65535,s=Math.floor(i/65536),g=i-65536*s,i=y+s+65535,s=Math.floor(i/65536),y=i-65536*s,i=w+s+65535,s=Math.floor(i/65536),w=i-65536*s,i=b+s+65535,s=Math.floor(i/65536),b=i-65536*s,i=m+s+65535,s=Math.floor(i/65536),m=i-65536*s,i=v+s+65535,s=Math.floor(i/65536),v=i-65536*s,n+=s-1+37*(s-1),e[0]=n,e[1]=o,e[2]=a,e[3]=c,e[4]=h,e[5]=u,e[6]=l,e[7]=f,e[8]=p,e[9]=d,e[10]=g,e[11]=y,e[12]=w,e[13]=b,e[14]=m,e[15]=v}function p(e,t){f(e,t,t)}function d(e,t){const r=new Uint8Array(32),i=new Float64Array(80),s=n(),o=n(),d=n(),g=n(),y=n(),w=n();for(let t=0;t<31;t++)r[t]=e[t];r[31]=127&e[31]|64,r[0]&=248,function(e,t){for(let r=0;r<16;r++)e[r]=t[2*r]+(t[2*r+1]<<8);e[15]&=32767}(i,t);for(let e=0;e<16;e++)o[e]=i[e];s[0]=g[0]=1;for(let e=254;e>=0;--e){const t=r[e>>>3]>>>(7&e)&1;h(s,o,t),h(d,g,t),u(y,s,d),l(s,s,d),u(d,o,g),l(o,o,g),p(g,y),p(w,s),f(s,d,s),f(d,o,y),u(y,s,d),l(s,s,d),p(o,s),l(d,g,w),f(s,d,a),u(s,s,g),f(d,d,s),f(s,g,w),f(g,o,i),p(o,y),h(s,o,t),h(d,g,t)}for(let e=0;e<16;e++)i[e+16]=s[e],i[e+32]=d[e],i[e+48]=o[e],i[e+64]=g[e];const b=i.subarray(32),m=i.subarray(16);!function(e,t){const r=n();for(let e=0;e<16;e++)r[e]=t[e];for(let e=253;e>=0;e--)p(r,r),2!==e&&4!==e&&f(r,r,t);for(let t=0;t<16;t++)e[t]=r[t]}(b,b),f(m,m,b);const v=new Uint8Array(32);return function(e,t){const r=n(),i=n();for(let e=0;e<16;e++)i[e]=t[e];c(i),c(i),c(i);for(let e=0;e<2;e++){r[0]=i[0]-65517;for(let e=1;e<15;e++)r[e]=i[e]-65535-(r[e-1]>>16&1),r[e-1]&=65535;r[15]=i[15]-32767-(r[14]>>16&1);const e=r[15]>>16&1;r[14]&=65535,h(i,r,1-e)}for(let t=0;t<16;t++)e[2*t]=255&i[t],e[2*t+1]=i[t]>>8}(v,m),v}t.Au=function(e){const r=(0,i.randomBytes)(32,e),n=function(e){if(e.length!==t.KS)throw new Error(`x25519: seed must be ${t.KS} bytes`);const r=new Uint8Array(e);return{publicKey:(i=r,d(i,o)),secretKey:r};var i}(r);return(0,s.wipe)(r),n},t.gi=function(e,r,i=!1){if(e.length!==t.kz)throw new Error("X25519: incorrect secret key length");if(r.length!==t.kz)throw new Error("X25519: incorrect public key length");const s=d(e,r);if(i){let e=0;for(let t=0;t<s.length;t++)e|=s[t];if(0===e)throw new Error("X25519: invalid shared key")}return s}},926:(e,t,r)=>{"use strict";function i(){return(null===r.g||void 0===r.g?void 0:r.g.crypto)||(null===r.g||void 0===r.g?void 0:r.g.msCrypto)||{}}function s(){const e=i();return e.subtle||e.webkitSubtle}Object.defineProperty(t,"__esModule",{value:!0}),t.isBrowserCryptoAvailable=t.getSubtleCrypto=t.getBrowerCrypto=void 0,t.getBrowerCrypto=i,t.getSubtleCrypto=s,t.isBrowserCryptoAvailable=function(){return!!i()&&!!s()}},8618:(e,t)=>{"use strict";function r(){return"undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product}function i(){return"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node}Object.defineProperty(t,"__esModule",{value:!0}),t.isBrowser=t.isNode=t.isReactNative=void 0,t.isReactNative=r,t.isNode=i,t.isBrowser=function(){return!r()&&!i()}},1468:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(655);i.__exportStar(r(926),t),i.__exportStar(r(8618),t)},8200:(e,t,r)=>{"use strict";r.d(t,{q:()=>i});class i{}},997:(e,t,r)=>{"use strict";r.r(t),r.d(t,{IEvents:()=>i.q});var i=r(8200)},2568:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HEARTBEAT_EVENTS=t.HEARTBEAT_INTERVAL=void 0;const i=r(6736);t.HEARTBEAT_INTERVAL=i.FIVE_SECONDS,t.HEARTBEAT_EVENTS={pulse:"heartbeat_pulse"}},3401:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),r(655).__exportStar(r(2568),t)},8969:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HeartBeat=void 0;const i=r(655),s=r(7187),n=r(6736),o=r(1614),a=r(3401);class c extends o.IHeartBeat{constructor(e){super(e),this.events=new s.EventEmitter,this.interval=a.HEARTBEAT_INTERVAL,this.interval=(null==e?void 0:e.interval)||a.HEARTBEAT_INTERVAL}static init(e){return i.__awaiter(this,void 0,void 0,(function*(){const t=new c(e);return yield t.init(),t}))}init(){return i.__awaiter(this,void 0,void 0,(function*(){yield this.initialize()}))}on(e,t){this.events.on(e,t)}once(e,t){this.events.once(e,t)}off(e,t){this.events.off(e,t)}removeListener(e,t){this.events.removeListener(e,t)}initialize(){return i.__awaiter(this,void 0,void 0,(function*(){setInterval((()=>this.pulse()),n.toMiliseconds(this.interval))}))}pulse(){this.events.emit(a.HEARTBEAT_EVENTS.pulse)}}t.HeartBeat=c},772:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(655);i.__exportStar(r(8969),t),i.__exportStar(r(1614),t),i.__exportStar(r(3401),t)},4174:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IHeartBeat=void 0;const i=r(997);class s extends i.IEvents{constructor(e){super()}}t.IHeartBeat=s},1614:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),r(655).__exportStar(r(4174),t)},5885:(e,t,r)=>{"use strict";r.d(t,{IJsonRpcProvider:()=>s.x0});var i=r(4057);r.o(i,"IJsonRpcProvider")&&r.d(t,{IJsonRpcProvider:function(){return i.IJsonRpcProvider}}),r.o(i,"isJsonRpcError")&&r.d(t,{isJsonRpcError:function(){return i.isJsonRpcError}}),r.o(i,"isJsonRpcRequest")&&r.d(t,{isJsonRpcRequest:function(){return i.isJsonRpcRequest}}),r.o(i,"isJsonRpcResponse")&&r.d(t,{isJsonRpcResponse:function(){return i.isJsonRpcResponse}}),r.o(i,"isJsonRpcResult")&&r.d(t,{isJsonRpcResult:function(){return i.isJsonRpcResult}}),r.o(i,"isLocalhostUrl")&&r.d(t,{isLocalhostUrl:function(){return i.isLocalhostUrl}}),r.o(i,"isReactNative")&&r.d(t,{isReactNative:function(){return i.isReactNative}}),r.o(i,"isWsUrl")&&r.d(t,{isWsUrl:function(){return i.isWsUrl}});var s=r(7826),n=r(1948);r.o(n,"isJsonRpcError")&&r.d(t,{isJsonRpcError:function(){return n.isJsonRpcError}}),r.o(n,"isJsonRpcRequest")&&r.d(t,{isJsonRpcRequest:function(){return n.isJsonRpcRequest}}),r.o(n,"isJsonRpcResponse")&&r.d(t,{isJsonRpcResponse:function(){return n.isJsonRpcResponse}}),r.o(n,"isJsonRpcResult")&&r.d(t,{isJsonRpcResult:function(){return n.isJsonRpcResult}}),r.o(n,"isLocalhostUrl")&&r.d(t,{isLocalhostUrl:function(){return n.isLocalhostUrl}}),r.o(n,"isReactNative")&&r.d(t,{isReactNative:function(){return n.isReactNative}}),r.o(n,"isWsUrl")&&r.d(t,{isWsUrl:function(){return n.isWsUrl}})},4057:()=>{},7826:(e,t,r)=>{"use strict";r.d(t,{x0:()=>n});class i{}class s extends i{constructor(){super()}}class n extends s{constructor(e){super()}}},1948:()=>{},9806:(e,t,r)=>{"use strict";r.d(t,{CA:()=>s,JV:()=>a,O4:()=>i,dQ:()=>n,xK:()=>o});const i="INTERNAL_ERROR",s="SERVER_ERROR",n=[-32700,-32600,-32601,-32602,-32603],o={PARSE_ERROR:{code:-32700,message:"Parse error"},INVALID_REQUEST:{code:-32600,message:"Invalid Request"},METHOD_NOT_FOUND:{code:-32601,message:"Method not found"},INVALID_PARAMS:{code:-32602,message:"Invalid params"},[i]:{code:-32603,message:"Internal error"},[s]:{code:-32e3,message:"Server error"}},a=s},9698:(e,t,r)=>{"use strict";var i=r(1468);r.o(i,"IJsonRpcProvider")&&r.d(t,{IJsonRpcProvider:function(){return i.IJsonRpcProvider}}),r.o(i,"formatJsonRpcError")&&r.d(t,{formatJsonRpcError:function(){return i.formatJsonRpcError}}),r.o(i,"formatJsonRpcRequest")&&r.d(t,{formatJsonRpcRequest:function(){return i.formatJsonRpcRequest}}),r.o(i,"formatJsonRpcResult")&&r.d(t,{formatJsonRpcResult:function(){return i.formatJsonRpcResult}}),r.o(i,"isJsonRpcError")&&r.d(t,{isJsonRpcError:function(){return i.isJsonRpcError}}),r.o(i,"isJsonRpcRequest")&&r.d(t,{isJsonRpcRequest:function(){return i.isJsonRpcRequest}}),r.o(i,"isJsonRpcResponse")&&r.d(t,{isJsonRpcResponse:function(){return i.isJsonRpcResponse}}),r.o(i,"isJsonRpcResult")&&r.d(t,{isJsonRpcResult:function(){return i.isJsonRpcResult}}),r.o(i,"isLocalhostUrl")&&r.d(t,{isLocalhostUrl:function(){return i.isLocalhostUrl}}),r.o(i,"isReactNative")&&r.d(t,{isReactNative:function(){return i.isReactNative}}),r.o(i,"isWsUrl")&&r.d(t,{isWsUrl:function(){return i.isWsUrl}})},110:(e,t,r)=>{"use strict";r.d(t,{CX:()=>a,L2:()=>o,by:()=>n,i5:()=>s});var i=r(9806);function s(e){return i.dQ.includes(e)}function n(e){return Object.keys(i.xK).includes(e)?i.xK[e]:i.xK[i.JV]}function o(e){return Object.values(i.xK).find((t=>t.code===e))||i.xK[i.JV]}function a(e,t,r){return e.message.includes("getaddrinfo ENOTFOUND")||e.message.includes("connect ECONNREFUSED")?new Error(`Unavailable ${r} RPC url at ${t}`):e}},1937:(e,t,r)=>{"use strict";r.d(t,{RI:()=>a,sT:()=>n,tm:()=>o});var i=r(110),s=r(9806);function n(e,t,r){return{id:r||Date.now()*Math.pow(10,3)+Math.floor(Math.random()*Math.pow(10,3)),jsonrpc:"2.0",method:e,params:t}}function o(e,t){return{id:e,jsonrpc:"2.0",result:t}}function a(e,t,r){return{id:e,jsonrpc:"2.0",error:c(t,r)}}function c(e,t){return void 0===e?(0,i.by)(s.O4):("string"==typeof e&&(e=Object.assign(Object.assign({},(0,i.by)(s.CA)),{message:e})),void 0!==t&&(e.data=t),(0,i.i5)(e.code)&&(e=(0,i.L2)(e.code)),e)}},6186:(e,t,r)=>{"use strict";r.d(t,{formatJsonRpcError:()=>n.RI,formatJsonRpcRequest:()=>n.sT,formatJsonRpcResult:()=>n.tm,isJsonRpcError:()=>c.jg,isJsonRpcRequest:()=>c.DW,isJsonRpcResponse:()=>c.u,isJsonRpcResult:()=>c.k4,isLocalhostUrl:()=>a.JF,isWsUrl:()=>a.UZ,parseConnectionError:()=>i.CX}),r(9806);var i=r(110),s=r(9698);r.o(s,"IJsonRpcProvider")&&r.d(t,{IJsonRpcProvider:function(){return s.IJsonRpcProvider}}),r.o(s,"formatJsonRpcError")&&r.d(t,{formatJsonRpcError:function(){return s.formatJsonRpcError}}),r.o(s,"formatJsonRpcRequest")&&r.d(t,{formatJsonRpcRequest:function(){return s.formatJsonRpcRequest}}),r.o(s,"formatJsonRpcResult")&&r.d(t,{formatJsonRpcResult:function(){return s.formatJsonRpcResult}}),r.o(s,"isJsonRpcError")&&r.d(t,{isJsonRpcError:function(){return s.isJsonRpcError}}),r.o(s,"isJsonRpcRequest")&&r.d(t,{isJsonRpcRequest:function(){return s.isJsonRpcRequest}}),r.o(s,"isJsonRpcResponse")&&r.d(t,{isJsonRpcResponse:function(){return s.isJsonRpcResponse}}),r.o(s,"isJsonRpcResult")&&r.d(t,{isJsonRpcResult:function(){return s.isJsonRpcResult}}),r.o(s,"isLocalhostUrl")&&r.d(t,{isLocalhostUrl:function(){return s.isLocalhostUrl}}),r.o(s,"isReactNative")&&r.d(t,{isReactNative:function(){return s.isReactNative}}),r.o(s,"isWsUrl")&&r.d(t,{isWsUrl:function(){return s.isWsUrl}});var n=r(1937),o=r(6043);r.o(o,"IJsonRpcProvider")&&r.d(t,{IJsonRpcProvider:function(){return o.IJsonRpcProvider}}),r.o(o,"isJsonRpcError")&&r.d(t,{isJsonRpcError:function(){return o.isJsonRpcError}}),r.o(o,"isJsonRpcRequest")&&r.d(t,{isJsonRpcRequest:function(){return o.isJsonRpcRequest}}),r.o(o,"isJsonRpcResponse")&&r.d(t,{isJsonRpcResponse:function(){return o.isJsonRpcResponse}}),r.o(o,"isJsonRpcResult")&&r.d(t,{isJsonRpcResult:function(){return o.isJsonRpcResult}}),r.o(o,"isLocalhostUrl")&&r.d(t,{isLocalhostUrl:function(){return o.isLocalhostUrl}}),r.o(o,"isReactNative")&&r.d(t,{isReactNative:function(){return o.isReactNative}}),r.o(o,"isWsUrl")&&r.d(t,{isWsUrl:function(){return o.isWsUrl}});var a=r(6119),c=r(4733)},6043:(e,t,r)=>{"use strict";r.d(t,{IJsonRpcProvider:()=>i.IJsonRpcProvider});var i=r(5885);r.o(i,"isJsonRpcError")&&r.d(t,{isJsonRpcError:function(){return i.isJsonRpcError}}),r.o(i,"isJsonRpcRequest")&&r.d(t,{isJsonRpcRequest:function(){return i.isJsonRpcRequest}}),r.o(i,"isJsonRpcResponse")&&r.d(t,{isJsonRpcResponse:function(){return i.isJsonRpcResponse}}),r.o(i,"isJsonRpcResult")&&r.d(t,{isJsonRpcResult:function(){return i.isJsonRpcResult}}),r.o(i,"isLocalhostUrl")&&r.d(t,{isLocalhostUrl:function(){return i.isLocalhostUrl}}),r.o(i,"isReactNative")&&r.d(t,{isReactNative:function(){return i.isReactNative}}),r.o(i,"isWsUrl")&&r.d(t,{isWsUrl:function(){return i.isWsUrl}})},6119:(e,t,r)=>{"use strict";function i(e){return function(e,t){const r=function(e){const t=e.match(new RegExp(/^\w+:/,"gi"));if(t&&t.length)return t[0]}(e);return void 0!==r&&new RegExp(t).test(r)}(e,"^wss?:")}function s(e){return new RegExp("wss?://localhost(:d{2,5})?").test(e)}r.d(t,{JF:()=>s,UZ:()=>i})},4733:(e,t,r)=>{"use strict";function i(e){return"object"==typeof e&&"id"in e&&"jsonrpc"in e&&"2.0"===e.jsonrpc}function s(e){return i(e)&&"method"in e}function n(e){return i(e)&&(o(e)||a(e))}function o(e){return"result"in e}function a(e){return"error"in e}r.d(t,{DW:()=>s,jg:()=>a,k4:()=>o,u:()=>n})},5150:(e,t,r)=>{"use strict";const i=r(655),s=r(3954),n=i.__importDefault(r(653)),o=r(9728);t.ZP=class{constructor(){this.localStorage=n.default}getKeys(){return i.__awaiter(this,void 0,void 0,(function*(){return Object.keys(this.localStorage)}))}getEntries(){return i.__awaiter(this,void 0,void 0,(function*(){return Object.entries(this.localStorage).map(o.parseEntry)}))}getItem(e){return i.__awaiter(this,void 0,void 0,(function*(){const t=this.localStorage.getItem(e);if(null!==t)return s.safeJsonParse(t)}))}setItem(e,t){return i.__awaiter(this,void 0,void 0,(function*(){this.localStorage.setItem(e,s.safeJsonStringify(t))}))}removeItem(e){return i.__awaiter(this,void 0,void 0,(function*(){this.localStorage.removeItem(e)}))}}},653:(e,t,r)=>{"use strict";!function(){let t;function i(){}t=i,t.prototype.getItem=function(e){return this.hasOwnProperty(e)?String(this[e]):null},t.prototype.setItem=function(e,t){this[e]=String(t)},t.prototype.removeItem=function(e){delete this[e]},t.prototype.clear=function(){const e=this;Object.keys(e).forEach((function(t){e[t]=void 0,delete e[t]}))},t.prototype.key=function(e){return e=e||0,Object.keys(this)[e]},t.prototype.__defineGetter__("length",(function(){return Object.keys(this).length})),void 0!==r.g&&r.g.localStorage?e.exports=r.g.localStorage:"undefined"!=typeof window&&window.localStorage?e.exports=window.localStorage:e.exports=new i}()},9728:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(655);i.__exportStar(r(9076),t),i.__exportStar(r(496),t)},9076:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IKeyValueStorage=void 0,t.IKeyValueStorage=class{}},496:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseEntry=void 0;const i=r(3954);t.parseEntry=function(e){var t;return[e[0],i.safeJsonParse(null!==(t=e[1])&&void 0!==t?t:"")]}},5727:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PINO_CUSTOM_CONTEXT_KEY=t.PINO_LOGGER_DEFAULTS=void 0,t.PINO_LOGGER_DEFAULTS={level:"info"},t.PINO_CUSTOM_CONTEXT_KEY="custom_context"},9107:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pino=void 0;const i=r(655),s=i.__importDefault(r(6559));Object.defineProperty(t,"pino",{enumerable:!0,get:function(){return s.default}}),i.__exportStar(r(5727),t),i.__exportStar(r(8048),t)},8048:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateChildLogger=t.formatChildLoggerContext=t.getLoggerContext=t.setBrowserLoggerContext=t.getBrowserLoggerContext=t.getDefaultLoggerOptions=void 0;const i=r(5727);function s(e,t=i.PINO_CUSTOM_CONTEXT_KEY){return e[t]||""}function n(e,t,r=i.PINO_CUSTOM_CONTEXT_KEY){return e[r]=t,e}function o(e,t=i.PINO_CUSTOM_CONTEXT_KEY){let r="";return r=void 0===e.bindings?s(e,t):e.bindings().context||"",r}function a(e,t,r=i.PINO_CUSTOM_CONTEXT_KEY){const s=o(e,r);return s.trim()?`${s}/${t}`:t}t.getDefaultLoggerOptions=function(e){return Object.assign(Object.assign({},e),{level:(null==e?void 0:e.level)||i.PINO_LOGGER_DEFAULTS.level})},t.getBrowserLoggerContext=s,t.setBrowserLoggerContext=n,t.getLoggerContext=o,t.formatChildLoggerContext=a,t.generateChildLogger=function(e,t,r=i.PINO_CUSTOM_CONTEXT_KEY){const s=a(e,t,r);return n(e.child({context:s}),s,r)}},1882:()=>{},3014:()=>{},8495:(e,t)=>{"use strict";function r(e){let t;return"undefined"!=typeof window&&void 0!==window[e]&&(t=window[e]),t}function i(e){const t=r(e);if(!t)throw new Error(`${e} is not defined in Window`);return t}Object.defineProperty(t,"__esModule",{value:!0}),t.getLocalStorage=t.getLocalStorageOrThrow=t.getCrypto=t.getCryptoOrThrow=t.getLocation=t.getLocationOrThrow=t.getNavigator=t.getNavigatorOrThrow=t.getDocument=t.getDocumentOrThrow=t.getFromWindowOrThrow=t.getFromWindow=void 0,t.getFromWindow=r,t.getFromWindowOrThrow=i,t.getDocumentOrThrow=function(){return i("document")},t.getDocument=function(){return r("document")},t.getNavigatorOrThrow=function(){return i("navigator")},t.getNavigator=function(){return r("navigator")},t.getLocationOrThrow=function(){return i("location")},t.getLocation=function(){return r("location")},t.getCryptoOrThrow=function(){return i("crypto")},t.getCrypto=function(){return r("crypto")},t.getLocalStorageOrThrow=function(){return i("localStorage")},t.getLocalStorage=function(){return r("localStorage")}},416:(e,t,r)=>{"use strict";t.D=void 0;const i=r(8495);t.D=function(){let e,t;try{e=i.getDocumentOrThrow(),t=i.getLocationOrThrow()}catch(e){return null}function r(...t){const r=e.getElementsByTagName("meta");for(let e=0;e<r.length;e++){const i=r[e],s=["itemprop","property","name"].map((e=>i.getAttribute(e))).filter((e=>!!e&&t.includes(e)));if(s.length&&s){const e=i.getAttribute("content");if(e)return e}}return""}const s=function(){let t=r("name","og:site_name","og:title","twitter:title");return t||(t=e.title),t}();return{description:r("description","og:description","twitter:description","keywords"),url:t.origin,icons:function(){const r=e.getElementsByTagName("link"),i=[];for(let e=0;e<r.length;e++){const s=r[e],n=s.getAttribute("rel");if(n&&n.toLowerCase().indexOf("icon")>-1){const e=s.getAttribute("href");if(e)if(-1===e.toLowerCase().indexOf("https:")&&-1===e.toLowerCase().indexOf("http:")&&0!==e.indexOf("//")){let r=t.protocol+"//"+t.host;if(0===e.indexOf("/"))r+=e;else{const i=t.pathname.split("/");i.pop(),r+=i.join("/")+"/"+e}i.push(r)}else if(0===e.indexOf("//")){const r=t.protocol+e;i.push(r)}else i.push(e)}}return i}(),name:s}}},7338:(e,t,r)=>{"use strict";const i=r(610),s=r(4020),n=r(500),o=r(2806),a=Symbol("encodeFragmentIdentifier");function c(e){if("string"!=typeof e||1!==e.length)throw new TypeError("arrayFormatSeparator must be single character string")}function h(e,t){return t.encode?t.strict?i(e):encodeURIComponent(e):e}function u(e,t){return t.decode?s(e):e}function l(e){return Array.isArray(e)?e.sort():"object"==typeof e?l(Object.keys(e)).sort(((e,t)=>Number(e)-Number(t))).map((t=>e[t])):e}function f(e){const t=e.indexOf("#");return-1!==t&&(e=e.slice(0,t)),e}function p(e){const t=(e=f(e)).indexOf("?");return-1===t?"":e.slice(t+1)}function d(e,t){return t.parseNumbers&&!Number.isNaN(Number(e))&&"string"==typeof e&&""!==e.trim()?e=Number(e):!t.parseBooleans||null===e||"true"!==e.toLowerCase()&&"false"!==e.toLowerCase()||(e="true"===e.toLowerCase()),e}function g(e,t){c((t=Object.assign({decode:!0,sort:!0,arrayFormat:"none",arrayFormatSeparator:",",parseNumbers:!1,parseBooleans:!1},t)).arrayFormatSeparator);const r=function(e){let t;switch(e.arrayFormat){case"index":return(e,r,i)=>{t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===i[e]&&(i[e]={}),i[e][t[1]]=r):i[e]=r};case"bracket":return(e,r,i)=>{t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==i[e]?i[e]=[].concat(i[e],r):i[e]=[r]:i[e]=r};case"colon-list-separator":return(e,r,i)=>{t=/(:list)$/.exec(e),e=e.replace(/:list$/,""),t?void 0!==i[e]?i[e]=[].concat(i[e],r):i[e]=[r]:i[e]=r};case"comma":case"separator":return(t,r,i)=>{const s="string"==typeof r&&r.includes(e.arrayFormatSeparator),n="string"==typeof r&&!s&&u(r,e).includes(e.arrayFormatSeparator);r=n?u(r,e):r;const o=s||n?r.split(e.arrayFormatSeparator).map((t=>u(t,e))):null===r?r:u(r,e);i[t]=o};case"bracket-separator":return(t,r,i)=>{const s=/(\[\])$/.test(t);if(t=t.replace(/\[\]$/,""),!s)return void(i[t]=r?u(r,e):r);const n=null===r?[]:r.split(e.arrayFormatSeparator).map((t=>u(t,e)));void 0!==i[t]?i[t]=[].concat(i[t],n):i[t]=n};default:return(e,t,r)=>{void 0!==r[e]?r[e]=[].concat(r[e],t):r[e]=t}}}(t),i=Object.create(null);if("string"!=typeof e)return i;if(!(e=e.trim().replace(/^[?#&]/,"")))return i;for(const s of e.split("&")){if(""===s)continue;let[e,o]=n(t.decode?s.replace(/\+/g," "):s,"=");o=void 0===o?null:["comma","separator","bracket-separator"].includes(t.arrayFormat)?o:u(o,t),r(u(e,t),o,i)}for(const e of Object.keys(i)){const r=i[e];if("object"==typeof r&&null!==r)for(const e of Object.keys(r))r[e]=d(r[e],t);else i[e]=d(r,t)}return!1===t.sort?i:(!0===t.sort?Object.keys(i).sort():Object.keys(i).sort(t.sort)).reduce(((e,t)=>{const r=i[t];return Boolean(r)&&"object"==typeof r&&!Array.isArray(r)?e[t]=l(r):e[t]=r,e}),Object.create(null))}t.extract=p,t.parse=g,t.stringify=(e,t)=>{if(!e)return"";c((t=Object.assign({encode:!0,strict:!0,arrayFormat:"none",arrayFormatSeparator:","},t)).arrayFormatSeparator);const r=r=>t.skipNull&&null==e[r]||t.skipEmptyString&&""===e[r],i=function(e){switch(e.arrayFormat){case"index":return t=>(r,i)=>{const s=r.length;return void 0===i||e.skipNull&&null===i||e.skipEmptyString&&""===i?r:null===i?[...r,[h(t,e),"[",s,"]"].join("")]:[...r,[h(t,e),"[",h(s,e),"]=",h(i,e)].join("")]};case"bracket":return t=>(r,i)=>void 0===i||e.skipNull&&null===i||e.skipEmptyString&&""===i?r:null===i?[...r,[h(t,e),"[]"].join("")]:[...r,[h(t,e),"[]=",h(i,e)].join("")];case"colon-list-separator":return t=>(r,i)=>void 0===i||e.skipNull&&null===i||e.skipEmptyString&&""===i?r:null===i?[...r,[h(t,e),":list="].join("")]:[...r,[h(t,e),":list=",h(i,e)].join("")];case"comma":case"separator":case"bracket-separator":{const t="bracket-separator"===e.arrayFormat?"[]=":"=";return r=>(i,s)=>void 0===s||e.skipNull&&null===s||e.skipEmptyString&&""===s?i:(s=null===s?"":s,0===i.length?[[h(r,e),t,h(s,e)].join("")]:[[i,h(s,e)].join(e.arrayFormatSeparator)])}default:return t=>(r,i)=>void 0===i||e.skipNull&&null===i||e.skipEmptyString&&""===i?r:null===i?[...r,h(t,e)]:[...r,[h(t,e),"=",h(i,e)].join("")]}}(t),s={};for(const t of Object.keys(e))r(t)||(s[t]=e[t]);const n=Object.keys(s);return!1!==t.sort&&n.sort(t.sort),n.map((r=>{const s=e[r];return void 0===s?"":null===s?h(r,t):Array.isArray(s)?0===s.length&&"bracket-separator"===t.arrayFormat?h(r,t)+"[]":s.reduce(i(r),[]).join("&"):h(r,t)+"="+h(s,t)})).filter((e=>e.length>0)).join("&")},t.parseUrl=(e,t)=>{t=Object.assign({decode:!0},t);const[r,i]=n(e,"#");return Object.assign({url:r.split("?")[0]||"",query:g(p(e),t)},t&&t.parseFragmentIdentifier&&i?{fragmentIdentifier:u(i,t)}:{})},t.stringifyUrl=(e,r)=>{r=Object.assign({encode:!0,strict:!0,[a]:!0},r);const i=f(e.url).split("?")[0]||"",s=t.extract(e.url),n=t.parse(s,{sort:!1}),o=Object.assign(n,e.query);let c=t.stringify(o,r);c&&(c=`?${c}`);let u=function(e){let t="";const r=e.indexOf("#");return-1!==r&&(t=e.slice(r)),t}(e.url);return e.fragmentIdentifier&&(u=`#${r[a]?h(e.fragmentIdentifier,r):e.fragmentIdentifier}`),`${i}${c}${u}`},t.pick=(e,r,i)=>{i=Object.assign({parseFragmentIdentifier:!0,[a]:!1},i);const{url:s,query:n,fragmentIdentifier:c}=t.parseUrl(e,i);return t.stringifyUrl({url:s,query:o(n,r),fragmentIdentifier:c},i)},t.exclude=(e,r,i)=>{const s=Array.isArray(r)?e=>!r.includes(e):(e,t)=>!r(e,t);return t.pick(e,s,i)}},6900:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(655);i.__exportStar(r(6869),t),i.__exportStar(r(8033),t)},6869:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ONE_THOUSAND=t.ONE_HUNDRED=void 0,t.ONE_HUNDRED=100,t.ONE_THOUSAND=1e3},8033:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ONE_YEAR=t.FOUR_WEEKS=t.THREE_WEEKS=t.TWO_WEEKS=t.ONE_WEEK=t.THIRTY_DAYS=t.SEVEN_DAYS=t.FIVE_DAYS=t.THREE_DAYS=t.ONE_DAY=t.TWENTY_FOUR_HOURS=t.TWELVE_HOURS=t.SIX_HOURS=t.THREE_HOURS=t.ONE_HOUR=t.SIXTY_MINUTES=t.THIRTY_MINUTES=t.TEN_MINUTES=t.FIVE_MINUTES=t.ONE_MINUTE=t.SIXTY_SECONDS=t.THIRTY_SECONDS=t.TEN_SECONDS=t.FIVE_SECONDS=t.ONE_SECOND=void 0,t.ONE_SECOND=1,t.FIVE_SECONDS=5,t.TEN_SECONDS=10,t.THIRTY_SECONDS=30,t.SIXTY_SECONDS=60,t.ONE_MINUTE=t.SIXTY_SECONDS,t.FIVE_MINUTES=5*t.ONE_MINUTE,t.TEN_MINUTES=10*t.ONE_MINUTE,t.THIRTY_MINUTES=30*t.ONE_MINUTE,t.SIXTY_MINUTES=60*t.ONE_MINUTE,t.ONE_HOUR=t.SIXTY_MINUTES,t.THREE_HOURS=3*t.ONE_HOUR,t.SIX_HOURS=6*t.ONE_HOUR,t.TWELVE_HOURS=12*t.ONE_HOUR,t.TWENTY_FOUR_HOURS=24*t.ONE_HOUR,t.ONE_DAY=t.TWENTY_FOUR_HOURS,t.THREE_DAYS=3*t.ONE_DAY,t.FIVE_DAYS=5*t.ONE_DAY,t.SEVEN_DAYS=7*t.ONE_DAY,t.THIRTY_DAYS=30*t.ONE_DAY,t.ONE_WEEK=t.SEVEN_DAYS,t.TWO_WEEKS=2*t.ONE_WEEK,t.THREE_WEEKS=3*t.ONE_WEEK,t.FOUR_WEEKS=4*t.ONE_WEEK,t.ONE_YEAR=365*t.ONE_DAY},6736:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(655);i.__exportStar(r(4273),t),i.__exportStar(r(7001),t),i.__exportStar(r(2939),t),i.__exportStar(r(6900),t)},2939:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),r(655).__exportStar(r(8766),t)},8766:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IWatch=void 0,t.IWatch=class{}},3207:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromMiliseconds=t.toMiliseconds=void 0;const i=r(6900);t.toMiliseconds=function(e){return e*i.ONE_THOUSAND},t.fromMiliseconds=function(e){return Math.floor(e/i.ONE_THOUSAND)}},3873:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.delay=void 0,t.delay=function(e){return new Promise((t=>{setTimeout((()=>{t(!0)}),e)}))}},4273:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(655);i.__exportStar(r(3873),t),i.__exportStar(r(3207),t)},7001:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Watch=void 0;class r{constructor(){this.timestamps=new Map}start(e){if(this.timestamps.has(e))throw new Error(`Watch already started for label: ${e}`);this.timestamps.set(e,{started:Date.now()})}stop(e){const t=this.get(e);if(void 0!==t.elapsed)throw new Error(`Watch already stopped for label: ${e}`);const r=Date.now()-t.started;this.timestamps.set(e,{started:t.started,elapsed:r})}get(e){const t=this.timestamps.get(e);if(void 0===t)throw new Error(`No timestamp found for label: ${e}`);return t}elapsed(e){const t=this.get(e);return t.elapsed||Date.now()-t.started}}t.Watch=r,t.default=r},9742:(e,t)=>{"use strict";t.byteLength=function(e){var t=c(e),r=t[0],i=t[1];return 3*(r+i)/4-i},t.toByteArray=function(e){var t,r,n=c(e),o=n[0],a=n[1],h=new s(function(e,t,r){return 3*(t+r)/4-r}(0,o,a)),u=0,l=a>0?o-4:o;for(r=0;r<l;r+=4)t=i[e.charCodeAt(r)]<<18|i[e.charCodeAt(r+1)]<<12|i[e.charCodeAt(r+2)]<<6|i[e.charCodeAt(r+3)],h[u++]=t>>16&255,h[u++]=t>>8&255,h[u++]=255&t;return 2===a&&(t=i[e.charCodeAt(r)]<<2|i[e.charCodeAt(r+1)]>>4,h[u++]=255&t),1===a&&(t=i[e.charCodeAt(r)]<<10|i[e.charCodeAt(r+1)]<<4|i[e.charCodeAt(r+2)]>>2,h[u++]=t>>8&255,h[u++]=255&t),h},t.fromByteArray=function(e){for(var t,i=e.length,s=i%3,n=[],o=16383,a=0,c=i-s;a<c;a+=o)n.push(h(e,a,a+o>c?c:a+o));return 1===s?(t=e[i-1],n.push(r[t>>2]+r[t<<4&63]+"==")):2===s&&(t=(e[i-2]<<8)+e[i-1],n.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"=")),n.join("")};for(var r=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,a=n.length;o<a;++o)r[o]=n[o],i[n.charCodeAt(o)]=o;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function h(e,t,i){for(var s,n,o=[],a=t;a<i;a+=3)s=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),o.push(r[(n=s)>>18&63]+r[n>>12&63]+r[n>>6&63]+r[63&n]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},8764:(e,t,r)=>{"use strict";const i=r(9742),s=r(645),n="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.lW=c,t.h2=50;const o=2147483647;function a(e){if(e>o)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,c.prototype),t}function c(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return l(e)}return h(e,t,r)}function h(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!c.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|g(e,t);let i=a(r);const s=i.write(e,t);return s!==r&&(i=i.slice(0,s)),i}(e,t);if(ArrayBuffer.isView(e))return function(e){if(G(e,Uint8Array)){const t=new Uint8Array(e);return p(t.buffer,t.byteOffset,t.byteLength)}return f(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(G(e,ArrayBuffer)||e&&G(e.buffer,ArrayBuffer))return p(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(G(e,SharedArrayBuffer)||e&&G(e.buffer,SharedArrayBuffer)))return p(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const i=e.valueOf&&e.valueOf();if(null!=i&&i!==e)return c.from(i,t,r);const s=function(e){if(c.isBuffer(e)){const t=0|d(e.length),r=a(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||Y(e.length)?a(0):f(e):"Buffer"===e.type&&Array.isArray(e.data)?f(e.data):void 0}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return c.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function l(e){return u(e),a(e<0?0:0|d(e))}function f(e){const t=e.length<0?0:0|d(e.length),r=a(t);for(let i=0;i<t;i+=1)r[i]=255&e[i];return r}function p(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let i;return i=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(i,c.prototype),i}function d(e){if(e>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|e}function g(e,t){if(c.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||G(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,i=arguments.length>2&&!0===arguments[2];if(!i&&0===r)return 0;let s=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return H(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return W(e).length;default:if(s)return i?-1:H(e).length;t=(""+t).toLowerCase(),s=!0}}function y(e,t,r){let i=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return P(this,t,r);case"utf8":case"utf-8":return O(this,t,r);case"ascii":return N(this,t,r);case"latin1":case"binary":return x(this,t,r);case"base64":return R(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return U(this,t,r);default:if(i)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),i=!0}}function w(e,t,r){const i=e[t];e[t]=e[r],e[r]=i}function b(e,t,r,i,s){if(0===e.length)return-1;if("string"==typeof r?(i=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),Y(r=+r)&&(r=s?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(s)return-1;r=e.length-1}else if(r<0){if(!s)return-1;r=0}if("string"==typeof t&&(t=c.from(t,i)),c.isBuffer(t))return 0===t.length?-1:m(e,t,r,i,s);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):m(e,[t],r,i,s);throw new TypeError("val must be string, number or Buffer")}function m(e,t,r,i,s){let n,o=1,a=e.length,c=t.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(e.length<2||t.length<2)return-1;o=2,a/=2,c/=2,r/=2}function h(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(s){let i=-1;for(n=r;n<a;n++)if(h(e,n)===h(t,-1===i?0:n-i)){if(-1===i&&(i=n),n-i+1===c)return i*o}else-1!==i&&(n-=n-i),i=-1}else for(r+c>a&&(r=a-c),n=r;n>=0;n--){let r=!0;for(let i=0;i<c;i++)if(h(e,n+i)!==h(t,i)){r=!1;break}if(r)return n}return-1}function v(e,t,r,i){r=Number(r)||0;const s=e.length-r;i?(i=Number(i))>s&&(i=s):i=s;const n=t.length;let o;for(i>n/2&&(i=n/2),o=0;o<i;++o){const i=parseInt(t.substr(2*o,2),16);if(Y(i))return o;e[r+o]=i}return o}function _(e,t,r,i){return F(H(t,e.length-r),e,r,i)}function E(e,t,r,i){return F(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,i)}function S(e,t,r,i){return F(W(t),e,r,i)}function I(e,t,r,i){return F(function(e,t){let r,i,s;const n=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),i=r>>8,s=r%256,n.push(s),n.push(i);return n}(t,e.length-r),e,r,i)}function R(e,t,r){return 0===t&&r===e.length?i.fromByteArray(e):i.fromByteArray(e.slice(t,r))}function O(e,t,r){r=Math.min(e.length,r);const i=[];let s=t;for(;s<r;){const t=e[s];let n=null,o=t>239?4:t>223?3:t>191?2:1;if(s+o<=r){let r,i,a,c;switch(o){case 1:t<128&&(n=t);break;case 2:r=e[s+1],128==(192&r)&&(c=(31&t)<<6|63&r,c>127&&(n=c));break;case 3:r=e[s+1],i=e[s+2],128==(192&r)&&128==(192&i)&&(c=(15&t)<<12|(63&r)<<6|63&i,c>2047&&(c<55296||c>57343)&&(n=c));break;case 4:r=e[s+1],i=e[s+2],a=e[s+3],128==(192&r)&&128==(192&i)&&128==(192&a)&&(c=(15&t)<<18|(63&r)<<12|(63&i)<<6|63&a,c>65535&&c<1114112&&(n=c))}}null===n?(n=65533,o=1):n>65535&&(n-=65536,i.push(n>>>10&1023|55296),n=56320|1023&n),i.push(n),s+=o}return function(e){const t=e.length;if(t<=A)return String.fromCharCode.apply(String,e);let r="",i=0;for(;i<t;)r+=String.fromCharCode.apply(String,e.slice(i,i+=A));return r}(i)}c.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),c.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(e,t,r){return h(e,t,r)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(e,t,r){return function(e,t,r){return u(e),e<=0?a(e):void 0!==t?"string"==typeof r?a(e).fill(t,r):a(e).fill(t):a(e)}(e,t,r)},c.allocUnsafe=function(e){return l(e)},c.allocUnsafeSlow=function(e){return l(e)},c.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==c.prototype},c.compare=function(e,t){if(G(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),G(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,i=t.length;for(let s=0,n=Math.min(r,i);s<n;++s)if(e[s]!==t[s]){r=e[s],i=t[s];break}return r<i?-1:i<r?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const i=c.allocUnsafe(t);let s=0;for(r=0;r<e.length;++r){let t=e[r];if(G(t,Uint8Array))s+t.length>i.length?(c.isBuffer(t)||(t=c.from(t)),t.copy(i,s)):Uint8Array.prototype.set.call(i,t,s);else{if(!c.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(i,s)}s+=t.length}return i},c.byteLength=g,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)w(this,t,t+1);return this},c.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)w(this,t,t+3),w(this,t+1,t+2);return this},c.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)w(this,t,t+7),w(this,t+1,t+6),w(this,t+2,t+5),w(this,t+3,t+4);return this},c.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?O(this,0,e):y.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){let e="";const r=t.h2;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},n&&(c.prototype[n]=c.prototype.inspect),c.prototype.compare=function(e,t,r,i,s){if(G(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===i&&(i=0),void 0===s&&(s=this.length),t<0||r>e.length||i<0||s>this.length)throw new RangeError("out of range index");if(i>=s&&t>=r)return 0;if(i>=s)return-1;if(t>=r)return 1;if(this===e)return 0;let n=(s>>>=0)-(i>>>=0),o=(r>>>=0)-(t>>>=0);const a=Math.min(n,o),h=this.slice(i,s),u=e.slice(t,r);for(let e=0;e<a;++e)if(h[e]!==u[e]){n=h[e],o=u[e];break}return n<o?-1:o<n?1:0},c.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},c.prototype.indexOf=function(e,t,r){return b(this,e,t,r,!0)},c.prototype.lastIndexOf=function(e,t,r){return b(this,e,t,r,!1)},c.prototype.write=function(e,t,r,i){if(void 0===t)i="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)i=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===i&&(i="utf8")):(i=r,r=void 0)}const s=this.length-t;if((void 0===r||r>s)&&(r=s),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");let n=!1;for(;;)switch(i){case"hex":return v(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":case"latin1":case"binary":return E(this,e,t,r);case"base64":return S(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,e,t,r);default:if(n)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),n=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const A=4096;function N(e,t,r){let i="";r=Math.min(e.length,r);for(let s=t;s<r;++s)i+=String.fromCharCode(127&e[s]);return i}function x(e,t,r){let i="";r=Math.min(e.length,r);for(let s=t;s<r;++s)i+=String.fromCharCode(e[s]);return i}function P(e,t,r){const i=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>i)&&(r=i);let s="";for(let i=t;i<r;++i)s+=X[e[i]];return s}function U(e,t,r){const i=e.slice(t,r);let s="";for(let e=0;e<i.length-1;e+=2)s+=String.fromCharCode(i[e]+256*i[e+1]);return s}function L(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function T(e,t,r,i,s,n){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<n)throw new RangeError('"value" argument is out of bounds');if(r+i>e.length)throw new RangeError("Index out of range")}function C(e,t,r,i,s){q(t,i,s,e,r,7);let n=Number(t&BigInt(4294967295));e[r++]=n,n>>=8,e[r++]=n,n>>=8,e[r++]=n,n>>=8,e[r++]=n;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,r}function M(e,t,r,i,s){q(t,i,s,e,r,7);let n=Number(t&BigInt(4294967295));e[r+7]=n,n>>=8,e[r+6]=n,n>>=8,e[r+5]=n,n>>=8,e[r+4]=n;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=o,o>>=8,e[r+2]=o,o>>=8,e[r+1]=o,o>>=8,e[r]=o,r+8}function j(e,t,r,i,s,n){if(r+i>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function D(e,t,r,i,n){return t=+t,r>>>=0,n||j(e,0,r,4),s.write(e,t,r,i,23,4),r+4}function k(e,t,r,i,n){return t=+t,r>>>=0,n||j(e,0,r,8),s.write(e,t,r,i,52,8),r+8}c.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const i=this.subarray(e,t);return Object.setPrototypeOf(i,c.prototype),i},c.prototype.readUintLE=c.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||L(e,t,this.length);let i=this[e],s=1,n=0;for(;++n<t&&(s*=256);)i+=this[e+n]*s;return i},c.prototype.readUintBE=c.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||L(e,t,this.length);let i=this[e+--t],s=1;for(;t>0&&(s*=256);)i+=this[e+--t]*s;return i},c.prototype.readUint8=c.prototype.readUInt8=function(e,t){return e>>>=0,t||L(e,1,this.length),this[e]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(e,t){return e>>>=0,t||L(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(e,t){return e>>>=0,t||L(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(e,t){return e>>>=0,t||L(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(e,t){return e>>>=0,t||L(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readBigUInt64LE=Z((function(e){V(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||K(e,this.length-8);const i=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,s=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(i)+(BigInt(s)<<BigInt(32))})),c.prototype.readBigUInt64BE=Z((function(e){V(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||K(e,this.length-8);const i=t*2**24+65536*this[++e]+256*this[++e]+this[++e],s=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(i)<<BigInt(32))+BigInt(s)})),c.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||L(e,t,this.length);let i=this[e],s=1,n=0;for(;++n<t&&(s*=256);)i+=this[e+n]*s;return s*=128,i>=s&&(i-=Math.pow(2,8*t)),i},c.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||L(e,t,this.length);let i=t,s=1,n=this[e+--i];for(;i>0&&(s*=256);)n+=this[e+--i]*s;return s*=128,n>=s&&(n-=Math.pow(2,8*t)),n},c.prototype.readInt8=function(e,t){return e>>>=0,t||L(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){e>>>=0,t||L(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(e,t){e>>>=0,t||L(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(e,t){return e>>>=0,t||L(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return e>>>=0,t||L(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readBigInt64LE=Z((function(e){V(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||K(e,this.length-8);const i=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(i)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),c.prototype.readBigInt64BE=Z((function(e){V(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||K(e,this.length-8);const i=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(i)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),c.prototype.readFloatLE=function(e,t){return e>>>=0,t||L(e,4,this.length),s.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return e>>>=0,t||L(e,4,this.length),s.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return e>>>=0,t||L(e,8,this.length),s.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return e>>>=0,t||L(e,8,this.length),s.read(this,e,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(e,t,r,i){e=+e,t>>>=0,r>>>=0,i||T(this,e,t,r,Math.pow(2,8*r)-1,0);let s=1,n=0;for(this[t]=255&e;++n<r&&(s*=256);)this[t+n]=e/s&255;return t+r},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(e,t,r,i){e=+e,t>>>=0,r>>>=0,i||T(this,e,t,r,Math.pow(2,8*r)-1,0);let s=r-1,n=1;for(this[t+s]=255&e;--s>=0&&(n*=256);)this[t+s]=e/n&255;return t+r},c.prototype.writeUint8=c.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||T(this,e,t,1,255,0),this[t]=255&e,t+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||T(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||T(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||T(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||T(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigUInt64LE=Z((function(e,t=0){return C(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=Z((function(e,t=0){return M(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(e,t,r,i){if(e=+e,t>>>=0,!i){const i=Math.pow(2,8*r-1);T(this,e,t,r,i-1,-i)}let s=0,n=1,o=0;for(this[t]=255&e;++s<r&&(n*=256);)e<0&&0===o&&0!==this[t+s-1]&&(o=1),this[t+s]=(e/n>>0)-o&255;return t+r},c.prototype.writeIntBE=function(e,t,r,i){if(e=+e,t>>>=0,!i){const i=Math.pow(2,8*r-1);T(this,e,t,r,i-1,-i)}let s=r-1,n=1,o=0;for(this[t+s]=255&e;--s>=0&&(n*=256);)e<0&&0===o&&0!==this[t+s+1]&&(o=1),this[t+s]=(e/n>>0)-o&255;return t+r},c.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||T(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||T(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||T(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||T(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},c.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||T(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigInt64LE=Z((function(e,t=0){return C(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=Z((function(e,t=0){return M(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(e,t,r){return D(this,e,t,!0,r)},c.prototype.writeFloatBE=function(e,t,r){return D(this,e,t,!1,r)},c.prototype.writeDoubleLE=function(e,t,r){return k(this,e,t,!0,r)},c.prototype.writeDoubleBE=function(e,t,r){return k(this,e,t,!1,r)},c.prototype.copy=function(e,t,r,i){if(!c.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),i||0===i||(i=this.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<r&&(i=r),i===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-t<i-r&&(i=e.length-t+r);const s=i-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,i):Uint8Array.prototype.set.call(e,this.subarray(r,i),t),s},c.prototype.fill=function(e,t,r,i){if("string"==typeof e){if("string"==typeof t?(i=t,t=0,r=this.length):"string"==typeof r&&(i=r,r=this.length),void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!c.isEncoding(i))throw new TypeError("Unknown encoding: "+i);if(1===e.length){const t=e.charCodeAt(0);("utf8"===i&&t<128||"latin1"===i)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let s;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(s=t;s<r;++s)this[s]=e;else{const n=c.isBuffer(e)?e:c.from(e,i),o=n.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<r-t;++s)this[s+t]=n[s%o]}return this};const B={};function z(e,t,r){B[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function $(e){let t="",r=e.length;const i="-"===e[0]?1:0;for(;r>=i+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function q(e,t,r,i,s,n){if(e>r||e<t){const i="bigint"==typeof t?"n":"";let s;throw s=n>3?0===t||t===BigInt(0)?`>= 0${i} and < 2${i} ** ${8*(n+1)}${i}`:`>= -(2${i} ** ${8*(n+1)-1}${i}) and < 2 ** ${8*(n+1)-1}${i}`:`>= ${t}${i} and <= ${r}${i}`,new B.ERR_OUT_OF_RANGE("value",s,e)}!function(e,t,r){V(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||K(t,e.length-(r+1))}(i,s,n)}function V(e,t){if("number"!=typeof e)throw new B.ERR_INVALID_ARG_TYPE(t,"number",e)}function K(e,t,r){if(Math.floor(e)!==e)throw V(e,r),new B.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new B.ERR_BUFFER_OUT_OF_BOUNDS;throw new B.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}z("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),z("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),z("ERR_OUT_OF_RANGE",(function(e,t,r){let i=`The value of "${e}" is out of range.`,s=r;return Number.isInteger(r)&&Math.abs(r)>2**32?s=$(String(r)):"bigint"==typeof r&&(s=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(s=$(s)),s+="n"),i+=` It must be ${t}. Received ${s}`,i}),RangeError);const J=/[^+/0-9A-Za-z-_]/g;function H(e,t){let r;t=t||1/0;const i=e.length;let s=null;const n=[];for(let o=0;o<i;++o){if(r=e.charCodeAt(o),r>55295&&r<57344){if(!s){if(r>56319){(t-=3)>-1&&n.push(239,191,189);continue}if(o+1===i){(t-=3)>-1&&n.push(239,191,189);continue}s=r;continue}if(r<56320){(t-=3)>-1&&n.push(239,191,189),s=r;continue}r=65536+(s-55296<<10|r-56320)}else s&&(t-=3)>-1&&n.push(239,191,189);if(s=null,r<128){if((t-=1)<0)break;n.push(r)}else if(r<2048){if((t-=2)<0)break;n.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;n.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;n.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return n}function W(e){return i.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(J,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function F(e,t,r,i){let s;for(s=0;s<i&&!(s+r>=t.length||s>=e.length);++s)t[s+r]=e[s];return s}function G(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Y(e){return e!=e}const X=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const i=16*r;for(let s=0;s<16;++s)t[i+s]=e[r]+e[s]}return t}();function Z(e){return"undefined"==typeof BigInt?Q:e}function Q(){throw new Error("BigInt not supported")}},4020:e=>{"use strict";var t="%[a-f0-9]{2}",r=new RegExp("("+t+")|([^%]+?)","gi"),i=new RegExp("("+t+")+","gi");function s(e,t){try{return[decodeURIComponent(e.join(""))]}catch(e){}if(1===e.length)return e;t=t||1;var r=e.slice(0,t),i=e.slice(t);return Array.prototype.concat.call([],s(r),s(i))}function n(e){try{return decodeURIComponent(e)}catch(n){for(var t=e.match(r)||[],i=1;i<t.length;i++)t=(e=s(t,i).join("")).match(r)||[];return e}}e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof e+"`");try{return e=e.replace(/\+/g," "),decodeURIComponent(e)}catch(t){return function(e){for(var t={"%FE%FF":"��","%FF%FE":"��"},r=i.exec(e);r;){try{t[r[0]]=decodeURIComponent(r[0])}catch(e){var s=n(r[0]);s!==r[0]&&(t[r[0]]=s)}r=i.exec(e)}t["%C2"]="�";for(var o=Object.keys(t),a=0;a<o.length;a++){var c=o[a];e=e.replace(new RegExp(c,"g"),t[c])}return e}(e)}}},7187:e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,i=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function n(){n.init.call(this)}e.exports=n,e.exports.once=function(e,t){return new Promise((function(r,i){function s(r){e.removeListener(t,n),i(r)}function n(){"function"==typeof e.removeListener&&e.removeListener("error",s),r([].slice.call(arguments))}g(e,t,n,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&g(e,"error",t,{once:!0})}(e,s)}))},n.EventEmitter=n,n.prototype._events=void 0,n.prototype._eventsCount=0,n.prototype._maxListeners=void 0;var o=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?n.defaultMaxListeners:e._maxListeners}function h(e,t,r,i){var s,n,o,h;if(a(r),void 0===(n=e._events)?(n=e._events=Object.create(null),e._eventsCount=0):(void 0!==n.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),n=e._events),o=n[t]),void 0===o)o=n[t]=r,++e._eventsCount;else if("function"==typeof o?o=n[t]=i?[r,o]:[o,r]:i?o.unshift(r):o.push(r),(s=c(e))>0&&o.length>s&&!o.warned){o.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=o.length,h=u,console&&console.warn&&console.warn(h)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function l(e,t,r){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},s=u.bind(i);return s.listener=r,i.wrapFn=s,s}function f(e,t,r){var i=e._events;if(void 0===i)return[];var s=i[t];return void 0===s?[]:"function"==typeof s?r?[s.listener||s]:[s]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(s):d(s,s.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function d(e,t){for(var r=new Array(t),i=0;i<t;++i)r[i]=e[i];return r}function g(e,t,r,i){if("function"==typeof e.on)i.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function s(n){i.once&&e.removeEventListener(t,s),r(n)}))}}Object.defineProperty(n,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),n.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},n.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},n.prototype.getMaxListeners=function(){return c(this)},n.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var s="error"===e,n=this._events;if(void 0!==n)s=s&&void 0===n.error;else if(!s)return!1;if(s){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var c=n[e];if(void 0===c)return!1;if("function"==typeof c)i(c,this,t);else{var h=c.length,u=d(c,h);for(r=0;r<h;++r)i(u[r],this,t)}return!0},n.prototype.addListener=function(e,t){return h(this,e,t,!1)},n.prototype.on=n.prototype.addListener,n.prototype.prependListener=function(e,t){return h(this,e,t,!0)},n.prototype.once=function(e,t){return a(t),this.on(e,l(this,e,t)),this},n.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,l(this,e,t)),this},n.prototype.removeListener=function(e,t){var r,i,s,n,o;if(a(t),void 0===(i=this._events))return this;if(void 0===(r=i[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(s=-1,n=r.length-1;n>=0;n--)if(r[n]===t||r[n].listener===t){o=r[n].listener,s=n;break}if(s<0)return this;0===s?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,s),1===r.length&&(i[e]=r[0]),void 0!==i.removeListener&&this.emit("removeListener",e,o||t)}return this},n.prototype.off=n.prototype.removeListener,n.prototype.removeAllListeners=function(e){var t,r,i;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var s,n=Object.keys(r);for(i=0;i<n.length;++i)"removeListener"!==(s=n[i])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},n.prototype.listeners=function(e){return f(this,e,!0)},n.prototype.rawListeners=function(e){return f(this,e,!1)},n.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},n.prototype.listenerCount=p,n.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},2806:e=>{"use strict";e.exports=function(e,t){for(var r={},i=Object.keys(e),s=Array.isArray(t),n=0;n<i.length;n++){var o=i[n],a=e[o];(s?-1!==t.indexOf(o):t(o,a,e))&&(r[o]=a)}return r}},645:(e,t)=>{t.read=function(e,t,r,i,s){var n,o,a=8*s-i-1,c=(1<<a)-1,h=c>>1,u=-7,l=r?s-1:0,f=r?-1:1,p=e[t+l];for(l+=f,n=p&(1<<-u)-1,p>>=-u,u+=a;u>0;n=256*n+e[t+l],l+=f,u-=8);for(o=n&(1<<-u)-1,n>>=-u,u+=i;u>0;o=256*o+e[t+l],l+=f,u-=8);if(0===n)n=1-h;else{if(n===c)return o?NaN:1/0*(p?-1:1);o+=Math.pow(2,i),n-=h}return(p?-1:1)*o*Math.pow(2,n-i)},t.write=function(e,t,r,i,s,n){var o,a,c,h=8*n-s-1,u=(1<<h)-1,l=u>>1,f=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,p=i?0:n-1,d=i?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,o=u):(o=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-o))<1&&(o--,c*=2),(t+=o+l>=1?f/c:f*Math.pow(2,1-l))*c>=2&&(o++,c/=2),o+l>=u?(a=0,o=u):o+l>=1?(a=(t*c-1)*Math.pow(2,s),o+=l):(a=t*Math.pow(2,l-1)*Math.pow(2,s),o=0));s>=8;e[r+p]=255&a,p+=d,a/=256,s-=8);for(o=o<<s|a,h+=s;h>0;e[r+p]=255&o,p+=d,o/=256,h-=8);e[r+p-d]|=128*g}},2307:(e,t,r)=>{e=r.nmd(e);var i="__lodash_hash_undefined__",s=9007199254740991,n="[object Arguments]",o="[object Array]",a="[object Boolean]",c="[object Date]",h="[object Error]",u="[object Function]",l="[object Map]",f="[object Number]",p="[object Object]",d="[object Promise]",g="[object RegExp]",y="[object Set]",w="[object String]",b="[object WeakMap]",m="[object ArrayBuffer]",v="[object DataView]",_=/^\[object .+?Constructor\]$/,E=/^(?:0|[1-9]\d*)$/,S={};S["[object Float32Array]"]=S["[object Float64Array]"]=S["[object Int8Array]"]=S["[object Int16Array]"]=S["[object Int32Array]"]=S["[object Uint8Array]"]=S["[object Uint8ClampedArray]"]=S["[object Uint16Array]"]=S["[object Uint32Array]"]=!0,S[n]=S[o]=S[m]=S[a]=S[v]=S[c]=S[h]=S[u]=S[l]=S[f]=S[p]=S[g]=S[y]=S[w]=S[b]=!1;var I="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g,R="object"==typeof self&&self&&self.Object===Object&&self,O=I||R||Function("return this")(),A=t&&!t.nodeType&&t,N=A&&e&&!e.nodeType&&e,x=N&&N.exports===A,P=x&&I.process,U=function(){try{return P&&P.binding&&P.binding("util")}catch(e){}}(),L=U&&U.isTypedArray;function T(e,t){for(var r=-1,i=null==e?0:e.length;++r<i;)if(t(e[r],r,e))return!0;return!1}function C(e){var t=-1,r=Array(e.size);return e.forEach((function(e,i){r[++t]=[i,e]})),r}function M(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}var j,D,k,B=Array.prototype,z=Function.prototype,$=Object.prototype,q=O["__core-js_shared__"],V=z.toString,K=$.hasOwnProperty,J=(j=/[^.]+$/.exec(q&&q.keys&&q.keys.IE_PROTO||""))?"Symbol(src)_1."+j:"",H=$.toString,W=RegExp("^"+V.call(K).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),F=x?O.Buffer:void 0,G=O.Symbol,Y=O.Uint8Array,X=$.propertyIsEnumerable,Z=B.splice,Q=G?G.toStringTag:void 0,ee=Object.getOwnPropertySymbols,te=F?F.isBuffer:void 0,re=(D=Object.keys,k=Object,function(e){return D(k(e))}),ie=Ne(O,"DataView"),se=Ne(O,"Map"),ne=Ne(O,"Promise"),oe=Ne(O,"Set"),ae=Ne(O,"WeakMap"),ce=Ne(Object,"create"),he=Le(ie),ue=Le(se),le=Le(ne),fe=Le(oe),pe=Le(ae),de=G?G.prototype:void 0,ge=de?de.valueOf:void 0;function ye(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var i=e[t];this.set(i[0],i[1])}}function we(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var i=e[t];this.set(i[0],i[1])}}function be(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var i=e[t];this.set(i[0],i[1])}}function me(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new be;++t<r;)this.add(e[t])}function ve(e){var t=this.__data__=new we(e);this.size=t.size}function _e(e,t){for(var r=e.length;r--;)if(Te(e[r][0],t))return r;return-1}function Ee(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Q&&Q in Object(e)?function(e){var t=K.call(e,Q),r=e[Q];try{e[Q]=void 0;var i=!0}catch(e){}var s=H.call(e);return i&&(t?e[Q]=r:delete e[Q]),s}(e):function(e){return H.call(e)}(e)}function Se(e){return ze(e)&&Ee(e)==n}function Ie(e,t,r,i,s){return e===t||(null==e||null==t||!ze(e)&&!ze(t)?e!=e&&t!=t:function(e,t,r,i,s,u){var d=Me(e),b=Me(t),_=d?o:Pe(e),E=b?o:Pe(t),S=(_=_==n?p:_)==p,I=(E=E==n?p:E)==p,R=_==E;if(R&&je(e)){if(!je(t))return!1;d=!0,S=!1}if(R&&!S)return u||(u=new ve),d||$e(e)?Re(e,t,r,i,s,u):function(e,t,r,i,s,n,o){switch(r){case v:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case m:return!(e.byteLength!=t.byteLength||!n(new Y(e),new Y(t)));case a:case c:case f:return Te(+e,+t);case h:return e.name==t.name&&e.message==t.message;case g:case w:return e==t+"";case l:var u=C;case y:var p=1&i;if(u||(u=M),e.size!=t.size&&!p)return!1;var d=o.get(e);if(d)return d==t;i|=2,o.set(e,t);var b=Re(u(e),u(t),i,s,n,o);return o.delete(e),b;case"[object Symbol]":if(ge)return ge.call(e)==ge.call(t)}return!1}(e,t,_,r,i,s,u);if(!(1&r)){var O=S&&K.call(e,"__wrapped__"),A=I&&K.call(t,"__wrapped__");if(O||A){var N=O?e.value():e,x=A?t.value():t;return u||(u=new ve),s(N,x,r,i,u)}}return!!R&&(u||(u=new ve),function(e,t,r,i,s,n){var o=1&r,a=Oe(e),c=a.length;if(c!=Oe(t).length&&!o)return!1;for(var h=c;h--;){var u=a[h];if(!(o?u in t:K.call(t,u)))return!1}var l=n.get(e);if(l&&n.get(t))return l==t;var f=!0;n.set(e,t),n.set(t,e);for(var p=o;++h<c;){var d=e[u=a[h]],g=t[u];if(i)var y=o?i(g,d,u,t,e,n):i(d,g,u,e,t,n);if(!(void 0===y?d===g||s(d,g,r,i,n):y)){f=!1;break}p||(p="constructor"==u)}if(f&&!p){var w=e.constructor,b=t.constructor;w==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof w&&w instanceof w&&"function"==typeof b&&b instanceof b||(f=!1)}return n.delete(e),n.delete(t),f}(e,t,r,i,s,u))}(e,t,r,i,Ie,s))}function Re(e,t,r,i,s,n){var o=1&r,a=e.length,c=t.length;if(a!=c&&!(o&&c>a))return!1;var h=n.get(e);if(h&&n.get(t))return h==t;var u=-1,l=!0,f=2&r?new me:void 0;for(n.set(e,t),n.set(t,e);++u<a;){var p=e[u],d=t[u];if(i)var g=o?i(d,p,u,t,e,n):i(p,d,u,e,t,n);if(void 0!==g){if(g)continue;l=!1;break}if(f){if(!T(t,(function(e,t){if(o=t,!f.has(o)&&(p===e||s(p,e,r,i,n)))return f.push(t);var o}))){l=!1;break}}else if(p!==d&&!s(p,d,r,i,n)){l=!1;break}}return n.delete(e),n.delete(t),l}function Oe(e){return function(e,t,r){var i=t(e);return Me(e)?i:function(e,t){for(var r=-1,i=t.length,s=e.length;++r<i;)e[s+r]=t[r];return e}(i,r(e))}(e,qe,xe)}function Ae(e,t){var r,i,s=e.__data__;return("string"==(i=typeof(r=t))||"number"==i||"symbol"==i||"boolean"==i?"__proto__"!==r:null===r)?s["string"==typeof t?"string":"hash"]:s.map}function Ne(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!Be(e)||function(e){return!!J&&J in e}(e))&&(De(e)?W:_).test(Le(e))}(r)?r:void 0}ye.prototype.clear=function(){this.__data__=ce?ce(null):{},this.size=0},ye.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ye.prototype.get=function(e){var t=this.__data__;if(ce){var r=t[e];return r===i?void 0:r}return K.call(t,e)?t[e]:void 0},ye.prototype.has=function(e){var t=this.__data__;return ce?void 0!==t[e]:K.call(t,e)},ye.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=ce&&void 0===t?i:t,this},we.prototype.clear=function(){this.__data__=[],this.size=0},we.prototype.delete=function(e){var t=this.__data__,r=_e(t,e);return!(r<0||(r==t.length-1?t.pop():Z.call(t,r,1),--this.size,0))},we.prototype.get=function(e){var t=this.__data__,r=_e(t,e);return r<0?void 0:t[r][1]},we.prototype.has=function(e){return _e(this.__data__,e)>-1},we.prototype.set=function(e,t){var r=this.__data__,i=_e(r,e);return i<0?(++this.size,r.push([e,t])):r[i][1]=t,this},be.prototype.clear=function(){this.size=0,this.__data__={hash:new ye,map:new(se||we),string:new ye}},be.prototype.delete=function(e){var t=Ae(this,e).delete(e);return this.size-=t?1:0,t},be.prototype.get=function(e){return Ae(this,e).get(e)},be.prototype.has=function(e){return Ae(this,e).has(e)},be.prototype.set=function(e,t){var r=Ae(this,e),i=r.size;return r.set(e,t),this.size+=r.size==i?0:1,this},me.prototype.add=me.prototype.push=function(e){return this.__data__.set(e,i),this},me.prototype.has=function(e){return this.__data__.has(e)},ve.prototype.clear=function(){this.__data__=new we,this.size=0},ve.prototype.delete=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r},ve.prototype.get=function(e){return this.__data__.get(e)},ve.prototype.has=function(e){return this.__data__.has(e)},ve.prototype.set=function(e,t){var r=this.__data__;if(r instanceof we){var i=r.__data__;if(!se||i.length<199)return i.push([e,t]),this.size=++r.size,this;r=this.__data__=new be(i)}return r.set(e,t),this.size=r.size,this};var xe=ee?function(e){return null==e?[]:(e=Object(e),function(t,r){for(var i=-1,s=null==t?0:t.length,n=0,o=[];++i<s;){var a=t[i];c=a,X.call(e,c)&&(o[n++]=a)}var c;return o}(ee(e)))}:function(){return[]},Pe=Ee;function Ue(e,t){return!!(t=null==t?s:t)&&("number"==typeof e||E.test(e))&&e>-1&&e%1==0&&e<t}function Le(e){if(null!=e){try{return V.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Te(e,t){return e===t||e!=e&&t!=t}(ie&&Pe(new ie(new ArrayBuffer(1)))!=v||se&&Pe(new se)!=l||ne&&Pe(ne.resolve())!=d||oe&&Pe(new oe)!=y||ae&&Pe(new ae)!=b)&&(Pe=function(e){var t=Ee(e),r=t==p?e.constructor:void 0,i=r?Le(r):"";if(i)switch(i){case he:return v;case ue:return l;case le:return d;case fe:return y;case pe:return b}return t});var Ce=Se(function(){return arguments}())?Se:function(e){return ze(e)&&K.call(e,"callee")&&!X.call(e,"callee")},Me=Array.isArray,je=te||function(){return!1};function De(e){if(!Be(e))return!1;var t=Ee(e);return t==u||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function ke(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=s}function Be(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function ze(e){return null!=e&&"object"==typeof e}var $e=L?function(e){return function(t){return e(t)}}(L):function(e){return ze(e)&&ke(e.length)&&!!S[Ee(e)]};function qe(e){return null!=(t=e)&&ke(t.length)&&!De(t)?function(e,t){var r=Me(e),i=!r&&Ce(e),s=!r&&!i&&je(e),n=!r&&!i&&!s&&$e(e),o=r||i||s||n,a=o?function(e,t){for(var r=-1,i=Array(e);++r<e;)i[r]=t(r);return i}(e.length,String):[],c=a.length;for(var h in e)!t&&!K.call(e,h)||o&&("length"==h||s&&("offset"==h||"parent"==h)||n&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||Ue(h,c))||a.push(h);return a}(e):function(e){if(r=(t=e)&&t.constructor,t!==("function"==typeof r&&r.prototype||$))return re(e);var t,r,i=[];for(var s in Object(e))K.call(e,s)&&"constructor"!=s&&i.push(s);return i}(e);var t}e.exports=function(e,t){return Ie(e,t)}},5346:e=>{"use strict";function t(e){try{return JSON.stringify(e)}catch(e){return'"[Circular]"'}}e.exports=function(e,r,i){var s=i&&i.stringify||t;if("object"==typeof e&&null!==e){var n=r.length+1;if(1===n)return e;var o=new Array(n);o[0]=s(e);for(var a=1;a<n;a++)o[a]=s(r[a]);return o.join(" ")}if("string"!=typeof e)return e;var c=r.length;if(0===c)return e;for(var h="",u=0,l=-1,f=e&&e.length||0,p=0;p<f;){if(37===e.charCodeAt(p)&&p+1<f){switch(l=l>-1?l:0,e.charCodeAt(p+1)){case 100:case 102:if(u>=c)break;if(null==r[u])break;l<p&&(h+=e.slice(l,p)),h+=Number(r[u]),l=p+2,p++;break;case 105:if(u>=c)break;if(null==r[u])break;l<p&&(h+=e.slice(l,p)),h+=Math.floor(Number(r[u])),l=p+2,p++;break;case 79:case 111:case 106:if(u>=c)break;if(void 0===r[u])break;l<p&&(h+=e.slice(l,p));var d=typeof r[u];if("string"===d){h+="'"+r[u]+"'",l=p+2,p++;break}if("function"===d){h+=r[u].name||"<anonymous>",l=p+2,p++;break}h+=s(r[u]),l=p+2,p++;break;case 115:if(u>=c)break;l<p&&(h+=e.slice(l,p)),h+=String(r[u]),l=p+2,p++;break;case 37:l<p&&(h+=e.slice(l,p)),h+="%",l=p+2,p++,u--}++u}++p}return-1===l?e:(l<f&&(h+=e.slice(l)),h)}},3954:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.safeJsonParse=function(e){if("string"!=typeof e)throw new Error("Cannot safe json parse value of type "+typeof e);try{return JSON.parse(e)}catch(t){return e}},t.safeJsonStringify=function(e){return"string"==typeof e?e:JSON.stringify(e,((e,t)=>void 0===t?null:t))}},500:e=>{"use strict";e.exports=(e,t)=>{if("string"!=typeof e||"string"!=typeof t)throw new TypeError("Expected the arguments to be of type `string`");if(""===t)return[e];const r=e.indexOf(t);return-1===r?[e]:[e.slice(0,r),e.slice(r+t.length)]}},610:e=>{"use strict";e.exports=e=>encodeURIComponent(e).replace(/[!'()*]/g,(e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`))},655:(e,t,r)=>{"use strict";r.r(t),r.d(t,{__assign:()=>n,__asyncDelegator:()=>v,__asyncGenerator:()=>m,__asyncValues:()=>_,__await:()=>b,__awaiter:()=>u,__classPrivateFieldGet:()=>R,__classPrivateFieldSet:()=>O,__createBinding:()=>f,__decorate:()=>a,__exportStar:()=>p,__extends:()=>s,__generator:()=>l,__importDefault:()=>I,__importStar:()=>S,__makeTemplateObject:()=>E,__metadata:()=>h,__param:()=>c,__read:()=>g,__rest:()=>o,__spread:()=>y,__spreadArrays:()=>w,__values:()=>d});var i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},i(e,t)};function s(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var n=function(){return n=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++)for(var s in t=arguments[r])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e},n.apply(this,arguments)};function o(e,t){var r={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(r[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(i=Object.getOwnPropertySymbols(e);s<i.length;s++)t.indexOf(i[s])<0&&Object.prototype.propertyIsEnumerable.call(e,i[s])&&(r[i[s]]=e[i[s]])}return r}function a(e,t,r,i){var s,n=arguments.length,o=n<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(o=(n<3?s(o):n>3?s(t,r,o):s(t,r))||o);return n>3&&o&&Object.defineProperty(t,r,o),o}function c(e,t){return function(r,i){t(r,i,e)}}function h(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function u(e,t,r,i){return new(r||(r=Promise))((function(s,n){function o(e){try{c(i.next(e))}catch(e){n(e)}}function a(e){try{c(i.throw(e))}catch(e){n(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((i=i.apply(e,t||[])).next())}))}function l(e,t){var r,i,s,n,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return n={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(n[Symbol.iterator]=function(){return this}),n;function a(n){return function(a){return function(n){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,i&&(s=2&n[0]?i.return:n[0]?i.throw||((s=i.return)&&s.call(i),0):i.next)&&!(s=s.call(i,n[1])).done)return s;switch(i=0,s&&(n=[2&n[0],s.value]),n[0]){case 0:case 1:s=n;break;case 4:return o.label++,{value:n[1],done:!1};case 5:o.label++,i=n[1],n=[0];continue;case 7:n=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==n[0]&&2!==n[0])){o=0;continue}if(3===n[0]&&(!s||n[1]>s[0]&&n[1]<s[3])){o.label=n[1];break}if(6===n[0]&&o.label<s[1]){o.label=s[1],s=n;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(n);break}s[2]&&o.ops.pop(),o.trys.pop();continue}n=t.call(e,o)}catch(e){n=[6,e],i=0}finally{r=s=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,a])}}}function f(e,t,r,i){void 0===i&&(i=r),e[i]=t[r]}function p(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||(t[r]=e[r])}function d(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function g(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,s,n=r.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(e){s={error:e}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(s)throw s.error}}return o}function y(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(g(arguments[t]));return e}function w(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var i=Array(e),s=0;for(t=0;t<r;t++)for(var n=arguments[t],o=0,a=n.length;o<a;o++,s++)i[s]=n[o];return i}function b(e){return this instanceof b?(this.v=e,this):new b(e)}function m(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,s=r.apply(e,t||[]),n=[];return i={},o("next"),o("throw"),o("return"),i[Symbol.asyncIterator]=function(){return this},i;function o(e){s[e]&&(i[e]=function(t){return new Promise((function(r,i){n.push([e,t,r,i])>1||a(e,t)}))})}function a(e,t){try{(r=s[e](t)).value instanceof b?Promise.resolve(r.value.v).then(c,h):u(n[0][2],r)}catch(e){u(n[0][3],e)}var r}function c(e){a("next",e)}function h(e){a("throw",e)}function u(e,t){e(t),n.shift(),n.length&&a(n[0][0],n[0][1])}}function v(e){var t,r;return t={},i("next"),i("throw",(function(e){throw e})),i("return"),t[Symbol.iterator]=function(){return this},t;function i(i,s){t[i]=e[i]?function(t){return(r=!r)?{value:b(e[i](t)),done:"return"===i}:s?s(t):t}:s}}function _(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=d(e),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(r){t[r]=e[r]&&function(t){return new Promise((function(i,s){!function(e,t,r,i){Promise.resolve(i).then((function(t){e({value:t,done:r})}),t)}(i,s,(t=e[r](t)).done,t.value)}))}}}function E(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function S(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function I(e){return e&&e.__esModule?e:{default:e}}function R(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function O(e,t,r){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,r),r}},7026:e=>{"use strict";e.exports=function(){throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object")}},5883:()=>{},6559:(e,t,r)=>{"use strict";const i=r(5346);e.exports=o;const s=function(){function e(e){return void 0!==e&&e}try{return"undefined"!=typeof globalThis||Object.defineProperty(Object.prototype,"globalThis",{get:function(){return delete Object.prototype.globalThis,this.globalThis=this},configurable:!0}),globalThis}catch(t){return e(self)||e(window)||e(this)||{}}}().console||{},n={mapHttpRequest:d,mapHttpResponse:d,wrapRequestSerializer:g,wrapResponseSerializer:g,wrapErrorSerializer:g,req:d,res:d,err:function(e){const t={type:e.constructor.name,msg:e.message,stack:e.stack};for(const r in e)void 0===t[r]&&(t[r]=e[r]);return t}};function o(e){(e=e||{}).browser=e.browser||{};const t=e.browser.transmit;if(t&&"function"!=typeof t.send)throw Error("pino: transmit option must have a send function");const r=e.browser.write||s;e.browser.write&&(e.browser.asObject=!0);const i=e.serializers||{},n=function(e,t){return Array.isArray(e)?e.filter((function(e){return"!stdSerializers.err"!==e})):!0===e&&Object.keys(t)}(e.browser.serialize,i);let c=e.browser.serialize;Array.isArray(e.browser.serialize)&&e.browser.serialize.indexOf("!stdSerializers.err")>-1&&(c=!1),"function"==typeof r&&(r.error=r.fatal=r.warn=r.info=r.debug=r.trace=r),!1===e.enabled&&(e.level="silent");const l=e.level||"info",d=Object.create(r);d.log||(d.log=y),Object.defineProperty(d,"levelVal",{get:function(){return"silent"===this.level?1/0:this.levels.values[this.level]}}),Object.defineProperty(d,"level",{get:function(){return this._level},set:function(e){if("silent"!==e&&!this.levels.values[e])throw Error("unknown level "+e);this._level=e,a(g,d,"error","log"),a(g,d,"fatal","error"),a(g,d,"warn","error"),a(g,d,"info","log"),a(g,d,"debug","log"),a(g,d,"trace","log")}});const g={transmit:t,serialize:n,asObject:e.browser.asObject,levels:["error","fatal","warn","info","debug","trace"],timestamp:p(e)};return d.levels=o.levels,d.level=l,d.setMaxListeners=d.getMaxListeners=d.emit=d.addListener=d.on=d.prependListener=d.once=d.prependOnceListener=d.removeListener=d.removeAllListeners=d.listeners=d.listenerCount=d.eventNames=d.write=d.flush=y,d.serializers=i,d._serialize=n,d._stdErrSerialize=c,d.child=function(r,s){if(!r)throw new Error("missing bindings for child Pino");s=s||{},n&&r.serializers&&(s.serializers=r.serializers);const o=s.serializers;if(n&&o){var a=Object.assign({},i,o),c=!0===e.browser.serialize?Object.keys(a):n;delete r.serializers,h([r],c,a,this._stdErrSerialize)}function l(e){this._childLevel=1+(0|e._childLevel),this.error=u(e,r,"error"),this.fatal=u(e,r,"fatal"),this.warn=u(e,r,"warn"),this.info=u(e,r,"info"),this.debug=u(e,r,"debug"),this.trace=u(e,r,"trace"),a&&(this.serializers=a,this._serialize=c),t&&(this._logEvent=f([].concat(e._logEvent.bindings,r)))}return l.prototype=this,new l(this)},t&&(d._logEvent=f()),d}function a(e,t,r,i){const n=Object.getPrototypeOf(t);t[r]=t.levelVal>t.levels.values[r]?y:n[r]?n[r]:s[r]||s[i]||y,function(e,t,r){var i;(e.transmit||t[r]!==y)&&(t[r]=(i=t[r],function(){const n=e.timestamp(),a=new Array(arguments.length),u=Object.getPrototypeOf&&Object.getPrototypeOf(this)===s?s:this;for(var f=0;f<a.length;f++)a[f]=arguments[f];if(e.serialize&&!e.asObject&&h(a,this._serialize,this.serializers,this._stdErrSerialize),e.asObject?i.call(u,c(this,r,a,n)):i.apply(u,a),e.transmit){const i=e.transmit.level||t.level,s=o.levels.values[i],c=o.levels.values[r];if(c<s)return;l(this,{ts:n,methodLevel:r,methodValue:c,transmitLevel:i,transmitValue:o.levels.values[e.transmit.level||t.level],send:e.transmit.send,val:t.levelVal},a)}}))}(e,t,r)}function c(e,t,r,s){e._serialize&&h(r,e._serialize,e.serializers,e._stdErrSerialize);const n=r.slice();let a=n[0];const c={};s&&(c.time=s),c.level=o.levels.values[t];let u=1+(0|e._childLevel);if(u<1&&(u=1),null!==a&&"object"==typeof a){for(;u--&&"object"==typeof n[0];)Object.assign(c,n.shift());a=n.length?i(n.shift(),n):void 0}else"string"==typeof a&&(a=i(n.shift(),n));return void 0!==a&&(c.msg=a),c}function h(e,t,r,i){for(const s in e)if(i&&e[s]instanceof Error)e[s]=o.stdSerializers.err(e[s]);else if("object"==typeof e[s]&&!Array.isArray(e[s]))for(const i in e[s])t&&t.indexOf(i)>-1&&i in r&&(e[s][i]=r[i](e[s][i]))}function u(e,t,r){return function(){const i=new Array(1+arguments.length);i[0]=t;for(var s=1;s<i.length;s++)i[s]=arguments[s-1];return e[r].apply(this,i)}}function l(e,t,r){const i=t.send,s=t.ts,n=t.methodLevel,o=t.methodValue,a=t.val,c=e._logEvent.bindings;h(r,e._serialize||Object.keys(e.serializers),e.serializers,void 0===e._stdErrSerialize||e._stdErrSerialize),e._logEvent.ts=s,e._logEvent.messages=r.filter((function(e){return-1===c.indexOf(e)})),e._logEvent.level.label=n,e._logEvent.level.value=o,i(n,e._logEvent,a),e._logEvent=f(c)}function f(e){return{ts:0,messages:[],bindings:e||[],level:{label:"",value:0}}}function p(e){return"function"==typeof e.timestamp?e.timestamp:!1===e.timestamp?w:b}function d(){return{}}function g(e){return e}function y(){}function w(){return!1}function b(){return Date.now()}o.levels={values:{fatal:60,error:50,warn:40,info:30,debug:20,trace:10},labels:{10:"trace",20:"debug",30:"info",40:"warn",50:"error",60:"fatal"}},o.stdSerializers=n,o.stdTimeFunctions=Object.assign({},{nullTime:w,epochTime:b,unixTime:function(){return Math.round(Date.now()/1e3)},isoTime:function(){return new Date(Date.now()).toISOString()}})},9342:(e,t,r)=>{"use strict";r.d(t,{Id:()=>w,t0:()=>v,zv:()=>b,uc:()=>R,jb:()=>x,zb:()=>g,AV:()=>A,Vs:()=>U}),Symbol(),Symbol();const i=Symbol(),s=Object.getPrototypeOf,n=new WeakMap,o=(new WeakMap,(e,t=!0)=>{n.set(e,t)}),a=e=>"object"==typeof e&&null!==e,c=Symbol(),h=new WeakSet,[u]=((e=Object.is,t=((e,t)=>new Proxy(e,t)),r=(e=>a(e)&&!h.has(e)&&(Array.isArray(e)||!(Symbol.iterator in e))&&!(e instanceof WeakMap)&&!(e instanceof WeakSet)&&!(e instanceof Error)&&!(e instanceof Number)&&!(e instanceof Date)&&!(e instanceof String)&&!(e instanceof RegExp)&&!(e instanceof ArrayBuffer)),u=(e=>{switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:throw e}}),f=new WeakMap,p=((e,t,r,i=u)=>{const s=f.get(t);if((null==s?void 0:s[0])===r)return s[1];const n=Array.isArray(e)?[]:Object.create(Object.getPrototypeOf(e));return o(n,!0),f.set(t,[r,n]),Reflect.ownKeys(e).forEach((r=>{const s=Reflect.get(e,r,t);h.has(s)?(o(s,!1),n[r]=s):s instanceof Promise?Object.defineProperty(n,r,{get:()=>i(s)}):(null==s?void 0:s[c])?n[r]=function(e,t){(null==e?void 0:e[c])||console.warn("Please use proxy object");const[r,i,s,n]=e[c];return n(r,i,s,t)}(s,i):n[r]=s})),Object.freeze(n)}),d=new WeakMap,g=[1],y=(o=>{if(!a(o))throw new Error("object required");const h=d.get(o);if(h)return h;let u=g[0];const f=new Set,y=(e,t=++g[0])=>{u!==t&&(u=t,f.forEach((r=>r(e,t))))},w=new Map,b=e=>{const t=w.get(e);return w.delete(e),t},m=Array.isArray(o)?[]:Object.create(Object.getPrototypeOf(o)),v={get:(e,t,r)=>t===c?[e,r,u,p,f]:Reflect.get(e,t,r),deleteProperty(e,t){var r;const i=Reflect.get(e,t),s=null==(r=null==i?void 0:i[c])?void 0:r[4];s&&s.delete(b(t));const n=Reflect.deleteProperty(e,t);return n&&y(["delete",[t],i]),n},set(t,o,h,u){var f,p;const d=Reflect.has(t,o),g=Reflect.get(t,o,u);if(d&&e(g,h))return!0;const m=null==(f=null==g?void 0:g[c])?void 0:f[4];var v;m&&m.delete(b(o)),a(h)&&(h=(e=>e&&(n.has(e)?n.get(e):s(e)===Object.prototype||s(e)===Array.prototype))(v=h)&&v[i]||null||h);let _=h;return(null==(p=Object.getOwnPropertyDescriptor(t,o))?void 0:p.set)||(h instanceof Promise?h.then((e=>{h.status="fulfilled",h.value=e,y(["resolve",[o],e])})).catch((e=>{h.status="rejected",h.reason=e,y(["reject",[o],e])})):(!(null==h?void 0:h[c])&&r(h)&&(_=l(h)),(null==_?void 0:_[c])&&_[c][4].add((e=>{let t=w.get(e);return t||(t=(t,r)=>{const i=[...t];i[1]=[e,...i[1]],y(i,r)},w.set(e,t)),t})(o)))),Reflect.set(t,o,_,u),y(["set",[o],h,g]),!0}},_=t(m,v);return d.set(o,_),Reflect.ownKeys(o).forEach((e=>{const t=Object.getOwnPropertyDescriptor(o,e);t.get||t.set?Object.defineProperty(m,e,t):_[e]=o[e]})),_}))=>[y,c,h,e,t,r,u,f,p,d,g])();function l(e={}){return u(e)}function f(e,t,r){let i;(null==e?void 0:e[c])||console.warn("Please use proxy object");const s=[],n=e[c][4],o=e=>{s.push(e),r?t(s.splice(0)):i||(i=Promise.resolve().then((()=>{i=void 0,n.has(o)&&t(s.splice(0))})))};return n.add(o),()=>n.delete(o)}var p=r(8764);const d=l({selectedChain:void 0,chains:void 0,standaloneChains:void 0,standaloneUri:void 0,address:void 0,profileName:void 0,profileAvatar:void 0,profileLoading:!1,balanceLoading:!1,balance:void 0,isConnected:!1,isStandalone:!1,isCustomDesktop:!1,isCustomMobile:!1,isExplorer:!1}),g={state:d,subscribe:e=>f(d,(()=>e(d))),setChains(e){d.chains=e},setStandaloneChains(e){d.standaloneChains=e},setStandaloneUri(e){d.standaloneUri=e},getSelectedChain(){if(!d.selectedChain){const e=w.client().getNetwork().chain;d.selectedChain=e}return d.selectedChain},setSelectedChain(e){d.selectedChain=e},setIsStandalone(e){d.isStandalone=e},setIsCustomDesktop(e){d.isCustomDesktop=e},setIsCustomMobile(e){d.isCustomMobile=e},setIsExplorer(e){d.isExplorer=e},getAccount(){const e=w.client().getAccount();d.address=e.address,d.isConnected=e.isConnected},setAddress(e){d.address=e},setIsConnected(e){d.isConnected=e},setProfileName(e){d.profileName=e},setProfileAvatar(e){d.profileAvatar=e},setProfileLoading(e){d.profileLoading=e},setBalanceLoading(e){d.balanceLoading=e},setBalance(e){d.balance=e},resetProfile(){d.profileName=void 0,d.profileAvatar=void 0,d.balance=void 0},resetAccount(){d.address=void 0,g.resetProfile()}},y=l({initialized:!1,ethereumClient:void 0}),w={setEthereumClient(e){!y.initialized&&e&&(y.ethereumClient=e,g.setChains(e.chains),y.initialized=!0)},client(){if(y.ethereumClient)return y.ethereumClient;throw new Error("ClientCtrl has no client set")}},b={WALLETCONNECT_DEEPLINK_CHOICE:"WALLETCONNECT_DEEPLINK_CHOICE",isMobile:()=>typeof window<"u"&&Boolean(window.matchMedia("(pointer:coarse)").matches||/Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent)),isAndroid:()=>b.isMobile()&&navigator.userAgent.toLowerCase().includes("android"),isEmptyObject:e=>Object.getPrototypeOf(e)===Object.prototype&&0===Object.getOwnPropertyNames(e).length&&0===Object.getOwnPropertySymbols(e).length,isHttpUrl:e=>e.startsWith("http://")||e.startsWith("https://"),formatNativeUrl(e,t,r){if(b.isHttpUrl(e))return this.formatUniversalUrl(e,t,r);let i=e;return i.includes("://")||(i=e.replaceAll("/","").replaceAll(":",""),i=`${i}://`),this.setWalletConnectDeepLink(i,r),`${i}wc?uri=${encodeURIComponent(t)}`},formatUniversalUrl(e,t,r){if(!b.isHttpUrl(e))return this.formatNativeUrl(e,t,r);let i=e;return e.endsWith("/")&&(i=e.slice(0,-1)),this.setWalletConnectDeepLink(i,r),`${i}/wc?uri=${encodeURIComponent(t)}`},wait:async e=>new Promise((t=>{setTimeout(t,e)})),openHref(e,t="_self"){window.open(e,t,"noreferrer noopener")},setWalletConnectDeepLink(e,t){localStorage.setItem(b.WALLETCONNECT_DEEPLINK_CHOICE,JSON.stringify({href:e,name:t}))},setWalletConnectAndroidDeepLink(e){const[t]=e.split("?");localStorage.setItem(b.WALLETCONNECT_DEEPLINK_CHOICE,JSON.stringify({href:t,name:"Android"}))},removeWalletConnectDeepLink(){localStorage.removeItem(b.WALLETCONNECT_DEEPLINK_CHOICE)},isNull:e=>null===e},m=l({projectId:void 0,themeMode:typeof matchMedia<"u"&&matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light",themeColor:"default",themeBackground:b.isMobile()?"themeColor":"gradient",themeZIndex:89,mobileWallets:void 0,desktopWallets:void 0,walletImages:void 0,chainImages:void 0,tokenImages:void 0,standaloneChains:void 0,enableStandaloneMode:!1,enableNetworkView:!1,defaultChain:void 0,explorerAllowList:void 0,explorerDenyList:void 0,termsOfServiceUrl:void 0,privacyPolicyUrl:void 0}),v={state:m,subscribe:e=>f(m,(()=>e(m))),setConfig(e){var t,r,i,s;if(g.setStandaloneChains(e.standaloneChains),g.setIsStandalone(Boolean(null==(t=e.standaloneChains)?void 0:t.length)||Boolean(e.enableStandaloneMode)),g.setIsCustomMobile(Boolean(null==(r=e.mobileWallets)?void 0:r.length)),g.setIsCustomDesktop(Boolean(null==(i=e.desktopWallets)?void 0:i.length)),g.setIsExplorer(Boolean(null==(s=e.projectId)?void 0:s.length)),e.defaultChain)g.setSelectedChain(e.defaultChain);else if(!g.state.isStandalone){const e=w.client().getDefaultChain();g.setSelectedChain(e)}Object.assign(m,e)},setThemeConfig(e){Object.assign(m,e)}},_="https://explorer-api.walletconnect.com",E={async fetchWallets(e,t){const r=function(e){const t=Object.fromEntries(Object.entries(e).filter((([e,t])=>typeof t<"u"&&null!==t&&""!==t)).map((([e,t])=>[e,t.toString()])));return new URLSearchParams(t).toString()}(t),i=`${_}/v3/wallets?projectId=${e}&${r}`;return(await fetch(i)).json()},formatImageUrl:(e,t)=>`${_}/v3/logo/lg/${t}?projectId=${e}`},S=l({wallets:{listings:[],total:0,page:1},search:{listings:[],total:0,page:1},previewWallets:[],recomendedWallets:[]});function I(){const{projectId:e}=v.state;if(!e)throw new Error("projectId is required to work with explorer api");return e}const R={state:S,async getPreviewWallets(e){const{listings:t}=await E.fetchWallets(I(),e);return S.previewWallets=Object.values(t),S.previewWallets},async getRecomendedWallets(){const{listings:e}=await E.fetchWallets(I(),{page:1,entries:6});S.recomendedWallets=Object.values(e)},async getPaginatedWallets(e){const{page:t,search:r}=e,{listings:i,total:s}=await E.fetchWallets(I(),e),n=Object.values(i),o=r?"search":"wallets";return S[o]={listings:[...S[o].listings,...n],total:s,page:t??1},{listings:n,total:s}},getImageUrl:e=>E.formatImageUrl(I(),e),resetSearch(){S.search={listings:[],total:0,page:1}}},O=l({history:["ConnectWallet"],view:"ConnectWallet",data:void 0}),A={state:O,subscribe:e=>f(O,(()=>e(O))),push(e,t){e!==O.view&&(O.view=e,t&&(O.data=t),O.history.push(e))},replace(e){O.view=e,O.history=[e]},goBack(){if(O.history.length>1){O.history.pop();const[e]=O.history.slice(-1);O.view=e}}},N=l({open:!1}),x={state:N,subscribe:e=>f(N,(()=>e(N))),open(e){var t;null!=e&&e.route&&A.replace(e.route),null!=e&&e.uri&&g.setStandaloneUri(e.uri),null!=(t=e?.standaloneChains)&&t.length&&g.setStandaloneChains(e.standaloneChains),N.open=!0},close(){N.open=!1}},P=l({open:!1,message:"",variant:"success"}),U={state:P,subscribe:e=>f(P,(()=>e(P))),openToast(e,t){P.open=!0,P.message=e,P.variant=t},closeToast(){P.open=!1}};typeof window<"u"&&(window.Buffer||(window.Buffer=p.lW),window.global||(window.global=window),window.process||(window.process={env:{}}))}},i={};function s(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={id:e,loaded:!1,exports:{}};return r[e](n,n.exports,s),n.loaded=!0,n.exports}s.m=r,s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((t,r)=>(s.f[r](e,t),t)),[])),s.u=e=>e+".web3wallet.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="web3-silvenleaf:",s.l=(r,i,n,o)=>{if(e[r])e[r].push(i);else{var a,c;if(void 0!==n)for(var h=document.getElementsByTagName("script"),u=0;u<h.length;u++){var l=h[u];if(l.getAttribute("src")==r||l.getAttribute("data-webpack")==t+n){a=l;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",t+n),a.src=r),e[r]=[i];var f=(t,i)=>{a.onerror=a.onload=null,clearTimeout(p);var s=e[r];if(delete e[r],a.parentNode&&a.parentNode.removeChild(a),s&&s.forEach((e=>e(i))),t)return t(i)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=f.bind(null,a.onerror),a.onload=f.bind(null,a.onload),c&&document.head.appendChild(a)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),(()=>{var e={179:0};s.f.j=(t,r)=>{var i=s.o(e,t)?e[t]:void 0;if(0!==i)if(i)r.push(i[2]);else{var n=new Promise(((r,s)=>i=e[t]=[r,s]));r.push(i[2]=n);var o=s.p+s.u(t),a=new Error;s.l(o,(r=>{if(s.o(e,t)&&(0!==(i=e[t])&&(e[t]=void 0),i)){var n=r&&("load"===r.type?"missing":r.type),o=r&&r.target&&r.target.src;a.message="Loading chunk "+t+" failed.\n("+n+": "+o+")",a.name="ChunkLoadError",a.type=n,a.request=o,i[1](a)}}),"chunk-"+t,t)}};var t=(t,r)=>{var i,n,[o,a,c]=r,h=0;if(o.some((t=>0!==e[t]))){for(i in a)s.o(a,i)&&(s.m[i]=a[i]);c&&c(s)}for(t&&t(r);h<o.length;h++)n=o[h],s.o(e,n)&&e[n]&&e[n][0](),e[n]=0},r=self.webpackChunkweb3_silvenleaf=self.webpackChunkweb3_silvenleaf||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),(()=>{"use strict";var e={};s.r(e),s.d(e,{identity:()=>ee});var t={};s.r(t),s.d(t,{base2:()=>te});var r={};s.r(r),s.d(r,{base8:()=>re});var i={};s.r(i),s.d(i,{base10:()=>ie});var n={};s.r(n),s.d(n,{base16:()=>se,base16upper:()=>ne});var o={};s.r(o),s.d(o,{base32:()=>oe,base32hex:()=>ue,base32hexpad:()=>fe,base32hexpadupper:()=>pe,base32hexupper:()=>le,base32pad:()=>ce,base32padupper:()=>he,base32upper:()=>ae,base32z:()=>de});var a={};s.r(a),s.d(a,{base36:()=>ge,base36upper:()=>ye});var c={};s.r(c),s.d(c,{base58btc:()=>we,base58flickr:()=>be});var h={};s.r(h),s.d(h,{base64:()=>me,base64pad:()=>ve,base64url:()=>_e,base64urlpad:()=>Ee});var u={};s.r(u),s.d(u,{base256emoji:()=>Oe});var l={};s.r(l),s.d(l,{sha256:()=>He,sha512:()=>We});var f={};s.r(f),s.d(f,{identity:()=>Ge});var p={};s.r(p),s.d(p,{code:()=>Xe,decode:()=>Qe,encode:()=>Ze,name:()=>Ye});var d={};s.r(d),s.d(d,{code:()=>it,decode:()=>nt,encode:()=>st,name:()=>rt});var g=s(6559),y=s.n(g),w=s(7187),b=s.n(w),m=s(5150),v=s(772),_=s(9107),E=s(8200);class S extends E.q{constructor(e){super(),this.opts=e,this.protocol="wc",this.version=2}}class I extends E.q{constructor(e,t){super(),this.core=e,this.logger=t,this.records=new Map}}class R{constructor(e,t){this.logger=e,this.core=t}}class O extends E.q{constructor(e,t){super(),this.relayer=e,this.logger=t}}class A extends E.q{constructor(e){super()}}class N{constructor(e,t,r,i){this.core=e,this.logger=t,this.name=r}}class x extends E.q{constructor(e,t){super(),this.relayer=e,this.logger=t}}class P extends E.q{constructor(e,t){super(),this.core=e,this.logger=t}}class U{constructor(e){this.opts=e,this.protocol="wc",this.version=2}}class L{constructor(e){this.client=e}}function T(e){if("string"!=typeof e)throw new Error("Cannot safe json parse value of type "+typeof e);try{return JSON.parse(e)}catch(t){return e}}function C(e){return"string"==typeof e?e:JSON.stringify(e)}var M=s(1050),j=s(1416),D=s(6736);const k="base64url",B="did",z="key",$="base58btc";function q(e=0){return null!=globalThis.Buffer&&null!=globalThis.Buffer.allocUnsafe?globalThis.Buffer.allocUnsafe(e):new Uint8Array(e)}function V(e,t){t||(t=e.reduce(((e,t)=>e+t.length),0));const r=q(t);let i=0;for(const t of e)r.set(t,i),i+=t.length;return r}const K=function(e,t){if(e.length>=255)throw new TypeError("Alphabet too long");for(var r=new Uint8Array(256),i=0;i<r.length;i++)r[i]=255;for(var s=0;s<e.length;s++){var n=e.charAt(s),o=n.charCodeAt(0);if(255!==r[o])throw new TypeError(n+" is ambiguous");r[o]=s}var a=e.length,c=e.charAt(0),h=Math.log(a)/Math.log(256),u=Math.log(256)/Math.log(a);function l(e){if("string"!=typeof e)throw new TypeError("Expected String");if(0===e.length)return new Uint8Array;var t=0;if(" "!==e[t]){for(var i=0,s=0;e[t]===c;)i++,t++;for(var n=(e.length-t)*h+1>>>0,o=new Uint8Array(n);e[t];){var u=r[e.charCodeAt(t)];if(255===u)return;for(var l=0,f=n-1;(0!==u||l<s)&&-1!==f;f--,l++)u+=a*o[f]>>>0,o[f]=u%256>>>0,u=u/256>>>0;if(0!==u)throw new Error("Non-zero carry");s=l,t++}if(" "!==e[t]){for(var p=n-s;p!==n&&0===o[p];)p++;for(var d=new Uint8Array(i+(n-p)),g=i;p!==n;)d[g++]=o[p++];return d}}}return{encode:function(t){if(t instanceof Uint8Array||(ArrayBuffer.isView(t)?t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength):Array.isArray(t)&&(t=Uint8Array.from(t))),!(t instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(0===t.length)return"";for(var r=0,i=0,s=0,n=t.length;s!==n&&0===t[s];)s++,r++;for(var o=(n-s)*u+1>>>0,h=new Uint8Array(o);s!==n;){for(var l=t[s],f=0,p=o-1;(0!==l||f<i)&&-1!==p;p--,f++)l+=256*h[p]>>>0,h[p]=l%a>>>0,l=l/a>>>0;if(0!==l)throw new Error("Non-zero carry");i=f,s++}for(var d=o-i;d!==o&&0===h[d];)d++;for(var g=c.repeat(r);d<o;++d)g+=e.charAt(h[d]);return g},decodeUnsafe:l,decode:function(e){var r=l(e);if(r)return r;throw new Error(`Non-${t} character`)}}},J=(new Uint8Array(0),e=>{if(e instanceof Uint8Array&&"Uint8Array"===e.constructor.name)return e;if(e instanceof ArrayBuffer)return new Uint8Array(e);if(ArrayBuffer.isView(e))return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);throw new Error("Unknown type, must be binary type")});class H{constructor(e,t,r){this.name=e,this.prefix=t,this.baseEncode=r}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}}class W{constructor(e,t,r){if(this.name=e,this.prefix=t,void 0===t.codePointAt(0))throw new Error("Invalid prefix character");this.prefixCodePoint=t.codePointAt(0),this.baseDecode=r}decode(e){if("string"==typeof e){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(e.slice(this.prefix.length))}throw Error("Can only multibase decode strings")}or(e){return G(this,e)}}class F{constructor(e){this.decoders=e}or(e){return G(this,e)}decode(e){const t=e[0],r=this.decoders[t];if(r)return r.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}}const G=(e,t)=>new F({...e.decoders||{[e.prefix]:e},...t.decoders||{[t.prefix]:t}});class Y{constructor(e,t,r,i){this.name=e,this.prefix=t,this.baseEncode=r,this.baseDecode=i,this.encoder=new H(e,t,r),this.decoder=new W(e,t,i)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}}const X=({name:e,prefix:t,encode:r,decode:i})=>new Y(e,t,r,i),Z=({prefix:e,name:t,alphabet:r})=>{const{encode:i,decode:s}=K(r,t);return X({prefix:e,name:t,encode:i,decode:e=>J(s(e))})},Q=({name:e,prefix:t,bitsPerChar:r,alphabet:i})=>X({prefix:t,name:e,encode:e=>((e,t,r)=>{const i="="===t[t.length-1],s=(1<<r)-1;let n="",o=0,a=0;for(let i=0;i<e.length;++i)for(a=a<<8|e[i],o+=8;o>r;)o-=r,n+=t[s&a>>o];if(o&&(n+=t[s&a<<r-o]),i)for(;n.length*r&7;)n+="=";return n})(e,i,r),decode:t=>((e,t,r,i)=>{const s={};for(let e=0;e<t.length;++e)s[t[e]]=e;let n=e.length;for(;"="===e[n-1];)--n;const o=new Uint8Array(n*r/8|0);let a=0,c=0,h=0;for(let t=0;t<n;++t){const n=s[e[t]];if(void 0===n)throw new SyntaxError(`Non-${i} character`);c=c<<r|n,a+=r,a>=8&&(a-=8,o[h++]=255&c>>a)}if(a>=r||255&c<<8-a)throw new SyntaxError("Unexpected end of data");return o})(t,i,r,e)}),ee=X({prefix:"\0",name:"identity",encode:e=>{return t=e,(new TextDecoder).decode(t);var t},decode:e=>(e=>(new TextEncoder).encode(e))(e)}),te=Q({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1}),re=Q({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3}),ie=Z({prefix:"9",name:"base10",alphabet:"0123456789"}),se=Q({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),ne=Q({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4}),oe=Q({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),ae=Q({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),ce=Q({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),he=Q({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),ue=Q({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),le=Q({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),fe=Q({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),pe=Q({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),de=Q({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5}),ge=Z({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),ye=Z({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"}),we=Z({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),be=Z({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"}),me=Q({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),ve=Q({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),_e=Q({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),Ee=Q({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6}),Se=Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂"),Ie=Se.reduce(((e,t,r)=>(e[r]=t,e)),[]),Re=Se.reduce(((e,t,r)=>(e[t.codePointAt(0)]=r,e)),[]),Oe=X({prefix:"🚀",name:"base256emoji",encode:function(e){return e.reduce(((e,t)=>e+Ie[t]),"")},decode:function(e){const t=[];for(const r of e){const e=Re[r.codePointAt(0)];if(void 0===e)throw new Error(`Non-base256emoji character: ${r}`);t.push(e)}return new Uint8Array(t)}});var Ae=Math.pow(2,31),Ne=Math.pow(2,7),xe=Math.pow(2,14),Pe=Math.pow(2,21),Ue=Math.pow(2,28),Le=Math.pow(2,35),Te=Math.pow(2,42),Ce=Math.pow(2,49),Me=Math.pow(2,56),je=Math.pow(2,63);const De=function e(t,r,i){r=r||[];for(var s=i=i||0;t>=Ae;)r[i++]=255&t|128,t/=128;for(;-128&t;)r[i++]=255&t|128,t>>>=7;return r[i]=0|t,e.bytes=i-s+1,r},ke=function(e){return e<Ne?1:e<xe?2:e<Pe?3:e<Ue?4:e<Le?5:e<Te?6:e<Ce?7:e<Me?8:e<je?9:10},Be=(e,t,r=0)=>(De(e,t,r),t),ze=e=>ke(e),$e=(e,t)=>{const r=t.byteLength,i=ze(e),s=i+ze(r),n=new Uint8Array(s+r);return Be(e,n,0),Be(r,n,i),n.set(t,s),new qe(e,r,t,n)};class qe{constructor(e,t,r,i){this.code=e,this.size=t,this.digest=r,this.bytes=i}}const Ve=({name:e,code:t,encode:r})=>new Ke(e,t,r);class Ke{constructor(e,t,r){this.name=e,this.code=t,this.encode=r}digest(e){if(e instanceof Uint8Array){const t=this.encode(e);return t instanceof Uint8Array?$e(this.code,t):t.then((e=>$e(this.code,e)))}throw Error("Unknown type, must be binary type")}}const Je=e=>async t=>new Uint8Array(await crypto.subtle.digest(e,t)),He=Ve({name:"sha2-256",code:18,encode:Je("SHA-256")}),We=Ve({name:"sha2-512",code:19,encode:Je("SHA-512")}),Fe=J,Ge={code:0,name:"identity",encode:Fe,digest:e=>$e(0,Fe(e))},Ye="raw",Xe=85,Ze=e=>J(e),Qe=e=>J(e),et=new TextEncoder,tt=new TextDecoder,rt="json",it=512,st=e=>et.encode(JSON.stringify(e)),nt=e=>JSON.parse(tt.decode(e));class ot{constructor(e,t,r,i){this.code=t,this.version=e,this.multihash=r,this.bytes=i,this.byteOffset=i.byteOffset,this.byteLength=i.byteLength,this.asCID=this,this._baseCache=new Map,Object.defineProperties(this,{byteOffset:cid_hidden,byteLength:cid_hidden,code:readonly,version:readonly,multihash:readonly,bytes:readonly,_baseCache:cid_hidden,asCID:cid_hidden})}toV0(){if(0===this.version)return this;{const{code:e,multihash:t}=this;if(e!==DAG_PB_CODE)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(t.code!==SHA_256_CODE)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return ot.createV0(t)}}toV1(){switch(this.version){case 0:{const{code:e,digest:t}=this.multihash,r=Digest.create(e,t);return ot.createV1(this.code,r)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}equals(e){return e&&this.code===e.code&&this.version===e.version&&Digest.equals(this.multihash,e.multihash)}toString(e){const{bytes:t,version:r,_baseCache:i}=this;return 0===r?toStringV0(t,i,e||base58btc.encoder):toStringV1(t,i,e||base32.encoder)}toJSON(){return{code:this.code,version:this.version,hash:this.multihash.bytes}}get[Symbol.toStringTag](){return"CID"}[Symbol.for("nodejs.util.inspect.custom")](){return"CID("+this.toString()+")"}static isCID(e){return deprecate(/^0\.0/,IS_CID_DEPRECATION),!(!e||!e[cidSymbol]&&e.asCID!==e)}get toBaseEncodedString(){throw new Error("Deprecated, use .toString()")}get codec(){throw new Error('"codec" property is deprecated, use integer "code" property instead')}get buffer(){throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead")}get multibaseName(){throw new Error('"multibaseName" property is deprecated')}get prefix(){throw new Error('"prefix" property is deprecated')}static asCID(e){if(e instanceof ot)return e;if(null!=e&&e.asCID===e){const{version:t,code:r,multihash:i,bytes:s}=e;return new ot(t,r,i,s||encodeCID(t,r,i.bytes))}if(null!=e&&!0===e[cidSymbol]){const{version:t,multihash:r,code:i}=e,s=Digest.decode(r);return ot.create(t,i,s)}return null}static create(e,t,r){if("number"!=typeof t)throw new Error("String codecs are no longer supported");switch(e){case 0:if(t!==DAG_PB_CODE)throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);return new ot(e,t,r,r.bytes);case 1:{const i=encodeCID(e,t,r.bytes);return new ot(e,t,r,i)}default:throw new Error("Invalid version")}}static createV0(e){return ot.create(0,DAG_PB_CODE,e)}static createV1(e,t){return ot.create(1,e,t)}static decode(e){const[t,r]=ot.decodeFirst(e);if(r.length)throw new Error("Incorrect length");return t}static decodeFirst(e){const t=ot.inspectBytes(e),r=t.size-t.multihashSize,i=coerce(e.subarray(r,r+t.multihashSize));if(i.byteLength!==t.multihashSize)throw new Error("Incorrect length");const s=i.subarray(t.multihashSize-t.digestSize),n=new Digest.Digest(t.multihashCode,t.digestSize,s,i);return[0===t.version?ot.createV0(n):ot.createV1(t.codec,n),e.subarray(t.size)]}static inspectBytes(e){const t=()=>{const[t,r]=varint.decode(e.subarray(0));return t};let r=t(),i=DAG_PB_CODE;if(18===r||1===r&&t(),0!==r&&1!==r)throw new RangeError(`Invalid CID version ${r}`);const s=t(),n=t(),o=0+n;return{version:r,codec:i,multihashCode:s,digestSize:n,multihashSize:o-0,size:o}}static parse(e,t){const[r,i]=parseCIDtoBytes(e,t),s=ot.decode(i);return s._baseCache.set(r,e),s}}Symbol.for("@ipld/js-cid/CID");const at={...e,...t,...r,...i,...n,...o,...a,...c,...h,...u};function ct(e,t,r,i){return{name:e,prefix:t,encoder:{name:e,prefix:t,encode:r},decoder:{decode:i}}}const ht=ct("utf8","u",(e=>"u"+new TextDecoder("utf8").decode(e)),(e=>(new TextEncoder).encode(e.substring(1)))),ut=ct("ascii","a",(e=>{let t="a";for(let r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t}),(e=>{const t=q((e=e.substring(1)).length);for(let r=0;r<e.length;r++)t[r]=e.charCodeAt(r);return t})),lt={utf8:ht,"utf-8":ht,hex:at.base16,latin1:ut,ascii:ut,binary:ut,...at};function ft(e,t="utf8"){const r=lt[t];if(!r)throw new Error(`Unsupported encoding "${t}"`);return"utf8"!==t&&"utf-8"!==t||null==globalThis.Buffer||null==globalThis.Buffer.from?r.encoder.encode(e).substring(1):globalThis.Buffer.from(e.buffer,e.byteOffset,e.byteLength).toString("utf8")}function pt(e,t="utf8"){const r=lt[t];if(!r)throw new Error(`Unsupported encoding "${t}"`);return"utf8"!==t&&"utf-8"!==t||null==globalThis.Buffer||null==globalThis.Buffer.from?r.decoder.decode(`${r.prefix}${e}`):globalThis.Buffer.from(e,"utf8")}function dt(e){return ft(pt(C(e),"utf8"),k)}function gt(e){const t="z"+ft(V([pt("K36",$),e]),$);return[B,z,t].join(":")}function yt(e=(0,j.randomBytes)(32)){return M._w(e)}s(3014);var wt=s(5501),bt=s(512),mt=s(3294),vt=s(7664),_t=function(e,t,r){if(r||2===arguments.length)for(var i,s=0,n=t.length;s<n;s++)!i&&s in t||(i||(i=Array.prototype.slice.call(t,0,s)),i[s]=t[s]);return e.concat(i||Array.prototype.slice.call(t))},Et=function(e,t,r){this.name=e,this.version=t,this.os=r,this.type="browser"},St=function(e){this.version=e,this.type="node",this.name="node",this.os=process.platform},It=function(e,t,r,i){this.name=e,this.version=t,this.os=r,this.bot=i,this.type="bot-device"},Rt=function(){this.type="bot",this.bot=!0,this.name="bot",this.version=null,this.os=null},Ot=function(){this.type="react-native",this.name="react-native",this.version=null,this.os=null},At=/(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/,Nt=[["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["edge-ios",/EdgiOS\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["samsung",/SamsungBrowser\/([0-9\.]+)/],["silk",/\bSilk\/([0-9._-]+)\b/],["miui",/MiuiBrowser\/([0-9\.]+)$/],["beaker",/BeakerBrowser\/([0-9\.]+)/],["edge-chromium",/EdgA?\/([0-9\.]+)/],["chromium-webview",/(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera-mini",/Opera Mini.*Version\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)/],["pie",/^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],["pie",/^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],["netfront",/^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/],["facebook",/FB[AS]V\/([0-9\.]+)/],["instagram",/Instagram\s([0-9\.]+)/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Mobile/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Gecko\)$/],["curl",/^curl\/([0-9\.]+)$/],["searchbot",/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/]],xt=[["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Windows CE",/Windows CE|WinCE|Microsoft Pocket Internet Explorer/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Chrome OS",/CrOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/]];function Pt(e){var t=function(e){return""!==e&&Nt.reduce((function(t,r){var i=r[0],s=r[1];if(t)return t;var n=s.exec(e);return!!n&&[i,n]}),!1)}(e);if(!t)return null;var r=t[0],i=t[1];if("searchbot"===r)return new Rt;var s=i[1]&&i[1].split(".").join("_").split("_").slice(0,3);s?s.length<3&&(s=_t(_t([],s,!0),function(e){for(var t=[],r=0;r<e;r++)t.push("0");return t}(3-s.length),!0)):s=[];var n=s.join("."),o=function(e){for(var t=0,r=xt.length;t<r;t++){var i=xt[t],s=i[0];if(i[1].exec(e))return s}return null}(e),a=At.exec(e);return a&&a[1]?new It(r,n,o,a[1]):new Et(r,n,o)}var Ut=s(8495),Lt=s(416),Tt=s(7338);s(1882);const Ct={waku:{publish:"waku_publish",subscribe:"waku_subscribe",subscription:"waku_subscription",unsubscribe:"waku_unsubscribe"},irn:{publish:"irn_publish",subscribe:"irn_subscribe",subscription:"irn_subscription",unsubscribe:"irn_unsubscribe"},iridium:{publish:"iridium_publish",subscribe:"iridium_subscribe",subscription:"iridium_subscription",unsubscribe:"iridium_unsubscribe"}},Mt="base10",jt="base16",Dt="base64pad",kt="utf8";function Bt(){return ft((0,j.randomBytes)(32),jt)}function zt(e){return ft((0,mt.vp)(pt(e,kt)),jt)}function $t(e){return Number(ft(e,Mt))}function qt(e){const t=pt(e,Dt),r=t.slice(0,1);if(1===$t(r)){const e=33,i=e+12,s=t.slice(1,e),n=t.slice(e,i);return{type:r,sealed:t.slice(i),iv:n,senderPublicKey:s}}const i=t.slice(1,13);return{type:r,sealed:t.slice(13),iv:i}}function Vt(e){const t=e?.type||0;if(1===t){if(typeof e?.senderPublicKey>"u")throw new Error("missing sender public key");if(typeof e?.receiverPublicKey>"u")throw new Error("missing receiver public key")}return{type:t,senderPublicKey:e?.senderPublicKey,receiverPublicKey:e?.receiverPublicKey}}function Kt(e){return 1===e.type&&"string"==typeof e.senderPublicKey&&"string"==typeof e.receiverPublicKey}var Jt=Object.defineProperty,Ht=Object.getOwnPropertySymbols,Wt=Object.prototype.hasOwnProperty,Ft=Object.prototype.propertyIsEnumerable,Gt=(e,t,r)=>t in e?Jt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Yt=(e,t)=>{for(var r in t||(t={}))Wt.call(t,r)&&Gt(e,r,t[r]);if(Ht)for(var r of Ht(t))Ft.call(t,r)&&Gt(e,r,t[r]);return e};const Xt="browser",Zt="js";function Qt(){return typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"}function er(e,t,r){const i=function(){const e=t?Pt(t):"undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product?new Ot:"undefined"!=typeof navigator?Pt(navigator.userAgent):"undefined"!=typeof process&&process.version?new St(process.version.slice(1)):null;var t;if(null===e)return"unknown";const r=e.os?e.os.replace(" ","").toLowerCase():"unknown";return"browser"===e.type?[r,e.name,e.version].join("-"):[r,e.version].join("-")}(),s=function(){var e;const t=!(0,Ut.getDocument)()&&(0,Ut.getNavigator)()&&"ReactNative"===navigator.product?"react-native":Qt()?"node":!Qt()&&(0,Ut.getNavigator)()?Xt:"unknown";return t===Xt?[t,(null==(e=(0,Ut.getLocation)())?void 0:e.host)||"unknown"].join(":"):t}();return[[e,t].join("-"),[Zt,r].join("-"),i,s].join("/")}function tr(e,t){return e.filter((e=>t.includes(e))).length===e.length}function rr(e){return Object.fromEntries(e.entries())}function ir(e){return new Map(Object.entries(e))}function sr(e,t){return(0,D.fromMiliseconds)((t||Date.now())+(0,D.toMiliseconds)(e))}function nr(e){return(0,D.fromMiliseconds)(Date.now())>=(0,D.toMiliseconds)(e)}function or(){const e=(0,D.toMiliseconds)(D.FIVE_MINUTES);let t,r,i;return{resolve:e=>{i&&t&&(clearTimeout(i),t(e))},reject:e=>{i&&r&&(clearTimeout(i),r(e))},done:()=>new Promise(((s,n)=>{i=setTimeout(n,e),t=s,r=n}))}}function ar(e,t){return new Promise((async(r,i)=>{const s=setTimeout((()=>i()),t),n=await e;clearTimeout(s),r(n)}))}function cr(e,t){if("string"==typeof t&&t.startsWith(`${e}:`))return t;if("topic"===e.toLowerCase()){if("string"!=typeof t)throw new Error('Value must be "string" for expirer target type: topic');return`topic:${t}`}if("id"===e.toLowerCase()){if("number"!=typeof t)throw new Error('Value must be "number" for expirer target type: id');return`id:${t}`}throw new Error(`Unknown expirer target type: ${e}`)}function hr(e){const[t,r]=e.split(":"),i={id:void 0,topic:void 0};if("topic"===t&&"string"==typeof r)i.topic=r;else{if("id"!==t||!Number.isInteger(Number(r)))throw new Error(`Invalid target, expected id:number or topic:string, got ${t}:${r}`);i.id=Number(r)}return i}function ur(e,t){return`${e}${t?`:${t}`:""}`}function lr(e){return e?.relay||{protocol:"irn"}}function fr(e){const t=Ct[e];if(typeof t>"u")throw new Error(`Relay Protocol not supported: ${e}`);return t}var pr=Object.defineProperty,dr=Object.getOwnPropertySymbols,gr=Object.prototype.hasOwnProperty,yr=Object.prototype.propertyIsEnumerable,wr=(e,t,r)=>t in e?pr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;function br(e,t="-"){const r={},i="relay"+t;return Object.keys(e).forEach((t=>{if(t.startsWith(i)){const s=t.replace(i,""),n=e[t];r[s]=n}})),r}function mr(e){const t=[];return e.forEach((e=>{const[r,i]=e.split(":");t.push(`${r}:${i}`)})),t}const vr={INVALID_METHOD:{message:"Invalid method.",code:1001},INVALID_EVENT:{message:"Invalid event.",code:1002},INVALID_UPDATE_REQUEST:{message:"Invalid update request.",code:1003},INVALID_EXTEND_REQUEST:{message:"Invalid extend request.",code:1004},INVALID_SESSION_SETTLE_REQUEST:{message:"Invalid session settle request.",code:1005},UNAUTHORIZED_METHOD:{message:"Unauthorized method.",code:3001},UNAUTHORIZED_EVENT:{message:"Unauthorized event.",code:3002},UNAUTHORIZED_UPDATE_REQUEST:{message:"Unauthorized update request.",code:3003},UNAUTHORIZED_EXTEND_REQUEST:{message:"Unauthorized extend request.",code:3004},USER_REJECTED:{message:"User rejected.",code:5e3},USER_REJECTED_CHAINS:{message:"User rejected chains.",code:5001},USER_REJECTED_METHODS:{message:"User rejected methods.",code:5002},USER_REJECTED_EVENTS:{message:"User rejected events.",code:5003},UNSUPPORTED_CHAINS:{message:"Unsupported chains.",code:5100},UNSUPPORTED_METHODS:{message:"Unsupported methods.",code:5101},UNSUPPORTED_EVENTS:{message:"Unsupported events.",code:5102},UNSUPPORTED_ACCOUNTS:{message:"Unsupported accounts.",code:5103},UNSUPPORTED_NAMESPACE_KEY:{message:"Unsupported namespace key.",code:5104},USER_DISCONNECTED:{message:"User disconnected.",code:6e3},SESSION_SETTLEMENT_FAILED:{message:"Session settlement failed.",code:7e3},WC_METHOD_UNSUPPORTED:{message:"Unsupported wc_ method.",code:10001}},_r={NOT_INITIALIZED:{message:"Not initialized.",code:1},NO_MATCHING_KEY:{message:"No matching key.",code:2},RESTORE_WILL_OVERRIDE:{message:"Restore will override.",code:3},RESUBSCRIBED:{message:"Resubscribed.",code:4},MISSING_OR_INVALID:{message:"Missing or invalid.",code:5},EXPIRED:{message:"Expired.",code:6},UNKNOWN_TYPE:{message:"Unknown type.",code:7},MISMATCHED_TOPIC:{message:"Mismatched topic.",code:8},NON_CONFORMING_NAMESPACES:{message:"Non conforming namespaces.",code:9}};function Er(e,t){const{message:r,code:i}=_r[e];return{message:t?`${r} ${t}`:r,code:i}}function Sr(e,t){const{message:r,code:i}=vr[e];return{message:t?`${r} ${t}`:r,code:i}}function Ir(e,t){return!!Array.isArray(e)&&(!(typeof t<"u"&&e.length)||e.every(t))}function Rr(e){return Object.getPrototypeOf(e)===Object.prototype&&Object.keys(e).length}function Or(e){return typeof e>"u"}function Ar(e,t){return!(!t||!Or(e))||"string"==typeof e&&Boolean(e.trim().length)}function Nr(e,t){return!(!t||!Or(e))||"number"==typeof e&&!isNaN(e)}function xr(e){return!(!Ar(e,!1)||!e.includes(":"))&&2===e.split(":").length}function Pr(e,t){let r=null;return Or(e?.extension)||(!Ir(e.extension)||!e.extension.length)&&(r=Er("MISSING_OR_INVALID",`${t} extension should be an array of namespaces, or omitted`)),r}function Ur(e){let t=!0;return Ir(e)?e.length&&(t=e.every((e=>Ar(e,!1)))):t=!1,t}function Lr(e,t,r){let i=null;return Ir(t)?t.forEach((t=>{i||(!xr(t)||!t.includes(e))&&(i=Sr("UNSUPPORTED_CHAINS",`${r}, chain ${t} should be a string and conform to "namespace:chainId" format`))})):i=Sr("UNSUPPORTED_CHAINS",`${r}, chains ${t} should be an array of strings conforming to "namespace:chainId" format`),i}function Tr(e,t){let r=null;return Ir(e)?e.forEach((e=>{r||function(e){if(Ar(e,!1)&&e.includes(":")){const t=e.split(":");if(3===t.length){const e=t[0]+":"+t[1];return!!t[2]&&xr(e)}}return!1}(e)||(r=Sr("UNSUPPORTED_ACCOUNTS",`${t}, account ${e} should be a string and conform to "namespace:chainId:address" format`))})):r=Sr("UNSUPPORTED_ACCOUNTS",`${t}, accounts should be an array of strings conforming to "namespace:chainId:address" format`),r}function Cr(e,t){let r=null;return Ur(e?.methods)?Ur(e?.events)||(r=Sr("UNSUPPORTED_EVENTS",`${t}, events should be an array of strings or empty array for no events`)):r=Sr("UNSUPPORTED_METHODS",`${t}, methods should be an array of strings or empty array for no methods`),r}function Mr(e,t){let r=null;return Object.values(e).forEach((e=>{if(r)return;const i=Cr(e,`${t}, namespace`),s=Pr(e,t);i?r=i:s?r=s:e.extension&&e.extension.forEach((e=>{if(r)return;const i=Cr(e,`${t}, extension`);i&&(r=i)}))})),r}function jr(e,t){let r=null;if(e&&Rr(e)){const i=Mr(e,t);i&&(r=i);const s=function(e,t){let r=null;return Object.values(e).forEach((e=>{if(r)return;const i=Tr(e?.accounts,`${t} namespace`),s=Pr(e,t);i?r=i:s?r=s:e.extension&&e.extension.forEach((e=>{if(r)return;const i=Tr(e.accounts,`${t} extension`);i&&(r=i)}))})),r}(e,t);s&&(r=s)}else r=Er("MISSING_OR_INVALID",`${t}, namespaces should be an object with data`);return r}function Dr(e){return Ar(e.protocol,!0)}function kr(e){return typeof e<"u"&&null!==typeof e}function Br(e,t){return!(!xr(t)||!function(e){const t=[];return Object.values(e).forEach((e=>{t.push(...mr(e.accounts)),e.extension&&e.extension.forEach((e=>{t.push(...mr(e.accounts))}))})),t}(e).includes(t))}function zr(e,t,r){let i=null;const s=Object.keys(e);return tr(s,Object.keys(t))?s.forEach((s=>{var n;i||(tr(e[s].chains,mr(t[s].accounts))?tr(e[s].methods,t[s].methods)?tr(e[s].events,t[s].events)?e[s].extension&&!t[s].extension?i=Er("NON_CONFORMING_NAMESPACES",`${r} namespaces extension doesn't satisfy requiredNamespaces extension for ${s}`):e[s].extension&&t[s].extension&&(null==(n=e[s].extension)||n.forEach((({methods:e,events:n,chains:o})=>{var a;i||null!=(a=t[s].extension)&&a.find((t=>{const r=mr(t.accounts);return tr(o,r)&&tr(n,t.events)&&tr(e,t.methods)}))||(i=Er("NON_CONFORMING_NAMESPACES",`${r} namespaces extension doesn't satisfy requiredNamespaces extension for ${s}`))}))):i=Er("NON_CONFORMING_NAMESPACES",`${r} namespaces events don't satisfy requiredNamespaces events for ${s}`):i=Er("NON_CONFORMING_NAMESPACES",`${r} namespaces methods don't satisfy requiredNamespaces methods for ${s}`):i=Er("NON_CONFORMING_NAMESPACES",`${r} namespaces accounts don't satisfy requiredNamespaces chains for ${s}`))})):i=Er("NON_CONFORMING_NAMESPACES",`${r} namespaces keys don't satisfy requiredNamespaces`),i}var $r=s(6186);class qr extends $r.IJsonRpcProvider{constructor(e){super(e),this.events=new w.EventEmitter,this.hasRegisteredEventListeners=!1,this.connection=this.setConnection(e),this.connection.connected&&this.registerEventListeners()}async connect(e=this.connection){await this.open(e)}async disconnect(){await this.close()}on(e,t){this.events.on(e,t)}once(e,t){this.events.once(e,t)}off(e,t){this.events.off(e,t)}removeListener(e,t){this.events.removeListener(e,t)}async request(e,t){return this.requestStrict((0,$r.formatJsonRpcRequest)(e.method,e.params||[]),t)}async requestStrict(e,t){return new Promise((async(r,i)=>{if(!this.connection.connected)try{await this.open()}catch(e){i(e)}this.events.on(`${e.id}`,(e=>{(0,$r.isJsonRpcError)(e)?i(e.error):r(e.result)}));try{await this.connection.send(e,t)}catch(e){i(e)}}))}setConnection(e=this.connection){return e}onPayload(e){this.events.emit("payload",e),(0,$r.isJsonRpcResponse)(e)?this.events.emit(`${e.id}`,e):this.events.emit("message",{type:e.method,data:e.params})}async open(e=this.connection){this.connection===e&&this.connection.connected||(this.connection.connected&&this.close(),"string"==typeof e&&(await this.connection.open(e),e=this.connection),this.connection=this.setConnection(e),await this.connection.open(),this.registerEventListeners(),this.events.emit("connect"))}async close(){await this.connection.close()}registerEventListeners(){this.hasRegisteredEventListeners||(this.connection.on("payload",(e=>this.onPayload(e))),this.connection.on("close",(()=>this.events.emit("disconnect"))),this.connection.on("error",(e=>this.events.emit("error",e))),this.hasRegisteredEventListeners=!0)}}const Vr=void 0!==s.g&&void 0!==s.g.WebSocket?s.g.WebSocket:"undefined"!=typeof window&&void 0!==window.WebSocket?window.WebSocket:s(7026);var Kr=s(2307),Jr=s.n(Kr),Hr=function(e,t){if(e.length>=255)throw new TypeError("Alphabet too long");for(var r=new Uint8Array(256),i=0;i<r.length;i++)r[i]=255;for(var s=0;s<e.length;s++){var n=e.charAt(s),o=n.charCodeAt(0);if(255!==r[o])throw new TypeError(n+" is ambiguous");r[o]=s}var a=e.length,c=e.charAt(0),h=Math.log(a)/Math.log(256),u=Math.log(256)/Math.log(a);function l(e){if("string"!=typeof e)throw new TypeError("Expected String");if(0===e.length)return new Uint8Array;var t=0;if(" "!==e[t]){for(var i=0,s=0;e[t]===c;)i++,t++;for(var n=(e.length-t)*h+1>>>0,o=new Uint8Array(n);e[t];){var u=r[e.charCodeAt(t)];if(255===u)return;for(var l=0,f=n-1;(0!==u||l<s)&&-1!==f;f--,l++)u+=a*o[f]>>>0,o[f]=u%256>>>0,u=u/256>>>0;if(0!==u)throw new Error("Non-zero carry");s=l,t++}if(" "!==e[t]){for(var p=n-s;p!==n&&0===o[p];)p++;for(var d=new Uint8Array(i+(n-p)),g=i;p!==n;)d[g++]=o[p++];return d}}}return{encode:function(t){if(t instanceof Uint8Array||(ArrayBuffer.isView(t)?t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength):Array.isArray(t)&&(t=Uint8Array.from(t))),!(t instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(0===t.length)return"";for(var r=0,i=0,s=0,n=t.length;s!==n&&0===t[s];)s++,r++;for(var o=(n-s)*u+1>>>0,h=new Uint8Array(o);s!==n;){for(var l=t[s],f=0,p=o-1;(0!==l||f<i)&&-1!==p;p--,f++)l+=256*h[p]>>>0,h[p]=l%a>>>0,l=l/a>>>0;if(0!==l)throw new Error("Non-zero carry");i=f,s++}for(var d=o-i;d!==o&&0===h[d];)d++;for(var g=c.repeat(r);d<o;++d)g+=e.charAt(h[d]);return g},decodeUnsafe:l,decode:function(e){var r=l(e);if(r)return r;throw new Error(`Non-${t} character`)}}};const Wr=e=>{if(e instanceof Uint8Array&&"Uint8Array"===e.constructor.name)return e;if(e instanceof ArrayBuffer)return new Uint8Array(e);if(ArrayBuffer.isView(e))return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);throw new Error("Unknown type, must be binary type")};class Fr{constructor(e,t,r){this.name=e,this.prefix=t,this.baseEncode=r}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}}class Gr{constructor(e,t,r){if(this.name=e,this.prefix=t,void 0===t.codePointAt(0))throw new Error("Invalid prefix character");this.prefixCodePoint=t.codePointAt(0),this.baseDecode=r}decode(e){if("string"==typeof e){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(e.slice(this.prefix.length))}throw Error("Can only multibase decode strings")}or(e){return Xr(this,e)}}class Yr{constructor(e){this.decoders=e}or(e){return Xr(this,e)}decode(e){const t=e[0],r=this.decoders[t];if(r)return r.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}}const Xr=(e,t)=>new Yr({...e.decoders||{[e.prefix]:e},...t.decoders||{[t.prefix]:t}});class Zr{constructor(e,t,r,i){this.name=e,this.prefix=t,this.baseEncode=r,this.baseDecode=i,this.encoder=new Fr(e,t,r),this.decoder=new Gr(e,t,i)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}}const Qr=({name:e,prefix:t,encode:r,decode:i})=>new Zr(e,t,r,i),ei=({prefix:e,name:t,alphabet:r})=>{const{encode:i,decode:s}=Hr(r,t);return Qr({prefix:e,name:t,encode:i,decode:e=>Wr(s(e))})},ti=({name:e,prefix:t,bitsPerChar:r,alphabet:i})=>Qr({prefix:t,name:e,encode:e=>((e,t,r)=>{const i="="===t[t.length-1],s=(1<<r)-1;let n="",o=0,a=0;for(let i=0;i<e.length;++i)for(a=a<<8|e[i],o+=8;o>r;)o-=r,n+=t[s&a>>o];if(o&&(n+=t[s&a<<r-o]),i)for(;n.length*r&7;)n+="=";return n})(e,i,r),decode:t=>((e,t,r,i)=>{const s={};for(let e=0;e<t.length;++e)s[t[e]]=e;let n=e.length;for(;"="===e[n-1];)--n;const o=new Uint8Array(n*r/8|0);let a=0,c=0,h=0;for(let t=0;t<n;++t){const n=s[e[t]];if(void 0===n)throw new SyntaxError(`Non-${i} character`);c=c<<r|n,a+=r,a>=8&&(a-=8,o[h++]=255&c>>a)}if(a>=r||255&c<<8-a)throw new SyntaxError("Unexpected end of data");return o})(t,i,r,e)}),ri=Qr({prefix:"\0",name:"identity",encode:e=>(e=>(new TextDecoder).decode(e))(e),decode:e=>(e=>(new TextEncoder).encode(e))(e)});var ii=Object.freeze({__proto__:null,identity:ri});const si=ti({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1});var ni=Object.freeze({__proto__:null,base2:si});const oi=ti({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3});var ai=Object.freeze({__proto__:null,base8:oi});const ci=ei({prefix:"9",name:"base10",alphabet:"0123456789"});var hi=Object.freeze({__proto__:null,base10:ci});const ui=ti({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),li=ti({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4});var fi=Object.freeze({__proto__:null,base16:ui,base16upper:li});const pi=ti({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),di=ti({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),gi=ti({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),yi=ti({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),wi=ti({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),bi=ti({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),mi=ti({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),vi=ti({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),_i=ti({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5});var Ei=Object.freeze({__proto__:null,base32:pi,base32upper:di,base32pad:gi,base32padupper:yi,base32hex:wi,base32hexupper:bi,base32hexpad:mi,base32hexpadupper:vi,base32z:_i});const Si=ei({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),Ii=ei({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"});var Ri=Object.freeze({__proto__:null,base36:Si,base36upper:Ii});const Oi=ei({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),Ai=ei({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"});var Ni=Object.freeze({__proto__:null,base58btc:Oi,base58flickr:Ai});const xi=ti({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),Pi=ti({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),Ui=ti({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),Li=ti({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6});var Ti=Object.freeze({__proto__:null,base64:xi,base64pad:Pi,base64url:Ui,base64urlpad:Li});const Ci=Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂"),Mi=Ci.reduce(((e,t,r)=>(e[r]=t,e)),[]),ji=Ci.reduce(((e,t,r)=>(e[t.codePointAt(0)]=r,e)),[]),Di=Qr({prefix:"🚀",name:"base256emoji",encode:function(e){return e.reduce(((e,t)=>e+Mi[t]),"")},decode:function(e){const t=[];for(const r of e){const e=ji[r.codePointAt(0)];if(void 0===e)throw new Error(`Non-base256emoji character: ${r}`);t.push(e)}return new Uint8Array(t)}});var ki=Object.freeze({__proto__:null,base256emoji:Di}),Bi=Math.pow(2,31),zi=Math.pow(2,7),$i=Math.pow(2,14),qi=Math.pow(2,21),Vi=Math.pow(2,28),Ki=Math.pow(2,35),Ji=Math.pow(2,42),Hi=Math.pow(2,49),Wi=Math.pow(2,56),Fi=Math.pow(2,63),Gi=function e(t,r,i){r=r||[];for(var s=i=i||0;t>=Bi;)r[i++]=255&t|128,t/=128;for(;-128&t;)r[i++]=255&t|128,t>>>=7;return r[i]=0|t,e.bytes=i-s+1,r},Yi=function(e){return e<zi?1:e<$i?2:e<qi?3:e<Vi?4:e<Ki?5:e<Ji?6:e<Hi?7:e<Wi?8:e<Fi?9:10};const Xi=(e,t,r=0)=>(Gi(e,t,r),t),Zi=e=>Yi(e),Qi=(e,t)=>{const r=t.byteLength,i=Zi(e),s=i+Zi(r),n=new Uint8Array(s+r);return Xi(e,n,0),Xi(r,n,i),n.set(t,s),new es(e,r,t,n)};class es{constructor(e,t,r,i){this.code=e,this.size=t,this.digest=r,this.bytes=i}}const ts=({name:e,code:t,encode:r})=>new rs(e,t,r);class rs{constructor(e,t,r){this.name=e,this.code=t,this.encode=r}digest(e){if(e instanceof Uint8Array){const t=this.encode(e);return t instanceof Uint8Array?Qi(this.code,t):t.then((e=>Qi(this.code,e)))}throw Error("Unknown type, must be binary type")}}const is=e=>async t=>new Uint8Array(await crypto.subtle.digest(e,t)),ss=ts({name:"sha2-256",code:18,encode:is("SHA-256")}),ns=ts({name:"sha2-512",code:19,encode:is("SHA-512")});Object.freeze({__proto__:null,sha256:ss,sha512:ns});const os=Wr,as={code:0,name:"identity",encode:os,digest:e=>Qi(0,os(e))};Object.freeze({__proto__:null,identity:as}),new TextEncoder,new TextDecoder;const cs={...ii,...ni,...ai,...hi,...fi,...Ei,...Ri,...Ni,...Ti,...ki};function hs(e,t,r,i){return{name:e,prefix:t,encoder:{name:e,prefix:t,encode:r},decoder:{decode:i}}}const us=hs("utf8","u",(e=>"u"+new TextDecoder("utf8").decode(e)),(e=>(new TextEncoder).encode(e.substring(1)))),ls=hs("ascii","a",(e=>{let t="a";for(let r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t}),(e=>{const t=function(e=0){return null!=globalThis.Buffer&&null!=globalThis.Buffer.allocUnsafe?globalThis.Buffer.allocUnsafe(e):new Uint8Array(e)}((e=e.substring(1)).length);for(let r=0;r<e.length;r++)t[r]=e.charCodeAt(r);return t})),fs={utf8:us,"utf-8":us,hex:cs.base16,latin1:ls,ascii:ls,binary:ls,...cs},ps="core",ds=`wc@2:${ps}:`,gs={database:":memory:"},ys="client_ed25519_seed",ws=D.ONE_DAY,bs=D.SIX_HOURS,ms="relayer_message",vs="relayer_connect",_s="relayer_disconnect",Es="relayer_connection_stalled",Ss="relayer_transport_closed",Is=D.ONE_SECOND,Rs="subscription_created",Os="subscription_deleted",As="subscription_resubscribed",Ns=1e3*D.FIVE_SECONDS,xs={wc_pairingDelete:{req:{ttl:D.ONE_DAY,prompt:!1,tag:1e3},res:{ttl:D.ONE_DAY,prompt:!1,tag:1001}},wc_pairingPing:{req:{ttl:D.THIRTY_SECONDS,prompt:!1,tag:1002},res:{ttl:D.THIRTY_SECONDS,prompt:!1,tag:1003}},unregistered_method:{req:{ttl:D.ONE_DAY,prompt:!1,tag:0},res:{ttl:D.ONE_DAY,prompt:!1,tag:0}}},Ps="history_created",Us="history_updated",Ls="history_deleted",Ts="expirer_created",Cs="expirer_deleted",Ms="expirer_expired";class js{constructor(e,t){this.core=e,this.logger=t,this.keychain=new Map,this.name="keychain",this.version="0.3",this.initialized=!1,this.storagePrefix=ds,this.init=async()=>{if(!this.initialized){const e=await this.getKeyChain();typeof e<"u"&&(this.keychain=e),this.initialized=!0}},this.has=e=>(this.isInitialized(),this.keychain.has(e)),this.set=async(e,t)=>{this.isInitialized(),this.keychain.set(e,t),await this.persist()},this.get=e=>{this.isInitialized();const t=this.keychain.get(e);if(typeof t>"u"){const{message:t}=Er("NO_MATCHING_KEY",`${this.name}: ${e}`);throw new Error(t)}return t},this.del=async e=>{this.isInitialized(),this.keychain.delete(e),await this.persist()},this.core=e,this.logger=(0,_.generateChildLogger)(t,this.name)}get context(){return(0,_.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}async setKeyChain(e){await this.core.storage.setItem(this.storageKey,rr(e))}async getKeyChain(){const e=await this.core.storage.getItem(this.storageKey);return typeof e<"u"?ir(e):void 0}async persist(){await this.setKeyChain(this.keychain)}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}class Ds{constructor(e,t,r){this.core=e,this.logger=t,this.name="crypto",this.initialized=!1,this.init=async()=>{this.initialized||(await this.keychain.init(),this.initialized=!0)},this.hasKeys=e=>(this.isInitialized(),this.keychain.has(e)),this.getClientId=async()=>(this.isInitialized(),gt(yt(await this.getClientSeed()).publicKey)),this.generateKeyPair=()=>{this.isInitialized();const e=function(){const e=vt.Au();return{privateKey:ft(e.secretKey,jt),publicKey:ft(e.publicKey,jt)}}();return this.setPrivateKey(e.publicKey,e.privateKey)},this.signJWT=async e=>{this.isInitialized();const t=yt(await this.getClientSeed()),r=Bt(),i=ws;return await async function(e,t,r,i,s=(0,D.fromMiliseconds)(Date.now())){const n={alg:"EdDSA",typ:"JWT"},o={iss:gt(i.publicKey),sub:e,aud:t,iat:s,exp:s+r},a=pt([dt((c={header:n,payload:o}).header),dt(c.payload)].join("."),"utf8");var c;return function(e){return[dt(e.header),dt(e.payload),(t=e.signature,ft(t,k))].join(".");var t}({header:n,payload:o,signature:M.Xx(i.secretKey,a)})}(r,e,i,t)},this.generateSharedKey=(e,t,r)=>{this.isInitialized();const i=function(e,t){const r=vt.gi(pt(e,jt),pt(t,jt));return ft(new bt.t(mt.mE,r).expand(32),jt)}(this.getPrivateKey(e),t);return this.setSymKey(i,r)},this.setSymKey=async(e,t)=>{this.isInitialized();const r=t||function(e){return ft((0,mt.vp)(pt(e,jt)),jt)}(e);return await this.keychain.set(r,e),r},this.deleteKeyPair=async e=>{this.isInitialized(),await this.keychain.del(e)},this.deleteSymKey=async e=>{this.isInitialized(),await this.keychain.del(e)},this.encode=async(e,t,r)=>{this.isInitialized();const i=Vt(r),s=C(t);if(Kt(i)){const t=i.senderPublicKey,r=i.receiverPublicKey;e=await this.generateSharedKey(t,r)}const n=this.getSymKey(e),{type:o,senderPublicKey:a}=i;return function(e){const t=function(e){return pt(`${e}`,Mt)}(typeof e.type<"u"?e.type:0);if(1===$t(t)&&typeof e.senderPublicKey>"u")throw new Error("Missing sender public key for type 1 envelope");const r=typeof e.senderPublicKey<"u"?pt(e.senderPublicKey,jt):void 0,i=typeof e.iv<"u"?pt(e.iv,jt):(0,j.randomBytes)(12);return function(e){if(1===$t(e.type)){if(typeof e.senderPublicKey>"u")throw new Error("Missing sender public key for type 1 envelope");return ft(V([e.type,e.senderPublicKey,e.iv,e.sealed]),Dt)}return ft(V([e.type,e.iv,e.sealed]),Dt)}({type:t,sealed:new wt.OK(pt(e.symKey,jt)).seal(i,pt(e.message,kt)),iv:i,senderPublicKey:r})}({type:o,symKey:n,message:s,senderPublicKey:a})},this.decode=async(e,t,r)=>{this.isInitialized();const i=function(e,t){const r=qt(e);return Vt({type:$t(r.type),senderPublicKey:typeof r.senderPublicKey<"u"?ft(r.senderPublicKey,jt):void 0,receiverPublicKey:t?.receiverPublicKey})}(t,r);if(Kt(i)){const t=i.receiverPublicKey,r=i.senderPublicKey;e=await this.generateSharedKey(t,r)}const s=function(e){const t=new wt.OK(pt(e.symKey,jt)),{sealed:r,iv:i}=qt(e.encoded),s=t.open(i,r);if(null===s)throw new Error("Failed to decrypt");return ft(s,kt)}({symKey:this.getSymKey(e),encoded:t});return T(s)},this.core=e,this.logger=(0,_.generateChildLogger)(t,this.name),this.keychain=r||new js(this.core,this.logger)}get context(){return(0,_.getLoggerContext)(this.logger)}getPayloadType(e){return $t(qt(e).type)}async setPrivateKey(e,t){return await this.keychain.set(e,t),e}getPrivateKey(e){return this.keychain.get(e)}async getClientSeed(){let e="";try{e=this.keychain.get(ys)}catch{e=Bt(),await this.keychain.set(ys,e)}return function(e,t="utf8"){const r=fs[t];if(!r)throw new Error(`Unsupported encoding "${t}"`);return"utf8"!==t&&"utf-8"!==t||null==globalThis.Buffer||null==globalThis.Buffer.from?r.decoder.decode(`${r.prefix}${e}`):globalThis.Buffer.from(e,"utf8")}(e,"base16")}getSymKey(e){return this.keychain.get(e)}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}class ks extends R{constructor(e,t){super(e,t),this.logger=e,this.core=t,this.messages=new Map,this.name="messages",this.version="0.3",this.initialized=!1,this.storagePrefix=ds,this.init=async()=>{if(!this.initialized){this.logger.trace("Initialized");try{const e=await this.getRelayerMessages();typeof e<"u"&&(this.messages=e),this.logger.debug(`Successfully Restored records for ${this.name}`),this.logger.trace({type:"method",method:"restore",size:this.messages.size})}catch(e){this.logger.debug(`Failed to Restore records for ${this.name}`),this.logger.error(e)}finally{this.initialized=!0}}},this.set=async(e,t)=>{this.isInitialized();const r=zt(t);let i=this.messages.get(e);return typeof i>"u"&&(i={}),typeof i[r]<"u"||(i[r]=t,this.messages.set(e,i),await this.persist()),r},this.get=e=>{this.isInitialized();let t=this.messages.get(e);return typeof t>"u"&&(t={}),t},this.has=(e,t)=>(this.isInitialized(),typeof this.get(e)[zt(t)]<"u"),this.del=async e=>{this.isInitialized(),this.messages.delete(e),await this.persist()},this.logger=(0,_.generateChildLogger)(e,this.name),this.core=t}get context(){return(0,_.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}async setRelayerMessages(e){await this.core.storage.setItem(this.storageKey,rr(e))}async getRelayerMessages(){const e=await this.core.storage.getItem(this.storageKey);return typeof e<"u"?ir(e):void 0}async persist(){await this.setRelayerMessages(this.messages)}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}class Bs extends O{constructor(e,t){super(e,t),this.relayer=e,this.logger=t,this.events=new w.EventEmitter,this.name="publisher",this.queue=new Map,this.publishTimeout=1e4,this.publish=async(e,t,r)=>{this.logger.debug("Publishing Payload"),this.logger.trace({type:"method",method:"publish",params:{topic:e,message:t,opts:r}});try{const i=r?.ttl||bs,s=lr(r),n=r?.prompt||!1,o=r?.tag||0,a={topic:e,message:t,opts:{ttl:i,relay:s,prompt:n,tag:o}},c=zt(t);this.queue.set(c,a);try{await await ar(this.rpcPublish(e,t,i,s,n,o),this.publishTimeout)}catch{return this.logger.debug("Publishing Payload stalled"),void this.relayer.events.emit(Es)}this.onPublish(c,a),this.logger.debug("Successfully Published Payload"),this.logger.trace({type:"method",method:"publish",params:{topic:e,message:t,opts:r}})}catch(e){throw this.logger.debug("Failed to Publish Payload"),this.logger.error(e),e}},this.on=(e,t)=>{this.events.on(e,t)},this.once=(e,t)=>{this.events.once(e,t)},this.off=(e,t)=>{this.events.off(e,t)},this.removeListener=(e,t)=>{this.events.removeListener(e,t)},this.relayer=e,this.logger=(0,_.generateChildLogger)(t,this.name),this.registerEventListeners()}get context(){return(0,_.getLoggerContext)(this.logger)}rpcPublish(e,t,r,i,s,n){var o,a,c,h;const u={method:fr(i.protocol).publish,params:{topic:e,message:t,ttl:r,prompt:s,tag:n}};return Or(null==(o=u.params)?void 0:o.prompt)&&(null==(a=u.params)||delete a.prompt),Or(null==(c=u.params)?void 0:c.tag)&&(null==(h=u.params)||delete h.tag),this.logger.debug("Outgoing Relay Payload"),this.logger.trace({type:"message",direction:"outgoing",request:u}),this.relayer.provider.request(u)}onPublish(e,t){this.queue.delete(e)}checkQueue(){this.queue.forEach((async e=>{const{topic:t,message:r,opts:i}=e;await this.publish(t,r,i)}))}registerEventListeners(){this.relayer.core.heartbeat.on(v.HEARTBEAT_EVENTS.pulse,(()=>{this.checkQueue()}))}}class zs{constructor(){this.map=new Map,this.set=(e,t)=>{const r=this.get(e);this.exists(e,t)||this.map.set(e,[...r,t])},this.get=e=>this.map.get(e)||[],this.exists=(e,t)=>this.get(e).includes(t),this.delete=(e,t)=>{if(typeof t>"u")return void this.map.delete(e);if(!this.map.has(e))return;const r=this.get(e);if(!this.exists(e,t))return;const i=r.filter((e=>e!==t));i.length?this.map.set(e,i):this.map.delete(e)},this.clear=()=>{this.map.clear()}}get topics(){return Array.from(this.map.keys())}}var $s=Object.defineProperty,qs=Object.defineProperties,Vs=Object.getOwnPropertyDescriptors,Ks=Object.getOwnPropertySymbols,Js=Object.prototype.hasOwnProperty,Hs=Object.prototype.propertyIsEnumerable,Ws=(e,t,r)=>t in e?$s(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Fs=(e,t)=>{for(var r in t||(t={}))Js.call(t,r)&&Ws(e,r,t[r]);if(Ks)for(var r of Ks(t))Hs.call(t,r)&&Ws(e,r,t[r]);return e},Gs=(e,t)=>qs(e,Vs(t));class Ys extends x{constructor(e,t){super(e,t),this.relayer=e,this.logger=t,this.subscriptions=new Map,this.topicMap=new zs,this.events=new w.EventEmitter,this.name="subscription",this.version="0.3",this.pending=new Map,this.cached=[],this.initialized=!1,this.pendingSubscriptionWatchLabel="pending_sub_watch_label",this.pendingSubInterval=20,this.storagePrefix=ds,this.subscribeTimeout=1e4,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restart(),this.registerEventListeners(),this.onEnable())},this.subscribe=async(e,t)=>{this.isInitialized(),this.logger.debug("Subscribing Topic"),this.logger.trace({type:"method",method:"subscribe",params:{topic:e,opts:t}});try{const r=lr(t),i={topic:e,relay:r};this.pending.set(e,i);const s=await this.rpcSubscribe(e,r);return this.onSubscribe(s,i),this.logger.debug("Successfully Subscribed Topic"),this.logger.trace({type:"method",method:"subscribe",params:{topic:e,opts:t}}),s}catch(e){throw this.logger.debug("Failed to Subscribe Topic"),this.logger.error(e),e}},this.unsubscribe=async(e,t)=>{this.isInitialized(),typeof t?.id<"u"?await this.unsubscribeById(e,t.id,t):await this.unsubscribeByTopic(e,t)},this.isSubscribed=async e=>!!this.topics.includes(e)||await new Promise(((t,r)=>{const i=new D.Watch;i.start(this.pendingSubscriptionWatchLabel);const s=setInterval((()=>{!this.pending.has(e)&&this.topics.includes(e)&&(clearInterval(s),i.stop(this.pendingSubscriptionWatchLabel),t(!0)),i.elapsed(this.pendingSubscriptionWatchLabel)>=Ns&&(clearInterval(s),i.stop(this.pendingSubscriptionWatchLabel),r(!1))}),this.pendingSubInterval)})),this.on=(e,t)=>{this.events.on(e,t)},this.once=(e,t)=>{this.events.once(e,t)},this.off=(e,t)=>{this.events.off(e,t)},this.removeListener=(e,t)=>{this.events.removeListener(e,t)},this.restart=async()=>{await this.restore(),await this.reset()},this.relayer=e,this.logger=(0,_.generateChildLogger)(t,this.name)}get context(){return(0,_.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get length(){return this.subscriptions.size}get ids(){return Array.from(this.subscriptions.keys())}get values(){return Array.from(this.subscriptions.values())}get topics(){return this.topicMap.topics}hasSubscription(e,t){let r=!1;try{r=this.getSubscription(e).topic===t}catch{}return r}onEnable(){this.cached=[],this.initialized=!0}onDisable(){this.cached=this.values,this.subscriptions.clear(),this.topicMap.clear(),this.initialized=!1}async unsubscribeByTopic(e,t){const r=this.topicMap.get(e);await Promise.all(r.map((async r=>await this.unsubscribeById(e,r,t))))}async unsubscribeById(e,t,r){this.logger.debug("Unsubscribing Topic"),this.logger.trace({type:"method",method:"unsubscribe",params:{topic:e,id:t,opts:r}});try{const i=lr(r);await this.rpcUnsubscribe(e,t,i);const s=Sr("USER_DISCONNECTED",`${this.name}, ${e}`);await this.onUnsubscribe(e,t,s),this.logger.debug("Successfully Unsubscribed Topic"),this.logger.trace({type:"method",method:"unsubscribe",params:{topic:e,id:t,opts:r}})}catch(e){throw this.logger.debug("Failed to Unsubscribe Topic"),this.logger.error(e),e}}async rpcSubscribe(e,t){const r={method:fr(t.protocol).subscribe,params:{topic:e}};let i;this.logger.debug("Outgoing Relay Payload"),this.logger.trace({type:"payload",direction:"outgoing",request:r});try{i=await await ar(this.relayer.provider.request(r),this.subscribeTimeout)}catch{this.logger.debug("Outgoing Relay Payload stalled"),this.relayer.events.emit(Es)}return i}rpcUnsubscribe(e,t,r){const i={method:fr(r.protocol).unsubscribe,params:{topic:e,id:t}};return this.logger.debug("Outgoing Relay Payload"),this.logger.trace({type:"payload",direction:"outgoing",request:i}),this.relayer.provider.request(i)}onSubscribe(e,t){this.setSubscription(e,Gs(Fs({},t),{id:e})),this.pending.delete(t.topic)}onResubscribe(e,t){this.addSubscription(e,Gs(Fs({},t),{id:e})),this.pending.delete(t.topic)}async onUnsubscribe(e,t,r){this.events.removeAllListeners(t),this.hasSubscription(t,e)&&this.deleteSubscription(t,r),await this.relayer.messages.del(e)}async setRelayerSubscriptions(e){await this.relayer.core.storage.setItem(this.storageKey,e)}async getRelayerSubscriptions(){return await this.relayer.core.storage.getItem(this.storageKey)}setSubscription(e,t){this.subscriptions.has(e)||(this.logger.debug("Setting subscription"),this.logger.trace({type:"method",method:"setSubscription",id:e,subscription:t}),this.addSubscription(e,t))}addSubscription(e,t){this.subscriptions.set(e,Fs({},t)),this.topicMap.set(t.topic,e),this.events.emit(Rs,t)}getSubscription(e){this.logger.debug("Getting subscription"),this.logger.trace({type:"method",method:"getSubscription",id:e});const t=this.subscriptions.get(e);if(!t){const{message:t}=Er("NO_MATCHING_KEY",`${this.name}: ${e}`);throw new Error(t)}return t}deleteSubscription(e,t){this.logger.debug("Deleting subscription"),this.logger.trace({type:"method",method:"deleteSubscription",id:e,reason:t});const r=this.getSubscription(e);this.subscriptions.delete(e),this.topicMap.delete(r.topic,e),this.events.emit(Os,Gs(Fs({},r),{reason:t}))}async persist(){await this.setRelayerSubscriptions(this.values),this.events.emit("subscription_sync")}async reset(){this.cached.length&&await Promise.all(this.cached.map((async e=>await this.resubscribe(e)))),this.events.emit(As)}async restore(){try{const e=await this.getRelayerSubscriptions();if(typeof e>"u"||!e.length)return;if(this.subscriptions.size){const{message:e}=Er("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(e),new Error(e)}this.cached=e,this.logger.debug(`Successfully Restored subscriptions for ${this.name}`),this.logger.trace({type:"method",method:"restore",subscriptions:this.values})}catch(e){this.logger.debug(`Failed to Restore subscriptions for ${this.name}`),this.logger.error(e)}}async resubscribe(e){if(!this.ids.includes(e.id)){const{topic:t,relay:r}=e,i={topic:t,relay:r};this.pending.set(i.topic,i);const s=await this.rpcSubscribe(i.topic,i.relay);this.onResubscribe(s,i)}}async onConnect(){await this.restart(),this.onEnable()}onDisconnect(){this.onDisable()}checkPending(){this.relayer.transportExplicitlyClosed||this.pending.forEach((async e=>{const t=await this.rpcSubscribe(e.topic,e.relay);this.onSubscribe(t,e)}))}registerEventListeners(){this.relayer.core.heartbeat.on(v.HEARTBEAT_EVENTS.pulse,(()=>{this.checkPending()})),this.relayer.on(vs,(async()=>{await this.onConnect()})),this.relayer.on(_s,(()=>{this.onDisconnect()})),this.events.on(Rs,(async e=>{const t=Rs;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),await this.persist()})),this.events.on(Os,(async e=>{const t=Os;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),await this.persist()}))}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}var Xs=Object.defineProperty,Zs=Object.getOwnPropertySymbols,Qs=Object.prototype.hasOwnProperty,en=Object.prototype.propertyIsEnumerable,tn=(e,t,r)=>t in e?Xs(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;class rn extends A{constructor(e){super(e),this.protocol="wc",this.version=2,this.events=new w.EventEmitter,this.name="relayer",this.transportExplicitlyClosed=!1,this.initialized=!1,this.core=e.core,this.logger=typeof e.logger<"u"&&"string"!=typeof e.logger?(0,_.generateChildLogger)(e.logger,this.name):y()((0,_.getDefaultLoggerOptions)({level:e.logger||"error"})),this.messages=new ks(this.logger,e.core),this.subscriber=new Ys(this,this.logger),this.publisher=new Bs(this,this.logger),this.relayUrl=e?.relayUrl||"wss://relay.walletconnect.com",this.projectId=e.projectId,this.provider={}}async init(){this.logger.trace("Initialized"),this.provider=await this.createProvider(),await Promise.all([this.messages.init(),this.transportOpen(),this.subscriber.init()]),this.registerEventListeners(),this.initialized=!0}get context(){return(0,_.getLoggerContext)(this.logger)}get connected(){return this.provider.connection.connected}get connecting(){return this.provider.connection.connecting}async publish(e,t,r){this.isInitialized(),await this.publisher.publish(e,t,r),await this.recordMessageEvent({topic:e,message:t})}async subscribe(e,t){this.isInitialized();let r="";return await Promise.all([new Promise((t=>{this.subscriber.once(Rs,(r=>{r.topic===e&&t()}))})),new Promise((async i=>{r=await this.subscriber.subscribe(e,t),i()}))]),r}async unsubscribe(e,t){this.isInitialized(),await this.subscriber.unsubscribe(e,t)}on(e,t){this.events.on(e,t)}once(e,t){this.events.once(e,t)}off(e,t){this.events.off(e,t)}removeListener(e,t){this.events.removeListener(e,t)}async transportClose(){this.transportExplicitlyClosed=!0,this.connected&&await this.provider.disconnect(),this.events.emit(Ss)}async transportOpen(e){this.relayUrl=e||this.relayUrl,this.transportExplicitlyClosed=!1;try{await Promise.all([new Promise((e=>{this.initialized||e(),this.subscriber.once(As,(()=>{e()}))})),await Promise.race([this.provider.connect(),new Promise(((e,t)=>this.once(Ss,(()=>{t()}))))])])}catch(e){const t=e;if(!/socket hang up/i.test(t.message))throw new Error(t.message);this.logger.error(t),this.events.emit(Ss)}}async restartTransport(e){await this.transportClose(),await new Promise((e=>setTimeout(e,Is))),await this.transportOpen(e)}async createProvider(){const e=await this.core.crypto.signJWT(this.relayUrl);return new qr(new class{constructor(e){if(this.url=e,this.events=new w.EventEmitter,this.registering=!1,!(0,$r.isWsUrl)(e))throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);this.url=e}get connected(){return void 0!==this.socket}get connecting(){return this.registering}on(e,t){this.events.on(e,t)}once(e,t){this.events.once(e,t)}off(e,t){this.events.off(e,t)}removeListener(e,t){this.events.removeListener(e,t)}async open(e=this.url){await this.register(e)}async close(){if(void 0===this.socket)throw new Error("Connection already closed");this.socket.close(),this.onClose()}async send(e,t){void 0===this.socket&&(this.socket=await this.register());try{this.socket.send(C(e))}catch(t){this.onError(e.id,t)}}register(e=this.url){if(!(0,$r.isWsUrl)(e))throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);if(this.registering){const e=this.events.getMaxListeners();return(this.events.listenerCount("register_error")>=e||this.events.listenerCount("open")>=e)&&this.events.setMaxListeners(e+1),new Promise(((e,t)=>{this.events.once("register_error",(e=>{this.resetMaxListeners(),t(e)})),this.events.once("open",(()=>{if(this.resetMaxListeners(),void 0===this.socket)return t(new Error("WebSocket connection is missing or invalid"));e(this.socket)}))}))}return this.url=e,this.registering=!0,new Promise(((t,r)=>{const i=(0,$r.isReactNative)()?void 0:{rejectUnauthorized:!(0,$r.isLocalhostUrl)(e)},s=new Vr(e,[],i);"undefined"!=typeof window?s.onerror=e=>{const t=e;r(this.emitError(t.error))}:s.on("error",(e=>{r(this.emitError(e))})),s.onopen=()=>{this.onOpen(s),t(s)}}))}onOpen(e){e.onmessage=e=>this.onPayload(e),e.onclose=()=>this.onClose(),this.socket=e,this.registering=!1,this.events.emit("open")}onClose(){this.socket=void 0,this.registering=!1,this.events.emit("close")}onPayload(e){if(void 0===e.data)return;const t="string"==typeof e.data?T(e.data):e.data;this.events.emit("payload",t)}onError(e,t){const r=this.parseError(t),i=r.message||r.toString(),s=(0,$r.formatJsonRpcError)(e,i);this.events.emit("payload",s)}parseError(e,t=this.url){return(0,$r.parseConnectionError)(e,t,"WS")}resetMaxListeners(){this.events.getMaxListeners()>10&&this.events.setMaxListeners(10)}emitError(e){const t=this.parseError(new Error((null==e?void 0:e.message)||`WebSocket connection failed for URL: ${this.url}`));return this.events.emit("register_error",t),t}}(function({protocol:e,version:t,relayUrl:r,sdkVersion:i,auth:s,projectId:n}){const o=r.split("?"),a={auth:s,ua:er(e,t,i),projectId:n},c=function(e,t){let r=Tt.parse(e);return r=Yt(Yt({},r),t),Tt.stringify(r)}(o[1]||"",a);return o[0]+"?"+c}({sdkVersion:"2.1.3",protocol:this.protocol,version:this.version,relayUrl:this.relayUrl,projectId:this.projectId,auth:e})))}async recordMessageEvent(e){const{topic:t,message:r}=e;await this.messages.set(t,r)}async shouldIgnoreMessageEvent(e){const{topic:t,message:r}=e;return!await this.subscriber.isSubscribed(t)||this.messages.has(t,r)}async onProviderPayload(e){if(this.logger.debug("Incoming Relay Payload"),this.logger.trace({type:"payload",direction:"incoming",payload:e}),(0,$r.isJsonRpcRequest)(e)){if(!e.method.endsWith("_subscription"))return;const t=e.params,{topic:r,message:i}=t.data,s={topic:r,message:i};this.logger.debug("Emitting Relayer Payload"),this.logger.trace(((e,t)=>{for(var r in t||(t={}))Qs.call(t,r)&&tn(e,r,t[r]);if(Zs)for(var r of Zs(t))en.call(t,r)&&tn(e,r,t[r]);return e})({type:"event",event:t.id},s)),this.events.emit(t.id,s),await this.acknowledgePayload(e),await this.onMessageEvent(s)}}async onMessageEvent(e){await this.shouldIgnoreMessageEvent(e)||(this.events.emit(ms,e),await this.recordMessageEvent(e))}async acknowledgePayload(e){const t=(0,$r.formatJsonRpcResult)(e.id,!0);await this.provider.connection.send(t)}registerEventListeners(){this.provider.on("payload",(e=>this.onProviderPayload(e))),this.provider.on("connect",(()=>{this.events.emit(vs)})),this.provider.on("disconnect",(()=>{this.events.emit(_s),this.attemptToReconnect()})),this.provider.on("error",(e=>this.events.emit("relayer_error",e))),this.events.on(Es,(async()=>{await this.restartTransport()}))}attemptToReconnect(){this.transportExplicitlyClosed||setTimeout((async()=>{await this.transportOpen()}),(0,D.toMiliseconds)(Is))}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}var sn=Object.defineProperty,nn=Object.getOwnPropertySymbols,on=Object.prototype.hasOwnProperty,an=Object.prototype.propertyIsEnumerable,cn=(e,t,r)=>t in e?sn(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,hn=(e,t)=>{for(var r in t||(t={}))on.call(t,r)&&cn(e,r,t[r]);if(nn)for(var r of nn(t))an.call(t,r)&&cn(e,r,t[r]);return e};class un extends N{constructor(e,t,r,i=ds,s){super(e,t,r,i),this.core=e,this.logger=t,this.name=r,this.map=new Map,this.version="0.3",this.cached=[],this.initialized=!1,this.storagePrefix=ds,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restore(),this.cached.forEach((e=>{!function(e){var t;return null==(t=e?.proposer)?void 0:t.publicKey}(e)?function(e){return e?.topic}(e)?this.map.set(e.topic,e):this.getKey&&null!==e&&!Or(e)&&this.map.set(this.getKey(e),e):this.map.set(e.id,e)})),this.cached=[],this.initialized=!0)},this.set=async(e,t)=>{this.isInitialized(),this.map.has(e)?await this.update(e,t):(this.logger.debug("Setting value"),this.logger.trace({type:"method",method:"set",key:e,value:t}),this.map.set(e,t),await this.persist())},this.get=e=>(this.isInitialized(),this.logger.debug("Getting value"),this.logger.trace({type:"method",method:"get",key:e}),this.getData(e)),this.getAll=e=>(this.isInitialized(),e?this.values.filter((t=>Object.keys(e).every((r=>Jr()(t[r],e[r]))))):this.values),this.update=async(e,t)=>{this.isInitialized(),this.logger.debug("Updating value"),this.logger.trace({type:"method",method:"update",key:e,update:t});const r=hn(hn({},this.getData(e)),t);this.map.set(e,r),await this.persist()},this.delete=async(e,t)=>{this.isInitialized(),this.map.has(e)&&(this.logger.debug("Deleting value"),this.logger.trace({type:"method",method:"delete",key:e,reason:t}),this.map.delete(e),await this.persist())},this.logger=(0,_.generateChildLogger)(t,this.name),this.storagePrefix=i,this.getKey=s}get context(){return(0,_.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get length(){return this.map.size}get keys(){return Array.from(this.map.keys())}get values(){return Array.from(this.map.values())}async setDataStore(e){await this.core.storage.setItem(this.storageKey,e)}async getDataStore(){return await this.core.storage.getItem(this.storageKey)}getData(e){const t=this.map.get(e);if(!t){const{message:t}=Er("NO_MATCHING_KEY",`${this.name}: ${e}`);throw this.logger.error(t),new Error(t)}return t}async persist(){await this.setDataStore(this.values)}async restore(){try{const e=await this.getDataStore();if(typeof e>"u"||!e.length)return;if(this.map.size){const{message:e}=Er("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(e),new Error(e)}this.cached=e,this.logger.debug(`Successfully Restored value for ${this.name}`),this.logger.trace({type:"method",method:"restore",value:this.values})}catch(e){this.logger.debug(`Failed to Restore value for ${this.name}`),this.logger.error(e)}}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}class ln{constructor(e,t){this.core=e,this.logger=t,this.name="pairing",this.version="0.3",this.events=new(b()),this.initialized=!1,this.storagePrefix=ds,this.ignoredPayloadTypes=[1],this.registeredMethods=[],this.init=async()=>{this.initialized||(await this.pairings.init(),await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.initialized=!0,this.logger.trace("Initialized"))},this.register=({methods:e})=>{this.isInitialized(),this.registeredMethods=[...new Set([...this.registeredMethods,...e])]},this.create=async()=>{this.isInitialized();const e=Bt(),t=await this.core.crypto.setSymKey(e),r=sr(D.FIVE_MINUTES),i={protocol:"irn"},s={topic:t,expiry:r,relay:i,active:!1},n=function(e){return`${e.protocol}:${e.topic}@${e.version}?`+Tt.stringify(((e,t)=>{for(var r in t||(t={}))gr.call(t,r)&&wr(e,r,t[r]);if(dr)for(var r of dr(t))yr.call(t,r)&&wr(e,r,t[r]);return e})({symKey:e.symKey},function(e,t="-"){const r={};return Object.keys(e).forEach((i=>{const s="relay"+t+i;e[i]&&(r[s]=e[i])})),r}(e.relay)))}({protocol:this.core.protocol,version:this.core.version,topic:t,symKey:e,relay:i});return await this.pairings.set(t,s),await this.core.relayer.subscribe(t),this.core.expirer.set(t,r),{topic:t,uri:n}},this.pair=async e=>{this.isInitialized(),this.isValidPair(e);const{topic:t,symKey:r,relay:i}=function(e){const t=e.indexOf(":"),r=-1!==e.indexOf("?")?e.indexOf("?"):void 0,i=e.substring(0,t),s=e.substring(t+1,r).split("@"),n=typeof r<"u"?e.substring(r):"",o=Tt.parse(n);return{protocol:i,topic:s[0],version:parseInt(s[1],10),symKey:o.symKey,relay:br(o)}}(e.uri),s=sr(D.FIVE_MINUTES),n={topic:t,relay:i,expiry:s,active:!1};return await this.pairings.set(t,n),await this.core.crypto.setSymKey(r,t),await this.core.relayer.subscribe(t,{relay:i}),this.core.expirer.set(t,s),e.activatePairing&&await this.activate({topic:t}),n},this.activate=async({topic:e})=>{this.isInitialized();const t=sr(D.THIRTY_DAYS);await this.pairings.update(e,{active:!0,expiry:t}),this.core.expirer.set(e,t)},this.ping=async e=>{this.isInitialized(),await this.isValidPing(e);const{topic:t}=e;if(this.pairings.keys.includes(t)){const e=await this.sendRequest(t,"wc_pairingPing",{}),{done:r,resolve:i,reject:s}=or();this.events.once(ur("pairing_ping",e),(({error:e})=>{e?s(e):i()})),await r()}},this.updateExpiry=async({topic:e,expiry:t})=>{this.isInitialized(),await this.pairings.update(e,{expiry:t})},this.updateMetadata=async({topic:e,metadata:t})=>{this.isInitialized(),await this.pairings.update(e,{peerMetadata:t})},this.getPairings=()=>(this.isInitialized(),this.pairings.values),this.disconnect=async e=>{this.isInitialized(),await this.isValidDisconnect(e);const{topic:t}=e;this.pairings.keys.includes(t)&&(await this.sendRequest(t,"wc_pairingDelete",Sr("USER_DISCONNECTED")),await this.deletePairing(t))},this.sendRequest=async(e,t,r)=>{const i=(0,$r.formatJsonRpcRequest)(t,r),s=await this.core.crypto.encode(e,i),n=xs[t].req;return this.core.history.set(e,i),await this.core.relayer.publish(e,s,n),i.id},this.sendResult=async(e,t,r)=>{const i=(0,$r.formatJsonRpcResult)(e,r),s=await this.core.crypto.encode(t,i),n=await this.core.history.get(t,e),o=xs[n.request.method].res;await this.core.relayer.publish(t,s,o),await this.core.history.resolve(i)},this.sendError=async(e,t,r)=>{const i=(0,$r.formatJsonRpcError)(e,r),s=await this.core.crypto.encode(t,i),n=await this.core.history.get(t,e),o=xs[n.request.method]?xs[n.request.method].res:xs.unregistered_method.res;await this.core.relayer.publish(t,s,o),await this.core.history.resolve(i)},this.deletePairing=async(e,t)=>{await this.core.relayer.unsubscribe(e),await Promise.all([this.pairings.delete(e,Sr("USER_DISCONNECTED")),this.core.crypto.deleteSymKey(e),t?Promise.resolve():this.core.expirer.del(e)])},this.cleanup=async()=>{const e=this.pairings.getAll().filter((e=>nr(e.expiry)));await Promise.all(e.map((e=>this.deletePairing(e.topic))))},this.onRelayEventRequest=e=>{const{topic:t,payload:r}=e;switch(r.method){case"wc_pairingPing":return this.onPairingPingRequest(t,r);case"wc_pairingDelete":return this.onPairingDeleteRequest(t,r);default:return this.onUnknownRpcMethodRequest(t,r)}},this.onRelayEventResponse=async e=>{const{topic:t,payload:r}=e,i=(await this.core.history.get(t,r.id)).request.method;return"wc_pairingPing"===i?this.onPairingPingResponse(t,r):this.onUnknownRpcMethodResponse(i)},this.onPairingPingRequest=async(e,t)=>{const{id:r}=t;try{this.isValidPing({topic:e}),await this.sendResult(r,e,!0),this.events.emit("pairing_ping",{id:r,topic:e})}catch(t){await this.sendError(r,e,t),this.logger.error(t)}},this.onPairingPingResponse=(e,t)=>{const{id:r}=t;setTimeout((()=>{(0,$r.isJsonRpcResult)(t)?this.events.emit(ur("pairing_ping",r),{}):(0,$r.isJsonRpcError)(t)&&this.events.emit(ur("pairing_ping",r),{error:t.error})}),500)},this.onPairingDeleteRequest=async(e,t)=>{const{id:r}=t;try{this.isValidDisconnect({topic:e}),await this.sendResult(r,e,!0),await this.deletePairing(e),this.events.emit("pairing_delete",{id:r,topic:e})}catch(t){await this.sendError(r,e,t),this.logger.error(t)}},this.onUnknownRpcMethodRequest=async(e,t)=>{const{id:r,method:i}=t;try{if(this.registeredMethods.includes(i))return;const t=Sr("WC_METHOD_UNSUPPORTED",i);await this.sendError(r,e,t),this.logger.error(t)}catch(t){await this.sendError(r,e,t),this.logger.error(t)}},this.onUnknownRpcMethodResponse=e=>{this.registeredMethods.includes(e)||this.logger.error(Sr("WC_METHOD_UNSUPPORTED",e))},this.isValidPair=e=>{if(!kr(e)){const{message:t}=Er("MISSING_OR_INVALID",`pair() params: ${e}`);throw new Error(t)}if(!function(e){if(Ar(e,!1))try{return typeof new URL(e)<"u"}catch{return!1}return!1}(e.uri)){const{message:t}=Er("MISSING_OR_INVALID",`pair() uri: ${e.uri}`);throw new Error(t)}},this.isValidPing=async e=>{if(!kr(e)){const{message:t}=Er("MISSING_OR_INVALID",`ping() params: ${e}`);throw new Error(t)}const{topic:t}=e;await this.isValidPairingTopic(t)},this.isValidDisconnect=async e=>{if(!kr(e)){const{message:t}=Er("MISSING_OR_INVALID",`disconnect() params: ${e}`);throw new Error(t)}const{topic:t}=e;await this.isValidPairingTopic(t)},this.isValidPairingTopic=async e=>{if(!Ar(e,!1)){const{message:t}=Er("MISSING_OR_INVALID",`pairing topic should be a string: ${e}`);throw new Error(t)}if(!this.pairings.keys.includes(e)){const{message:t}=Er("NO_MATCHING_KEY",`pairing topic doesn't exist: ${e}`);throw new Error(t)}if(nr(this.pairings.get(e).expiry)){await this.deletePairing(e);const{message:t}=Er("EXPIRED",`pairing topic: ${e}`);throw new Error(t)}},this.core=e,this.logger=(0,_.generateChildLogger)(t,this.name),this.pairings=new un(this.core,this.logger,this.name,this.storagePrefix)}get context(){return(0,_.getLoggerContext)(this.logger)}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}registerRelayerEvents(){this.core.relayer.on(ms,(async e=>{const{topic:t,message:r}=e;if(this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(r)))return;const i=await this.core.crypto.decode(t,r);(0,$r.isJsonRpcRequest)(i)?(this.core.history.set(t,i),this.onRelayEventRequest({topic:t,payload:i})):(0,$r.isJsonRpcResponse)(i)&&(await this.core.history.resolve(i),this.onRelayEventResponse({topic:t,payload:i}))}))}registerExpirerEvents(){this.core.expirer.on(Ms,(async e=>{const{topic:t}=hr(e.target);t&&this.pairings.keys.includes(t)&&(await this.deletePairing(t,!0),this.events.emit("pairing_expire",{topic:t}))}))}}class fn extends I{constructor(e,t){super(e,t),this.core=e,this.logger=t,this.records=new Map,this.events=new w.EventEmitter,this.name="history",this.version="0.3",this.cached=[],this.initialized=!1,this.storagePrefix=ds,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restore(),this.cached.forEach((e=>this.records.set(e.id,e))),this.cached=[],this.registerEventListeners(),this.initialized=!0)},this.set=(e,t,r)=>{if(this.isInitialized(),this.logger.debug("Setting JSON-RPC request history record"),this.logger.trace({type:"method",method:"set",topic:e,request:t,chainId:r}),this.records.has(t.id))return;const i={id:t.id,topic:e,request:{method:t.method,params:t.params||null},chainId:r};this.records.set(i.id,i),this.events.emit(Ps,i)},this.resolve=async e=>{if(this.isInitialized(),this.logger.debug("Updating JSON-RPC response history record"),this.logger.trace({type:"method",method:"update",response:e}),!this.records.has(e.id))return;const t=await this.getRecord(e.id);typeof t.response>"u"&&(t.response=(0,$r.isJsonRpcError)(e)?{error:e.error}:{result:e.result},this.records.set(t.id,t),this.events.emit(Us,t))},this.get=async(e,t)=>(this.isInitialized(),this.logger.debug("Getting record"),this.logger.trace({type:"method",method:"get",topic:e,id:t}),await this.getRecord(t)),this.delete=(e,t)=>{this.isInitialized(),this.logger.debug("Deleting record"),this.logger.trace({type:"method",method:"delete",id:t}),this.values.forEach((r=>{if(r.topic===e){if(typeof t<"u"&&r.id!==t)return;this.records.delete(r.id),this.events.emit(Ls,r)}}))},this.exists=async(e,t)=>(this.isInitialized(),!!this.records.has(t)&&(await this.getRecord(t)).topic===e),this.on=(e,t)=>{this.events.on(e,t)},this.once=(e,t)=>{this.events.once(e,t)},this.off=(e,t)=>{this.events.off(e,t)},this.removeListener=(e,t)=>{this.events.removeListener(e,t)},this.logger=(0,_.generateChildLogger)(t,this.name)}get context(){return(0,_.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get size(){return this.records.size}get keys(){return Array.from(this.records.keys())}get values(){return Array.from(this.records.values())}get pending(){const e=[];return this.values.forEach((t=>{if(typeof t.response<"u")return;const r={topic:t.topic,request:(0,$r.formatJsonRpcRequest)(t.request.method,t.request.params,t.id),chainId:t.chainId};return e.push(r)})),e}async setJsonRpcRecords(e){await this.core.storage.setItem(this.storageKey,e)}async getJsonRpcRecords(){return await this.core.storage.getItem(this.storageKey)}getRecord(e){this.isInitialized();const t=this.records.get(e);if(!t){const{message:t}=Er("NO_MATCHING_KEY",`${this.name}: ${e}`);throw new Error(t)}return t}async persist(){await this.setJsonRpcRecords(this.values),this.events.emit("history_sync")}async restore(){try{const e=await this.getJsonRpcRecords();if(typeof e>"u"||!e.length)return;if(this.records.size){const{message:e}=Er("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(e),new Error(e)}this.cached=e,this.logger.debug(`Successfully Restored records for ${this.name}`),this.logger.trace({type:"method",method:"restore",records:this.values})}catch(e){this.logger.debug(`Failed to Restore records for ${this.name}`),this.logger.error(e)}}registerEventListeners(){this.events.on(Ps,(e=>{const t=Ps;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,record:e}),this.persist()})),this.events.on(Us,(e=>{const t=Us;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,record:e}),this.persist()})),this.events.on(Ls,(e=>{const t=Ls;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,record:e}),this.persist()}))}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}class pn extends P{constructor(e,t){super(e,t),this.core=e,this.logger=t,this.expirations=new Map,this.events=new w.EventEmitter,this.name="expirer",this.version="0.3",this.cached=[],this.initialized=!1,this.storagePrefix=ds,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restore(),this.cached.forEach((e=>this.expirations.set(e.target,e))),this.cached=[],this.registerEventListeners(),this.initialized=!0)},this.has=e=>{try{const t=this.formatTarget(e);return typeof this.getExpiration(t)<"u"}catch{return!1}},this.set=(e,t)=>{this.isInitialized();const r=this.formatTarget(e),i={target:r,expiry:t};this.expirations.set(r,i),this.checkExpiry(r,i),this.events.emit(Ts,{target:r,expiration:i})},this.get=e=>{this.isInitialized();const t=this.formatTarget(e);return this.getExpiration(t)},this.del=e=>{this.isInitialized();const t=this.formatTarget(e);if(this.has(t)){const e=this.getExpiration(t);this.expirations.delete(t),this.events.emit(Cs,{target:t,expiration:e})}},this.on=(e,t)=>{this.events.on(e,t)},this.once=(e,t)=>{this.events.once(e,t)},this.off=(e,t)=>{this.events.off(e,t)},this.removeListener=(e,t)=>{this.events.removeListener(e,t)},this.logger=(0,_.generateChildLogger)(t,this.name)}get context(){return(0,_.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get length(){return this.expirations.size}get keys(){return Array.from(this.expirations.keys())}get values(){return Array.from(this.expirations.values())}formatTarget(e){if("string"==typeof e)return function(e){return cr("topic",e)}(e);if("number"==typeof e)return function(e){return cr("id",e)}(e);const{message:t}=Er("UNKNOWN_TYPE","Target type: "+typeof e);throw new Error(t)}async setExpirations(e){await this.core.storage.setItem(this.storageKey,e)}async getExpirations(){return await this.core.storage.getItem(this.storageKey)}async persist(){await this.setExpirations(this.values),this.events.emit("expirer_sync")}async restore(){try{const e=await this.getExpirations();if(typeof e>"u"||!e.length)return;if(this.expirations.size){const{message:e}=Er("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(e),new Error(e)}this.cached=e,this.logger.debug(`Successfully Restored expirations for ${this.name}`),this.logger.trace({type:"method",method:"restore",expirations:this.values})}catch(e){this.logger.debug(`Failed to Restore expirations for ${this.name}`),this.logger.error(e)}}getExpiration(e){const t=this.expirations.get(e);if(!t){const{message:t}=Er("NO_MATCHING_KEY",`${this.name}: ${e}`);throw this.logger.error(t),new Error(t)}return t}checkExpiry(e,t){const{expiry:r}=t;(0,D.toMiliseconds)(r)-Date.now()<=0&&this.expire(e,t)}expire(e,t){this.expirations.delete(e),this.events.emit(Ms,{target:e,expiration:t})}checkExpirations(){this.expirations.forEach(((e,t)=>this.checkExpiry(t,e)))}registerEventListeners(){this.core.heartbeat.on(v.HEARTBEAT_EVENTS.pulse,(()=>this.checkExpirations())),this.events.on(Ts,(e=>{const t=Ts;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),this.persist()})),this.events.on(Ms,(e=>{const t=Ms;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),this.persist()})),this.events.on(Cs,(e=>{const t=Cs;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),this.persist()}))}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}var dn=Object.defineProperty,gn=Object.getOwnPropertySymbols,yn=Object.prototype.hasOwnProperty,wn=Object.prototype.propertyIsEnumerable,bn=(e,t,r)=>t in e?dn(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,mn=(e,t)=>{for(var r in t||(t={}))yn.call(t,r)&&bn(e,r,t[r]);if(gn)for(var r of gn(t))wn.call(t,r)&&bn(e,r,t[r]);return e};class vn extends S{constructor(e){super(e),this.protocol="wc",this.version=2,this.name=ps,this.events=new w.EventEmitter,this.initialized=!1,this.on=(e,t)=>this.events.on(e,t),this.once=(e,t)=>this.events.once(e,t),this.off=(e,t)=>this.events.off(e,t),this.removeListener=(e,t)=>this.events.removeListener(e,t),this.projectId=e?.projectId;const t=typeof e?.logger<"u"&&"string"!=typeof e?.logger?e.logger:y()((0,_.getDefaultLoggerOptions)({level:e?.logger||"error"}));this.logger=(0,_.generateChildLogger)(t,this.name),this.heartbeat=new v.HeartBeat,this.crypto=new Ds(this,this.logger,e?.keychain),this.history=new fn(this,this.logger),this.expirer=new pn(this,this.logger),this.storage=null!=e&&e.storage?e.storage:new m.ZP(mn(mn({},gs),e?.storageOptions)),this.relayer=new rn({core:this,logger:this.logger,relayUrl:e?.relayUrl,projectId:this.projectId}),this.pairing=new ln(this,this.logger)}static async init(e){const t=new vn(e);return await t.initialize(),t}get context(){return(0,_.getLoggerContext)(this.logger)}async start(){this.initialized||await this.initialize()}async initialize(){this.logger.trace("Initialized");try{await this.crypto.init(),await this.history.init(),await this.expirer.init(),await this.relayer.init(),await this.heartbeat.init(),await this.pairing.init(),this.initialized=!0,this.logger.info("Core Initilization Success")}catch(e){throw this.logger.warn(`Core Initilization Failure at epoch ${Date.now()}`,e),this.logger.error(e.message),e}}}const _n=vn,En="client",Sn=`wc@2:${En}:`,In=En,Rn=D.SEVEN_DAYS,On={wc_sessionPropose:{req:{ttl:D.FIVE_MINUTES,prompt:!0,tag:1100},res:{ttl:D.FIVE_MINUTES,prompt:!1,tag:1101}},wc_sessionSettle:{req:{ttl:D.FIVE_MINUTES,prompt:!1,tag:1102},res:{ttl:D.FIVE_MINUTES,prompt:!1,tag:1103}},wc_sessionUpdate:{req:{ttl:D.ONE_DAY,prompt:!1,tag:1104},res:{ttl:D.ONE_DAY,prompt:!1,tag:1105}},wc_sessionExtend:{req:{ttl:D.ONE_DAY,prompt:!1,tag:1106},res:{ttl:D.ONE_DAY,prompt:!1,tag:1107}},wc_sessionRequest:{req:{ttl:D.FIVE_MINUTES,prompt:!0,tag:1108},res:{ttl:D.FIVE_MINUTES,prompt:!1,tag:1109}},wc_sessionEvent:{req:{ttl:D.FIVE_MINUTES,prompt:!0,tag:1110},res:{ttl:D.FIVE_MINUTES,prompt:!1,tag:1111}},wc_sessionDelete:{req:{ttl:D.ONE_DAY,prompt:!1,tag:1112},res:{ttl:D.ONE_DAY,prompt:!1,tag:1113}},wc_sessionPing:{req:{ttl:D.THIRTY_SECONDS,prompt:!1,tag:1114},res:{ttl:D.THIRTY_SECONDS,prompt:!1,tag:1115}}};var An=Object.defineProperty,Nn=Object.defineProperties,xn=Object.getOwnPropertyDescriptors,Pn=Object.getOwnPropertySymbols,Un=Object.prototype.hasOwnProperty,Ln=Object.prototype.propertyIsEnumerable,Tn=(e,t,r)=>t in e?An(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Cn=(e,t)=>{for(var r in t||(t={}))Un.call(t,r)&&Tn(e,r,t[r]);if(Pn)for(var r of Pn(t))Ln.call(t,r)&&Tn(e,r,t[r]);return e},Mn=(e,t)=>Nn(e,xn(t));class jn extends L{constructor(e){super(e),this.name="engine",this.events=new(b()),this.initialized=!1,this.ignoredPayloadTypes=[1],this.init=async()=>{this.initialized||(await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.client.core.pairing.register({methods:Object.keys(On)}),this.initialized=!0)},this.connect=async e=>{this.isInitialized(),await this.isValidConnect(e);const{pairingTopic:t,requiredNamespaces:r,relays:i}=e;let s,n=t,o=!1;if(n&&(o=this.client.core.pairing.pairings.get(n).active),!n||!o){const{topic:e,uri:t}=await this.client.core.pairing.create();n=e,s=t}const a=await this.client.core.crypto.generateKeyPair(),c={requiredNamespaces:r,relays:i??[{protocol:"irn"}],proposer:{publicKey:a,metadata:this.client.metadata}},{reject:h,resolve:u,done:l}=or();if(this.events.once(ur("session_connect"),(async({error:e,session:t})=>{if(e)h(e);else if(t){t.self.publicKey=a;const e=Mn(Cn({},t),{requiredNamespaces:r});await this.client.session.set(t.topic,e),await this.setExpiry(t.topic,t.expiry),n&&await this.client.core.pairing.updateMetadata({topic:n,metadata:t.peer.metadata}),u(e)}})),!n){const{message:e}=Er("NO_MATCHING_KEY",`connect() pairing topic: ${n}`);throw new Error(e)}const f=await this.sendRequest(n,"wc_sessionPropose",c),p=sr(D.FIVE_MINUTES);return await this.setProposal(f,Cn({id:f,expiry:p},c)),{uri:s,approval:l}},this.pair=async e=>(this.isInitialized(),await this.client.core.pairing.pair(e)),this.approve=async e=>{this.isInitialized(),await this.isValidApprove(e);const{id:t,relayProtocol:r,namespaces:i}=e,{pairingTopic:s,proposer:n,requiredNamespaces:o}=this.client.proposal.get(t),a=await this.client.core.crypto.generateKeyPair(),c=n.publicKey,h=await this.client.core.crypto.generateSharedKey(a,c),u={relay:{protocol:r??"irn"},namespaces:i,requiredNamespaces:o,controller:{publicKey:a,metadata:this.client.metadata},expiry:sr(Rn)};await this.client.core.relayer.subscribe(h);const l=await this.sendRequest(h,"wc_sessionSettle",u),{done:f,resolve:p,reject:d}=or();this.events.once(ur("session_approve",l),(({error:e})=>{e?d(e):p(this.client.session.get(h))}));const g=Mn(Cn({},u),{topic:h,acknowledged:!1,self:u.controller,peer:{publicKey:n.publicKey,metadata:n.metadata},controller:a});return await this.client.session.set(h,g),await this.setExpiry(h,sr(Rn)),s&&await this.client.core.pairing.updateMetadata({topic:s,metadata:g.peer.metadata}),s&&t&&(await this.sendResult(t,s,{relay:{protocol:r??"irn"},responderPublicKey:a}),await this.client.proposal.delete(t,Sr("USER_DISCONNECTED")),await this.client.core.pairing.activate({topic:s})),{topic:h,acknowledged:f}},this.reject=async e=>{this.isInitialized(),await this.isValidReject(e);const{id:t,reason:r}=e,{pairingTopic:i}=this.client.proposal.get(t);i&&(await this.sendError(t,i,r),await this.client.proposal.delete(t,Sr("USER_DISCONNECTED")))},this.update=async e=>{this.isInitialized(),await this.isValidUpdate(e);const{topic:t,namespaces:r}=e,i=await this.sendRequest(t,"wc_sessionUpdate",{namespaces:r}),{done:s,resolve:n,reject:o}=or();return this.events.once(ur("session_update",i),(({error:e})=>{e?o(e):n()})),await this.client.session.update(t,{namespaces:r}),{acknowledged:s}},this.extend=async e=>{this.isInitialized(),await this.isValidExtend(e);const{topic:t}=e,r=await this.sendRequest(t,"wc_sessionExtend",{}),{done:i,resolve:s,reject:n}=or();return this.events.once(ur("session_extend",r),(({error:e})=>{e?n(e):s()})),await this.setExpiry(t,sr(Rn)),{acknowledged:i}},this.request=async e=>{this.isInitialized(),await this.isValidRequest(e);const{chainId:t,request:r,topic:i}=e,s=await this.sendRequest(i,"wc_sessionRequest",{request:r,chainId:t}),{done:n,resolve:o,reject:a}=or();return this.events.once(ur("session_request",s),(({error:e,result:t})=>{e?a(e):o(t)})),await n()},this.respond=async e=>{this.isInitialized(),await this.isValidRespond(e);const{topic:t,response:r}=e,{id:i}=r;(0,$r.isJsonRpcResult)(r)?await this.sendResult(i,t,r.result):(0,$r.isJsonRpcError)(r)&&await this.sendError(i,t,r.error),this.deletePendingSessionRequest(e.response.id,{message:"fulfilled",code:0})},this.ping=async e=>{this.isInitialized(),await this.isValidPing(e);const{topic:t}=e;if(this.client.session.keys.includes(t)){const e=await this.sendRequest(t,"wc_sessionPing",{}),{done:r,resolve:i,reject:s}=or();this.events.once(ur("session_ping",e),(({error:e})=>{e?s(e):i()})),await r()}else this.client.core.pairing.pairings.keys.includes(t)&&await this.client.core.pairing.ping({topic:t})},this.emit=async e=>{this.isInitialized(),await this.isValidEmit(e);const{topic:t,event:r,chainId:i}=e;await this.sendRequest(t,"wc_sessionEvent",{event:r,chainId:i})},this.disconnect=async e=>{this.isInitialized(),await this.isValidDisconnect(e);const{topic:t}=e;this.client.session.keys.includes(t)?(await this.sendRequest(t,"wc_sessionDelete",Sr("USER_DISCONNECTED")),await this.deleteSession(t)):await this.client.core.pairing.disconnect({topic:t})},this.find=e=>(this.isInitialized(),this.client.session.getAll().filter((t=>function(e,t){const{requiredNamespaces:r}=t,i=Object.keys(e.namespaces),s=Object.keys(r);let n=!0;return!!tr(s,i)&&(i.forEach((t=>{const{accounts:i,methods:s,events:o,extension:a}=e.namespaces[t],c=mr(i),h=r[t];tr(h.chains,c)&&tr(h.methods,s)&&tr(h.events,o)||(n=!1),n&&a&&a.forEach((e=>{var t;const{accounts:r,methods:i,events:s}=e,o=mr(r);null!=(t=h.extension)&&t.find((e=>tr(e.chains,o)&&tr(e.methods,i)&&tr(e.events,s)))||(n=!1)}))})),n)}(t,e)))),this.getPendingSessionRequests=()=>(this.isInitialized(),this.client.pendingRequest.getAll()),this.deleteSession=async(e,t)=>{const{self:r}=this.client.session.get(e);await this.client.core.relayer.unsubscribe(e),await Promise.all([this.client.session.delete(e,Sr("USER_DISCONNECTED")),this.client.core.crypto.deleteKeyPair(r.publicKey),this.client.core.crypto.deleteSymKey(e),t?Promise.resolve():this.client.core.expirer.del(e)])},this.deleteProposal=async(e,t)=>{await Promise.all([this.client.proposal.delete(e,Sr("USER_DISCONNECTED")),t?Promise.resolve():this.client.core.expirer.del(e)])},this.deletePendingSessionRequest=async(e,t,r=!1)=>{await Promise.all([this.client.pendingRequest.delete(e,t),r?Promise.resolve():this.client.core.expirer.del(e)])},this.setExpiry=async(e,t)=>{this.client.session.keys.includes(e)&&await this.client.session.update(e,{expiry:t}),this.client.core.expirer.set(e,t)},this.setProposal=async(e,t)=>{await this.client.proposal.set(e,t),this.client.core.expirer.set(e,t.expiry)},this.setPendingSessionRequest=async e=>{const t=On.wc_sessionRequest.req.ttl,{id:r,topic:i,params:s}=e;await this.client.pendingRequest.set(r,{id:r,topic:i,params:s}),t&&this.client.core.expirer.set(r,t)},this.sendRequest=async(e,t,r)=>{const i=(0,$r.formatJsonRpcRequest)(t,r),s=await this.client.core.crypto.encode(e,i),n=On[t].req;return this.client.core.history.set(e,i),this.client.core.relayer.publish(e,s,n),i.id},this.sendResult=async(e,t,r)=>{const i=(0,$r.formatJsonRpcResult)(e,r),s=await this.client.core.crypto.encode(t,i),n=await this.client.core.history.get(t,e),o=On[n.request.method].res;this.client.core.relayer.publish(t,s,o),await this.client.core.history.resolve(i)},this.sendError=async(e,t,r)=>{const i=(0,$r.formatJsonRpcError)(e,r),s=await this.client.core.crypto.encode(t,i),n=await this.client.core.history.get(t,e),o=On[n.request.method].res;this.client.core.relayer.publish(t,s,o),await this.client.core.history.resolve(i)},this.cleanup=async()=>{const e=[],t=[];this.client.session.getAll().forEach((t=>{nr(t.expiry)&&e.push(t.topic)})),this.client.proposal.getAll().forEach((e=>{nr(e.expiry)&&t.push(e.id)})),await Promise.all([...e.map((e=>this.deleteSession(e))),...t.map((e=>this.deleteProposal(e)))])},this.onRelayEventRequest=e=>{const{topic:t,payload:r}=e,i=r.method;switch(i){case"wc_sessionPropose":return this.onSessionProposeRequest(t,r);case"wc_sessionSettle":return this.onSessionSettleRequest(t,r);case"wc_sessionUpdate":return this.onSessionUpdateRequest(t,r);case"wc_sessionExtend":return this.onSessionExtendRequest(t,r);case"wc_sessionPing":return this.onSessionPingRequest(t,r);case"wc_sessionDelete":return this.onSessionDeleteRequest(t,r);case"wc_sessionRequest":return this.onSessionRequest(t,r);case"wc_sessionEvent":return this.onSessionEventRequest(t,r);default:return this.client.logger.info(`Unsupported request method ${i}`)}},this.onRelayEventResponse=async e=>{const{topic:t,payload:r}=e,i=(await this.client.core.history.get(t,r.id)).request.method;switch(i){case"wc_sessionPropose":return this.onSessionProposeResponse(t,r);case"wc_sessionSettle":return this.onSessionSettleResponse(t,r);case"wc_sessionUpdate":return this.onSessionUpdateResponse(t,r);case"wc_sessionExtend":return this.onSessionExtendResponse(t,r);case"wc_sessionPing":return this.onSessionPingResponse(t,r);case"wc_sessionRequest":return this.onSessionRequestResponse(t,r);default:return this.client.logger.info(`Unsupported response method ${i}`)}},this.onSessionProposeRequest=async(e,t)=>{const{params:r,id:i}=t;try{this.isValidConnect(Cn({},t.params));const s=sr(D.FIVE_MINUTES),n=Cn({id:i,pairingTopic:e,expiry:s},r);await this.setProposal(i,n),this.client.events.emit("session_proposal",{id:i,params:n})}catch(t){await this.sendError(i,e,t),this.client.logger.error(t)}},this.onSessionProposeResponse=async(e,t)=>{const{id:r}=t;if((0,$r.isJsonRpcResult)(t)){const{result:i}=t;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",result:i});const s=this.client.proposal.get(r);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",proposal:s});const n=s.proposer.publicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",selfPublicKey:n});const o=i.responderPublicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",peerPublicKey:o});const a=await this.client.core.crypto.generateSharedKey(n,o);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",sessionTopic:a});const c=await this.client.core.relayer.subscribe(a);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",subscriptionId:c}),await this.client.core.pairing.activate({topic:e})}else(0,$r.isJsonRpcError)(t)&&(await this.client.proposal.delete(r,Sr("USER_DISCONNECTED")),this.events.emit(ur("session_connect"),{error:t.error}))},this.onSessionSettleRequest=async(e,t)=>{const{id:r,params:i}=t;try{this.isValidSessionSettleRequest(i);const{relay:r,controller:s,expiry:n,namespaces:o}=t.params,a={topic:e,relay:r,expiry:n,namespaces:o,acknowledged:!0,controller:s.publicKey,self:{publicKey:"",metadata:this.client.metadata},peer:{publicKey:s.publicKey,metadata:s.metadata}};await this.sendResult(t.id,e,!0),this.events.emit(ur("session_connect"),{session:a})}catch(t){await this.sendError(r,e,t),this.client.logger.error(t)}},this.onSessionSettleResponse=async(e,t)=>{const{id:r}=t;(0,$r.isJsonRpcResult)(t)?(await this.client.session.update(e,{acknowledged:!0}),this.events.emit(ur("session_approve",r),{})):(0,$r.isJsonRpcError)(t)&&(await this.client.session.delete(e,Sr("USER_DISCONNECTED")),this.events.emit(ur("session_approve",r),{error:t.error}))},this.onSessionUpdateRequest=async(e,t)=>{const{params:r,id:i}=t;try{this.isValidUpdate(Cn({topic:e},r)),await this.client.session.update(e,{namespaces:r.namespaces}),await this.sendResult(i,e,!0),this.client.events.emit("session_update",{id:i,topic:e,params:r})}catch(t){await this.sendError(i,e,t),this.client.logger.error(t)}},this.onSessionUpdateResponse=(e,t)=>{const{id:r}=t;(0,$r.isJsonRpcResult)(t)?this.events.emit(ur("session_update",r),{}):(0,$r.isJsonRpcError)(t)&&this.events.emit(ur("session_update",r),{error:t.error})},this.onSessionExtendRequest=async(e,t)=>{const{id:r}=t;try{this.isValidExtend({topic:e}),await this.setExpiry(e,sr(Rn)),await this.sendResult(r,e,!0),this.client.events.emit("session_extend",{id:r,topic:e})}catch(t){await this.sendError(r,e,t),this.client.logger.error(t)}},this.onSessionExtendResponse=(e,t)=>{const{id:r}=t;(0,$r.isJsonRpcResult)(t)?this.events.emit(ur("session_extend",r),{}):(0,$r.isJsonRpcError)(t)&&this.events.emit(ur("session_extend",r),{error:t.error})},this.onSessionPingRequest=async(e,t)=>{const{id:r}=t;try{this.isValidPing({topic:e}),await this.sendResult(r,e,!0),this.client.events.emit("session_ping",{id:r,topic:e})}catch(t){await this.sendError(r,e,t),this.client.logger.error(t)}},this.onSessionPingResponse=(e,t)=>{const{id:r}=t;setTimeout((()=>{(0,$r.isJsonRpcResult)(t)?this.events.emit(ur("session_ping",r),{}):(0,$r.isJsonRpcError)(t)&&this.events.emit(ur("session_ping",r),{error:t.error})}),500)},this.onSessionDeleteRequest=async(e,t)=>{const{id:r}=t;try{this.isValidDisconnect({topic:e,reason:t.params}),await this.sendResult(r,e,!0),await this.deleteSession(e),this.client.events.emit("session_delete",{id:r,topic:e})}catch(t){await this.sendError(r,e,t),this.client.logger.error(t)}},this.onSessionRequest=async(e,t)=>{const{id:r,params:i}=t;try{this.isValidRequest(Cn({topic:e},i)),await this.setPendingSessionRequest({id:r,topic:e,params:i}),this.client.events.emit("session_request",{id:r,topic:e,params:i})}catch(t){await this.sendError(r,e,t),this.client.logger.error(t)}},this.onSessionRequestResponse=(e,t)=>{const{id:r}=t;(0,$r.isJsonRpcResult)(t)?this.events.emit(ur("session_request",r),{result:t.result}):(0,$r.isJsonRpcError)(t)&&this.events.emit(ur("session_request",r),{error:t.error})},this.onSessionEventRequest=async(e,t)=>{const{id:r,params:i}=t;try{this.isValidEmit(Cn({topic:e},i)),this.client.events.emit("session_event",{id:r,topic:e,params:i})}catch(t){await this.sendError(r,e,t),this.client.logger.error(t)}},this.isValidConnect=async e=>{if(!kr(e)){const{message:t}=Er("MISSING_OR_INVALID",`connect() params: ${JSON.stringify(e)}`);throw new Error(t)}const{pairingTopic:t,requiredNamespaces:r,relays:i}=e;Or(t)||await this.isValidPairingTopic(t);const s=function(e,t){let r=null;if(e&&Rr(e)){const i=Mr(e,t);i&&(r=i);const s=function(e,t){let r=null;return Object.entries(e).forEach((([e,i])=>{if(r)return;const s=Lr(e,i?.chains,`${t} requiredNamespace`),n=Pr(i,t);s?r=s:n?r=n:i.extension&&i.extension.forEach((i=>{if(r)return;const s=Lr(e,i.chains,`${t} extension`);s&&(r=s)}))})),r}(e,t);s&&(r=s)}else r=Er("MISSING_OR_INVALID",`${t}, requiredNamespaces should be an object with data`);return r}(r,"connect()");if(s)throw new Error(s.message);if(!function(e,t){let r=!1;return e?e&&Ir(e)&&e.length&&e.forEach((e=>{r=Dr(e)})):r=!0,r}(i)){const{message:e}=Er("MISSING_OR_INVALID",`connect() relays: ${i}`);throw new Error(e)}},this.isValidApprove=async e=>{if(!kr(e))throw new Error(Er("MISSING_OR_INVALID",`approve() params: ${e}`).message);const{id:t,namespaces:r,relayProtocol:i}=e;await this.isValidProposalId(t);const s=this.client.proposal.get(t),n=jr(r,"approve()");if(n)throw new Error(n.message);const o=zr(s.requiredNamespaces,r,"update()");if(o)throw new Error(o.message);if(!Ar(i,!0)){const{message:e}=Er("MISSING_OR_INVALID",`approve() relayProtocol: ${i}`);throw new Error(e)}},this.isValidReject=async e=>{if(!kr(e)){const{message:t}=Er("MISSING_OR_INVALID",`reject() params: ${e}`);throw new Error(t)}const{id:t,reason:r}=e;if(await this.isValidProposalId(t),!function(e){return!!(e&&"object"==typeof e&&e.code&&Nr(e.code,!1)&&e.message&&Ar(e.message,!1))}(r)){const{message:e}=Er("MISSING_OR_INVALID",`reject() reason: ${JSON.stringify(r)}`);throw new Error(e)}},this.isValidSessionSettleRequest=e=>{if(!kr(e)){const{message:t}=Er("MISSING_OR_INVALID",`onSessionSettleRequest() params: ${e}`);throw new Error(t)}const{relay:t,controller:r,namespaces:i,expiry:s}=e;if(!Dr(t)){const{message:e}=Er("MISSING_OR_INVALID","onSessionSettleRequest() relay protocol should be a string");throw new Error(e)}const n=function(e,t){let r=null;return Ar(e?.publicKey,!1)||(r=Er("MISSING_OR_INVALID","onSessionSettleRequest() controller public key should be a string")),r}(r);if(n)throw new Error(n.message);const o=jr(i,"onSessionSettleRequest()");if(o)throw new Error(o.message);if(nr(s)){const{message:e}=Er("EXPIRED","onSessionSettleRequest()");throw new Error(e)}},this.isValidUpdate=async e=>{if(!kr(e)){const{message:t}=Er("MISSING_OR_INVALID",`update() params: ${e}`);throw new Error(t)}const{topic:t,namespaces:r}=e;await this.isValidSessionTopic(t);const i=this.client.session.get(t),s=jr(r,"update()");if(s)throw new Error(s.message);const n=zr(i.requiredNamespaces,r,"update()");if(n)throw new Error(n.message)},this.isValidExtend=async e=>{if(!kr(e)){const{message:t}=Er("MISSING_OR_INVALID",`extend() params: ${e}`);throw new Error(t)}const{topic:t}=e;await this.isValidSessionTopic(t)},this.isValidRequest=async e=>{if(!kr(e)){const{message:t}=Er("MISSING_OR_INVALID",`request() params: ${e}`);throw new Error(t)}const{topic:t,request:r,chainId:i}=e;await this.isValidSessionTopic(t);const{namespaces:s}=this.client.session.get(t);if(!Br(s,i)){const{message:e}=Er("MISSING_OR_INVALID",`request() chainId: ${i}`);throw new Error(e)}if(!function(e){return!(Or(e)||!Ar(e.method,!1))}(r)){const{message:e}=Er("MISSING_OR_INVALID",`request() ${JSON.stringify(r)}`);throw new Error(e)}if(!function(e,t,r){return!!Ar(r,!1)&&function(e,t){const r=[];return Object.values(e).forEach((e=>{mr(e.accounts).includes(t)&&r.push(...e.methods),e.extension&&e.extension.forEach((e=>{mr(e.accounts).includes(t)&&r.push(...e.methods)}))})),r}(e,t).includes(r)}(s,i,r.method)){const{message:e}=Er("MISSING_OR_INVALID",`request() method: ${r.method}`);throw new Error(e)}},this.isValidRespond=async e=>{if(!kr(e)){const{message:t}=Er("MISSING_OR_INVALID",`respond() params: ${e}`);throw new Error(t)}const{topic:t,response:r}=e;if(await this.isValidSessionTopic(t),!function(e){return!(Or(e)||Or(e.result)&&Or(e.error)||!Nr(e.id,!1)||!Ar(e.jsonrpc,!1))}(r)){const{message:e}=Er("MISSING_OR_INVALID",`respond() response: ${JSON.stringify(r)}`);throw new Error(e)}},this.isValidPing=async e=>{if(!kr(e)){const{message:t}=Er("MISSING_OR_INVALID",`ping() params: ${e}`);throw new Error(t)}const{topic:t}=e;await this.isValidSessionOrPairingTopic(t)},this.isValidEmit=async e=>{if(!kr(e)){const{message:t}=Er("MISSING_OR_INVALID",`emit() params: ${e}`);throw new Error(t)}const{topic:t,event:r,chainId:i}=e;await this.isValidSessionTopic(t);const{namespaces:s}=this.client.session.get(t);if(!Br(s,i)){const{message:e}=Er("MISSING_OR_INVALID",`emit() chainId: ${i}`);throw new Error(e)}if(!function(e){return!(Or(e)||!Ar(e.name,!1))}(r)){const{message:e}=Er("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(r)}`);throw new Error(e)}if(!function(e,t,r){return!!Ar(r,!1)&&function(e,t){const r=[];return Object.values(e).forEach((e=>{mr(e.accounts).includes(t)&&r.push(...e.events),e.extension&&e.extension.forEach((e=>{mr(e.accounts).includes(t)&&r.push(...e.events)}))})),r}(e,t).includes(r)}(s,i,r.name)){const{message:e}=Er("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(r)}`);throw new Error(e)}},this.isValidDisconnect=async e=>{if(!kr(e)){const{message:t}=Er("MISSING_OR_INVALID",`disconnect() params: ${e}`);throw new Error(t)}const{topic:t}=e;await this.isValidSessionOrPairingTopic(t)}}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}registerRelayerEvents(){this.client.core.relayer.on(ms,(async e=>{const{topic:t,message:r}=e;if(this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(r)))return;const i=await this.client.core.crypto.decode(t,r);(0,$r.isJsonRpcRequest)(i)?(this.client.core.history.set(t,i),this.onRelayEventRequest({topic:t,payload:i})):(0,$r.isJsonRpcResponse)(i)&&(await this.client.core.history.resolve(i),this.onRelayEventResponse({topic:t,payload:i}))}))}registerExpirerEvents(){this.client.core.expirer.on(Ms,(async e=>{const{topic:t,id:r}=hr(e.target);if(r&&this.getPendingSessionRequests()[r])return await this.deletePendingSessionRequest(r,Er("EXPIRED"),!0);t?this.client.session.keys.includes(t)&&(await this.deleteSession(t,!0),this.client.events.emit("session_expire",{topic:t})):r&&await this.deleteProposal(r,!0)}))}isValidPairingTopic(e){if(!Ar(e,!1)){const{message:t}=Er("MISSING_OR_INVALID",`pairing topic should be a string: ${e}`);throw new Error(t)}if(!this.client.core.pairing.pairings.keys.includes(e)){const{message:t}=Er("NO_MATCHING_KEY",`pairing topic doesn't exist: ${e}`);throw new Error(t)}if(nr(this.client.core.pairing.pairings.get(e).expiry)){const{message:t}=Er("EXPIRED",`pairing topic: ${e}`);throw new Error(t)}}async isValidSessionTopic(e){if(!Ar(e,!1)){const{message:t}=Er("MISSING_OR_INVALID",`session topic should be a string: ${e}`);throw new Error(t)}if(!this.client.session.keys.includes(e)){const{message:t}=Er("NO_MATCHING_KEY",`session topic doesn't exist: ${e}`);throw new Error(t)}if(nr(this.client.session.get(e).expiry)){await this.deleteSession(e);const{message:t}=Er("EXPIRED",`session topic: ${e}`);throw new Error(t)}}async isValidSessionOrPairingTopic(e){if(this.client.session.keys.includes(e))await this.isValidSessionTopic(e);else{if(!this.client.core.pairing.pairings.keys.includes(e)){if(Ar(e,!1)){const{message:t}=Er("NO_MATCHING_KEY",`session or pairing topic doesn't exist: ${e}`);throw new Error(t)}{const{message:t}=Er("MISSING_OR_INVALID",`session or pairing topic should be a string: ${e}`);throw new Error(t)}}this.isValidPairingTopic(e)}}async isValidProposalId(e){if("number"!=typeof e){const{message:t}=Er("MISSING_OR_INVALID",`proposal id should be a number: ${e}`);throw new Error(t)}if(!this.client.proposal.keys.includes(e)){const{message:t}=Er("NO_MATCHING_KEY",`proposal id doesn't exist: ${e}`);throw new Error(t)}if(nr(this.client.proposal.get(e).expiry)){await this.deleteProposal(e);const{message:t}=Er("EXPIRED",`proposal id: ${e}`);throw new Error(t)}}}class Dn extends un{constructor(e,t){super(e,t,"proposal",Sn),this.core=e,this.logger=t}}class kn extends un{constructor(e,t){super(e,t,"session",Sn),this.core=e,this.logger=t}}class Bn extends un{constructor(e,t){super(e,t,"request",Sn),this.core=e,this.logger=t}}class zn extends U{constructor(e){super(e),this.protocol="wc",this.version=2,this.name=In,this.events=new w.EventEmitter,this.on=(e,t)=>this.events.on(e,t),this.once=(e,t)=>this.events.once(e,t),this.off=(e,t)=>this.events.off(e,t),this.removeListener=(e,t)=>this.events.removeListener(e,t),this.removeAllListeners=e=>this.events.removeAllListeners(e),this.connect=async e=>{try{return await this.engine.connect(e)}catch(e){throw this.logger.error(e.message),e}},this.pair=async e=>{try{return await this.engine.pair(e)}catch(e){throw this.logger.error(e.message),e}},this.approve=async e=>{try{return await this.engine.approve(e)}catch(e){throw this.logger.error(e.message),e}},this.reject=async e=>{try{return await this.engine.reject(e)}catch(e){throw this.logger.error(e.message),e}},this.update=async e=>{try{return await this.engine.update(e)}catch(e){throw this.logger.error(e.message),e}},this.extend=async e=>{try{return await this.engine.extend(e)}catch(e){throw this.logger.error(e.message),e}},this.request=async e=>{try{return await this.engine.request(e)}catch(e){throw this.logger.error(e.message),e}},this.respond=async e=>{try{return await this.engine.respond(e)}catch(e){throw this.logger.error(e.message),e}},this.ping=async e=>{try{return await this.engine.ping(e)}catch(e){throw this.logger.error(e.message),e}},this.emit=async e=>{try{return await this.engine.emit(e)}catch(e){throw this.logger.error(e.message),e}},this.disconnect=async e=>{try{return await this.engine.disconnect(e)}catch(e){throw this.logger.error(e.message),e}},this.find=e=>{try{return this.engine.find(e)}catch(e){throw this.logger.error(e.message),e}},this.getPendingSessionRequests=()=>{try{return this.engine.getPendingSessionRequests()}catch(e){throw this.logger.error(e.message),e}},this.name=e?.name||In,this.metadata=e?.metadata||(0,Lt.D)()||{name:"",description:"",url:"",icons:[""]};const t=typeof e?.logger<"u"&&"string"!=typeof e?.logger?e.logger:y()((0,_.getDefaultLoggerOptions)({level:e?.logger||"error"}));this.core=e?.core||new _n(e),this.logger=(0,_.generateChildLogger)(t,this.name),this.session=new kn(this.core,this.logger),this.proposal=new Dn(this.core,this.logger),this.pendingRequest=new Bn(this.core,this.logger),this.engine=new jn(this)}static async init(e){const t=new zn(e);return await t.initialize(),t}get context(){return(0,_.getLoggerContext)(this.logger)}get pairing(){return this.core.pairing.pairings}async initialize(){this.logger.trace("Initialized");try{await this.core.start(),await this.session.init(),await this.proposal.init(),await this.pendingRequest.init(),await this.engine.init(),this.logger.info("SignClient Initilization Success")}catch(e){throw this.logger.info("SignClient Initilization Failure"),this.logger.error(e.message),e}}}const $n=zn;var qn=s(9342),Vn=Object.defineProperty,Kn=Object.getOwnPropertySymbols,Jn=Object.prototype.hasOwnProperty,Hn=Object.prototype.propertyIsEnumerable,Wn=(e,t,r)=>t in e?Vn(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;const Fn=document.getElementById("connect-button"),Gn="8e6b5ffdcbc9794bf9f4a1952578365b",Yn={eip155:{methods:["eth_sign"],chains:["eip155:1"],events:["accountsChanged"]}},Xn=new class{constructor(e){this.openModal=qn.jb.open,this.closeModal=qn.jb.close,this.subscribeModal=qn.jb.subscribe,this.setTheme=qn.t0.setThemeConfig,qn.t0.setConfig(((e,t)=>{for(var r in t||(t={}))Jn.call(t,r)&&Wn(e,r,t[r]);if(Kn)for(var r of Kn(t))Hn.call(t,r)&&Wn(e,r,t[r]);return e})({enableStandaloneMode:!0},e)),this.initUi()}async initUi(){if(typeof window<"u"){await s.e(30).then(s.bind(s,6030));const e=document.createElement("w3m-modal");document.body.insertAdjacentElement("beforeend",e)}}}({projectId:Gn,standaloneChains:Yn.eip155.chains});let Zn;!async function(){try{Fn.disabled=!0,Zn=await $n.init({projectId:Gn}),Fn.disabled=!1,Fn.innerText="Connect Wallet"}catch(e){console.error(e)}}(),Fn.addEventListener("click",(async()=>{try{if(Zn){const{uri:e,approval:t}=await Zn.connect({requiredNamespaces:Yn});e&&(Xn.openModal({uri:e}),await t(),Xn.closeModal())}}catch(e){console.error(e)}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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c0IsQ0FBRW90QyxhQUFXeEQsaUJBQWtCa3RCLEdBQVdpRCxPQUFPcHdCLFNBQ2pGLElBQUk0d0IsSUFHWHh0QixpQkFDRSxJQUNFOHNCLEdBQWNXLFVBQVcsRUFDekJELFNBQW1CLFFBQWdCLENBQUVudEIsZUFDckN5c0IsR0FBY1csVUFBVyxFQUN6QlgsR0FBY1ksVUFBWSxnQkFHNUIsQ0FGRSxNQUFPaHJDLEdBQ1BoSCxRQUFReFYsTUFBTXdjLEVBQ2hCLENBQ0YsQ0FFQWhmLEdBR0FvcEQsR0FBY2huQyxpQkFBaUIsU0FBU2thLFVBQ3RDLElBQ0UsR0FBSXd0QixHQUFZLENBQ2QsTUFBTSxJQUFFdnFCLEVBQUcsU0FBRTBtQixTQUFtQjZELEdBQVdqTCxRQUFRLENBQUU4RyxtQkFBb0JVLEtBQ3JFOW1CLElBQ0ZncUIsR0FBVUMsVUFBVSxDQUFFanFCLGNBQ2hCMG1CLElBQ05zRCxHQUFVRSxhQUVkLENBR0YsQ0FGRSxNQUFPenFDLEdBQ1BoSCxRQUFReFYsTUFBTXdjLEVBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmL3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9iaW5hcnkvbGliL2JpbmFyeS5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9jaGFjaGEvbGliL2NoYWNoYS5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9jaGFjaGEyMHBvbHkxMzA1L2xpYi9jaGFjaGEyMHBvbHkxMzA1LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL2NvbnN0YW50LXRpbWUvbGliL2NvbnN0YW50LXRpbWUuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvZWQyNTUxOS9saWIvZWQyNTUxOS5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9oYXNoL2xpYi9oYXNoLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL2hrZGYvbGliL2hrZGYuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvaG1hYy9saWIvaG1hYy5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9pbnQvbGliL2ludC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9wb2x5MTMwNS9saWIvcG9seTEzMDUuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvcmFuZG9tL2xpYi9yYW5kb20uanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvcmFuZG9tL2xpYi9zb3VyY2UvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9yYW5kb20vbGliL3NvdXJjZS9ub2RlLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3JhbmRvbS9saWIvc291cmNlL3N5c3RlbS5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9zaGEyNTYvbGliL3NoYTI1Ni5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9zaGE1MTIvbGliL3NoYTUxMi5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHN0YWJsZWxpYi93aXBlL2xpYi93aXBlLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3gyNTUxOS9saWIveDI1NTE5LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudC9kaXN0L2Nqcy9jcnlwdG8uanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50L2Rpc3QvY2pzL2Vudi5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2V2ZW50cy9kaXN0L2VzbS9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2hlYXJ0YmVhdC9kaXN0L2Nqcy9jb25zdGFudHMvaGVhcnRiZWF0LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9janMvY29uc3RhbnRzL2luZGV4LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9janMvaGVhcnRiZWF0LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2hlYXJ0YmVhdC9kaXN0L2Nqcy90eXBlcy9oZWFydGJlYXQuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2hlYXJ0YmVhdC9kaXN0L2Nqcy90eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy10eXBlcy9kaXN0L2VzbS9taXNjLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXR5cGVzL2Rpc3QvZXNtL3Byb3ZpZGVyLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9lcnJvci5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9mb3JtYXQuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vdXJsLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL3ZhbGlkYXRvcnMuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2tleXZhbHVlc3RvcmFnZS9kaXN0L2Nqcy9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9rZXl2YWx1ZXN0b3JhZ2UvZGlzdC9janMvYnJvd3Nlci9saWIvbG9jYWxTdG9yYWdlLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9rZXl2YWx1ZXN0b3JhZ2UvZGlzdC9janMvc2hhcmVkL2luZGV4LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9rZXl2YWx1ZXN0b3JhZ2UvZGlzdC9janMvc2hhcmVkL3R5cGVzLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9rZXl2YWx1ZXN0b3JhZ2UvZGlzdC9janMvc2hhcmVkL3V0aWxzLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9sb2dnZXIvZGlzdC9janMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9sb2dnZXIvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2xvZ2dlci9kaXN0L2Nqcy91dGlscy5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvc2lnbi1jbGllbnQvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3dpbmRvdy1nZXR0ZXJzL2Rpc3QvY2pzL2luZGV4LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zaWduLWNsaWVudC9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2luZG93LW1ldGFkYXRhL2Rpc3QvY2pzL2luZGV4LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zaWduLWNsaWVudC9ub2RlX21vZHVsZXMvcXVlcnktc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL2NvbnN0YW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvbWlzYy5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvdGltZS5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy93YXRjaC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9jb252ZXJ0LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3V0aWxzL2RlbGF5LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3dhdGNoLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvZGVjb2RlLXVyaS1jb21wb25lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL2ZpbHRlci1vYmovaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC5pc2VxdWFsL2luZGV4LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9xdWljay1mb3JtYXQtdW5lc2NhcGVkL2luZGV4LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9zYWZlLWpzb24tdXRpbHMvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL3NwbGl0LW9uLWZpcnN0L2luZGV4LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9zdHJpY3QtdXJpLWVuY29kZS9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy93cy9icm93c2VyLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9waW5vL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL3Byb3h5LWNvbXBhcmUvZGlzdC9pbmRleC5tb2Rlcm4uanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL3ZhbHRpby9lc20vdmFuaWxsYS5tanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3ZWIzbW9kYWwvY29yZS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3NpZ24tY2xpZW50L25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90eXBlcy9kaXN0L2luZGV4LmVzLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zYWZlLWpzb24vZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3JlbGF5LWF1dGgvZGlzdC9lc20vY29uc3RhbnRzLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL2FsbG9jLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy91aW50OGFycmF5cy9lc20vc3JjL2NvbmNhdC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS92ZW5kb3IvYmFzZS14LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9ieXRlcy5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZS5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2Jhc2VzL2Jhc2UyLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlOC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTEwLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlMTYuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2Jhc2VzL2Jhc2UzMi5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTM2LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNlcy9iYXNlNTguanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL2Jhc2VzL2Jhc2U2NC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvYmFzZXMvYmFzZTI1NmVtb2ppLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3ZlbmRvci92YXJpbnQuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL211bHRpZm9ybWF0cy9lc20vc3JjL3ZhcmludC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvaGFzaGVzL2RpZ2VzdC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvaGFzaGVzL2hhc2hlci5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvaGFzaGVzL3NoYTItYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvaGFzaGVzL2lkZW50aXR5LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9jb2RlY3MvcmF3LmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9jb2RlY3MvanNvbi5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvbXVsdGlmb3JtYXRzL2VzbS9zcmMvY2lkLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9tdWx0aWZvcm1hdHMvZXNtL3NyYy9iYXNpY3MuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL2VzbS9zcmMvdXRpbC9iYXNlcy5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvdWludDhhcnJheXMvZXNtL3NyYy90by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL3VpbnQ4YXJyYXlzL2VzbS9zcmMvZnJvbS1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3JlbGF5LWF1dGgvZGlzdC9lc20vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3JlbGF5LWF1dGgvZGlzdC9lc20vYXBpLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zaWduLWNsaWVudC9ub2RlX21vZHVsZXMvZGV0ZWN0LWJyb3dzZXIvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViMy1zaWx2ZW5sZWFmLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3JlbGF5LWFwaS9kaXN0L2VzbS9qc29ucnBjLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zaWduLWNsaWVudC9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvZGlzdC9pbmRleC5lcy5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1wcm92aWRlci9kaXN0L2VzbS9wcm92aWRlci5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL2Rpc3QvZXNtL3dzLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zaWduLWNsaWVudC9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvY29yZS9kaXN0L2luZGV4LmVzLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zaWduLWNsaWVudC9kaXN0L2luZGV4LmVzLmpzIiwid2VicGFjazovL3dlYjMtc2lsdmVubGVhZi8uL25vZGVfbW9kdWxlcy9Ad2ViM21vZGFsL3N0YW5kYWxvbmUvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWIzLXNpbHZlbmxlYWYvLi9zcmMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJ3ZWIzLXNpbHZlbmxlYWY6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH07XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBQYWNrYWdlIGJpbmFyeSBwcm92aWRlcyBmdW5jdGlvbnMgZm9yIGVuY29kaW5nIGFuZCBkZWNvZGluZyBudW1iZXJzIGluIGJ5dGUgYXJyYXlzLlxuICovXG52YXIgaW50XzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi9pbnRcIik7XG4vLyBUT0RPKGRjaGVzdCk6IGFkZCBhc3NlcnRzIGZvciBjb3JyZWN0IHZhbHVlIHJhbmdlcyBhbmQgYXJyYXkgb2Zmc2V0cy5cbi8qKlxuICogUmVhZHMgMiBieXRlcyBmcm9tIGFycmF5IHN0YXJ0aW5nIGF0IG9mZnNldCBhcyBiaWctZW5kaWFuXG4gKiBzaWduZWQgMTYtYml0IGludGVnZXIgYW5kIHJldHVybnMgaXQuXG4gKi9cbmZ1bmN0aW9uIHJlYWRJbnQxNkJFKGFycmF5LCBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHsgb2Zmc2V0ID0gMDsgfVxuICAgIHJldHVybiAoKChhcnJheVtvZmZzZXQgKyAwXSA8PCA4KSB8IGFycmF5W29mZnNldCArIDFdKSA8PCAxNikgPj4gMTY7XG59XG5leHBvcnRzLnJlYWRJbnQxNkJFID0gcmVhZEludDE2QkU7XG4vKipcbiAqIFJlYWRzIDIgYnl0ZXMgZnJvbSBhcnJheSBzdGFydGluZyBhdCBvZmZzZXQgYXMgYmlnLWVuZGlhblxuICogdW5zaWduZWQgMTYtYml0IGludGVnZXIgYW5kIHJldHVybnMgaXQuXG4gKi9cbmZ1bmN0aW9uIHJlYWRVaW50MTZCRShhcnJheSwgb2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7IG9mZnNldCA9IDA7IH1cbiAgICByZXR1cm4gKChhcnJheVtvZmZzZXQgKyAwXSA8PCA4KSB8IGFycmF5W29mZnNldCArIDFdKSA+Pj4gMDtcbn1cbmV4cG9ydHMucmVhZFVpbnQxNkJFID0gcmVhZFVpbnQxNkJFO1xuLyoqXG4gKiBSZWFkcyAyIGJ5dGVzIGZyb20gYXJyYXkgc3RhcnRpbmcgYXQgb2Zmc2V0IGFzIGxpdHRsZS1lbmRpYW5cbiAqIHNpZ25lZCAxNi1iaXQgaW50ZWdlciBhbmQgcmV0dXJucyBpdC5cbiAqL1xuZnVuY3Rpb24gcmVhZEludDE2TEUoYXJyYXksIG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgcmV0dXJuICgoKGFycmF5W29mZnNldCArIDFdIDw8IDgpIHwgYXJyYXlbb2Zmc2V0XSkgPDwgMTYpID4+IDE2O1xufVxuZXhwb3J0cy5yZWFkSW50MTZMRSA9IHJlYWRJbnQxNkxFO1xuLyoqXG4gKiBSZWFkcyAyIGJ5dGVzIGZyb20gYXJyYXkgc3RhcnRpbmcgYXQgb2Zmc2V0IGFzIGxpdHRsZS1lbmRpYW5cbiAqIHVuc2lnbmVkIDE2LWJpdCBpbnRlZ2VyIGFuZCByZXR1cm5zIGl0LlxuICovXG5mdW5jdGlvbiByZWFkVWludDE2TEUoYXJyYXksIG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgcmV0dXJuICgoYXJyYXlbb2Zmc2V0ICsgMV0gPDwgOCkgfCBhcnJheVtvZmZzZXRdKSA+Pj4gMDtcbn1cbmV4cG9ydHMucmVhZFVpbnQxNkxFID0gcmVhZFVpbnQxNkxFO1xuLyoqXG4gKiBXcml0ZXMgMi1ieXRlIGJpZy1lbmRpYW4gcmVwcmVzZW50YXRpb24gb2YgMTYtYml0IHVuc2lnbmVkXG4gKiB2YWx1ZSB0byBieXRlIGFycmF5IHN0YXJ0aW5nIGF0IG9mZnNldC5cbiAqXG4gKiBJZiBieXRlIGFycmF5IGlzIG5vdCBnaXZlbiwgY3JlYXRlcyBhIG5ldyAyLWJ5dGUgb25lLlxuICpcbiAqIFJldHVybnMgdGhlIG91dHB1dCBieXRlIGFycmF5LlxuICovXG5mdW5jdGlvbiB3cml0ZVVpbnQxNkJFKHZhbHVlLCBvdXQsIG9mZnNldCkge1xuICAgIGlmIChvdXQgPT09IHZvaWQgMCkgeyBvdXQgPSBuZXcgVWludDhBcnJheSgyKTsgfVxuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgb3V0W29mZnNldCArIDBdID0gdmFsdWUgPj4+IDg7XG4gICAgb3V0W29mZnNldCArIDFdID0gdmFsdWUgPj4+IDA7XG4gICAgcmV0dXJuIG91dDtcbn1cbmV4cG9ydHMud3JpdGVVaW50MTZCRSA9IHdyaXRlVWludDE2QkU7XG5leHBvcnRzLndyaXRlSW50MTZCRSA9IHdyaXRlVWludDE2QkU7XG4vKipcbiAqIFdyaXRlcyAyLWJ5dGUgbGl0dGxlLWVuZGlhbiByZXByZXNlbnRhdGlvbiBvZiAxNi1iaXQgdW5zaWduZWRcbiAqIHZhbHVlIHRvIGFycmF5IHN0YXJ0aW5nIGF0IG9mZnNldC5cbiAqXG4gKiBJZiBieXRlIGFycmF5IGlzIG5vdCBnaXZlbiwgY3JlYXRlcyBhIG5ldyAyLWJ5dGUgb25lLlxuICpcbiAqIFJldHVybnMgdGhlIG91dHB1dCBieXRlIGFycmF5LlxuICovXG5mdW5jdGlvbiB3cml0ZVVpbnQxNkxFKHZhbHVlLCBvdXQsIG9mZnNldCkge1xuICAgIGlmIChvdXQgPT09IHZvaWQgMCkgeyBvdXQgPSBuZXcgVWludDhBcnJheSgyKTsgfVxuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgb3V0W29mZnNldCArIDBdID0gdmFsdWUgPj4+IDA7XG4gICAgb3V0W29mZnNldCArIDFdID0gdmFsdWUgPj4+IDg7XG4gICAgcmV0dXJuIG91dDtcbn1cbmV4cG9ydHMud3JpdGVVaW50MTZMRSA9IHdyaXRlVWludDE2TEU7XG5leHBvcnRzLndyaXRlSW50MTZMRSA9IHdyaXRlVWludDE2TEU7XG4vKipcbiAqIFJlYWRzIDQgYnl0ZXMgZnJvbSBhcnJheSBzdGFydGluZyBhdCBvZmZzZXQgYXMgYmlnLWVuZGlhblxuICogc2lnbmVkIDMyLWJpdCBpbnRlZ2VyIGFuZCByZXR1cm5zIGl0LlxuICovXG5mdW5jdGlvbiByZWFkSW50MzJCRShhcnJheSwgb2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7IG9mZnNldCA9IDA7IH1cbiAgICByZXR1cm4gKGFycmF5W29mZnNldF0gPDwgMjQpIHxcbiAgICAgICAgKGFycmF5W29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgICAgIChhcnJheVtvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgICAgIGFycmF5W29mZnNldCArIDNdO1xufVxuZXhwb3J0cy5yZWFkSW50MzJCRSA9IHJlYWRJbnQzMkJFO1xuLyoqXG4gKiBSZWFkcyA0IGJ5dGVzIGZyb20gYXJyYXkgc3RhcnRpbmcgYXQgb2Zmc2V0IGFzIGJpZy1lbmRpYW5cbiAqIHVuc2lnbmVkIDMyLWJpdCBpbnRlZ2VyIGFuZCByZXR1cm5zIGl0LlxuICovXG5mdW5jdGlvbiByZWFkVWludDMyQkUoYXJyYXksIG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgcmV0dXJuICgoYXJyYXlbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICAgICAoYXJyYXlbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAgICAgKGFycmF5W29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAgICAgYXJyYXlbb2Zmc2V0ICsgM10pID4+PiAwO1xufVxuZXhwb3J0cy5yZWFkVWludDMyQkUgPSByZWFkVWludDMyQkU7XG4vKipcbiAqIFJlYWRzIDQgYnl0ZXMgZnJvbSBhcnJheSBzdGFydGluZyBhdCBvZmZzZXQgYXMgbGl0dGxlLWVuZGlhblxuICogc2lnbmVkIDMyLWJpdCBpbnRlZ2VyIGFuZCByZXR1cm5zIGl0LlxuICovXG5mdW5jdGlvbiByZWFkSW50MzJMRShhcnJheSwgb2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7IG9mZnNldCA9IDA7IH1cbiAgICByZXR1cm4gKGFycmF5W29mZnNldCArIDNdIDw8IDI0KSB8XG4gICAgICAgIChhcnJheVtvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICAgICAoYXJyYXlbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgICBhcnJheVtvZmZzZXRdO1xufVxuZXhwb3J0cy5yZWFkSW50MzJMRSA9IHJlYWRJbnQzMkxFO1xuLyoqXG4gKiBSZWFkcyA0IGJ5dGVzIGZyb20gYXJyYXkgc3RhcnRpbmcgYXQgb2Zmc2V0IGFzIGxpdHRsZS1lbmRpYW5cbiAqIHVuc2lnbmVkIDMyLWJpdCBpbnRlZ2VyIGFuZCByZXR1cm5zIGl0LlxuICovXG5mdW5jdGlvbiByZWFkVWludDMyTEUoYXJyYXksIG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgcmV0dXJuICgoYXJyYXlbb2Zmc2V0ICsgM10gPDwgMjQpIHxcbiAgICAgICAgKGFycmF5W29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgICAgIChhcnJheVtvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAgIGFycmF5W29mZnNldF0pID4+PiAwO1xufVxuZXhwb3J0cy5yZWFkVWludDMyTEUgPSByZWFkVWludDMyTEU7XG4vKipcbiAqIFdyaXRlcyA0LWJ5dGUgYmlnLWVuZGlhbiByZXByZXNlbnRhdGlvbiBvZiAzMi1iaXQgdW5zaWduZWRcbiAqIHZhbHVlIHRvIGJ5dGUgYXJyYXkgc3RhcnRpbmcgYXQgb2Zmc2V0LlxuICpcbiAqIElmIGJ5dGUgYXJyYXkgaXMgbm90IGdpdmVuLCBjcmVhdGVzIGEgbmV3IDQtYnl0ZSBvbmUuXG4gKlxuICogUmV0dXJucyB0aGUgb3V0cHV0IGJ5dGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHdyaXRlVWludDMyQkUodmFsdWUsIG91dCwgb2Zmc2V0KSB7XG4gICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7IG91dCA9IG5ldyBVaW50OEFycmF5KDQpOyB9XG4gICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7IG9mZnNldCA9IDA7IH1cbiAgICBvdXRbb2Zmc2V0ICsgMF0gPSB2YWx1ZSA+Pj4gMjQ7XG4gICAgb3V0W29mZnNldCArIDFdID0gdmFsdWUgPj4+IDE2O1xuICAgIG91dFtvZmZzZXQgKyAyXSA9IHZhbHVlID4+PiA4O1xuICAgIG91dFtvZmZzZXQgKyAzXSA9IHZhbHVlID4+PiAwO1xuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLndyaXRlVWludDMyQkUgPSB3cml0ZVVpbnQzMkJFO1xuZXhwb3J0cy53cml0ZUludDMyQkUgPSB3cml0ZVVpbnQzMkJFO1xuLyoqXG4gKiBXcml0ZXMgNC1ieXRlIGxpdHRsZS1lbmRpYW4gcmVwcmVzZW50YXRpb24gb2YgMzItYml0IHVuc2lnbmVkXG4gKiB2YWx1ZSB0byBhcnJheSBzdGFydGluZyBhdCBvZmZzZXQuXG4gKlxuICogSWYgYnl0ZSBhcnJheSBpcyBub3QgZ2l2ZW4sIGNyZWF0ZXMgYSBuZXcgNC1ieXRlIG9uZS5cbiAqXG4gKiBSZXR1cm5zIHRoZSBvdXRwdXQgYnl0ZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gd3JpdGVVaW50MzJMRSh2YWx1ZSwgb3V0LCBvZmZzZXQpIHtcbiAgICBpZiAob3V0ID09PSB2b2lkIDApIHsgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoNCk7IH1cbiAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHsgb2Zmc2V0ID0gMDsgfVxuICAgIG91dFtvZmZzZXQgKyAwXSA9IHZhbHVlID4+PiAwO1xuICAgIG91dFtvZmZzZXQgKyAxXSA9IHZhbHVlID4+PiA4O1xuICAgIG91dFtvZmZzZXQgKyAyXSA9IHZhbHVlID4+PiAxNjtcbiAgICBvdXRbb2Zmc2V0ICsgM10gPSB2YWx1ZSA+Pj4gMjQ7XG4gICAgcmV0dXJuIG91dDtcbn1cbmV4cG9ydHMud3JpdGVVaW50MzJMRSA9IHdyaXRlVWludDMyTEU7XG5leHBvcnRzLndyaXRlSW50MzJMRSA9IHdyaXRlVWludDMyTEU7XG4vKipcbiAqIFJlYWRzIDggYnl0ZXMgZnJvbSBhcnJheSBzdGFydGluZyBhdCBvZmZzZXQgYXMgYmlnLWVuZGlhblxuICogc2lnbmVkIDY0LWJpdCBpbnRlZ2VyIGFuZCByZXR1cm5zIGl0LlxuICpcbiAqIElNUE9SVEFOVDogZHVlIHRvIEphdmFTY3JpcHQgbGltaXRhdGlvbiwgc3VwcG9ydHMgZXhhY3RcbiAqIG51bWJlcnMgaW4gcmFuZ2UgLTkwMDcxOTkyNTQ3NDA5OTEgdG8gOTAwNzE5OTI1NDc0MDk5MS5cbiAqIElmIHRoZSBudW1iZXIgc3RvcmVkIGluIHRoZSBieXRlIGFycmF5IGlzIG91dHNpZGUgdGhpcyByYW5nZSxcbiAqIHRoZSByZXN1bHQgaXMgbm90IGV4YWN0LlxuICovXG5mdW5jdGlvbiByZWFkSW50NjRCRShhcnJheSwgb2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7IG9mZnNldCA9IDA7IH1cbiAgICB2YXIgaGkgPSByZWFkSW50MzJCRShhcnJheSwgb2Zmc2V0KTtcbiAgICB2YXIgbG8gPSByZWFkSW50MzJCRShhcnJheSwgb2Zmc2V0ICsgNCk7XG4gICAgcmV0dXJuIGhpICogMHgxMDAwMDAwMDAgKyBsbyAtICgobG8gPj4gMzEpICogMHgxMDAwMDAwMDApO1xufVxuZXhwb3J0cy5yZWFkSW50NjRCRSA9IHJlYWRJbnQ2NEJFO1xuLyoqXG4gKiBSZWFkcyA4IGJ5dGVzIGZyb20gYXJyYXkgc3RhcnRpbmcgYXQgb2Zmc2V0IGFzIGJpZy1lbmRpYW5cbiAqIHVuc2lnbmVkIDY0LWJpdCBpbnRlZ2VyIGFuZCByZXR1cm5zIGl0LlxuICpcbiAqIElNUE9SVEFOVDogZHVlIHRvIEphdmFTY3JpcHQgbGltaXRhdGlvbiwgc3VwcG9ydHMgdmFsdWVzIHVwIHRvIDJeNTMtMS5cbiAqL1xuZnVuY3Rpb24gcmVhZFVpbnQ2NEJFKGFycmF5LCBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHsgb2Zmc2V0ID0gMDsgfVxuICAgIHZhciBoaSA9IHJlYWRVaW50MzJCRShhcnJheSwgb2Zmc2V0KTtcbiAgICB2YXIgbG8gPSByZWFkVWludDMyQkUoYXJyYXksIG9mZnNldCArIDQpO1xuICAgIHJldHVybiBoaSAqIDB4MTAwMDAwMDAwICsgbG87XG59XG5leHBvcnRzLnJlYWRVaW50NjRCRSA9IHJlYWRVaW50NjRCRTtcbi8qKlxuICogUmVhZHMgOCBieXRlcyBmcm9tIGFycmF5IHN0YXJ0aW5nIGF0IG9mZnNldCBhcyBsaXR0bGUtZW5kaWFuXG4gKiBzaWduZWQgNjQtYml0IGludGVnZXIgYW5kIHJldHVybnMgaXQuXG4gKlxuICogSU1QT1JUQU5UOiBkdWUgdG8gSmF2YVNjcmlwdCBsaW1pdGF0aW9uLCBzdXBwb3J0cyBleGFjdFxuICogbnVtYmVycyBpbiByYW5nZSAtOTAwNzE5OTI1NDc0MDk5MSB0byA5MDA3MTk5MjU0NzQwOTkxLlxuICogSWYgdGhlIG51bWJlciBzdG9yZWQgaW4gdGhlIGJ5dGUgYXJyYXkgaXMgb3V0c2lkZSB0aGlzIHJhbmdlLFxuICogdGhlIHJlc3VsdCBpcyBub3QgZXhhY3QuXG4gKi9cbmZ1bmN0aW9uIHJlYWRJbnQ2NExFKGFycmF5LCBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHsgb2Zmc2V0ID0gMDsgfVxuICAgIHZhciBsbyA9IHJlYWRJbnQzMkxFKGFycmF5LCBvZmZzZXQpO1xuICAgIHZhciBoaSA9IHJlYWRJbnQzMkxFKGFycmF5LCBvZmZzZXQgKyA0KTtcbiAgICByZXR1cm4gaGkgKiAweDEwMDAwMDAwMCArIGxvIC0gKChsbyA+PiAzMSkgKiAweDEwMDAwMDAwMCk7XG59XG5leHBvcnRzLnJlYWRJbnQ2NExFID0gcmVhZEludDY0TEU7XG4vKipcbiAqIFJlYWRzIDggYnl0ZXMgZnJvbSBhcnJheSBzdGFydGluZyBhdCBvZmZzZXQgYXMgbGl0dGxlLWVuZGlhblxuICogdW5zaWduZWQgNjQtYml0IGludGVnZXIgYW5kIHJldHVybnMgaXQuXG4gKlxuICogSU1QT1JUQU5UOiBkdWUgdG8gSmF2YVNjcmlwdCBsaW1pdGF0aW9uLCBzdXBwb3J0cyB2YWx1ZXMgdXAgdG8gMl41My0xLlxuICovXG5mdW5jdGlvbiByZWFkVWludDY0TEUoYXJyYXksIG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgdmFyIGxvID0gcmVhZFVpbnQzMkxFKGFycmF5LCBvZmZzZXQpO1xuICAgIHZhciBoaSA9IHJlYWRVaW50MzJMRShhcnJheSwgb2Zmc2V0ICsgNCk7XG4gICAgcmV0dXJuIGhpICogMHgxMDAwMDAwMDAgKyBsbztcbn1cbmV4cG9ydHMucmVhZFVpbnQ2NExFID0gcmVhZFVpbnQ2NExFO1xuLyoqXG4gKiBXcml0ZXMgOC1ieXRlIGJpZy1lbmRpYW4gcmVwcmVzZW50YXRpb24gb2YgNjQtYml0IHVuc2lnbmVkXG4gKiB2YWx1ZSB0byBieXRlIGFycmF5IHN0YXJ0aW5nIGF0IG9mZnNldC5cbiAqXG4gKiBEdWUgdG8gSmF2YVNjcmlwdCBsaW1pdGF0aW9uLCBzdXBwb3J0cyB2YWx1ZXMgdXAgdG8gMl41My0xLlxuICpcbiAqIElmIGJ5dGUgYXJyYXkgaXMgbm90IGdpdmVuLCBjcmVhdGVzIGEgbmV3IDgtYnl0ZSBvbmUuXG4gKlxuICogUmV0dXJucyB0aGUgb3V0cHV0IGJ5dGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHdyaXRlVWludDY0QkUodmFsdWUsIG91dCwgb2Zmc2V0KSB7XG4gICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7IG91dCA9IG5ldyBVaW50OEFycmF5KDgpOyB9XG4gICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7IG9mZnNldCA9IDA7IH1cbiAgICB3cml0ZVVpbnQzMkJFKHZhbHVlIC8gMHgxMDAwMDAwMDAgPj4+IDAsIG91dCwgb2Zmc2V0KTtcbiAgICB3cml0ZVVpbnQzMkJFKHZhbHVlID4+PiAwLCBvdXQsIG9mZnNldCArIDQpO1xuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLndyaXRlVWludDY0QkUgPSB3cml0ZVVpbnQ2NEJFO1xuZXhwb3J0cy53cml0ZUludDY0QkUgPSB3cml0ZVVpbnQ2NEJFO1xuLyoqXG4gKiBXcml0ZXMgOC1ieXRlIGxpdHRsZS1lbmRpYW4gcmVwcmVzZW50YXRpb24gb2YgNjQtYml0IHVuc2lnbmVkXG4gKiB2YWx1ZSB0byBieXRlIGFycmF5IHN0YXJ0aW5nIGF0IG9mZnNldC5cbiAqXG4gKiBEdWUgdG8gSmF2YVNjcmlwdCBsaW1pdGF0aW9uLCBzdXBwb3J0cyB2YWx1ZXMgdXAgdG8gMl41My0xLlxuICpcbiAqIElmIGJ5dGUgYXJyYXkgaXMgbm90IGdpdmVuLCBjcmVhdGVzIGEgbmV3IDgtYnl0ZSBvbmUuXG4gKlxuICogUmV0dXJucyB0aGUgb3V0cHV0IGJ5dGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHdyaXRlVWludDY0TEUodmFsdWUsIG91dCwgb2Zmc2V0KSB7XG4gICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7IG91dCA9IG5ldyBVaW50OEFycmF5KDgpOyB9XG4gICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7IG9mZnNldCA9IDA7IH1cbiAgICB3cml0ZVVpbnQzMkxFKHZhbHVlID4+PiAwLCBvdXQsIG9mZnNldCk7XG4gICAgd3JpdGVVaW50MzJMRSh2YWx1ZSAvIDB4MTAwMDAwMDAwID4+PiAwLCBvdXQsIG9mZnNldCArIDQpO1xuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLndyaXRlVWludDY0TEUgPSB3cml0ZVVpbnQ2NExFO1xuZXhwb3J0cy53cml0ZUludDY0TEUgPSB3cml0ZVVpbnQ2NExFO1xuLyoqXG4gKiBSZWFkcyBieXRlcyBmcm9tIGFycmF5IHN0YXJ0aW5nIGF0IG9mZnNldCBhcyBiaWctZW5kaWFuXG4gKiB1bnNpZ25lZCBiaXRMZW4tYml0IGludGVnZXIgYW5kIHJldHVybnMgaXQuXG4gKlxuICogU3VwcG9ydHMgYml0IGxlbmd0aHMgZGl2aXNpYmxlIGJ5IDgsIHVwIHRvIDQ4LlxuICovXG5mdW5jdGlvbiByZWFkVWludEJFKGJpdExlbmd0aCwgYXJyYXksIG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgLy8gVE9ETyhkY2hlc3QpOiBpbXBsZW1lbnQgc3VwcG9ydCBmb3IgYml0TGVuZ3RocyBub24tZGl2aXNpYmxlIGJ5IDhcbiAgICBpZiAoYml0TGVuZ3RoICUgOCAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWFkVWludEJFIHN1cHBvcnRzIG9ubHkgYml0TGVuZ3RocyBkaXZpc2libGUgYnkgOFwiKTtcbiAgICB9XG4gICAgaWYgKGJpdExlbmd0aCAvIDggPiBhcnJheS5sZW5ndGggLSBvZmZzZXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVhZFVpbnRCRTogYXJyYXkgaXMgdG9vIHNob3J0IGZvciB0aGUgZ2l2ZW4gYml0TGVuZ3RoXCIpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gMDtcbiAgICB2YXIgbXVsID0gMTtcbiAgICBmb3IgKHZhciBpID0gYml0TGVuZ3RoIC8gOCArIG9mZnNldCAtIDE7IGkgPj0gb2Zmc2V0OyBpLS0pIHtcbiAgICAgICAgcmVzdWx0ICs9IGFycmF5W2ldICogbXVsO1xuICAgICAgICBtdWwgKj0gMjU2O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5yZWFkVWludEJFID0gcmVhZFVpbnRCRTtcbi8qKlxuICogUmVhZHMgYnl0ZXMgZnJvbSBhcnJheSBzdGFydGluZyBhdCBvZmZzZXQgYXMgbGl0dGxlLWVuZGlhblxuICogdW5zaWduZWQgYml0TGVuLWJpdCBpbnRlZ2VyIGFuZCByZXR1cm5zIGl0LlxuICpcbiAqIFN1cHBvcnRzIGJpdCBsZW5ndGhzIGRpdmlzaWJsZSBieSA4LCB1cCB0byA0OC5cbiAqL1xuZnVuY3Rpb24gcmVhZFVpbnRMRShiaXRMZW5ndGgsIGFycmF5LCBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHsgb2Zmc2V0ID0gMDsgfVxuICAgIC8vIFRPRE8oZGNoZXN0KTogaW1wbGVtZW50IHN1cHBvcnQgZm9yIGJpdExlbmd0aHMgbm9uLWRpdmlzaWJsZSBieSA4XG4gICAgaWYgKGJpdExlbmd0aCAlIDggIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVhZFVpbnRMRSBzdXBwb3J0cyBvbmx5IGJpdExlbmd0aHMgZGl2aXNpYmxlIGJ5IDhcIik7XG4gICAgfVxuICAgIGlmIChiaXRMZW5ndGggLyA4ID4gYXJyYXkubGVuZ3RoIC0gb2Zmc2V0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlYWRVaW50TEU6IGFycmF5IGlzIHRvbyBzaG9ydCBmb3IgdGhlIGdpdmVuIGJpdExlbmd0aFwiKTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgdmFyIG11bCA9IDE7XG4gICAgZm9yICh2YXIgaSA9IG9mZnNldDsgaSA8IG9mZnNldCArIGJpdExlbmd0aCAvIDg7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gYXJyYXlbaV0gKiBtdWw7XG4gICAgICAgIG11bCAqPSAyNTY7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLnJlYWRVaW50TEUgPSByZWFkVWludExFO1xuLyoqXG4gKiBXcml0ZXMgYSBiaWctZW5kaWFuIHJlcHJlc2VudGF0aW9uIG9mIGJpdExlbi1iaXQgdW5zaWduZWRcbiAqIHZhbHVlIHRvIGFycmF5IHN0YXJ0aW5nIGF0IG9mZnNldC5cbiAqXG4gKiBTdXBwb3J0cyBiaXQgbGVuZ3RocyBkaXZpc2libGUgYnkgOCwgdXAgdG8gNDguXG4gKlxuICogSWYgYnl0ZSBhcnJheSBpcyBub3QgZ2l2ZW4sIGNyZWF0ZXMgYSBuZXcgb25lLlxuICpcbiAqIFJldHVybnMgdGhlIG91dHB1dCBieXRlIGFycmF5LlxuICovXG5mdW5jdGlvbiB3cml0ZVVpbnRCRShiaXRMZW5ndGgsIHZhbHVlLCBvdXQsIG9mZnNldCkge1xuICAgIGlmIChvdXQgPT09IHZvaWQgMCkgeyBvdXQgPSBuZXcgVWludDhBcnJheShiaXRMZW5ndGggLyA4KTsgfVxuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgLy8gVE9ETyhkY2hlc3QpOiBpbXBsZW1lbnQgc3VwcG9ydCBmb3IgYml0TGVuZ3RocyBub24tZGl2aXNpYmxlIGJ5IDhcbiAgICBpZiAoYml0TGVuZ3RoICUgOCAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZVVpbnRCRSBzdXBwb3J0cyBvbmx5IGJpdExlbmd0aHMgZGl2aXNpYmxlIGJ5IDhcIik7XG4gICAgfVxuICAgIGlmICghaW50XzEuaXNTYWZlSW50ZWdlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVVaW50QkUgdmFsdWUgbXVzdCBiZSBhbiBpbnRlZ2VyXCIpO1xuICAgIH1cbiAgICB2YXIgZGl2ID0gMTtcbiAgICBmb3IgKHZhciBpID0gYml0TGVuZ3RoIC8gOCArIG9mZnNldCAtIDE7IGkgPj0gb2Zmc2V0OyBpLS0pIHtcbiAgICAgICAgb3V0W2ldID0gKHZhbHVlIC8gZGl2KSAmIDB4ZmY7XG4gICAgICAgIGRpdiAqPSAyNTY7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLndyaXRlVWludEJFID0gd3JpdGVVaW50QkU7XG4vKipcbiAqIFdyaXRlcyBhIGxpdHRsZS1lbmRpYW4gcmVwcmVzZW50YXRpb24gb2YgYml0TGVuLWJpdCB1bnNpZ25lZFxuICogdmFsdWUgdG8gYXJyYXkgc3RhcnRpbmcgYXQgb2Zmc2V0LlxuICpcbiAqIFN1cHBvcnRzIGJpdCBsZW5ndGhzIGRpdmlzaWJsZSBieSA4LCB1cCB0byA0OC5cbiAqXG4gKiBJZiBieXRlIGFycmF5IGlzIG5vdCBnaXZlbiwgY3JlYXRlcyBhIG5ldyBvbmUuXG4gKlxuICogUmV0dXJucyB0aGUgb3V0cHV0IGJ5dGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHdyaXRlVWludExFKGJpdExlbmd0aCwgdmFsdWUsIG91dCwgb2Zmc2V0KSB7XG4gICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7IG91dCA9IG5ldyBVaW50OEFycmF5KGJpdExlbmd0aCAvIDgpOyB9XG4gICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7IG9mZnNldCA9IDA7IH1cbiAgICAvLyBUT0RPKGRjaGVzdCk6IGltcGxlbWVudCBzdXBwb3J0IGZvciBiaXRMZW5ndGhzIG5vbi1kaXZpc2libGUgYnkgOFxuICAgIGlmIChiaXRMZW5ndGggJSA4ICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlVWludExFIHN1cHBvcnRzIG9ubHkgYml0TGVuZ3RocyBkaXZpc2libGUgYnkgOFwiKTtcbiAgICB9XG4gICAgaWYgKCFpbnRfMS5pc1NhZmVJbnRlZ2VyKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZVVpbnRMRSB2YWx1ZSBtdXN0IGJlIGFuIGludGVnZXJcIik7XG4gICAgfVxuICAgIHZhciBkaXYgPSAxO1xuICAgIGZvciAodmFyIGkgPSBvZmZzZXQ7IGkgPCBvZmZzZXQgKyBiaXRMZW5ndGggLyA4OyBpKyspIHtcbiAgICAgICAgb3V0W2ldID0gKHZhbHVlIC8gZGl2KSAmIDB4ZmY7XG4gICAgICAgIGRpdiAqPSAyNTY7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLndyaXRlVWludExFID0gd3JpdGVVaW50TEU7XG4vKipcbiAqIFJlYWRzIDQgYnl0ZXMgZnJvbSBhcnJheSBzdGFydGluZyBhdCBvZmZzZXQgYXMgYmlnLWVuZGlhblxuICogMzItYml0IGZsb2F0aW5nLXBvaW50IG51bWJlciBhbmQgcmV0dXJucyBpdC5cbiAqL1xuZnVuY3Rpb24gcmVhZEZsb2F0MzJCRShhcnJheSwgb2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7IG9mZnNldCA9IDA7IH1cbiAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhhcnJheS5idWZmZXIsIGFycmF5LmJ5dGVPZmZzZXQsIGFycmF5LmJ5dGVMZW5ndGgpO1xuICAgIHJldHVybiB2aWV3LmdldEZsb2F0MzIob2Zmc2V0KTtcbn1cbmV4cG9ydHMucmVhZEZsb2F0MzJCRSA9IHJlYWRGbG9hdDMyQkU7XG4vKipcbiAqIFJlYWRzIDQgYnl0ZXMgZnJvbSBhcnJheSBzdGFydGluZyBhdCBvZmZzZXQgYXMgbGl0dGxlLWVuZGlhblxuICogMzItYml0IGZsb2F0aW5nLXBvaW50IG51bWJlciBhbmQgcmV0dXJucyBpdC5cbiAqL1xuZnVuY3Rpb24gcmVhZEZsb2F0MzJMRShhcnJheSwgb2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7IG9mZnNldCA9IDA7IH1cbiAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhhcnJheS5idWZmZXIsIGFycmF5LmJ5dGVPZmZzZXQsIGFycmF5LmJ5dGVMZW5ndGgpO1xuICAgIHJldHVybiB2aWV3LmdldEZsb2F0MzIob2Zmc2V0LCB0cnVlKTtcbn1cbmV4cG9ydHMucmVhZEZsb2F0MzJMRSA9IHJlYWRGbG9hdDMyTEU7XG4vKipcbiAqIFJlYWRzIDggYnl0ZXMgZnJvbSBhcnJheSBzdGFydGluZyBhdCBvZmZzZXQgYXMgYmlnLWVuZGlhblxuICogNjQtYml0IGZsb2F0aW5nLXBvaW50IG51bWJlciAoXCJkb3VibGVcIikgYW5kIHJldHVybnMgaXQuXG4gKi9cbmZ1bmN0aW9uIHJlYWRGbG9hdDY0QkUoYXJyYXksIG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoYXJyYXkuYnVmZmVyLCBhcnJheS5ieXRlT2Zmc2V0LCBhcnJheS5ieXRlTGVuZ3RoKTtcbiAgICByZXR1cm4gdmlldy5nZXRGbG9hdDY0KG9mZnNldCk7XG59XG5leHBvcnRzLnJlYWRGbG9hdDY0QkUgPSByZWFkRmxvYXQ2NEJFO1xuLyoqXG4gKiBSZWFkcyA4IGJ5dGVzIGZyb20gYXJyYXkgc3RhcnRpbmcgYXQgb2Zmc2V0IGFzIGxpdHRsZS1lbmRpYW5cbiAqIDY0LWJpdCBmbG9hdGluZy1wb2ludCBudW1iZXIgKFwiZG91YmxlXCIpIGFuZCByZXR1cm5zIGl0LlxuICovXG5mdW5jdGlvbiByZWFkRmxvYXQ2NExFKGFycmF5LCBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHsgb2Zmc2V0ID0gMDsgfVxuICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGFycmF5LmJ1ZmZlciwgYXJyYXkuYnl0ZU9mZnNldCwgYXJyYXkuYnl0ZUxlbmd0aCk7XG4gICAgcmV0dXJuIHZpZXcuZ2V0RmxvYXQ2NChvZmZzZXQsIHRydWUpO1xufVxuZXhwb3J0cy5yZWFkRmxvYXQ2NExFID0gcmVhZEZsb2F0NjRMRTtcbi8qKlxuICogV3JpdGVzIDQtYnl0ZSBiaWctZW5kaWFuIGZsb2F0aW5nLXBvaW50IHJlcHJlc2VudGF0aW9uIG9mIHZhbHVlXG4gKiB0byBieXRlIGFycmF5IHN0YXJ0aW5nIGF0IG9mZnNldC5cbiAqXG4gKiBJZiBieXRlIGFycmF5IGlzIG5vdCBnaXZlbiwgY3JlYXRlcyBhIG5ldyA0LWJ5dGUgb25lLlxuICpcbiAqIFJldHVybnMgdGhlIG91dHB1dCBieXRlIGFycmF5LlxuICovXG5mdW5jdGlvbiB3cml0ZUZsb2F0MzJCRSh2YWx1ZSwgb3V0LCBvZmZzZXQpIHtcbiAgICBpZiAob3V0ID09PSB2b2lkIDApIHsgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoNCk7IH1cbiAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHsgb2Zmc2V0ID0gMDsgfVxuICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KG91dC5idWZmZXIsIG91dC5ieXRlT2Zmc2V0LCBvdXQuYnl0ZUxlbmd0aCk7XG4gICAgdmlldy5zZXRGbG9hdDMyKG9mZnNldCwgdmFsdWUpO1xuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLndyaXRlRmxvYXQzMkJFID0gd3JpdGVGbG9hdDMyQkU7XG4vKipcbiAqIFdyaXRlcyA0LWJ5dGUgbGl0dGxlLWVuZGlhbiBmbG9hdGluZy1wb2ludCByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZVxuICogdG8gYnl0ZSBhcnJheSBzdGFydGluZyBhdCBvZmZzZXQuXG4gKlxuICogSWYgYnl0ZSBhcnJheSBpcyBub3QgZ2l2ZW4sIGNyZWF0ZXMgYSBuZXcgNC1ieXRlIG9uZS5cbiAqXG4gKiBSZXR1cm5zIHRoZSBvdXRwdXQgYnl0ZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gd3JpdGVGbG9hdDMyTEUodmFsdWUsIG91dCwgb2Zmc2V0KSB7XG4gICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7IG91dCA9IG5ldyBVaW50OEFycmF5KDQpOyB9XG4gICAgaWYgKG9mZnNldCA9PT0gdm9pZCAwKSB7IG9mZnNldCA9IDA7IH1cbiAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhvdXQuYnVmZmVyLCBvdXQuYnl0ZU9mZnNldCwgb3V0LmJ5dGVMZW5ndGgpO1xuICAgIHZpZXcuc2V0RmxvYXQzMihvZmZzZXQsIHZhbHVlLCB0cnVlKTtcbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy53cml0ZUZsb2F0MzJMRSA9IHdyaXRlRmxvYXQzMkxFO1xuLyoqXG4gKiBXcml0ZXMgOC1ieXRlIGJpZy1lbmRpYW4gZmxvYXRpbmctcG9pbnQgcmVwcmVzZW50YXRpb24gb2YgdmFsdWVcbiAqIHRvIGJ5dGUgYXJyYXkgc3RhcnRpbmcgYXQgb2Zmc2V0LlxuICpcbiAqIElmIGJ5dGUgYXJyYXkgaXMgbm90IGdpdmVuLCBjcmVhdGVzIGEgbmV3IDgtYnl0ZSBvbmUuXG4gKlxuICogUmV0dXJucyB0aGUgb3V0cHV0IGJ5dGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHdyaXRlRmxvYXQ2NEJFKHZhbHVlLCBvdXQsIG9mZnNldCkge1xuICAgIGlmIChvdXQgPT09IHZvaWQgMCkgeyBvdXQgPSBuZXcgVWludDhBcnJheSg4KTsgfVxuICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcob3V0LmJ1ZmZlciwgb3V0LmJ5dGVPZmZzZXQsIG91dC5ieXRlTGVuZ3RoKTtcbiAgICB2aWV3LnNldEZsb2F0NjQob2Zmc2V0LCB2YWx1ZSk7XG4gICAgcmV0dXJuIG91dDtcbn1cbmV4cG9ydHMud3JpdGVGbG9hdDY0QkUgPSB3cml0ZUZsb2F0NjRCRTtcbi8qKlxuICogV3JpdGVzIDgtYnl0ZSBsaXR0bGUtZW5kaWFuIGZsb2F0aW5nLXBvaW50IHJlcHJlc2VudGF0aW9uIG9mIHZhbHVlXG4gKiB0byBieXRlIGFycmF5IHN0YXJ0aW5nIGF0IG9mZnNldC5cbiAqXG4gKiBJZiBieXRlIGFycmF5IGlzIG5vdCBnaXZlbiwgY3JlYXRlcyBhIG5ldyA4LWJ5dGUgb25lLlxuICpcbiAqIFJldHVybnMgdGhlIG91dHB1dCBieXRlIGFycmF5LlxuICovXG5mdW5jdGlvbiB3cml0ZUZsb2F0NjRMRSh2YWx1ZSwgb3V0LCBvZmZzZXQpIHtcbiAgICBpZiAob3V0ID09PSB2b2lkIDApIHsgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoOCk7IH1cbiAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHsgb2Zmc2V0ID0gMDsgfVxuICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KG91dC5idWZmZXIsIG91dC5ieXRlT2Zmc2V0LCBvdXQuYnl0ZUxlbmd0aCk7XG4gICAgdmlldy5zZXRGbG9hdDY0KG9mZnNldCwgdmFsdWUsIHRydWUpO1xuICAgIHJldHVybiBvdXQ7XG59XG5leHBvcnRzLndyaXRlRmxvYXQ2NExFID0gd3JpdGVGbG9hdDY0TEU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5hcnkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKEMpIDIwMTYgRG1pdHJ5IENoZXN0bnlraFxuLy8gTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIFBhY2thZ2UgY2hhY2hhIGltcGxlbWVudHMgQ2hhQ2hhIHN0cmVhbSBjaXBoZXIuXG4gKi9cbnZhciBiaW5hcnlfMSA9IHJlcXVpcmUoXCJAc3RhYmxlbGliL2JpbmFyeVwiKTtcbnZhciB3aXBlXzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi93aXBlXCIpO1xuLy8gTnVtYmVyIG9mIENoYUNoYSByb3VuZHMgKENoYUNoYTIwKS5cbnZhciBST1VORFMgPSAyMDtcbi8vIEFwcGxpZXMgdGhlIENoYUNoYSBjb3JlIGZ1bmN0aW9uIHRvIDE2LWJ5dGUgaW5wdXQsXG4vLyAzMi1ieXRlIGtleSBrZXksIGFuZCBwdXRzIHRoZSByZXN1bHQgaW50byA2NC1ieXRlIGFycmF5IG91dC5cbmZ1bmN0aW9uIGNvcmUob3V0LCBpbnB1dCwga2V5KSB7XG4gICAgdmFyIGowID0gMHg2MTcwNzg2NTsgLy8gXCJleHBhXCIgIC0tIENoYUNoYSdzIFwic2lnbWFcIiBjb25zdGFudFxuICAgIHZhciBqMSA9IDB4MzMyMDY0NkU7IC8vIFwibmQgM1wiICAgICBmb3IgMzItYnl0ZSBrZXlzXG4gICAgdmFyIGoyID0gMHg3OTYyMkQzMjsgLy8gXCIyLWJ5XCJcbiAgICB2YXIgajMgPSAweDZCMjA2NTc0OyAvLyBcInRlIGtcIlxuICAgIHZhciBqNCA9IChrZXlbM10gPDwgMjQpIHwgKGtleVsyXSA8PCAxNikgfCAoa2V5WzFdIDw8IDgpIHwga2V5WzBdO1xuICAgIHZhciBqNSA9IChrZXlbN10gPDwgMjQpIHwgKGtleVs2XSA8PCAxNikgfCAoa2V5WzVdIDw8IDgpIHwga2V5WzRdO1xuICAgIHZhciBqNiA9IChrZXlbMTFdIDw8IDI0KSB8IChrZXlbMTBdIDw8IDE2KSB8IChrZXlbOV0gPDwgOCkgfCBrZXlbOF07XG4gICAgdmFyIGo3ID0gKGtleVsxNV0gPDwgMjQpIHwgKGtleVsxNF0gPDwgMTYpIHwgKGtleVsxM10gPDwgOCkgfCBrZXlbMTJdO1xuICAgIHZhciBqOCA9IChrZXlbMTldIDw8IDI0KSB8IChrZXlbMThdIDw8IDE2KSB8IChrZXlbMTddIDw8IDgpIHwga2V5WzE2XTtcbiAgICB2YXIgajkgPSAoa2V5WzIzXSA8PCAyNCkgfCAoa2V5WzIyXSA8PCAxNikgfCAoa2V5WzIxXSA8PCA4KSB8IGtleVsyMF07XG4gICAgdmFyIGoxMCA9IChrZXlbMjddIDw8IDI0KSB8IChrZXlbMjZdIDw8IDE2KSB8IChrZXlbMjVdIDw8IDgpIHwga2V5WzI0XTtcbiAgICB2YXIgajExID0gKGtleVszMV0gPDwgMjQpIHwgKGtleVszMF0gPDwgMTYpIHwgKGtleVsyOV0gPDwgOCkgfCBrZXlbMjhdO1xuICAgIHZhciBqMTIgPSAoaW5wdXRbM10gPDwgMjQpIHwgKGlucHV0WzJdIDw8IDE2KSB8IChpbnB1dFsxXSA8PCA4KSB8IGlucHV0WzBdO1xuICAgIHZhciBqMTMgPSAoaW5wdXRbN10gPDwgMjQpIHwgKGlucHV0WzZdIDw8IDE2KSB8IChpbnB1dFs1XSA8PCA4KSB8IGlucHV0WzRdO1xuICAgIHZhciBqMTQgPSAoaW5wdXRbMTFdIDw8IDI0KSB8IChpbnB1dFsxMF0gPDwgMTYpIHwgKGlucHV0WzldIDw8IDgpIHwgaW5wdXRbOF07XG4gICAgdmFyIGoxNSA9IChpbnB1dFsxNV0gPDwgMjQpIHwgKGlucHV0WzE0XSA8PCAxNikgfCAoaW5wdXRbMTNdIDw8IDgpIHwgaW5wdXRbMTJdO1xuICAgIHZhciB4MCA9IGowO1xuICAgIHZhciB4MSA9IGoxO1xuICAgIHZhciB4MiA9IGoyO1xuICAgIHZhciB4MyA9IGozO1xuICAgIHZhciB4NCA9IGo0O1xuICAgIHZhciB4NSA9IGo1O1xuICAgIHZhciB4NiA9IGo2O1xuICAgIHZhciB4NyA9IGo3O1xuICAgIHZhciB4OCA9IGo4O1xuICAgIHZhciB4OSA9IGo5O1xuICAgIHZhciB4MTAgPSBqMTA7XG4gICAgdmFyIHgxMSA9IGoxMTtcbiAgICB2YXIgeDEyID0gajEyO1xuICAgIHZhciB4MTMgPSBqMTM7XG4gICAgdmFyIHgxNCA9IGoxNDtcbiAgICB2YXIgeDE1ID0gajE1O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgUk9VTkRTOyBpICs9IDIpIHtcbiAgICAgICAgeDAgPSB4MCArIHg0IHwgMDtcbiAgICAgICAgeDEyIF49IHgwO1xuICAgICAgICB4MTIgPSB4MTIgPj4+ICgzMiAtIDE2KSB8IHgxMiA8PCAxNjtcbiAgICAgICAgeDggPSB4OCArIHgxMiB8IDA7XG4gICAgICAgIHg0IF49IHg4O1xuICAgICAgICB4NCA9IHg0ID4+PiAoMzIgLSAxMikgfCB4NCA8PCAxMjtcbiAgICAgICAgeDEgPSB4MSArIHg1IHwgMDtcbiAgICAgICAgeDEzIF49IHgxO1xuICAgICAgICB4MTMgPSB4MTMgPj4+ICgzMiAtIDE2KSB8IHgxMyA8PCAxNjtcbiAgICAgICAgeDkgPSB4OSArIHgxMyB8IDA7XG4gICAgICAgIHg1IF49IHg5O1xuICAgICAgICB4NSA9IHg1ID4+PiAoMzIgLSAxMikgfCB4NSA8PCAxMjtcbiAgICAgICAgeDIgPSB4MiArIHg2IHwgMDtcbiAgICAgICAgeDE0IF49IHgyO1xuICAgICAgICB4MTQgPSB4MTQgPj4+ICgzMiAtIDE2KSB8IHgxNCA8PCAxNjtcbiAgICAgICAgeDEwID0geDEwICsgeDE0IHwgMDtcbiAgICAgICAgeDYgXj0geDEwO1xuICAgICAgICB4NiA9IHg2ID4+PiAoMzIgLSAxMikgfCB4NiA8PCAxMjtcbiAgICAgICAgeDMgPSB4MyArIHg3IHwgMDtcbiAgICAgICAgeDE1IF49IHgzO1xuICAgICAgICB4MTUgPSB4MTUgPj4+ICgzMiAtIDE2KSB8IHgxNSA8PCAxNjtcbiAgICAgICAgeDExID0geDExICsgeDE1IHwgMDtcbiAgICAgICAgeDcgXj0geDExO1xuICAgICAgICB4NyA9IHg3ID4+PiAoMzIgLSAxMikgfCB4NyA8PCAxMjtcbiAgICAgICAgeDIgPSB4MiArIHg2IHwgMDtcbiAgICAgICAgeDE0IF49IHgyO1xuICAgICAgICB4MTQgPSB4MTQgPj4+ICgzMiAtIDgpIHwgeDE0IDw8IDg7XG4gICAgICAgIHgxMCA9IHgxMCArIHgxNCB8IDA7XG4gICAgICAgIHg2IF49IHgxMDtcbiAgICAgICAgeDYgPSB4NiA+Pj4gKDMyIC0gNykgfCB4NiA8PCA3O1xuICAgICAgICB4MyA9IHgzICsgeDcgfCAwO1xuICAgICAgICB4MTUgXj0geDM7XG4gICAgICAgIHgxNSA9IHgxNSA+Pj4gKDMyIC0gOCkgfCB4MTUgPDwgODtcbiAgICAgICAgeDExID0geDExICsgeDE1IHwgMDtcbiAgICAgICAgeDcgXj0geDExO1xuICAgICAgICB4NyA9IHg3ID4+PiAoMzIgLSA3KSB8IHg3IDw8IDc7XG4gICAgICAgIHgxID0geDEgKyB4NSB8IDA7XG4gICAgICAgIHgxMyBePSB4MTtcbiAgICAgICAgeDEzID0geDEzID4+PiAoMzIgLSA4KSB8IHgxMyA8PCA4O1xuICAgICAgICB4OSA9IHg5ICsgeDEzIHwgMDtcbiAgICAgICAgeDUgXj0geDk7XG4gICAgICAgIHg1ID0geDUgPj4+ICgzMiAtIDcpIHwgeDUgPDwgNztcbiAgICAgICAgeDAgPSB4MCArIHg0IHwgMDtcbiAgICAgICAgeDEyIF49IHgwO1xuICAgICAgICB4MTIgPSB4MTIgPj4+ICgzMiAtIDgpIHwgeDEyIDw8IDg7XG4gICAgICAgIHg4ID0geDggKyB4MTIgfCAwO1xuICAgICAgICB4NCBePSB4ODtcbiAgICAgICAgeDQgPSB4NCA+Pj4gKDMyIC0gNykgfCB4NCA8PCA3O1xuICAgICAgICB4MCA9IHgwICsgeDUgfCAwO1xuICAgICAgICB4MTUgXj0geDA7XG4gICAgICAgIHgxNSA9IHgxNSA+Pj4gKDMyIC0gMTYpIHwgeDE1IDw8IDE2O1xuICAgICAgICB4MTAgPSB4MTAgKyB4MTUgfCAwO1xuICAgICAgICB4NSBePSB4MTA7XG4gICAgICAgIHg1ID0geDUgPj4+ICgzMiAtIDEyKSB8IHg1IDw8IDEyO1xuICAgICAgICB4MSA9IHgxICsgeDYgfCAwO1xuICAgICAgICB4MTIgXj0geDE7XG4gICAgICAgIHgxMiA9IHgxMiA+Pj4gKDMyIC0gMTYpIHwgeDEyIDw8IDE2O1xuICAgICAgICB4MTEgPSB4MTEgKyB4MTIgfCAwO1xuICAgICAgICB4NiBePSB4MTE7XG4gICAgICAgIHg2ID0geDYgPj4+ICgzMiAtIDEyKSB8IHg2IDw8IDEyO1xuICAgICAgICB4MiA9IHgyICsgeDcgfCAwO1xuICAgICAgICB4MTMgXj0geDI7XG4gICAgICAgIHgxMyA9IHgxMyA+Pj4gKDMyIC0gMTYpIHwgeDEzIDw8IDE2O1xuICAgICAgICB4OCA9IHg4ICsgeDEzIHwgMDtcbiAgICAgICAgeDcgXj0geDg7XG4gICAgICAgIHg3ID0geDcgPj4+ICgzMiAtIDEyKSB8IHg3IDw8IDEyO1xuICAgICAgICB4MyA9IHgzICsgeDQgfCAwO1xuICAgICAgICB4MTQgXj0geDM7XG4gICAgICAgIHgxNCA9IHgxNCA+Pj4gKDMyIC0gMTYpIHwgeDE0IDw8IDE2O1xuICAgICAgICB4OSA9IHg5ICsgeDE0IHwgMDtcbiAgICAgICAgeDQgXj0geDk7XG4gICAgICAgIHg0ID0geDQgPj4+ICgzMiAtIDEyKSB8IHg0IDw8IDEyO1xuICAgICAgICB4MiA9IHgyICsgeDcgfCAwO1xuICAgICAgICB4MTMgXj0geDI7XG4gICAgICAgIHgxMyA9IHgxMyA+Pj4gKDMyIC0gOCkgfCB4MTMgPDwgODtcbiAgICAgICAgeDggPSB4OCArIHgxMyB8IDA7XG4gICAgICAgIHg3IF49IHg4O1xuICAgICAgICB4NyA9IHg3ID4+PiAoMzIgLSA3KSB8IHg3IDw8IDc7XG4gICAgICAgIHgzID0geDMgKyB4NCB8IDA7XG4gICAgICAgIHgxNCBePSB4MztcbiAgICAgICAgeDE0ID0geDE0ID4+PiAoMzIgLSA4KSB8IHgxNCA8PCA4O1xuICAgICAgICB4OSA9IHg5ICsgeDE0IHwgMDtcbiAgICAgICAgeDQgXj0geDk7XG4gICAgICAgIHg0ID0geDQgPj4+ICgzMiAtIDcpIHwgeDQgPDwgNztcbiAgICAgICAgeDEgPSB4MSArIHg2IHwgMDtcbiAgICAgICAgeDEyIF49IHgxO1xuICAgICAgICB4MTIgPSB4MTIgPj4+ICgzMiAtIDgpIHwgeDEyIDw8IDg7XG4gICAgICAgIHgxMSA9IHgxMSArIHgxMiB8IDA7XG4gICAgICAgIHg2IF49IHgxMTtcbiAgICAgICAgeDYgPSB4NiA+Pj4gKDMyIC0gNykgfCB4NiA8PCA3O1xuICAgICAgICB4MCA9IHgwICsgeDUgfCAwO1xuICAgICAgICB4MTUgXj0geDA7XG4gICAgICAgIHgxNSA9IHgxNSA+Pj4gKDMyIC0gOCkgfCB4MTUgPDwgODtcbiAgICAgICAgeDEwID0geDEwICsgeDE1IHwgMDtcbiAgICAgICAgeDUgXj0geDEwO1xuICAgICAgICB4NSA9IHg1ID4+PiAoMzIgLSA3KSB8IHg1IDw8IDc7XG4gICAgfVxuICAgIGJpbmFyeV8xLndyaXRlVWludDMyTEUoeDAgKyBqMCB8IDAsIG91dCwgMCk7XG4gICAgYmluYXJ5XzEud3JpdGVVaW50MzJMRSh4MSArIGoxIHwgMCwgb3V0LCA0KTtcbiAgICBiaW5hcnlfMS53cml0ZVVpbnQzMkxFKHgyICsgajIgfCAwLCBvdXQsIDgpO1xuICAgIGJpbmFyeV8xLndyaXRlVWludDMyTEUoeDMgKyBqMyB8IDAsIG91dCwgMTIpO1xuICAgIGJpbmFyeV8xLndyaXRlVWludDMyTEUoeDQgKyBqNCB8IDAsIG91dCwgMTYpO1xuICAgIGJpbmFyeV8xLndyaXRlVWludDMyTEUoeDUgKyBqNSB8IDAsIG91dCwgMjApO1xuICAgIGJpbmFyeV8xLndyaXRlVWludDMyTEUoeDYgKyBqNiB8IDAsIG91dCwgMjQpO1xuICAgIGJpbmFyeV8xLndyaXRlVWludDMyTEUoeDcgKyBqNyB8IDAsIG91dCwgMjgpO1xuICAgIGJpbmFyeV8xLndyaXRlVWludDMyTEUoeDggKyBqOCB8IDAsIG91dCwgMzIpO1xuICAgIGJpbmFyeV8xLndyaXRlVWludDMyTEUoeDkgKyBqOSB8IDAsIG91dCwgMzYpO1xuICAgIGJpbmFyeV8xLndyaXRlVWludDMyTEUoeDEwICsgajEwIHwgMCwgb3V0LCA0MCk7XG4gICAgYmluYXJ5XzEud3JpdGVVaW50MzJMRSh4MTEgKyBqMTEgfCAwLCBvdXQsIDQ0KTtcbiAgICBiaW5hcnlfMS53cml0ZVVpbnQzMkxFKHgxMiArIGoxMiB8IDAsIG91dCwgNDgpO1xuICAgIGJpbmFyeV8xLndyaXRlVWludDMyTEUoeDEzICsgajEzIHwgMCwgb3V0LCA1Mik7XG4gICAgYmluYXJ5XzEud3JpdGVVaW50MzJMRSh4MTQgKyBqMTQgfCAwLCBvdXQsIDU2KTtcbiAgICBiaW5hcnlfMS53cml0ZVVpbnQzMkxFKHgxNSArIGoxNSB8IDAsIG91dCwgNjApO1xufVxuLyoqXG4gKiBFbmNyeXB0IHNyYyB3aXRoIENoYUNoYTIwIHN0cmVhbSBnZW5lcmF0ZWQgZm9yIHRoZSBnaXZlbiAzMi1ieXRlIGtleSBhbmRcbiAqIDgtYnl0ZSAoYXMgaW4gb3JpZ2luYWwgaW1wbGVtZW50YXRpb24pIG9yIDEyLWJ5dGUgKGFzIGluIFJGQzc1MzkpIG5vbmNlIGFuZFxuICogd3JpdGUgdGhlIHJlc3VsdCBpbnRvIGRzdCBhbmQgcmV0dXJuIGl0LlxuICpcbiAqIGRzdCBhbmQgc3JjIG1heSBiZSB0aGUgc2FtZSwgYnV0IG90aGVyd2lzZSBtdXN0IG5vdCBvdmVybGFwLlxuICpcbiAqIElmIG5vbmNlIGlzIDEyIGJ5dGVzLCB1c2VycyBzaG91bGQgbm90IGVuY3J5cHQgbW9yZSB0aGFuIDI1NiBHaUIgd2l0aCB0aGVcbiAqIHNhbWUga2V5IGFuZCBub25jZSwgb3RoZXJ3aXNlIHRoZSBzdHJlYW0gd2lsbCByZXBlYXQuIFRoZSBmdW5jdGlvbiB3aWxsXG4gKiB0aHJvdyBlcnJvciBpZiBjb3VudGVyIG92ZXJmbG93cyB0byBwcmV2ZW50IHRoaXMuXG4gKlxuICogSWYgbm9uY2UgaXMgOCBieXRlcywgdGhlIG91dHB1dCBpcyBwcmFjdGljYWxseSB1bmxpbWl0ZWQgKDJeNzAgYnl0ZXMsIHdoaWNoXG4gKiBpcyBtb3JlIHRoYW4gYSBtaWxsaW9uIHBldGFieXRlcykuIEhvd2V2ZXIsIGl0IGlzIG5vdCByZWNvbW1lbmRlZCB0b1xuICogZ2VuZXJhdGUgOC1ieXRlIG5vbmNlcyByYW5kb21seSwgYXMgdGhlIGNoYW5jZSBvZiBjb2xsaXNpb24gaXMgaGlnaC5cbiAqXG4gKiBOZXZlciB1c2UgdGhlIHNhbWUga2V5IGFuZCBub25jZSB0byBlbmNyeXB0IG1vcmUgdGhhbiBvbmUgbWVzc2FnZS5cbiAqXG4gKiBJZiBub25jZUlucGxhY2VDb3VudGVyTGVuZ3RoIGlzIG5vdCAwLCB0aGUgbm9uY2UgaXMgYXNzdW1lZCB0byBiZSBhIDE2LWJ5dGVcbiAqIGFycmF5IHdpdGggc3RyZWFtIGNvdW50ZXIgaW4gZmlyc3Qgbm9uY2VJbnBsYWNlQ291bnRlckxlbmd0aCBieXRlcyBhbmQgbm9uY2VcbiAqIGluIHRoZSBsYXN0IHJlbWFpbmluZyBieXRlcy4gVGhlIGNvdW50ZXIgd2lsbCBiZSBpbmNyZW1lbnRlZCBpbnBsYWNlIGZvclxuICogZWFjaCBDaGFDaGEgYmxvY2suIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSBuZWVkIHRvIGVuY3J5cHQgb25lIHN0cmVhbSBvZiBkYXRhXG4gKiBpbiBjaHVua3MuXG4gKi9cbmZ1bmN0aW9uIHN0cmVhbVhPUihrZXksIG5vbmNlLCBzcmMsIGRzdCwgbm9uY2VJbnBsYWNlQ291bnRlckxlbmd0aCkge1xuICAgIGlmIChub25jZUlucGxhY2VDb3VudGVyTGVuZ3RoID09PSB2b2lkIDApIHsgbm9uY2VJbnBsYWNlQ291bnRlckxlbmd0aCA9IDA7IH1cbiAgICAvLyBXZSBvbmx5IHN1cHBvcnQgMjU2LWJpdCBrZXlzLlxuICAgIGlmIChrZXkubGVuZ3RoICE9PSAzMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDaGFDaGE6IGtleSBzaXplIG11c3QgYmUgMzIgYnl0ZXNcIik7XG4gICAgfVxuICAgIGlmIChkc3QubGVuZ3RoIDwgc3JjLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDaGFDaGE6IGRlc3RpbmF0aW9uIGlzIHNob3J0ZXIgdGhhbiBzb3VyY2VcIik7XG4gICAgfVxuICAgIHZhciBuYztcbiAgICB2YXIgY291bnRlckxlbmd0aDtcbiAgICBpZiAobm9uY2VJbnBsYWNlQ291bnRlckxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAobm9uY2UubGVuZ3RoICE9PSA4ICYmIG5vbmNlLmxlbmd0aCAhPT0gMTIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNoYUNoYSBub25jZSBtdXN0IGJlIDggb3IgMTIgYnl0ZXNcIik7XG4gICAgICAgIH1cbiAgICAgICAgbmMgPSBuZXcgVWludDhBcnJheSgxNik7XG4gICAgICAgIC8vIEZpcnN0IGNvdW50ZXJMZW5ndGggYnl0ZXMgb2YgbmMgYXJlIGNvdW50ZXIsIHN0YXJ0aW5nIHdpdGggemVyby5cbiAgICAgICAgY291bnRlckxlbmd0aCA9IG5jLmxlbmd0aCAtIG5vbmNlLmxlbmd0aDtcbiAgICAgICAgLy8gTGFzdCBieXRlcyBvZiBuYyBhZnRlciBjb3VudGVyTGVuZ3RoIGFyZSBub25jZSwgc2V0IHRoZW0uXG4gICAgICAgIG5jLnNldChub25jZSwgY291bnRlckxlbmd0aCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAobm9uY2UubGVuZ3RoICE9PSAxNikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2hhQ2hhIG5vbmNlIHdpdGggY291bnRlciBtdXN0IGJlIDE2IGJ5dGVzXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoaXMgd2lsbCB1cGRhdGUgcGFzc2VkIG5vbmNlIHdpdGggY291bnRlciBpbnBsYWNlLlxuICAgICAgICBuYyA9IG5vbmNlO1xuICAgICAgICBjb3VudGVyTGVuZ3RoID0gbm9uY2VJbnBsYWNlQ291bnRlckxlbmd0aDtcbiAgICB9XG4gICAgLy8gQWxsb2NhdGUgdGVtcG9yYXJ5IHNwYWNlIGZvciBDaGFDaGEgYmxvY2suXG4gICAgdmFyIGJsb2NrID0gbmV3IFVpbnQ4QXJyYXkoNjQpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3JjLmxlbmd0aDsgaSArPSA2NCkge1xuICAgICAgICAvLyBHZW5lcmF0ZSBhIGJsb2NrLlxuICAgICAgICBjb3JlKGJsb2NrLCBuYywga2V5KTtcbiAgICAgICAgLy8gWE9SIGJsb2NrIGJ5dGVzIHdpdGggc3JjIGludG8gZHN0LlxuICAgICAgICBmb3IgKHZhciBqID0gaTsgaiA8IGkgKyA2NCAmJiBqIDwgc3JjLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBkc3Rbal0gPSBzcmNbal0gXiBibG9ja1tqIC0gaV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5jcmVtZW50IGNvdW50ZXIuXG4gICAgICAgIGluY3JlbWVudENvdW50ZXIobmMsIDAsIGNvdW50ZXJMZW5ndGgpO1xuICAgIH1cbiAgICAvLyBDbGVhbnVwIHRlbXBvcmFyeSBzcGFjZS5cbiAgICB3aXBlXzEud2lwZShibG9jayk7XG4gICAgaWYgKG5vbmNlSW5wbGFjZUNvdW50ZXJMZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gQ2xlYW51cCBjb3VudGVyLlxuICAgICAgICB3aXBlXzEud2lwZShuYyk7XG4gICAgfVxuICAgIHJldHVybiBkc3Q7XG59XG5leHBvcnRzLnN0cmVhbVhPUiA9IHN0cmVhbVhPUjtcbi8qKlxuICogR2VuZXJhdGUgQ2hhQ2hhMjAgc3RyZWFtIGZvciB0aGUgZ2l2ZW4gMzItYnl0ZSBrZXkgYW5kIDgtYnl0ZSBvciAxMi1ieXRlXG4gKiBub25jZSBhbmQgd3JpdGUgaXQgaW50byBkc3QgYW5kIHJldHVybiBpdC5cbiAqXG4gKiBOZXZlciB1c2UgdGhlIHNhbWUga2V5IGFuZCBub25jZSB0byBnZW5lcmF0ZSBtb3JlIHRoYW4gb25lIHN0cmVhbS5cbiAqXG4gKiBJZiBub25jZUlucGxhY2VDb3VudGVyTGVuZ3RoIGlzIG5vdCAwLCBpdCBiZWhhdmVzIHRoZSBzYW1lIHdpdGggcmVzcGVjdCB0b1xuICogdGhlIG5vbmNlIGFzIGRlc2NyaWJlZCBpbiB0aGUgc3RyZWFtWE9SIGRvY3VtZW50YXRpb24uXG4gKlxuICogc3RyZWFtIGlzIGxpa2Ugc3RyZWFtWE9SIHdpdGggYWxsLXplcm8gc3JjLlxuICovXG5mdW5jdGlvbiBzdHJlYW0oa2V5LCBub25jZSwgZHN0LCBub25jZUlucGxhY2VDb3VudGVyTGVuZ3RoKSB7XG4gICAgaWYgKG5vbmNlSW5wbGFjZUNvdW50ZXJMZW5ndGggPT09IHZvaWQgMCkgeyBub25jZUlucGxhY2VDb3VudGVyTGVuZ3RoID0gMDsgfVxuICAgIHdpcGVfMS53aXBlKGRzdCk7XG4gICAgcmV0dXJuIHN0cmVhbVhPUihrZXksIG5vbmNlLCBkc3QsIGRzdCwgbm9uY2VJbnBsYWNlQ291bnRlckxlbmd0aCk7XG59XG5leHBvcnRzLnN0cmVhbSA9IHN0cmVhbTtcbmZ1bmN0aW9uIGluY3JlbWVudENvdW50ZXIoY291bnRlciwgcG9zLCBsZW4pIHtcbiAgICB2YXIgY2FycnkgPSAxO1xuICAgIHdoaWxlIChsZW4tLSkge1xuICAgICAgICBjYXJyeSA9IGNhcnJ5ICsgKGNvdW50ZXJbcG9zXSAmIDB4ZmYpIHwgMDtcbiAgICAgICAgY291bnRlcltwb3NdID0gY2FycnkgJiAweGZmO1xuICAgICAgICBjYXJyeSA+Pj49IDg7XG4gICAgICAgIHBvcysrO1xuICAgIH1cbiAgICBpZiAoY2FycnkgPiAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNoYUNoYTogY291bnRlciBvdmVyZmxvd1wiKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFjaGEuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKEMpIDIwMTYgRG1pdHJ5IENoZXN0bnlraFxuLy8gTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY2hhY2hhXzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi9jaGFjaGFcIik7XG52YXIgcG9seTEzMDVfMSA9IHJlcXVpcmUoXCJAc3RhYmxlbGliL3BvbHkxMzA1XCIpO1xudmFyIHdpcGVfMSA9IHJlcXVpcmUoXCJAc3RhYmxlbGliL3dpcGVcIik7XG52YXIgYmluYXJ5XzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi9iaW5hcnlcIik7XG52YXIgY29uc3RhbnRfdGltZV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvY29uc3RhbnQtdGltZVwiKTtcbmV4cG9ydHMuS0VZX0xFTkdUSCA9IDMyO1xuZXhwb3J0cy5OT05DRV9MRU5HVEggPSAxMjtcbmV4cG9ydHMuVEFHX0xFTkdUSCA9IDE2O1xudmFyIFpFUk9TID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuLyoqXG4gKiBDaGFDaGEyMC1Qb2x5MTMwNSBBdXRoZW50aWNhdGVkIEVuY3J5cHRpb24gd2l0aCBBc3NvY2lhdGVkIERhdGEuXG4gKlxuICogRGVmaW5lZCBpbiBSRkM3NTM5LlxuICovXG52YXIgQ2hhQ2hhMjBQb2x5MTMwNSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIHdpdGggdGhlIGdpdmVuIDMyLWJ5dGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIENoYUNoYTIwUG9seTEzMDUoa2V5KSB7XG4gICAgICAgIHRoaXMubm9uY2VMZW5ndGggPSBleHBvcnRzLk5PTkNFX0xFTkdUSDtcbiAgICAgICAgdGhpcy50YWdMZW5ndGggPSBleHBvcnRzLlRBR19MRU5HVEg7XG4gICAgICAgIGlmIChrZXkubGVuZ3RoICE9PSBleHBvcnRzLktFWV9MRU5HVEgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNoYUNoYTIwUG9seTEzMDUgbmVlZHMgMzItYnl0ZSBrZXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29weSBrZXkuXG4gICAgICAgIHRoaXMuX2tleSA9IG5ldyBVaW50OEFycmF5KGtleSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY3J5cHRzIGFuZCBhdXRoZW50aWNhdGVzIHBsYWludGV4dCwgYXV0aGVudGljYXRlcyBhc3NvY2lhdGVkIGRhdGEsXG4gICAgICogYW5kIHJldHVybnMgc2VhbGVkIGNpcGhlcnRleHQsIHdoaWNoIGluY2x1ZGVzIGF1dGhlbnRpY2F0aW9uIHRhZy5cbiAgICAgKlxuICAgICAqIFJGQzc1Mzkgc3BlY2lmaWVzIDEyIGJ5dGVzIGZvciBub25jZS4gSXQgbWF5IGJlIHRoaXMgMTItYnl0ZSBub25jZVxuICAgICAqIChcIklWXCIpLCBvciBmdWxsIDE2LWJ5dGUgY291bnRlciAoY2FsbGVkIFwiMzItYml0IGZpeGVkLWNvbW1vbiBwYXJ0XCIpXG4gICAgICogYW5kIG5vbmNlLlxuICAgICAqXG4gICAgICogSWYgZHN0IGlzIGdpdmVuIChpdCBtdXN0IGJlIHRoZSBzaXplIG9mIHBsYWludGV4dCArIHRoZSBzaXplIG9mIHRhZ1xuICAgICAqIGxlbmd0aCkgdGhlIHJlc3VsdCB3aWxsIGJlIHB1dCBpbnRvIGl0LiBEc3QgYW5kIHBsYWludGV4dCBtdXN0IG5vdFxuICAgICAqIG92ZXJsYXAuXG4gICAgICovXG4gICAgQ2hhQ2hhMjBQb2x5MTMwNS5wcm90b3R5cGUuc2VhbCA9IGZ1bmN0aW9uIChub25jZSwgcGxhaW50ZXh0LCBhc3NvY2lhdGVkRGF0YSwgZHN0KSB7XG4gICAgICAgIGlmIChub25jZS5sZW5ndGggPiAxNikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2hhQ2hhMjBQb2x5MTMwNTogaW5jb3JyZWN0IG5vbmNlIGxlbmd0aFwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbGxvY2F0ZSBzcGFjZSBmb3IgY291bnRlciwgYW5kIHNldCBub25jZSBhcyBsYXN0IGJ5dGVzIG9mIGl0LlxuICAgICAgICB2YXIgY291bnRlciA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgICAgICAgY291bnRlci5zZXQobm9uY2UsIGNvdW50ZXIubGVuZ3RoIC0gbm9uY2UubGVuZ3RoKTtcbiAgICAgICAgLy8gR2VuZXJhdGUgYXV0aGVudGljYXRpb24ga2V5IGJ5IHRha2luZyBmaXJzdCAzMi1ieXRlcyBvZiBzdHJlYW0uXG4gICAgICAgIC8vIFdlIHBhc3MgZnVsbCBjb3VudGVyLCB3aGljaCBoYXMgMTItYnl0ZSBub25jZSBhbmQgNC1ieXRlIGJsb2NrIGNvdW50ZXIsXG4gICAgICAgIC8vIGFuZCBpdCB3aWxsIGdldCBpbmNyZW1lbnRlZCBhZnRlciBnZW5lcmF0aW5nIHRoZSBibG9jaywgd2hpY2ggaXNcbiAgICAgICAgLy8gZXhhY3RseSB3aGF0IHdlIG5lZWQ6IHdlIG9ubHkgdXNlIHRoZSBmaXJzdCAzMiBieXRlcyBvZiA2NC1ieXRlXG4gICAgICAgIC8vIENoYUNoYSBibG9jayBhbmQgZGlzY2FyZCB0aGUgbmV4dCAzMiBieXRlcy5cbiAgICAgICAgdmFyIGF1dGhLZXkgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgICAgIGNoYWNoYV8xLnN0cmVhbSh0aGlzLl9rZXksIGNvdW50ZXIsIGF1dGhLZXksIDQpO1xuICAgICAgICAvLyBBbGxvY2F0ZSBzcGFjZSBmb3Igc2VhbGVkIGNpcGhlcnRleHQuXG4gICAgICAgIHZhciByZXN1bHRMZW5ndGggPSBwbGFpbnRleHQubGVuZ3RoICsgdGhpcy50YWdMZW5ndGg7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmIChkc3QpIHtcbiAgICAgICAgICAgIGlmIChkc3QubGVuZ3RoICE9PSByZXN1bHRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDaGFDaGEyMFBvbHkxMzA1OiBpbmNvcnJlY3QgZGVzdGluYXRpb24gbGVuZ3RoXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ID0gZHN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkocmVzdWx0TGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbmNyeXB0IHBsYWludGV4dC5cbiAgICAgICAgY2hhY2hhXzEuc3RyZWFtWE9SKHRoaXMuX2tleSwgY291bnRlciwgcGxhaW50ZXh0LCByZXN1bHQsIDQpO1xuICAgICAgICAvLyBBdXRoZW50aWNhdGUuXG4gICAgICAgIC8vIFhYWDogY2FuIFwic2ltcGxpZnlcIiBoZXJlOiBwYXNzIGZ1bGwgcmVzdWx0ICh3aGljaCBpcyBhbHJlYWR5IHBhZGRlZFxuICAgICAgICAvLyBkdWUgdG8gemVyb2VzIHByZXBhcmVkIGZvciB0YWcpLCBhbmQgY2lwaGVydGV4dCBsZW5ndGggaW5zdGVhZCBvZlxuICAgICAgICAvLyBzdWJhcnJheSBvZiByZXN1bHQuXG4gICAgICAgIHRoaXMuX2F1dGhlbnRpY2F0ZShyZXN1bHQuc3ViYXJyYXkocmVzdWx0Lmxlbmd0aCAtIHRoaXMudGFnTGVuZ3RoLCByZXN1bHQubGVuZ3RoKSwgYXV0aEtleSwgcmVzdWx0LnN1YmFycmF5KDAsIHJlc3VsdC5sZW5ndGggLSB0aGlzLnRhZ0xlbmd0aCksIGFzc29jaWF0ZWREYXRhKTtcbiAgICAgICAgLy8gQ2xlYW51cC5cbiAgICAgICAgd2lwZV8xLndpcGUoY291bnRlcik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBdXRoZW50aWNhdGVzIHNlYWxlZCBjaXBoZXJ0ZXh0ICh3aGljaCBpbmNsdWRlcyBhdXRoZW50aWNhdGlvbiB0YWcpIGFuZFxuICAgICAqIGFzc29jaWF0ZWQgZGF0YSwgZGVjcnlwdHMgY2lwaGVydGV4dCBhbmQgcmV0dXJucyBkZWNyeXB0ZWQgcGxhaW50ZXh0LlxuICAgICAqXG4gICAgICogUkZDNzUzOSBzcGVjaWZpZXMgMTIgYnl0ZXMgZm9yIG5vbmNlLiBJdCBtYXkgYmUgdGhpcyAxMi1ieXRlIG5vbmNlXG4gICAgICogKFwiSVZcIiksIG9yIGZ1bGwgMTYtYnl0ZSBjb3VudGVyIChjYWxsZWQgXCIzMi1iaXQgZml4ZWQtY29tbW9uIHBhcnRcIilcbiAgICAgKiBhbmQgbm9uY2UuXG4gICAgICpcbiAgICAgKiBJZiBhdXRoZW50aWNhdGlvbiBmYWlscywgaXQgcmV0dXJucyBudWxsLlxuICAgICAqXG4gICAgICogSWYgZHN0IGlzIGdpdmVuIChpdCBtdXN0IGJlIG9mIGNpcGhlcnRleHQgbGVuZ3RoIG1pbnVzIHRhZyBsZW5ndGgpLFxuICAgICAqIHRoZSByZXN1bHQgd2lsbCBiZSBwdXQgaW50byBpdC4gRHN0IGFuZCBwbGFpbnRleHQgbXVzdCBub3Qgb3ZlcmxhcC5cbiAgICAgKi9cbiAgICBDaGFDaGEyMFBvbHkxMzA1LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKG5vbmNlLCBzZWFsZWQsIGFzc29jaWF0ZWREYXRhLCBkc3QpIHtcbiAgICAgICAgaWYgKG5vbmNlLmxlbmd0aCA+IDE2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDaGFDaGEyMFBvbHkxMzA1OiBpbmNvcnJlY3Qgbm9uY2UgbGVuZ3RoXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlYWxlZCBjaXBoZXJ0ZXh0IHNob3VsZCBhdCBsZWFzdCBjb250YWluIHRhZy5cbiAgICAgICAgaWYgKHNlYWxlZC5sZW5ndGggPCB0aGlzLnRhZ0xlbmd0aCkge1xuICAgICAgICAgICAgLy8gVE9ETyhkY2hlc3QpOiBzaG91bGQgd2UgdGhyb3cgaGVyZSBpbnN0ZWFkP1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsb2NhdGUgc3BhY2UgZm9yIGNvdW50ZXIsIGFuZCBzZXQgbm9uY2UgYXMgbGFzdCBieXRlcyBvZiBpdC5cbiAgICAgICAgdmFyIGNvdW50ZXIgPSBuZXcgVWludDhBcnJheSgxNik7XG4gICAgICAgIGNvdW50ZXIuc2V0KG5vbmNlLCBjb3VudGVyLmxlbmd0aCAtIG5vbmNlLmxlbmd0aCk7XG4gICAgICAgIC8vIEdlbmVyYXRlIGF1dGhlbnRpY2F0aW9uIGtleSBieSB0YWtpbmcgZmlyc3QgMzItYnl0ZXMgb2Ygc3RyZWFtLlxuICAgICAgICB2YXIgYXV0aEtleSA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgICAgICAgY2hhY2hhXzEuc3RyZWFtKHRoaXMuX2tleSwgY291bnRlciwgYXV0aEtleSwgNCk7XG4gICAgICAgIC8vIEF1dGhlbnRpY2F0ZS5cbiAgICAgICAgLy8gWFhYOiBjYW4gc2ltcGxpZnkgYW5kIGF2b2lkIGFsbG9jYXRpb246IHNpbmNlIGF1dGhlbnRpY2F0ZSgpXG4gICAgICAgIC8vIGFscmVhZHkgYWxsb2NhdGVzIHRhZyAoZnJvbSBQb2x5MTMwNS5kaWdlc3QoKSwgaXQgY2FuIHJldHVybilcbiAgICAgICAgLy8gaXQgaW5zdGVhZCBvZiBjb3B5aW5nIHRvIGNhbGN1bGF0ZWRUYWcuIEJ1dCB0aGVuIGluIHNlYWwoKVxuICAgICAgICAvLyB3ZSdsbCBuZWVkIHRvIGNvcHkgaXQuXG4gICAgICAgIHZhciBjYWxjdWxhdGVkVGFnID0gbmV3IFVpbnQ4QXJyYXkodGhpcy50YWdMZW5ndGgpO1xuICAgICAgICB0aGlzLl9hdXRoZW50aWNhdGUoY2FsY3VsYXRlZFRhZywgYXV0aEtleSwgc2VhbGVkLnN1YmFycmF5KDAsIHNlYWxlZC5sZW5ndGggLSB0aGlzLnRhZ0xlbmd0aCksIGFzc29jaWF0ZWREYXRhKTtcbiAgICAgICAgLy8gQ29uc3RhbnQtdGltZSBjb21wYXJlIHRhZ3MgYW5kIHJldHVybiBudWxsIGlmIHRoZXkgZGlmZmVyLlxuICAgICAgICBpZiAoIWNvbnN0YW50X3RpbWVfMS5lcXVhbChjYWxjdWxhdGVkVGFnLCBzZWFsZWQuc3ViYXJyYXkoc2VhbGVkLmxlbmd0aCAtIHRoaXMudGFnTGVuZ3RoLCBzZWFsZWQubGVuZ3RoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFsbG9jYXRlIHNwYWNlIGZvciBkZWNyeXB0ZWQgcGxhaW50ZXh0LlxuICAgICAgICB2YXIgcmVzdWx0TGVuZ3RoID0gc2VhbGVkLmxlbmd0aCAtIHRoaXMudGFnTGVuZ3RoO1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAoZHN0KSB7XG4gICAgICAgICAgICBpZiAoZHN0Lmxlbmd0aCAhPT0gcmVzdWx0TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2hhQ2hhMjBQb2x5MTMwNTogaW5jb3JyZWN0IGRlc3RpbmF0aW9uIGxlbmd0aFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IGRzdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHJlc3VsdExlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVjcnlwdC5cbiAgICAgICAgY2hhY2hhXzEuc3RyZWFtWE9SKHRoaXMuX2tleSwgY291bnRlciwgc2VhbGVkLnN1YmFycmF5KDAsIHNlYWxlZC5sZW5ndGggLSB0aGlzLnRhZ0xlbmd0aCksIHJlc3VsdCwgNCk7XG4gICAgICAgIC8vIENsZWFudXAuXG4gICAgICAgIHdpcGVfMS53aXBlKGNvdW50ZXIpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgQ2hhQ2hhMjBQb2x5MTMwNS5wcm90b3R5cGUuY2xlYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX2tleSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQ2hhQ2hhMjBQb2x5MTMwNS5wcm90b3R5cGUuX2F1dGhlbnRpY2F0ZSA9IGZ1bmN0aW9uICh0YWdPdXQsIGF1dGhLZXksIGNpcGhlcnRleHQsIGFzc29jaWF0ZWREYXRhKSB7XG4gICAgICAgIC8vIEluaXRpYWxpemUgUG9seTEzMDUgd2l0aCBhdXRoS2V5LlxuICAgICAgICB2YXIgaCA9IG5ldyBwb2x5MTMwNV8xLlBvbHkxMzA1KGF1dGhLZXkpO1xuICAgICAgICAvLyBBdXRoZW50aWNhdGUgcGFkZGVkIGFzc29jaWF0ZWQgZGF0YS5cbiAgICAgICAgaWYgKGFzc29jaWF0ZWREYXRhKSB7XG4gICAgICAgICAgICBoLnVwZGF0ZShhc3NvY2lhdGVkRGF0YSk7XG4gICAgICAgICAgICBpZiAoYXNzb2NpYXRlZERhdGEubGVuZ3RoICUgMTYgPiAwKSB7XG4gICAgICAgICAgICAgICAgaC51cGRhdGUoWkVST1Muc3ViYXJyYXkoYXNzb2NpYXRlZERhdGEubGVuZ3RoICUgMTYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBdXRoZW50aWNhdGUgcGFkZGVkIGNpcGhlcnRleHQuXG4gICAgICAgIGgudXBkYXRlKGNpcGhlcnRleHQpO1xuICAgICAgICBpZiAoY2lwaGVydGV4dC5sZW5ndGggJSAxNiA+IDApIHtcbiAgICAgICAgICAgIGgudXBkYXRlKFpFUk9TLnN1YmFycmF5KGNpcGhlcnRleHQubGVuZ3RoICUgMTYpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBdXRoZW50aWNhdGUgbGVuZ3RoIG9mIGFzc29jaWF0ZWQgZGF0YS5cbiAgICAgICAgLy8gWFhYOiBjYW4gYXZvaWQgYWxsb2NhdGlvbiBoZXJlP1xuICAgICAgICB2YXIgbGVuZ3RoID0gbmV3IFVpbnQ4QXJyYXkoOCk7XG4gICAgICAgIGlmIChhc3NvY2lhdGVkRGF0YSkge1xuICAgICAgICAgICAgYmluYXJ5XzEud3JpdGVVaW50NjRMRShhc3NvY2lhdGVkRGF0YS5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaC51cGRhdGUobGVuZ3RoKTtcbiAgICAgICAgLy8gQXV0aGVudGljYXRlIGxlbmd0aCBvZiBjaXBoZXJ0ZXh0LlxuICAgICAgICBiaW5hcnlfMS53cml0ZVVpbnQ2NExFKGNpcGhlcnRleHQubGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICBoLnVwZGF0ZShsZW5ndGgpO1xuICAgICAgICAvLyBHZXQgdGFnIGFuZCBjb3B5IGl0IGludG8gdGFnT3V0LlxuICAgICAgICB2YXIgdGFnID0gaC5kaWdlc3QoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRhZ091dFtpXSA9IHRhZ1tpXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDbGVhbnVwLlxuICAgICAgICBoLmNsZWFuKCk7XG4gICAgICAgIHdpcGVfMS53aXBlKHRhZyk7XG4gICAgICAgIHdpcGVfMS53aXBlKGxlbmd0aCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ2hhQ2hhMjBQb2x5MTMwNTtcbn0oKSk7XG5leHBvcnRzLkNoYUNoYTIwUG9seTEzMDUgPSBDaGFDaGEyMFBvbHkxMzA1O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhY2hhMjBwb2x5MTMwNS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoQykgMjAxNiBEbWl0cnkgQ2hlc3RueWtoXG4vLyBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogUGFja2FnZSBjb25zdGFudC10aW1lIHByb3ZpZGVzIGZ1bmN0aW9ucyBmb3IgcGVyZm9ybWluZyBhbGdvcml0aG1pY2FsbHkgY29uc3RhbnQtdGltZSBvcGVyYXRpb25zLlxuICovXG4vKipcbiAqIE5PVEUhIER1ZSB0byB0aGUgaW5hYmlsaXR5IHRvIGd1YXJhbnRlZSByZWFsIGNvbnN0YW50IHRpbWUgZXZhbHVhdGlvbiBvZlxuICogYW55dGhpbmcgaW4gSmF2YVNjcmlwdCBWTSwgdGhpcyBpcyBtb2R1bGUgaXMgdGhlIGJlc3QgZWZmb3J0LlxuICovXG4vKipcbiAqIFJldHVybnMgcmVzdWx0SWZPbmUgaWYgc3ViamVjdCBpcyAxLCBvciByZXN1bHRJZlplcm8gaWYgc3ViamVjdCBpcyAwLlxuICpcbiAqIFN1cHBvcnRzIG9ubHkgMzItYml0IGludGVnZXJzLCBzbyByZXN1bHRJZk9uZSBvciByZXN1bHRJZlplcm8gYXJlIG5vdFxuICogaW50ZWdlcnMsIHRoZXknbGwgYmUgY29udmVydGVkIHRvIHRoZW0gd2l0aCBiaXR3aXNlIG9wZXJhdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHNlbGVjdChzdWJqZWN0LCByZXN1bHRJZk9uZSwgcmVzdWx0SWZaZXJvKSB7XG4gICAgcmV0dXJuICh+KHN1YmplY3QgLSAxKSAmIHJlc3VsdElmT25lKSB8ICgoc3ViamVjdCAtIDEpICYgcmVzdWx0SWZaZXJvKTtcbn1cbmV4cG9ydHMuc2VsZWN0ID0gc2VsZWN0O1xuLyoqXG4gKiBSZXR1cm5zIDEgaWYgYSA8PSBiLCBvciAwIGlmIG5vdC5cbiAqIEFyZ3VtZW50cyBtdXN0IGJlIHBvc2l0aXZlIDMyLWJpdCBpbnRlZ2VycyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gMl4zMSAtIDEuXG4gKi9cbmZ1bmN0aW9uIGxlc3NPckVxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gKCgoYSB8IDApIC0gKGIgfCAwKSAtIDEpID4+PiAzMSkgJiAxO1xufVxuZXhwb3J0cy5sZXNzT3JFcXVhbCA9IGxlc3NPckVxdWFsO1xuLyoqXG4gKiBSZXR1cm5zIDEgaWYgYSBhbmQgYiBhcmUgb2YgZXF1YWwgbGVuZ3RoIGFuZCB0aGVpciBjb250ZW50c1xuICogYXJlIGVxdWFsLCBvciAwIG90aGVyd2lzZS5cbiAqXG4gKiBOb3RlIHRoYXQgdW5saWtlIGluIGVxdWFsKCksIHplcm8tbGVuZ3RoIGlucHV0cyBhcmUgY29uc2lkZXJlZFxuICogdGhlIHNhbWUsIHNvIHRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gMS5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCB8PSBhW2ldIF4gYltpXTtcbiAgICB9XG4gICAgcmV0dXJuICgxICYgKChyZXN1bHQgLSAxKSA+Pj4gOCkpO1xufVxuZXhwb3J0cy5jb21wYXJlID0gY29tcGFyZTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgYW5kIGIgYXJlIG9mIGVxdWFsIG5vbi16ZXJvIGxlbmd0aCxcbiAqIGFuZCB0aGVpciBjb250ZW50cyBhcmUgZXF1YWwsIG9yIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBOb3RlIHRoYXQgdW5saWtlIGluIGNvbXBhcmUoKSB6ZXJvLWxlbmd0aCBpbnB1dHMgYXJlIGNvbnNpZGVyZWRcbiAqIF9ub3RfIGVxdWFsLCBzbyB0aGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZhbHNlLlxuICovXG5mdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gICAgaWYgKGEubGVuZ3RoID09PSAwIHx8IGIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBhcmUoYSwgYikgIT09IDA7XG59XG5leHBvcnRzLmVxdWFsID0gZXF1YWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudC10aW1lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb252ZXJ0U2VjcmV0S2V5VG9YMjU1MTkgPSBleHBvcnRzLmNvbnZlcnRQdWJsaWNLZXlUb1gyNTUxOSA9IGV4cG9ydHMudmVyaWZ5ID0gZXhwb3J0cy5zaWduID0gZXhwb3J0cy5leHRyYWN0UHVibGljS2V5RnJvbVNlY3JldEtleSA9IGV4cG9ydHMuZ2VuZXJhdGVLZXlQYWlyID0gZXhwb3J0cy5nZW5lcmF0ZUtleVBhaXJGcm9tU2VlZCA9IGV4cG9ydHMuU0VFRF9MRU5HVEggPSBleHBvcnRzLlNFQ1JFVF9LRVlfTEVOR1RIID0gZXhwb3J0cy5QVUJMSUNfS0VZX0xFTkdUSCA9IGV4cG9ydHMuU0lHTkFUVVJFX0xFTkdUSCA9IHZvaWQgMDtcbi8qKlxuICogUGFja2FnZSBlZDI1NTE5IGltcGxlbWVudHMgRWQyNTUxOSBwdWJsaWMta2V5IHNpZ25hdHVyZSBhbGdvcml0aG0uXG4gKi9cbmNvbnN0IHJhbmRvbV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvcmFuZG9tXCIpO1xuY29uc3Qgc2hhNTEyXzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi9zaGE1MTJcIik7XG5jb25zdCB3aXBlXzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi93aXBlXCIpO1xuZXhwb3J0cy5TSUdOQVRVUkVfTEVOR1RIID0gNjQ7XG5leHBvcnRzLlBVQkxJQ19LRVlfTEVOR1RIID0gMzI7XG5leHBvcnRzLlNFQ1JFVF9LRVlfTEVOR1RIID0gNjQ7XG5leHBvcnRzLlNFRURfTEVOR1RIID0gMzI7XG4vLyBSZXR1cm5zIG5ldyB6ZXJvLWZpbGxlZCAxNi1lbGVtZW50IEdGIChGbG9hdDY0QXJyYXkpLlxuLy8gSWYgcGFzc2VkIGFuIGFycmF5IG9mIG51bWJlcnMsIHByZWZpbGxzIHRoZSByZXR1cm5lZFxuLy8gYXJyYXkgd2l0aCB0aGVtLlxuLy9cbi8vIFdlIHVzZSBGbG9hdDY0QXJyYXksIGJlY2F1c2Ugd2UgbmVlZCA0OC1iaXQgbnVtYmVyc1xuLy8gZm9yIHRoaXMgaW1wbGVtZW50YXRpb24uXG5mdW5jdGlvbiBnZihpbml0KSB7XG4gICAgY29uc3QgciA9IG5ldyBGbG9hdDY0QXJyYXkoMTYpO1xuICAgIGlmIChpbml0KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5pdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcltpXSA9IGluaXRbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG59XG4vLyBCYXNlIHBvaW50LlxuY29uc3QgXzkgPSBuZXcgVWludDhBcnJheSgzMik7XG5fOVswXSA9IDk7XG5jb25zdCBnZjAgPSBnZigpO1xuY29uc3QgZ2YxID0gZ2YoWzFdKTtcbmNvbnN0IEQgPSBnZihbXG4gICAgMHg3OGEzLCAweDEzNTksIDB4NGRjYSwgMHg3NWViLCAweGQ4YWIsIDB4NDE0MSwgMHgwYTRkLCAweDAwNzAsXG4gICAgMHhlODk4LCAweDc3NzksIDB4NDA3OSwgMHg4Y2M3LCAweGZlNzMsIDB4MmI2ZiwgMHg2Y2VlLCAweDUyMDNcbl0pO1xuY29uc3QgRDIgPSBnZihbXG4gICAgMHhmMTU5LCAweDI2YjIsIDB4OWI5NCwgMHhlYmQ2LCAweGIxNTYsIDB4ODI4MywgMHgxNDlhLCAweDAwZTAsXG4gICAgMHhkMTMwLCAweGVlZjMsIDB4ODBmMiwgMHgxOThlLCAweGZjZTcsIDB4NTZkZiwgMHhkOWRjLCAweDI0MDZcbl0pO1xuY29uc3QgWCA9IGdmKFtcbiAgICAweGQ1MWEsIDB4OGYyNSwgMHgyZDYwLCAweGM5NTYsIDB4YTdiMiwgMHg5NTI1LCAweGM3NjAsIDB4NjkyYyxcbiAgICAweGRjNWMsIDB4ZmRkNiwgMHhlMjMxLCAweGMwYTQsIDB4NTNmZSwgMHhjZDZlLCAweDM2ZDMsIDB4MjE2OVxuXSk7XG5jb25zdCBZID0gZ2YoW1xuICAgIDB4NjY1OCwgMHg2NjY2LCAweDY2NjYsIDB4NjY2NiwgMHg2NjY2LCAweDY2NjYsIDB4NjY2NiwgMHg2NjY2LFxuICAgIDB4NjY2NiwgMHg2NjY2LCAweDY2NjYsIDB4NjY2NiwgMHg2NjY2LCAweDY2NjYsIDB4NjY2NiwgMHg2NjY2XG5dKTtcbmNvbnN0IEkgPSBnZihbXG4gICAgMHhhMGIwLCAweDRhMGUsIDB4MWIyNywgMHhjNGVlLCAweGU0NzgsIDB4YWQyZiwgMHgxODA2LCAweDJmNDMsXG4gICAgMHhkN2E3LCAweDNkZmIsIDB4MDA5OSwgMHgyYjRkLCAweGRmMGIsIDB4NGZjMSwgMHgyNDgwLCAweDJiODNcbl0pO1xuZnVuY3Rpb24gc2V0MjU1MTkociwgYSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICByW2ldID0gYVtpXSB8IDA7XG4gICAgfVxufVxuZnVuY3Rpb24gY2FyMjU1MTkobykge1xuICAgIGxldCBjID0gMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgbGV0IHYgPSBvW2ldICsgYyArIDY1NTM1O1xuICAgICAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgICAgICBvW2ldID0gdiAtIGMgKiA2NTUzNjtcbiAgICB9XG4gICAgb1swXSArPSBjIC0gMSArIDM3ICogKGMgLSAxKTtcbn1cbmZ1bmN0aW9uIHNlbDI1NTE5KHAsIHEsIGIpIHtcbiAgICBjb25zdCBjID0gfihiIC0gMSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHQgPSBjICYgKHBbaV0gXiBxW2ldKTtcbiAgICAgICAgcFtpXSBePSB0O1xuICAgICAgICBxW2ldIF49IHQ7XG4gICAgfVxufVxuZnVuY3Rpb24gcGFjazI1NTE5KG8sIG4pIHtcbiAgICBjb25zdCBtID0gZ2YoKTtcbiAgICBjb25zdCB0ID0gZ2YoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgdFtpXSA9IG5baV07XG4gICAgfVxuICAgIGNhcjI1NTE5KHQpO1xuICAgIGNhcjI1NTE5KHQpO1xuICAgIGNhcjI1NTE5KHQpO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgMjsgaisrKSB7XG4gICAgICAgIG1bMF0gPSB0WzBdIC0gMHhmZmVkO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IDE1OyBpKyspIHtcbiAgICAgICAgICAgIG1baV0gPSB0W2ldIC0gMHhmZmZmIC0gKChtW2kgLSAxXSA+PiAxNikgJiAxKTtcbiAgICAgICAgICAgIG1baSAtIDFdICY9IDB4ZmZmZjtcbiAgICAgICAgfVxuICAgICAgICBtWzE1XSA9IHRbMTVdIC0gMHg3ZmZmIC0gKChtWzE0XSA+PiAxNikgJiAxKTtcbiAgICAgICAgY29uc3QgYiA9IChtWzE1XSA+PiAxNikgJiAxO1xuICAgICAgICBtWzE0XSAmPSAweGZmZmY7XG4gICAgICAgIHNlbDI1NTE5KHQsIG0sIDEgLSBiKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgIG9bMiAqIGldID0gdFtpXSAmIDB4ZmY7XG4gICAgICAgIG9bMiAqIGkgKyAxXSA9IHRbaV0gPj4gODtcbiAgICB9XG59XG5mdW5jdGlvbiB2ZXJpZnkzMih4LCB5KSB7XG4gICAgbGV0IGQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzI7IGkrKykge1xuICAgICAgICBkIHw9IHhbaV0gXiB5W2ldO1xuICAgIH1cbiAgICByZXR1cm4gKDEgJiAoKGQgLSAxKSA+Pj4gOCkpIC0gMTtcbn1cbmZ1bmN0aW9uIG5lcTI1NTE5KGEsIGIpIHtcbiAgICBjb25zdCBjID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICAgIGNvbnN0IGQgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgcGFjazI1NTE5KGMsIGEpO1xuICAgIHBhY2syNTUxOShkLCBiKTtcbiAgICByZXR1cm4gdmVyaWZ5MzIoYywgZCk7XG59XG5mdW5jdGlvbiBwYXIyNTUxOShhKSB7XG4gICAgY29uc3QgZCA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgICBwYWNrMjU1MTkoZCwgYSk7XG4gICAgcmV0dXJuIGRbMF0gJiAxO1xufVxuZnVuY3Rpb24gdW5wYWNrMjU1MTkobywgbikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICBvW2ldID0gblsyICogaV0gKyAoblsyICogaSArIDFdIDw8IDgpO1xuICAgIH1cbiAgICBvWzE1XSAmPSAweDdmZmY7XG59XG5mdW5jdGlvbiBhZGQobywgYSwgYikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICBvW2ldID0gYVtpXSArIGJbaV07XG4gICAgfVxufVxuZnVuY3Rpb24gc3ViKG8sIGEsIGIpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgb1tpXSA9IGFbaV0gLSBiW2ldO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG11bChvLCBhLCBiKSB7XG4gICAgbGV0IHYsIGMsIHQwID0gMCwgdDEgPSAwLCB0MiA9IDAsIHQzID0gMCwgdDQgPSAwLCB0NSA9IDAsIHQ2ID0gMCwgdDcgPSAwLCB0OCA9IDAsIHQ5ID0gMCwgdDEwID0gMCwgdDExID0gMCwgdDEyID0gMCwgdDEzID0gMCwgdDE0ID0gMCwgdDE1ID0gMCwgdDE2ID0gMCwgdDE3ID0gMCwgdDE4ID0gMCwgdDE5ID0gMCwgdDIwID0gMCwgdDIxID0gMCwgdDIyID0gMCwgdDIzID0gMCwgdDI0ID0gMCwgdDI1ID0gMCwgdDI2ID0gMCwgdDI3ID0gMCwgdDI4ID0gMCwgdDI5ID0gMCwgdDMwID0gMCwgYjAgPSBiWzBdLCBiMSA9IGJbMV0sIGIyID0gYlsyXSwgYjMgPSBiWzNdLCBiNCA9IGJbNF0sIGI1ID0gYls1XSwgYjYgPSBiWzZdLCBiNyA9IGJbN10sIGI4ID0gYls4XSwgYjkgPSBiWzldLCBiMTAgPSBiWzEwXSwgYjExID0gYlsxMV0sIGIxMiA9IGJbMTJdLCBiMTMgPSBiWzEzXSwgYjE0ID0gYlsxNF0sIGIxNSA9IGJbMTVdO1xuICAgIHYgPSBhWzBdO1xuICAgIHQwICs9IHYgKiBiMDtcbiAgICB0MSArPSB2ICogYjE7XG4gICAgdDIgKz0gdiAqIGIyO1xuICAgIHQzICs9IHYgKiBiMztcbiAgICB0NCArPSB2ICogYjQ7XG4gICAgdDUgKz0gdiAqIGI1O1xuICAgIHQ2ICs9IHYgKiBiNjtcbiAgICB0NyArPSB2ICogYjc7XG4gICAgdDggKz0gdiAqIGI4O1xuICAgIHQ5ICs9IHYgKiBiOTtcbiAgICB0MTAgKz0gdiAqIGIxMDtcbiAgICB0MTEgKz0gdiAqIGIxMTtcbiAgICB0MTIgKz0gdiAqIGIxMjtcbiAgICB0MTMgKz0gdiAqIGIxMztcbiAgICB0MTQgKz0gdiAqIGIxNDtcbiAgICB0MTUgKz0gdiAqIGIxNTtcbiAgICB2ID0gYVsxXTtcbiAgICB0MSArPSB2ICogYjA7XG4gICAgdDIgKz0gdiAqIGIxO1xuICAgIHQzICs9IHYgKiBiMjtcbiAgICB0NCArPSB2ICogYjM7XG4gICAgdDUgKz0gdiAqIGI0O1xuICAgIHQ2ICs9IHYgKiBiNTtcbiAgICB0NyArPSB2ICogYjY7XG4gICAgdDggKz0gdiAqIGI3O1xuICAgIHQ5ICs9IHYgKiBiODtcbiAgICB0MTAgKz0gdiAqIGI5O1xuICAgIHQxMSArPSB2ICogYjEwO1xuICAgIHQxMiArPSB2ICogYjExO1xuICAgIHQxMyArPSB2ICogYjEyO1xuICAgIHQxNCArPSB2ICogYjEzO1xuICAgIHQxNSArPSB2ICogYjE0O1xuICAgIHQxNiArPSB2ICogYjE1O1xuICAgIHYgPSBhWzJdO1xuICAgIHQyICs9IHYgKiBiMDtcbiAgICB0MyArPSB2ICogYjE7XG4gICAgdDQgKz0gdiAqIGIyO1xuICAgIHQ1ICs9IHYgKiBiMztcbiAgICB0NiArPSB2ICogYjQ7XG4gICAgdDcgKz0gdiAqIGI1O1xuICAgIHQ4ICs9IHYgKiBiNjtcbiAgICB0OSArPSB2ICogYjc7XG4gICAgdDEwICs9IHYgKiBiODtcbiAgICB0MTEgKz0gdiAqIGI5O1xuICAgIHQxMiArPSB2ICogYjEwO1xuICAgIHQxMyArPSB2ICogYjExO1xuICAgIHQxNCArPSB2ICogYjEyO1xuICAgIHQxNSArPSB2ICogYjEzO1xuICAgIHQxNiArPSB2ICogYjE0O1xuICAgIHQxNyArPSB2ICogYjE1O1xuICAgIHYgPSBhWzNdO1xuICAgIHQzICs9IHYgKiBiMDtcbiAgICB0NCArPSB2ICogYjE7XG4gICAgdDUgKz0gdiAqIGIyO1xuICAgIHQ2ICs9IHYgKiBiMztcbiAgICB0NyArPSB2ICogYjQ7XG4gICAgdDggKz0gdiAqIGI1O1xuICAgIHQ5ICs9IHYgKiBiNjtcbiAgICB0MTAgKz0gdiAqIGI3O1xuICAgIHQxMSArPSB2ICogYjg7XG4gICAgdDEyICs9IHYgKiBiOTtcbiAgICB0MTMgKz0gdiAqIGIxMDtcbiAgICB0MTQgKz0gdiAqIGIxMTtcbiAgICB0MTUgKz0gdiAqIGIxMjtcbiAgICB0MTYgKz0gdiAqIGIxMztcbiAgICB0MTcgKz0gdiAqIGIxNDtcbiAgICB0MTggKz0gdiAqIGIxNTtcbiAgICB2ID0gYVs0XTtcbiAgICB0NCArPSB2ICogYjA7XG4gICAgdDUgKz0gdiAqIGIxO1xuICAgIHQ2ICs9IHYgKiBiMjtcbiAgICB0NyArPSB2ICogYjM7XG4gICAgdDggKz0gdiAqIGI0O1xuICAgIHQ5ICs9IHYgKiBiNTtcbiAgICB0MTAgKz0gdiAqIGI2O1xuICAgIHQxMSArPSB2ICogYjc7XG4gICAgdDEyICs9IHYgKiBiODtcbiAgICB0MTMgKz0gdiAqIGI5O1xuICAgIHQxNCArPSB2ICogYjEwO1xuICAgIHQxNSArPSB2ICogYjExO1xuICAgIHQxNiArPSB2ICogYjEyO1xuICAgIHQxNyArPSB2ICogYjEzO1xuICAgIHQxOCArPSB2ICogYjE0O1xuICAgIHQxOSArPSB2ICogYjE1O1xuICAgIHYgPSBhWzVdO1xuICAgIHQ1ICs9IHYgKiBiMDtcbiAgICB0NiArPSB2ICogYjE7XG4gICAgdDcgKz0gdiAqIGIyO1xuICAgIHQ4ICs9IHYgKiBiMztcbiAgICB0OSArPSB2ICogYjQ7XG4gICAgdDEwICs9IHYgKiBiNTtcbiAgICB0MTEgKz0gdiAqIGI2O1xuICAgIHQxMiArPSB2ICogYjc7XG4gICAgdDEzICs9IHYgKiBiODtcbiAgICB0MTQgKz0gdiAqIGI5O1xuICAgIHQxNSArPSB2ICogYjEwO1xuICAgIHQxNiArPSB2ICogYjExO1xuICAgIHQxNyArPSB2ICogYjEyO1xuICAgIHQxOCArPSB2ICogYjEzO1xuICAgIHQxOSArPSB2ICogYjE0O1xuICAgIHQyMCArPSB2ICogYjE1O1xuICAgIHYgPSBhWzZdO1xuICAgIHQ2ICs9IHYgKiBiMDtcbiAgICB0NyArPSB2ICogYjE7XG4gICAgdDggKz0gdiAqIGIyO1xuICAgIHQ5ICs9IHYgKiBiMztcbiAgICB0MTAgKz0gdiAqIGI0O1xuICAgIHQxMSArPSB2ICogYjU7XG4gICAgdDEyICs9IHYgKiBiNjtcbiAgICB0MTMgKz0gdiAqIGI3O1xuICAgIHQxNCArPSB2ICogYjg7XG4gICAgdDE1ICs9IHYgKiBiOTtcbiAgICB0MTYgKz0gdiAqIGIxMDtcbiAgICB0MTcgKz0gdiAqIGIxMTtcbiAgICB0MTggKz0gdiAqIGIxMjtcbiAgICB0MTkgKz0gdiAqIGIxMztcbiAgICB0MjAgKz0gdiAqIGIxNDtcbiAgICB0MjEgKz0gdiAqIGIxNTtcbiAgICB2ID0gYVs3XTtcbiAgICB0NyArPSB2ICogYjA7XG4gICAgdDggKz0gdiAqIGIxO1xuICAgIHQ5ICs9IHYgKiBiMjtcbiAgICB0MTAgKz0gdiAqIGIzO1xuICAgIHQxMSArPSB2ICogYjQ7XG4gICAgdDEyICs9IHYgKiBiNTtcbiAgICB0MTMgKz0gdiAqIGI2O1xuICAgIHQxNCArPSB2ICogYjc7XG4gICAgdDE1ICs9IHYgKiBiODtcbiAgICB0MTYgKz0gdiAqIGI5O1xuICAgIHQxNyArPSB2ICogYjEwO1xuICAgIHQxOCArPSB2ICogYjExO1xuICAgIHQxOSArPSB2ICogYjEyO1xuICAgIHQyMCArPSB2ICogYjEzO1xuICAgIHQyMSArPSB2ICogYjE0O1xuICAgIHQyMiArPSB2ICogYjE1O1xuICAgIHYgPSBhWzhdO1xuICAgIHQ4ICs9IHYgKiBiMDtcbiAgICB0OSArPSB2ICogYjE7XG4gICAgdDEwICs9IHYgKiBiMjtcbiAgICB0MTEgKz0gdiAqIGIzO1xuICAgIHQxMiArPSB2ICogYjQ7XG4gICAgdDEzICs9IHYgKiBiNTtcbiAgICB0MTQgKz0gdiAqIGI2O1xuICAgIHQxNSArPSB2ICogYjc7XG4gICAgdDE2ICs9IHYgKiBiODtcbiAgICB0MTcgKz0gdiAqIGI5O1xuICAgIHQxOCArPSB2ICogYjEwO1xuICAgIHQxOSArPSB2ICogYjExO1xuICAgIHQyMCArPSB2ICogYjEyO1xuICAgIHQyMSArPSB2ICogYjEzO1xuICAgIHQyMiArPSB2ICogYjE0O1xuICAgIHQyMyArPSB2ICogYjE1O1xuICAgIHYgPSBhWzldO1xuICAgIHQ5ICs9IHYgKiBiMDtcbiAgICB0MTAgKz0gdiAqIGIxO1xuICAgIHQxMSArPSB2ICogYjI7XG4gICAgdDEyICs9IHYgKiBiMztcbiAgICB0MTMgKz0gdiAqIGI0O1xuICAgIHQxNCArPSB2ICogYjU7XG4gICAgdDE1ICs9IHYgKiBiNjtcbiAgICB0MTYgKz0gdiAqIGI3O1xuICAgIHQxNyArPSB2ICogYjg7XG4gICAgdDE4ICs9IHYgKiBiOTtcbiAgICB0MTkgKz0gdiAqIGIxMDtcbiAgICB0MjAgKz0gdiAqIGIxMTtcbiAgICB0MjEgKz0gdiAqIGIxMjtcbiAgICB0MjIgKz0gdiAqIGIxMztcbiAgICB0MjMgKz0gdiAqIGIxNDtcbiAgICB0MjQgKz0gdiAqIGIxNTtcbiAgICB2ID0gYVsxMF07XG4gICAgdDEwICs9IHYgKiBiMDtcbiAgICB0MTEgKz0gdiAqIGIxO1xuICAgIHQxMiArPSB2ICogYjI7XG4gICAgdDEzICs9IHYgKiBiMztcbiAgICB0MTQgKz0gdiAqIGI0O1xuICAgIHQxNSArPSB2ICogYjU7XG4gICAgdDE2ICs9IHYgKiBiNjtcbiAgICB0MTcgKz0gdiAqIGI3O1xuICAgIHQxOCArPSB2ICogYjg7XG4gICAgdDE5ICs9IHYgKiBiOTtcbiAgICB0MjAgKz0gdiAqIGIxMDtcbiAgICB0MjEgKz0gdiAqIGIxMTtcbiAgICB0MjIgKz0gdiAqIGIxMjtcbiAgICB0MjMgKz0gdiAqIGIxMztcbiAgICB0MjQgKz0gdiAqIGIxNDtcbiAgICB0MjUgKz0gdiAqIGIxNTtcbiAgICB2ID0gYVsxMV07XG4gICAgdDExICs9IHYgKiBiMDtcbiAgICB0MTIgKz0gdiAqIGIxO1xuICAgIHQxMyArPSB2ICogYjI7XG4gICAgdDE0ICs9IHYgKiBiMztcbiAgICB0MTUgKz0gdiAqIGI0O1xuICAgIHQxNiArPSB2ICogYjU7XG4gICAgdDE3ICs9IHYgKiBiNjtcbiAgICB0MTggKz0gdiAqIGI3O1xuICAgIHQxOSArPSB2ICogYjg7XG4gICAgdDIwICs9IHYgKiBiOTtcbiAgICB0MjEgKz0gdiAqIGIxMDtcbiAgICB0MjIgKz0gdiAqIGIxMTtcbiAgICB0MjMgKz0gdiAqIGIxMjtcbiAgICB0MjQgKz0gdiAqIGIxMztcbiAgICB0MjUgKz0gdiAqIGIxNDtcbiAgICB0MjYgKz0gdiAqIGIxNTtcbiAgICB2ID0gYVsxMl07XG4gICAgdDEyICs9IHYgKiBiMDtcbiAgICB0MTMgKz0gdiAqIGIxO1xuICAgIHQxNCArPSB2ICogYjI7XG4gICAgdDE1ICs9IHYgKiBiMztcbiAgICB0MTYgKz0gdiAqIGI0O1xuICAgIHQxNyArPSB2ICogYjU7XG4gICAgdDE4ICs9IHYgKiBiNjtcbiAgICB0MTkgKz0gdiAqIGI3O1xuICAgIHQyMCArPSB2ICogYjg7XG4gICAgdDIxICs9IHYgKiBiOTtcbiAgICB0MjIgKz0gdiAqIGIxMDtcbiAgICB0MjMgKz0gdiAqIGIxMTtcbiAgICB0MjQgKz0gdiAqIGIxMjtcbiAgICB0MjUgKz0gdiAqIGIxMztcbiAgICB0MjYgKz0gdiAqIGIxNDtcbiAgICB0MjcgKz0gdiAqIGIxNTtcbiAgICB2ID0gYVsxM107XG4gICAgdDEzICs9IHYgKiBiMDtcbiAgICB0MTQgKz0gdiAqIGIxO1xuICAgIHQxNSArPSB2ICogYjI7XG4gICAgdDE2ICs9IHYgKiBiMztcbiAgICB0MTcgKz0gdiAqIGI0O1xuICAgIHQxOCArPSB2ICogYjU7XG4gICAgdDE5ICs9IHYgKiBiNjtcbiAgICB0MjAgKz0gdiAqIGI3O1xuICAgIHQyMSArPSB2ICogYjg7XG4gICAgdDIyICs9IHYgKiBiOTtcbiAgICB0MjMgKz0gdiAqIGIxMDtcbiAgICB0MjQgKz0gdiAqIGIxMTtcbiAgICB0MjUgKz0gdiAqIGIxMjtcbiAgICB0MjYgKz0gdiAqIGIxMztcbiAgICB0MjcgKz0gdiAqIGIxNDtcbiAgICB0MjggKz0gdiAqIGIxNTtcbiAgICB2ID0gYVsxNF07XG4gICAgdDE0ICs9IHYgKiBiMDtcbiAgICB0MTUgKz0gdiAqIGIxO1xuICAgIHQxNiArPSB2ICogYjI7XG4gICAgdDE3ICs9IHYgKiBiMztcbiAgICB0MTggKz0gdiAqIGI0O1xuICAgIHQxOSArPSB2ICogYjU7XG4gICAgdDIwICs9IHYgKiBiNjtcbiAgICB0MjEgKz0gdiAqIGI3O1xuICAgIHQyMiArPSB2ICogYjg7XG4gICAgdDIzICs9IHYgKiBiOTtcbiAgICB0MjQgKz0gdiAqIGIxMDtcbiAgICB0MjUgKz0gdiAqIGIxMTtcbiAgICB0MjYgKz0gdiAqIGIxMjtcbiAgICB0MjcgKz0gdiAqIGIxMztcbiAgICB0MjggKz0gdiAqIGIxNDtcbiAgICB0MjkgKz0gdiAqIGIxNTtcbiAgICB2ID0gYVsxNV07XG4gICAgdDE1ICs9IHYgKiBiMDtcbiAgICB0MTYgKz0gdiAqIGIxO1xuICAgIHQxNyArPSB2ICogYjI7XG4gICAgdDE4ICs9IHYgKiBiMztcbiAgICB0MTkgKz0gdiAqIGI0O1xuICAgIHQyMCArPSB2ICogYjU7XG4gICAgdDIxICs9IHYgKiBiNjtcbiAgICB0MjIgKz0gdiAqIGI3O1xuICAgIHQyMyArPSB2ICogYjg7XG4gICAgdDI0ICs9IHYgKiBiOTtcbiAgICB0MjUgKz0gdiAqIGIxMDtcbiAgICB0MjYgKz0gdiAqIGIxMTtcbiAgICB0MjcgKz0gdiAqIGIxMjtcbiAgICB0MjggKz0gdiAqIGIxMztcbiAgICB0MjkgKz0gdiAqIGIxNDtcbiAgICB0MzAgKz0gdiAqIGIxNTtcbiAgICB0MCArPSAzOCAqIHQxNjtcbiAgICB0MSArPSAzOCAqIHQxNztcbiAgICB0MiArPSAzOCAqIHQxODtcbiAgICB0MyArPSAzOCAqIHQxOTtcbiAgICB0NCArPSAzOCAqIHQyMDtcbiAgICB0NSArPSAzOCAqIHQyMTtcbiAgICB0NiArPSAzOCAqIHQyMjtcbiAgICB0NyArPSAzOCAqIHQyMztcbiAgICB0OCArPSAzOCAqIHQyNDtcbiAgICB0OSArPSAzOCAqIHQyNTtcbiAgICB0MTAgKz0gMzggKiB0MjY7XG4gICAgdDExICs9IDM4ICogdDI3O1xuICAgIHQxMiArPSAzOCAqIHQyODtcbiAgICB0MTMgKz0gMzggKiB0Mjk7XG4gICAgdDE0ICs9IDM4ICogdDMwO1xuICAgIC8vIHQxNSBsZWZ0IGFzIGlzXG4gICAgLy8gZmlyc3QgY2FyXG4gICAgYyA9IDE7XG4gICAgdiA9IHQwICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDAgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MSArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQxID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDIgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MiA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQzICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDMgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0NCArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQ0ID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDUgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0NSA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQ2ICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDYgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0NyArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQ3ID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDggKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0OCA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQ5ICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDkgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MTAgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MTAgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MTEgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MTEgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MTIgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MTIgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MTMgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MTMgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MTQgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MTQgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MTUgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MTUgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHQwICs9IGMgLSAxICsgMzcgKiAoYyAtIDEpO1xuICAgIC8vIHNlY29uZCBjYXJcbiAgICBjID0gMTtcbiAgICB2ID0gdDAgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MCA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQxICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDEgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MiArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQyID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDMgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MyA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQ0ICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDQgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0NSArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQ1ID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDYgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0NiA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQ3ICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDcgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0OCArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQ4ID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDkgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0OSA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQxMCArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQxMCA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQxMSArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQxMSA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQxMiArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQxMiA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQxMyArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQxMyA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQxNCArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQxNCA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQxNSArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQxNSA9IHYgLSBjICogNjU1MzY7XG4gICAgdDAgKz0gYyAtIDEgKyAzNyAqIChjIC0gMSk7XG4gICAgb1swXSA9IHQwO1xuICAgIG9bMV0gPSB0MTtcbiAgICBvWzJdID0gdDI7XG4gICAgb1szXSA9IHQzO1xuICAgIG9bNF0gPSB0NDtcbiAgICBvWzVdID0gdDU7XG4gICAgb1s2XSA9IHQ2O1xuICAgIG9bN10gPSB0NztcbiAgICBvWzhdID0gdDg7XG4gICAgb1s5XSA9IHQ5O1xuICAgIG9bMTBdID0gdDEwO1xuICAgIG9bMTFdID0gdDExO1xuICAgIG9bMTJdID0gdDEyO1xuICAgIG9bMTNdID0gdDEzO1xuICAgIG9bMTRdID0gdDE0O1xuICAgIG9bMTVdID0gdDE1O1xufVxuZnVuY3Rpb24gc3F1YXJlKG8sIGEpIHtcbiAgICBtdWwobywgYSwgYSk7XG59XG5mdW5jdGlvbiBpbnYyNTUxOShvLCBpKSB7XG4gICAgY29uc3QgYyA9IGdmKCk7XG4gICAgbGV0IGE7XG4gICAgZm9yIChhID0gMDsgYSA8IDE2OyBhKyspIHtcbiAgICAgICAgY1thXSA9IGlbYV07XG4gICAgfVxuICAgIGZvciAoYSA9IDI1MzsgYSA+PSAwOyBhLS0pIHtcbiAgICAgICAgc3F1YXJlKGMsIGMpO1xuICAgICAgICBpZiAoYSAhPT0gMiAmJiBhICE9PSA0KSB7XG4gICAgICAgICAgICBtdWwoYywgYywgaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChhID0gMDsgYSA8IDE2OyBhKyspIHtcbiAgICAgICAgb1thXSA9IGNbYV07XG4gICAgfVxufVxuZnVuY3Rpb24gcG93MjUyMyhvLCBpKSB7XG4gICAgY29uc3QgYyA9IGdmKCk7XG4gICAgbGV0IGE7XG4gICAgZm9yIChhID0gMDsgYSA8IDE2OyBhKyspIHtcbiAgICAgICAgY1thXSA9IGlbYV07XG4gICAgfVxuICAgIGZvciAoYSA9IDI1MDsgYSA+PSAwOyBhLS0pIHtcbiAgICAgICAgc3F1YXJlKGMsIGMpO1xuICAgICAgICBpZiAoYSAhPT0gMSkge1xuICAgICAgICAgICAgbXVsKGMsIGMsIGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoYSA9IDA7IGEgPCAxNjsgYSsrKSB7XG4gICAgICAgIG9bYV0gPSBjW2FdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVkYWRkKHAsIHEpIHtcbiAgICBjb25zdCBhID0gZ2YoKSwgYiA9IGdmKCksIGMgPSBnZigpLCBkID0gZ2YoKSwgZSA9IGdmKCksIGYgPSBnZigpLCBnID0gZ2YoKSwgaCA9IGdmKCksIHQgPSBnZigpO1xuICAgIHN1YihhLCBwWzFdLCBwWzBdKTtcbiAgICBzdWIodCwgcVsxXSwgcVswXSk7XG4gICAgbXVsKGEsIGEsIHQpO1xuICAgIGFkZChiLCBwWzBdLCBwWzFdKTtcbiAgICBhZGQodCwgcVswXSwgcVsxXSk7XG4gICAgbXVsKGIsIGIsIHQpO1xuICAgIG11bChjLCBwWzNdLCBxWzNdKTtcbiAgICBtdWwoYywgYywgRDIpO1xuICAgIG11bChkLCBwWzJdLCBxWzJdKTtcbiAgICBhZGQoZCwgZCwgZCk7XG4gICAgc3ViKGUsIGIsIGEpO1xuICAgIHN1YihmLCBkLCBjKTtcbiAgICBhZGQoZywgZCwgYyk7XG4gICAgYWRkKGgsIGIsIGEpO1xuICAgIG11bChwWzBdLCBlLCBmKTtcbiAgICBtdWwocFsxXSwgaCwgZyk7XG4gICAgbXVsKHBbMl0sIGcsIGYpO1xuICAgIG11bChwWzNdLCBlLCBoKTtcbn1cbmZ1bmN0aW9uIGNzd2FwKHAsIHEsIGIpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICBzZWwyNTUxOShwW2ldLCBxW2ldLCBiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBwYWNrKHIsIHApIHtcbiAgICBjb25zdCB0eCA9IGdmKCksIHR5ID0gZ2YoKSwgemkgPSBnZigpO1xuICAgIGludjI1NTE5KHppLCBwWzJdKTtcbiAgICBtdWwodHgsIHBbMF0sIHppKTtcbiAgICBtdWwodHksIHBbMV0sIHppKTtcbiAgICBwYWNrMjU1MTkociwgdHkpO1xuICAgIHJbMzFdIF49IHBhcjI1NTE5KHR4KSA8PCA3O1xufVxuZnVuY3Rpb24gc2NhbGFybXVsdChwLCBxLCBzKSB7XG4gICAgc2V0MjU1MTkocFswXSwgZ2YwKTtcbiAgICBzZXQyNTUxOShwWzFdLCBnZjEpO1xuICAgIHNldDI1NTE5KHBbMl0sIGdmMSk7XG4gICAgc2V0MjU1MTkocFszXSwgZ2YwKTtcbiAgICBmb3IgKGxldCBpID0gMjU1OyBpID49IDA7IC0taSkge1xuICAgICAgICBjb25zdCBiID0gKHNbKGkgLyA4KSB8IDBdID4+IChpICYgNykpICYgMTtcbiAgICAgICAgY3N3YXAocCwgcSwgYik7XG4gICAgICAgIGVkYWRkKHEsIHApO1xuICAgICAgICBlZGFkZChwLCBwKTtcbiAgICAgICAgY3N3YXAocCwgcSwgYik7XG4gICAgfVxufVxuZnVuY3Rpb24gc2NhbGFyYmFzZShwLCBzKSB7XG4gICAgY29uc3QgcSA9IFtnZigpLCBnZigpLCBnZigpLCBnZigpXTtcbiAgICBzZXQyNTUxOShxWzBdLCBYKTtcbiAgICBzZXQyNTUxOShxWzFdLCBZKTtcbiAgICBzZXQyNTUxOShxWzJdLCBnZjEpO1xuICAgIG11bChxWzNdLCBYLCBZKTtcbiAgICBzY2FsYXJtdWx0KHAsIHEsIHMpO1xufVxuLy8gR2VuZXJhdGVzIGtleSBwYWlyIGZyb20gc2VjcmV0IDMyLWJ5dGUgc2VlZC5cbmZ1bmN0aW9uIGdlbmVyYXRlS2V5UGFpckZyb21TZWVkKHNlZWQpIHtcbiAgICBpZiAoc2VlZC5sZW5ndGggIT09IGV4cG9ydHMuU0VFRF9MRU5HVEgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBlZDI1NTE5OiBzZWVkIG11c3QgYmUgJHtleHBvcnRzLlNFRURfTEVOR1RIfSBieXRlc2ApO1xuICAgIH1cbiAgICBjb25zdCBkID0gKDAsIHNoYTUxMl8xLmhhc2gpKHNlZWQpO1xuICAgIGRbMF0gJj0gMjQ4O1xuICAgIGRbMzFdICY9IDEyNztcbiAgICBkWzMxXSB8PSA2NDtcbiAgICBjb25zdCBwdWJsaWNLZXkgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgY29uc3QgcCA9IFtnZigpLCBnZigpLCBnZigpLCBnZigpXTtcbiAgICBzY2FsYXJiYXNlKHAsIGQpO1xuICAgIHBhY2socHVibGljS2V5LCBwKTtcbiAgICBjb25zdCBzZWNyZXRLZXkgPSBuZXcgVWludDhBcnJheSg2NCk7XG4gICAgc2VjcmV0S2V5LnNldChzZWVkKTtcbiAgICBzZWNyZXRLZXkuc2V0KHB1YmxpY0tleSwgMzIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHB1YmxpY0tleSxcbiAgICAgICAgc2VjcmV0S2V5XG4gICAgfTtcbn1cbmV4cG9ydHMuZ2VuZXJhdGVLZXlQYWlyRnJvbVNlZWQgPSBnZW5lcmF0ZUtleVBhaXJGcm9tU2VlZDtcbmZ1bmN0aW9uIGdlbmVyYXRlS2V5UGFpcihwcm5nKSB7XG4gICAgY29uc3Qgc2VlZCA9ICgwLCByYW5kb21fMS5yYW5kb21CeXRlcykoMzIsIHBybmcpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGdlbmVyYXRlS2V5UGFpckZyb21TZWVkKHNlZWQpO1xuICAgICgwLCB3aXBlXzEud2lwZSkoc2VlZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZ2VuZXJhdGVLZXlQYWlyID0gZ2VuZXJhdGVLZXlQYWlyO1xuZnVuY3Rpb24gZXh0cmFjdFB1YmxpY0tleUZyb21TZWNyZXRLZXkoc2VjcmV0S2V5KSB7XG4gICAgaWYgKHNlY3JldEtleS5sZW5ndGggIT09IGV4cG9ydHMuU0VDUkVUX0tFWV9MRU5HVEgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBlZDI1NTE5OiBzZWNyZXQga2V5IG11c3QgYmUgJHtleHBvcnRzLlNFQ1JFVF9LRVlfTEVOR1RIfSBieXRlc2ApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2VjcmV0S2V5LnN1YmFycmF5KDMyKSk7XG59XG5leHBvcnRzLmV4dHJhY3RQdWJsaWNLZXlGcm9tU2VjcmV0S2V5ID0gZXh0cmFjdFB1YmxpY0tleUZyb21TZWNyZXRLZXk7XG5jb25zdCBMID0gbmV3IEZsb2F0NjRBcnJheShbXG4gICAgMHhlZCwgMHhkMywgMHhmNSwgMHg1YywgMHgxYSwgMHg2MywgMHgxMiwgMHg1OCwgMHhkNiwgMHg5YywgMHhmNywgMHhhMixcbiAgICAweGRlLCAweGY5LCAweGRlLCAweDE0LCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAweDEwXG5dKTtcbmZ1bmN0aW9uIG1vZEwociwgeCkge1xuICAgIGxldCBjYXJyeTtcbiAgICBsZXQgaTtcbiAgICBsZXQgajtcbiAgICBsZXQgaztcbiAgICBmb3IgKGkgPSA2MzsgaSA+PSAzMjsgLS1pKSB7XG4gICAgICAgIGNhcnJ5ID0gMDtcbiAgICAgICAgZm9yIChqID0gaSAtIDMyLCBrID0gaSAtIDEyOyBqIDwgazsgKytqKSB7XG4gICAgICAgICAgICB4W2pdICs9IGNhcnJ5IC0gMTYgKiB4W2ldICogTFtqIC0gKGkgLSAzMildO1xuICAgICAgICAgICAgY2FycnkgPSBNYXRoLmZsb29yKCh4W2pdICsgMTI4KSAvIDI1Nik7XG4gICAgICAgICAgICB4W2pdIC09IGNhcnJ5ICogMjU2O1xuICAgICAgICB9XG4gICAgICAgIHhbal0gKz0gY2Fycnk7XG4gICAgICAgIHhbaV0gPSAwO1xuICAgIH1cbiAgICBjYXJyeSA9IDA7XG4gICAgZm9yIChqID0gMDsgaiA8IDMyOyBqKyspIHtcbiAgICAgICAgeFtqXSArPSBjYXJyeSAtICh4WzMxXSA+PiA0KSAqIExbal07XG4gICAgICAgIGNhcnJ5ID0geFtqXSA+PiA4O1xuICAgICAgICB4W2pdICY9IDI1NTtcbiAgICB9XG4gICAgZm9yIChqID0gMDsgaiA8IDMyOyBqKyspIHtcbiAgICAgICAgeFtqXSAtPSBjYXJyeSAqIExbal07XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCAzMjsgaSsrKSB7XG4gICAgICAgIHhbaSArIDFdICs9IHhbaV0gPj4gODtcbiAgICAgICAgcltpXSA9IHhbaV0gJiAyNTU7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVkdWNlKHIpIHtcbiAgICBjb25zdCB4ID0gbmV3IEZsb2F0NjRBcnJheSg2NCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG4gICAgICAgIHhbaV0gPSByW2ldO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY0OyBpKyspIHtcbiAgICAgICAgcltpXSA9IDA7XG4gICAgfVxuICAgIG1vZEwociwgeCk7XG59XG4vLyBSZXR1cm5zIDY0LWJ5dGUgc2lnbmF0dXJlIG9mIHRoZSBtZXNzYWdlIHVuZGVyIHRoZSA2NC1ieXRlIHNlY3JldCBrZXkuXG5mdW5jdGlvbiBzaWduKHNlY3JldEtleSwgbWVzc2FnZSkge1xuICAgIGNvbnN0IHggPSBuZXcgRmxvYXQ2NEFycmF5KDY0KTtcbiAgICBjb25zdCBwID0gW2dmKCksIGdmKCksIGdmKCksIGdmKCldO1xuICAgIGNvbnN0IGQgPSAoMCwgc2hhNTEyXzEuaGFzaCkoc2VjcmV0S2V5LnN1YmFycmF5KDAsIDMyKSk7XG4gICAgZFswXSAmPSAyNDg7XG4gICAgZFszMV0gJj0gMTI3O1xuICAgIGRbMzFdIHw9IDY0O1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IG5ldyBVaW50OEFycmF5KDY0KTtcbiAgICBzaWduYXR1cmUuc2V0KGQuc3ViYXJyYXkoMzIpLCAzMik7XG4gICAgY29uc3QgaHMgPSBuZXcgc2hhNTEyXzEuU0hBNTEyKCk7XG4gICAgaHMudXBkYXRlKHNpZ25hdHVyZS5zdWJhcnJheSgzMikpO1xuICAgIGhzLnVwZGF0ZShtZXNzYWdlKTtcbiAgICBjb25zdCByID0gaHMuZGlnZXN0KCk7XG4gICAgaHMuY2xlYW4oKTtcbiAgICByZWR1Y2Uocik7XG4gICAgc2NhbGFyYmFzZShwLCByKTtcbiAgICBwYWNrKHNpZ25hdHVyZSwgcCk7XG4gICAgaHMucmVzZXQoKTtcbiAgICBocy51cGRhdGUoc2lnbmF0dXJlLnN1YmFycmF5KDAsIDMyKSk7XG4gICAgaHMudXBkYXRlKHNlY3JldEtleS5zdWJhcnJheSgzMikpO1xuICAgIGhzLnVwZGF0ZShtZXNzYWdlKTtcbiAgICBjb25zdCBoID0gaHMuZGlnZXN0KCk7XG4gICAgcmVkdWNlKGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzI7IGkrKykge1xuICAgICAgICB4W2ldID0gcltpXTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMjsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzI7IGorKykge1xuICAgICAgICAgICAgeFtpICsgal0gKz0gaFtpXSAqIGRbal07XG4gICAgICAgIH1cbiAgICB9XG4gICAgbW9kTChzaWduYXR1cmUuc3ViYXJyYXkoMzIpLCB4KTtcbiAgICByZXR1cm4gc2lnbmF0dXJlO1xufVxuZXhwb3J0cy5zaWduID0gc2lnbjtcbmZ1bmN0aW9uIHVucGFja25lZyhyLCBwKSB7XG4gICAgY29uc3QgdCA9IGdmKCksIGNoayA9IGdmKCksIG51bSA9IGdmKCksIGRlbiA9IGdmKCksIGRlbjIgPSBnZigpLCBkZW40ID0gZ2YoKSwgZGVuNiA9IGdmKCk7XG4gICAgc2V0MjU1MTkoclsyXSwgZ2YxKTtcbiAgICB1bnBhY2syNTUxOShyWzFdLCBwKTtcbiAgICBzcXVhcmUobnVtLCByWzFdKTtcbiAgICBtdWwoZGVuLCBudW0sIEQpO1xuICAgIHN1YihudW0sIG51bSwgclsyXSk7XG4gICAgYWRkKGRlbiwgclsyXSwgZGVuKTtcbiAgICBzcXVhcmUoZGVuMiwgZGVuKTtcbiAgICBzcXVhcmUoZGVuNCwgZGVuMik7XG4gICAgbXVsKGRlbjYsIGRlbjQsIGRlbjIpO1xuICAgIG11bCh0LCBkZW42LCBudW0pO1xuICAgIG11bCh0LCB0LCBkZW4pO1xuICAgIHBvdzI1MjModCwgdCk7XG4gICAgbXVsKHQsIHQsIG51bSk7XG4gICAgbXVsKHQsIHQsIGRlbik7XG4gICAgbXVsKHQsIHQsIGRlbik7XG4gICAgbXVsKHJbMF0sIHQsIGRlbik7XG4gICAgc3F1YXJlKGNoaywgclswXSk7XG4gICAgbXVsKGNoaywgY2hrLCBkZW4pO1xuICAgIGlmIChuZXEyNTUxOShjaGssIG51bSkpIHtcbiAgICAgICAgbXVsKHJbMF0sIHJbMF0sIEkpO1xuICAgIH1cbiAgICBzcXVhcmUoY2hrLCByWzBdKTtcbiAgICBtdWwoY2hrLCBjaGssIGRlbik7XG4gICAgaWYgKG5lcTI1NTE5KGNoaywgbnVtKSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChwYXIyNTUxOShyWzBdKSA9PT0gKHBbMzFdID4+IDcpKSB7XG4gICAgICAgIHN1YihyWzBdLCBnZjAsIHJbMF0pO1xuICAgIH1cbiAgICBtdWwoclszXSwgclswXSwgclsxXSk7XG4gICAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiB2ZXJpZnkocHVibGljS2V5LCBtZXNzYWdlLCBzaWduYXR1cmUpIHtcbiAgICBjb25zdCB0ID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICAgIGNvbnN0IHAgPSBbZ2YoKSwgZ2YoKSwgZ2YoKSwgZ2YoKV07XG4gICAgY29uc3QgcSA9IFtnZigpLCBnZigpLCBnZigpLCBnZigpXTtcbiAgICBpZiAoc2lnbmF0dXJlLmxlbmd0aCAhPT0gZXhwb3J0cy5TSUdOQVRVUkVfTEVOR1RIKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZWQyNTUxOTogc2lnbmF0dXJlIG11c3QgYmUgJHtleHBvcnRzLlNJR05BVFVSRV9MRU5HVEh9IGJ5dGVzYCk7XG4gICAgfVxuICAgIGlmICh1bnBhY2tuZWcocSwgcHVibGljS2V5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGhzID0gbmV3IHNoYTUxMl8xLlNIQTUxMigpO1xuICAgIGhzLnVwZGF0ZShzaWduYXR1cmUuc3ViYXJyYXkoMCwgMzIpKTtcbiAgICBocy51cGRhdGUocHVibGljS2V5KTtcbiAgICBocy51cGRhdGUobWVzc2FnZSk7XG4gICAgY29uc3QgaCA9IGhzLmRpZ2VzdCgpO1xuICAgIHJlZHVjZShoKTtcbiAgICBzY2FsYXJtdWx0KHAsIHEsIGgpO1xuICAgIHNjYWxhcmJhc2UocSwgc2lnbmF0dXJlLnN1YmFycmF5KDMyKSk7XG4gICAgZWRhZGQocCwgcSk7XG4gICAgcGFjayh0LCBwKTtcbiAgICBpZiAodmVyaWZ5MzIoc2lnbmF0dXJlLCB0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy52ZXJpZnkgPSB2ZXJpZnk7XG4vKipcbiAqIENvbnZlcnQgRWQyNTUxOSBwdWJsaWMga2V5IHRvIFgyNTUxOSBwdWJsaWMga2V5LlxuICpcbiAqIFRocm93cyBpZiBnaXZlbiBhbiBpbnZhbGlkIHB1YmxpYyBrZXkuXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRQdWJsaWNLZXlUb1gyNTUxOShwdWJsaWNLZXkpIHtcbiAgICBsZXQgcSA9IFtnZigpLCBnZigpLCBnZigpLCBnZigpXTtcbiAgICBpZiAodW5wYWNrbmVnKHEsIHB1YmxpY0tleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRWQyNTUxOTogaW52YWxpZCBwdWJsaWMga2V5XCIpO1xuICAgIH1cbiAgICAvLyBGb3JtdWxhOiBtb250Z29tZXJ5WCA9IChlZHdhcmRzWSArIDEpKmludmVyc2UoMSAtIGVkd2FyZHNZKSBtb2QgcFxuICAgIGxldCBhID0gZ2YoKTtcbiAgICBsZXQgYiA9IGdmKCk7XG4gICAgbGV0IHkgPSBxWzFdO1xuICAgIGFkZChhLCBnZjEsIHkpO1xuICAgIHN1YihiLCBnZjEsIHkpO1xuICAgIGludjI1NTE5KGIsIGIpO1xuICAgIG11bChhLCBhLCBiKTtcbiAgICBsZXQgeiA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgICBwYWNrMjU1MTkoeiwgYSk7XG4gICAgcmV0dXJuIHo7XG59XG5leHBvcnRzLmNvbnZlcnRQdWJsaWNLZXlUb1gyNTUxOSA9IGNvbnZlcnRQdWJsaWNLZXlUb1gyNTUxOTtcbi8qKlxuICogIENvbnZlcnQgRWQyNTUxOSBzZWNyZXQgKHByaXZhdGUpIGtleSB0byBYMjU1MTkgc2VjcmV0IGtleS5cbiAqL1xuZnVuY3Rpb24gY29udmVydFNlY3JldEtleVRvWDI1NTE5KHNlY3JldEtleSkge1xuICAgIGNvbnN0IGQgPSAoMCwgc2hhNTEyXzEuaGFzaCkoc2VjcmV0S2V5LnN1YmFycmF5KDAsIDMyKSk7XG4gICAgZFswXSAmPSAyNDg7XG4gICAgZFszMV0gJj0gMTI3O1xuICAgIGRbMzFdIHw9IDY0O1xuICAgIGNvbnN0IG8gPSBuZXcgVWludDhBcnJheShkLnN1YmFycmF5KDAsIDMyKSk7XG4gICAgKDAsIHdpcGVfMS53aXBlKShkKTtcbiAgICByZXR1cm4gbztcbn1cbmV4cG9ydHMuY29udmVydFNlY3JldEtleVRvWDI1NTE5ID0gY29udmVydFNlY3JldEtleVRvWDI1NTE5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWQyNTUxOS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoQykgMjAxNiBEbWl0cnkgQ2hlc3RueWtoXG4vLyBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGlzU2VyaWFsaXphYmxlSGFzaChoKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgaC5zYXZlU3RhdGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIGgucmVzdG9yZVN0YXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBoLmNsZWFuU2F2ZWRTdGF0ZSAhPT0gXCJ1bmRlZmluZWRcIik7XG59XG5leHBvcnRzLmlzU2VyaWFsaXphYmxlSGFzaCA9IGlzU2VyaWFsaXphYmxlSGFzaDtcbi8vIFRPRE8oZGNoZXN0KTogZmlndXJlIG91dCB0aGUgc3RhbmRhcmRpemVkIGludGVyZmFjZSBmb3IgWE9GIHN1Y2ggYXNcbi8vIFNIQUtFIGFuZCBCTEFLRTJYLlxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzaC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoQykgMjAxNiBEbWl0cnkgQ2hlc3RueWtoXG4vLyBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBobWFjXzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi9obWFjXCIpO1xudmFyIHdpcGVfMSA9IHJlcXVpcmUoXCJAc3RhYmxlbGliL3dpcGVcIik7XG4vKipcbiAqIEhNQUMtYmFzZWQgRXh0cmFjdC1hbmQtRXhwYW5kIEtleSBEZXJpdmF0aW9uIEZ1bmN0aW9uLlxuICpcbiAqIEltcGxlbWVudHMgSEtERiBmcm9tIFJGQzU4NjkuXG4gKlxuICogRXhwYW5kcyB0aGUgZ2l2ZW4gbWFzdGVyIGtleSB3aXRoIHNhbHQgYW5kIGluZm8gaW50b1xuICogYSBsaW1pdGVkIHN0cmVhbSBvZiBrZXkgbWF0ZXJpYWwuXG4gKi9cbnZhciBIS0RGID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBIS0RGIGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gaGFzaCBmdW5jdGlvblxuICAgICAqIHdpdGggdGhlIG1hc3RlciBrZXksIG9wdGlvbmFsIHNhbHQsIGFuZCBpbmZvLlxuICAgICAqXG4gICAgICogLSBNYXN0ZXIga2V5IGlzIGEgaGlnaC1lbnRyb3B5IHNlY3JldCBrZXkgKG5vdCBhIHBhc3N3b3JkKS5cbiAgICAgKiAtIFNhbHQgaXMgYSBub24tc2VjcmV0IHJhbmRvbSB2YWx1ZS5cbiAgICAgKiAtIEluZm8gaXMgYXBwbGljYXRpb24tIGFuZC9vciBjb250ZXh0LXNwZWNpZmljIGluZm9ybWF0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhLREYoaGFzaCwga2V5LCBzYWx0LCBpbmZvKSB7XG4gICAgICAgIGlmIChzYWx0ID09PSB2b2lkIDApIHsgc2FsdCA9IG5ldyBVaW50OEFycmF5KDApOyB9XG4gICAgICAgIHRoaXMuX2NvdW50ZXIgPSBuZXcgVWludDhBcnJheSgxKTsgLy8gc3RhcnRzIHdpdGggemVyb1xuICAgICAgICB0aGlzLl9oYXNoID0gaGFzaDtcbiAgICAgICAgdGhpcy5faW5mbyA9IGluZm87XG4gICAgICAgIC8vIEhLREYtRXh0cmFjdCB1c2VzIHNhbHQgYXMgSE1BQyBrZXksIGFuZCBrZXkgYXMgZGF0YS5cbiAgICAgICAgdmFyIG9rbSA9IGhtYWNfMS5obWFjKHRoaXMuX2hhc2gsIHNhbHQsIGtleSk7XG4gICAgICAgIC8vIEluaXRpYWxpemUgSE1BQyBmb3IgZXhwYW5kaW5nIHdpdGggZXh0cmFjdGVkIGtleS5cbiAgICAgICAgdGhpcy5faG1hYyA9IG5ldyBobWFjXzEuSE1BQyhoYXNoLCBva20pO1xuICAgICAgICAvLyBBbGxvY2F0ZSBidWZmZXIuXG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBVaW50OEFycmF5KHRoaXMuX2htYWMuZGlnZXN0TGVuZ3RoKTtcbiAgICAgICAgdGhpcy5fYnVmcG9zID0gdGhpcy5fYnVmZmVyLmxlbmd0aDtcbiAgICB9XG4gICAgLy8gRmlsbCBidWZmZXIgd2l0aCBuZXcgYmxvY2sgb2YgSEtERi1FeHRyYWN0IG91dHB1dC5cbiAgICBIS0RGLnByb3RvdHlwZS5fZmlsbEJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSW5jcmVtZW50IGNvdW50ZXIuXG4gICAgICAgIHRoaXMuX2NvdW50ZXJbMF0rKztcbiAgICAgICAgdmFyIGN0ciA9IHRoaXMuX2NvdW50ZXJbMF07XG4gICAgICAgIC8vIENoZWNrIGlmIGNvdW50ZXIgb3ZlcmZsb3dlZC5cbiAgICAgICAgaWYgKGN0ciA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaGtkZjogY2Fubm90IGV4cGFuZCBtb3JlXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXBhcmUgSE1BQyBpbnN0YW5jZSBmb3IgbmV3IGRhdGEgd2l0aCBvbGQga2V5LlxuICAgICAgICB0aGlzLl9obWFjLnJlc2V0KCk7XG4gICAgICAgIC8vIEhhc2ggaW4gcHJldmlvdXMgb3V0cHV0IGlmIGl0IHdhcyBnZW5lcmF0ZWRcbiAgICAgICAgLy8gKGkuZS4gY291bnRlciBpcyBncmVhdGVyIHRoYW4gMSkuXG4gICAgICAgIGlmIChjdHIgPiAxKSB7XG4gICAgICAgICAgICB0aGlzLl9obWFjLnVwZGF0ZSh0aGlzLl9idWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhhc2ggaW4gaW5mbyBpZiBpdCBleGlzdHMuXG4gICAgICAgIGlmICh0aGlzLl9pbmZvKSB7XG4gICAgICAgICAgICB0aGlzLl9obWFjLnVwZGF0ZSh0aGlzLl9pbmZvKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBIYXNoIGluIHRoZSBjb3VudGVyLlxuICAgICAgICB0aGlzLl9obWFjLnVwZGF0ZSh0aGlzLl9jb3VudGVyKTtcbiAgICAgICAgLy8gT3V0cHV0IHJlc3VsdCB0byBidWZmZXIgYW5kIGNsZWFuIEhNQUMgaW5zdGFuY2UuXG4gICAgICAgIHRoaXMuX2htYWMuZmluaXNoKHRoaXMuX2J1ZmZlcik7XG4gICAgICAgIC8vIFJlc2V0IGJ1ZmZlciBwb3NpdGlvbi5cbiAgICAgICAgdGhpcy5fYnVmcG9zID0gMDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEV4cGFuZCByZXR1cm5zIG5leHQga2V5IG1hdGVyaWFsIG9mIHRoZSBnaXZlbiBsZW5ndGguXG4gICAgICpcbiAgICAgKiBJdCB0aHJvd3MgaWYgZXhwYW5zaW9uIGxpbWl0IGlzIHJlYWNoZWQgKHdoaWNoIGlzXG4gICAgICogMjU0IGRpZ2VzdHMgb2YgdGhlIHVuZGVybHlpbmcgSE1BQyBmdW5jdGlvbikuXG4gICAgICovXG4gICAgSEtERi5wcm90b3R5cGUuZXhwYW5kID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgICAgICB2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9idWZwb3MgPT09IHRoaXMuX2J1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maWxsQnVmZmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRbaV0gPSB0aGlzLl9idWZmZXJbdGhpcy5fYnVmcG9zKytdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICBIS0RGLnByb3RvdHlwZS5jbGVhbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5faG1hYy5jbGVhbigpO1xuICAgICAgICB3aXBlXzEud2lwZSh0aGlzLl9idWZmZXIpO1xuICAgICAgICB3aXBlXzEud2lwZSh0aGlzLl9jb3VudGVyKTtcbiAgICAgICAgdGhpcy5fYnVmcG9zID0gMDtcbiAgICB9O1xuICAgIHJldHVybiBIS0RGO1xufSgpKTtcbmV4cG9ydHMuSEtERiA9IEhLREY7XG4vLyBUT0RPKGRjaGVzdCk6IG1heWJlIGltcGxlbWVudCBkZXJpdmVLZXk/XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oa2RmLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBQYWNrYWdlIGhtYWMgaW1wbGVtZW50cyBITUFDIGFsZ29yaXRobS5cbiAqL1xudmFyIGhhc2hfMSA9IHJlcXVpcmUoXCJAc3RhYmxlbGliL2hhc2hcIik7XG52YXIgY29uc3RhbnRfdGltZV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvY29uc3RhbnQtdGltZVwiKTtcbnZhciB3aXBlXzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi93aXBlXCIpO1xuLyoqXG4gKiAgSE1BQyBpbXBsZW1lbnRzIGhhc2gtYmFzZWQgbWVzc2FnZSBhdXRoZW50aWNhdGlvbiBhbGdvcml0aG0uXG4gKi9cbnZhciBITUFDID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgSE1BQyB3aXRoIHRoZSBnaXZlbiBIYXNoIGFuZCBzZWNyZXQga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhNQUMoaGFzaCwga2V5KSB7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7IC8vIHRydWUgaWYgSE1BQyB3YXMgZmluYWxpemVkXG4gICAgICAgIC8vIEluaXRpYWxpemUgaW5uZXIgYW5kIG91dGVyIGhhc2hlcy5cbiAgICAgICAgdGhpcy5faW5uZXIgPSBuZXcgaGFzaCgpO1xuICAgICAgICB0aGlzLl9vdXRlciA9IG5ldyBoYXNoKCk7XG4gICAgICAgIC8vIFNldCBibG9jayBhbmQgZGlnZXN0IHNpemVzIGZvciB0aGlzIEhNQUNcbiAgICAgICAgLy8gaW5zdGFuY2UgdG8gdmFsdWVzIGZyb20gdGhlIGhhc2guXG4gICAgICAgIHRoaXMuYmxvY2tTaXplID0gdGhpcy5fb3V0ZXIuYmxvY2tTaXplO1xuICAgICAgICB0aGlzLmRpZ2VzdExlbmd0aCA9IHRoaXMuX291dGVyLmRpZ2VzdExlbmd0aDtcbiAgICAgICAgLy8gUGFkIHRlbXBvcmFyeSBzdG9yZXMgYSBrZXkgKG9yIGl0cyBoYXNoKSBwYWRkZWQgd2l0aCB6ZXJvZXMuXG4gICAgICAgIHZhciBwYWQgPSBuZXcgVWludDhBcnJheSh0aGlzLmJsb2NrU2l6ZSk7XG4gICAgICAgIGlmIChrZXkubGVuZ3RoID4gdGhpcy5ibG9ja1NpemUpIHtcbiAgICAgICAgICAgIC8vIElmIGtleSBpcyBiaWdnZXIgdGhhbiBoYXNoIGJsb2NrIHNpemUsIGl0IG11c3QgYmVcbiAgICAgICAgICAgIC8vIGhhc2hlZCBhbmQgdGhpcyBoYXNoIGlzIHVzZWQgYXMgYSBrZXkgaW5zdGVhZC5cbiAgICAgICAgICAgIHRoaXMuX2lubmVyLnVwZGF0ZShrZXkpLmZpbmlzaChwYWQpLmNsZWFuKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIGNvcHkgdGhlIGtleSBpbnRvIHBhZC5cbiAgICAgICAgICAgIHBhZC5zZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3cgdHdvIGRpZmZlcmVudCBrZXlzIGFyZSBkZXJpdmVkIGZyb20gcGFkZGVkIGtleVxuICAgICAgICAvLyBieSB4b3JpbmcgYSBkaWZmZXJlbnQgYnl0ZSB2YWx1ZSB0byBlYWNoLlxuICAgICAgICAvLyBUbyBtYWtlIGlubmVyIGhhc2gga2V5LCB4b3IgYnl0ZSAweDM2IGludG8gcGFkLlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFkW2ldIF49IDB4MzY7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIGlubmVyIGhhc2ggd2l0aCB0aGUgcmVzdWx0LlxuICAgICAgICB0aGlzLl9pbm5lci51cGRhdGUocGFkKTtcbiAgICAgICAgLy8gVG8gbWFrZSBvdXRlciBoYXNoIGtleSwgeG9yIGJ5dGUgMHg1YyBpbnRvIHBhZC5cbiAgICAgICAgLy8gQnV0IHNpbmNlIHdlIGFscmVhZHkgeG9yZWQgMHgzNiB0aGVyZSwgd2UgbXVzdFxuICAgICAgICAvLyBmaXJzdCB1bmRvIHRoaXMgYnkgeG9yaW5nIGl0IGFnYWluLlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFkW2ldIF49IDB4MzYgXiAweDVjO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVwZGF0ZSBvdXRlciBoYXNoIHdpdGggdGhlIHJlc3VsdC5cbiAgICAgICAgdGhpcy5fb3V0ZXIudXBkYXRlKHBhZCk7XG4gICAgICAgIC8vIFNhdmUgc3RhdGVzIG9mIGJvdGggaGFzaGVzLCBzbyB0aGF0IHdlIGNhbiBxdWlja2x5IHJlc3RvcmVcbiAgICAgICAgLy8gdGhlbSBsYXRlciBpbiByZXNldCgpIHdpdGhvdXQgdGhlIG5lZWQgdG8gcmVtZW1iZXIgdGhlIGFjdHVhbFxuICAgICAgICAvLyBrZXkgYW5kIHBlcmZvcm0gdGhpcyBpbml0aWFsaXphdGlvbiBhZ2Fpbi5cbiAgICAgICAgaWYgKGhhc2hfMS5pc1NlcmlhbGl6YWJsZUhhc2godGhpcy5faW5uZXIpICYmIGhhc2hfMS5pc1NlcmlhbGl6YWJsZUhhc2godGhpcy5fb3V0ZXIpKSB7XG4gICAgICAgICAgICB0aGlzLl9pbm5lcktleWVkU3RhdGUgPSB0aGlzLl9pbm5lci5zYXZlU3RhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuX291dGVyS2V5ZWRTdGF0ZSA9IHRoaXMuX291dGVyLnNhdmVTdGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsZWFuIHBhZC5cbiAgICAgICAgd2lwZV8xLndpcGUocGFkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBITUFDIHN0YXRlIHRvIHRoZSBzdGF0ZSBpbml0aWFsaXplZCB3aXRoIGtleVxuICAgICAqIHRvIG1ha2UgaXQgcG9zc2libGUgdG8gcnVuIEhNQUMgb3ZlciB0aGUgb3RoZXIgZGF0YSB3aXRoIHRoZSBzYW1lXG4gICAgICoga2V5IHdpdGhvdXQgY3JlYXRpbmcgYSBuZXcgaW5zdGFuY2UuXG4gICAgICovXG4gICAgSE1BQy5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaGFzaF8xLmlzU2VyaWFsaXphYmxlSGFzaCh0aGlzLl9pbm5lcikgfHwgIWhhc2hfMS5pc1NlcmlhbGl6YWJsZUhhc2godGhpcy5fb3V0ZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJobWFjOiBjYW4ndCByZXNldCgpIGJlY2F1c2UgaGFzaCBkb2Vzbid0IGltcGxlbWVudCByZXN0b3JlU3RhdGUoKVwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXN0b3JlIGtleWVkIHN0YXRlcyBvZiBpbm5lciBhbmQgb3V0ZXIgaGFzaGVzLlxuICAgICAgICB0aGlzLl9pbm5lci5yZXN0b3JlU3RhdGUodGhpcy5faW5uZXJLZXllZFN0YXRlKTtcbiAgICAgICAgdGhpcy5fb3V0ZXIucmVzdG9yZVN0YXRlKHRoaXMuX291dGVyS2V5ZWRTdGF0ZSk7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xlYW5zIEhNQUMgc3RhdGUuXG4gICAgICovXG4gICAgSE1BQy5wcm90b3R5cGUuY2xlYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChoYXNoXzEuaXNTZXJpYWxpemFibGVIYXNoKHRoaXMuX2lubmVyKSkge1xuICAgICAgICAgICAgdGhpcy5faW5uZXIuY2xlYW5TYXZlZFN0YXRlKHRoaXMuX2lubmVyS2V5ZWRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc2hfMS5pc1NlcmlhbGl6YWJsZUhhc2godGhpcy5fb3V0ZXIpKSB7XG4gICAgICAgICAgICB0aGlzLl9vdXRlci5jbGVhblNhdmVkU3RhdGUodGhpcy5fb3V0ZXJLZXllZFN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbm5lci5jbGVhbigpO1xuICAgICAgICB0aGlzLl9vdXRlci5jbGVhbigpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBzdGF0ZSB3aXRoIHByb3ZpZGVkIGRhdGEuXG4gICAgICovXG4gICAgSE1BQy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5faW5uZXIudXBkYXRlKGRhdGEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZpbmFsaXplcyBITUFDIGFuZCBwdXRzIHRoZSByZXN1bHQgaW4gb3V0LlxuICAgICAqL1xuICAgIEhNQUMucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgICAvLyBJZiBITUFDIHdhcyBmaW5hbGl6ZWQsIG91dGVyIGhhc2ggaXMgYWxzbyBmaW5hbGl6ZWQsXG4gICAgICAgICAgICAvLyBzbyBpdCBwcm9kdWNlcyB0aGUgc2FtZSBkaWdlc3QgaXQgcHJvZHVjZWQgd2hlbiBpdFxuICAgICAgICAgICAgLy8gd2FzIGZpbmFsaXplZC5cbiAgICAgICAgICAgIHRoaXMuX291dGVyLmZpbmlzaChvdXQpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmluYWxpemUgaW5uZXIgaGFzaCBhbmQgc3RvcmUgdGhlIHJlc3VsdCB0ZW1wb3JhcmlseS5cbiAgICAgICAgdGhpcy5faW5uZXIuZmluaXNoKG91dCk7XG4gICAgICAgIC8vIFVwZGF0ZSBvdXRlciBoYXNoIHdpdGggZGlnZXN0IG9mIGlubmVyIGhhc2ggYW5kIGFuZCBmaW5hbGl6ZSBpdC5cbiAgICAgICAgdGhpcy5fb3V0ZXIudXBkYXRlKG91dC5zdWJhcnJheSgwLCB0aGlzLmRpZ2VzdExlbmd0aCkpLmZpbmlzaChvdXQpO1xuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY29tcHV0ZWQgbWVzc2FnZSBhdXRoZW50aWNhdGlvbiBjb2RlLlxuICAgICAqL1xuICAgIEhNQUMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG91dCA9IG5ldyBVaW50OEFycmF5KHRoaXMuZGlnZXN0TGVuZ3RoKTtcbiAgICAgICAgdGhpcy5maW5pc2gob3V0KTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNhdmVzIEhNQUMgc3RhdGUuXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBuZWVkZWQgZm9yIFBCS0RGMiBvcHRpbWl6YXRpb24uXG4gICAgICovXG4gICAgSE1BQy5wcm90b3R5cGUuc2F2ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWhhc2hfMS5pc1NlcmlhbGl6YWJsZUhhc2godGhpcy5faW5uZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJobWFjOiBjYW4ndCBzYXZlU3RhdGUoKSBiZWNhdXNlIGhhc2ggZG9lc24ndCBpbXBsZW1lbnQgaXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyLnNhdmVTdGF0ZSgpO1xuICAgIH07XG4gICAgSE1BQy5wcm90b3R5cGUucmVzdG9yZVN0YXRlID0gZnVuY3Rpb24gKHNhdmVkU3RhdGUpIHtcbiAgICAgICAgaWYgKCFoYXNoXzEuaXNTZXJpYWxpemFibGVIYXNoKHRoaXMuX2lubmVyKSB8fCAhaGFzaF8xLmlzU2VyaWFsaXphYmxlSGFzaCh0aGlzLl9vdXRlcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImhtYWM6IGNhbid0IHJlc3RvcmVTdGF0ZSgpIGJlY2F1c2UgaGFzaCBkb2Vzbid0IGltcGxlbWVudCBpdFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbm5lci5yZXN0b3JlU3RhdGUoc2F2ZWRTdGF0ZSk7XG4gICAgICAgIHRoaXMuX291dGVyLnJlc3RvcmVTdGF0ZSh0aGlzLl9vdXRlcktleWVkU3RhdGUpO1xuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEhNQUMucHJvdG90eXBlLmNsZWFuU2F2ZWRTdGF0ZSA9IGZ1bmN0aW9uIChzYXZlZFN0YXRlKSB7XG4gICAgICAgIGlmICghaGFzaF8xLmlzU2VyaWFsaXphYmxlSGFzaCh0aGlzLl9pbm5lcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImhtYWM6IGNhbid0IGNsZWFuU2F2ZWRTdGF0ZSgpIGJlY2F1c2UgaGFzaCBkb2Vzbid0IGltcGxlbWVudCBpdFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbm5lci5jbGVhblNhdmVkU3RhdGUoc2F2ZWRTdGF0ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gSE1BQztcbn0oKSk7XG5leHBvcnRzLkhNQUMgPSBITUFDO1xuLyoqXG4gKiBSZXR1cm5zIEhNQUMgdXNpbmcgdGhlIGdpdmVuIGhhc2ggY29uc3RydWN0b3IgZm9yIHRoZSBrZXkgb3ZlciBkYXRhLlxuICovXG5mdW5jdGlvbiBobWFjKGhhc2gsIGtleSwgZGF0YSkge1xuICAgIHZhciBoID0gbmV3IEhNQUMoaGFzaCwga2V5KTtcbiAgICBoLnVwZGF0ZShkYXRhKTtcbiAgICB2YXIgZGlnZXN0ID0gaC5kaWdlc3QoKTtcbiAgICBoLmNsZWFuKCk7XG4gICAgcmV0dXJuIGRpZ2VzdDtcbn1cbmV4cG9ydHMuaG1hYyA9IGhtYWM7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0d28gSE1BQyBkaWdlc3RzIGFyZSBlcXVhbC5cbiAqIFVzZXMgY29uc3RhbnQtdGltZSBjb21wYXJpc29uIHRvIGF2b2lkIGxlYWtpbmcgdGltaW5nIGluZm9ybWF0aW9uLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgY29uc3QgcmVjZWl2ZWREaWdlc3QgPSAuLi5cbiAqICAgIGNvbnN0IHJlYWxEaWdlc3QgPSBobWFjKFNIQTI1Niwga2V5LCBkYXRhKTtcbiAqICAgIGlmICghZXF1YWwocmVjZWl2ZWREaWdlc3QsIHJlYWxEaWdlc3QpKSB7XG4gKiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXV0aGVudGljYXRpb24gZXJyb3JcIik7XG4gKiAgICB9XG4gKi9cbmV4cG9ydHMuZXF1YWwgPSBjb25zdGFudF90aW1lXzEuZXF1YWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1obWFjLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBQYWNrYWdlIGludCBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIGZvciBpbnRlZ2Vyc3MuXG4gKi9cbi8vIFNoaW0gdXNpbmcgMTYtYml0IHBpZWNlcy5cbmZ1bmN0aW9uIGltdWxTaGltKGEsIGIpIHtcbiAgICB2YXIgYWggPSAoYSA+Pj4gMTYpICYgMHhmZmZmLCBhbCA9IGEgJiAweGZmZmY7XG4gICAgdmFyIGJoID0gKGIgPj4+IDE2KSAmIDB4ZmZmZiwgYmwgPSBiICYgMHhmZmZmO1xuICAgIHJldHVybiAoKGFsICogYmwpICsgKCgoYWggKiBibCArIGFsICogYmgpIDw8IDE2KSA+Pj4gMCkgfCAwKTtcbn1cbi8qKiAzMi1iaXQgaW50ZWdlciBtdWx0aXBsaWNhdGlvbi4gICovXG4vLyBVc2Ugc3lzdGVtIE1hdGguaW11bCBpZiBhdmFpbGFibGUsIG90aGVyd2lzZSB1c2Ugb3VyIHNoaW0uXG5leHBvcnRzLm11bCA9IE1hdGguaW11bCB8fCBpbXVsU2hpbTtcbi8qKiAzMi1iaXQgaW50ZWdlciBhZGRpdGlvbi4gICovXG5mdW5jdGlvbiBhZGQoYSwgYikge1xuICAgIHJldHVybiAoYSArIGIpIHwgMDtcbn1cbmV4cG9ydHMuYWRkID0gYWRkO1xuLyoqICAzMi1iaXQgaW50ZWdlciBzdWJ0cmFjdGlvbi4gICovXG5mdW5jdGlvbiBzdWIoYSwgYikge1xuICAgIHJldHVybiAoYSAtIGIpIHwgMDtcbn1cbmV4cG9ydHMuc3ViID0gc3ViO1xuLyoqIDMyLWJpdCBpbnRlZ2VyIGxlZnQgcm90YXRpb24gKi9cbmZ1bmN0aW9uIHJvdGwoeCwgbikge1xuICAgIHJldHVybiB4IDw8IG4gfCB4ID4+PiAoMzIgLSBuKTtcbn1cbmV4cG9ydHMucm90bCA9IHJvdGw7XG4vKiogMzItYml0IGludGVnZXIgbGVmdCByb3RhdGlvbiAqL1xuZnVuY3Rpb24gcm90cih4LCBuKSB7XG4gICAgcmV0dXJuIHggPDwgKDMyIC0gbikgfCB4ID4+PiBuO1xufVxuZXhwb3J0cy5yb3RyID0gcm90cjtcbmZ1bmN0aW9uIGlzSW50ZWdlclNoaW0obikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PT0gXCJudW1iZXJcIiAmJiBpc0Zpbml0ZShuKSAmJiBNYXRoLmZsb29yKG4pID09PSBuO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGFyZ3VtZW50IGlzIGFuIGludGVnZXIgbnVtYmVyLlxuICpcbiAqIEluIEVTMjAxNSwgTnVtYmVyLmlzSW50ZWdlci5cbiAqL1xuZXhwb3J0cy5pc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IGlzSW50ZWdlclNoaW07XG4vKipcbiAqICBNYXRoLnBvdygyLCA1MykgLSAxXG4gKlxuICogIEluIEVTMjAxNSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUi5cbiAqL1xuZXhwb3J0cy5NQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBhcmd1bWVudCBpcyBhIHNhZmUgaW50ZWdlciBudW1iZXJcbiAqICgtTUlOX1NBRkVfSU5URUdFUiA8IG51bWJlciA8PSBNQVhfU0FGRV9JTlRFR0VSKVxuICpcbiAqIEluIEVTMjAxNSwgTnVtYmVyLmlzU2FmZUludGVnZXIuXG4gKi9cbmV4cG9ydHMuaXNTYWZlSW50ZWdlciA9IGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuaXNJbnRlZ2VyKG4pICYmIChuID49IC1leHBvcnRzLk1BWF9TQUZFX0lOVEVHRVIgJiYgbiA8PSBleHBvcnRzLk1BWF9TQUZFX0lOVEVHRVIpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoQykgMjAxNiBEbWl0cnkgQ2hlc3RueWtoXG4vLyBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogUGFja2FnZSBwb2x5MTMwNSBpbXBsZW1lbnRzIFBvbHkxMzA1IG9uZS10aW1lIG1lc3NhZ2UgYXV0aGVudGljYXRpb24gYWxnb3JpdGhtLlxuICovXG52YXIgY29uc3RhbnRfdGltZV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvY29uc3RhbnQtdGltZVwiKTtcbnZhciB3aXBlXzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi93aXBlXCIpO1xuZXhwb3J0cy5ESUdFU1RfTEVOR1RIID0gMTY7XG4vLyBQb3J0IG9mIEFuZHJldyBNb29uJ3MgUG9seTEzMDUtZG9ubmEtMTYuIFB1YmxpYyBkb21haW4uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmxvb2R5YmVycnkvcG9seTEzMDUtZG9ubmFcbi8qKlxuICogUG9seTEzMDUgY29tcHV0ZXMgMTYtYnl0ZSBhdXRoZW50aWNhdG9yIG9mIG1lc3NhZ2UgdXNpbmdcbiAqIGEgb25lLXRpbWUgMzItYnl0ZSBrZXkuXG4gKlxuICogSW1wb3J0YW50OiBrZXkgc2hvdWxkIGJlIHVzZWQgZm9yIG9ubHkgb25lIG1lc3NhZ2UsXG4gKiBpdCBzaG91bGQgbmV2ZXIgcmVwZWF0LlxuICovXG52YXIgUG9seTEzMDUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUG9seTEzMDUoa2V5KSB7XG4gICAgICAgIHRoaXMuZGlnZXN0TGVuZ3RoID0gZXhwb3J0cy5ESUdFU1RfTEVOR1RIO1xuICAgICAgICB0aGlzLl9idWZmZXIgPSBuZXcgVWludDhBcnJheSgxNik7XG4gICAgICAgIHRoaXMuX3IgPSBuZXcgVWludDE2QXJyYXkoMTApO1xuICAgICAgICB0aGlzLl9oID0gbmV3IFVpbnQxNkFycmF5KDEwKTtcbiAgICAgICAgdGhpcy5fcGFkID0gbmV3IFVpbnQxNkFycmF5KDgpO1xuICAgICAgICB0aGlzLl9sZWZ0b3ZlciA9IDA7XG4gICAgICAgIHRoaXMuX2ZpbiA9IDA7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHZhciB0MCA9IGtleVswXSB8IGtleVsxXSA8PCA4O1xuICAgICAgICB0aGlzLl9yWzBdID0gKHQwKSAmIDB4MWZmZjtcbiAgICAgICAgdmFyIHQxID0ga2V5WzJdIHwga2V5WzNdIDw8IDg7XG4gICAgICAgIHRoaXMuX3JbMV0gPSAoKHQwID4+PiAxMykgfCAodDEgPDwgMykpICYgMHgxZmZmO1xuICAgICAgICB2YXIgdDIgPSBrZXlbNF0gfCBrZXlbNV0gPDwgODtcbiAgICAgICAgdGhpcy5fclsyXSA9ICgodDEgPj4+IDEwKSB8ICh0MiA8PCA2KSkgJiAweDFmMDM7XG4gICAgICAgIHZhciB0MyA9IGtleVs2XSB8IGtleVs3XSA8PCA4O1xuICAgICAgICB0aGlzLl9yWzNdID0gKCh0MiA+Pj4gNykgfCAodDMgPDwgOSkpICYgMHgxZmZmO1xuICAgICAgICB2YXIgdDQgPSBrZXlbOF0gfCBrZXlbOV0gPDwgODtcbiAgICAgICAgdGhpcy5fcls0XSA9ICgodDMgPj4+IDQpIHwgKHQ0IDw8IDEyKSkgJiAweDAwZmY7XG4gICAgICAgIHRoaXMuX3JbNV0gPSAoKHQ0ID4+PiAxKSkgJiAweDFmZmU7XG4gICAgICAgIHZhciB0NSA9IGtleVsxMF0gfCBrZXlbMTFdIDw8IDg7XG4gICAgICAgIHRoaXMuX3JbNl0gPSAoKHQ0ID4+PiAxNCkgfCAodDUgPDwgMikpICYgMHgxZmZmO1xuICAgICAgICB2YXIgdDYgPSBrZXlbMTJdIHwga2V5WzEzXSA8PCA4O1xuICAgICAgICB0aGlzLl9yWzddID0gKCh0NSA+Pj4gMTEpIHwgKHQ2IDw8IDUpKSAmIDB4MWY4MTtcbiAgICAgICAgdmFyIHQ3ID0ga2V5WzE0XSB8IGtleVsxNV0gPDwgODtcbiAgICAgICAgdGhpcy5fcls4XSA9ICgodDYgPj4+IDgpIHwgKHQ3IDw8IDgpKSAmIDB4MWZmZjtcbiAgICAgICAgdGhpcy5fcls5XSA9ICgodDcgPj4+IDUpKSAmIDB4MDA3ZjtcbiAgICAgICAgdGhpcy5fcGFkWzBdID0ga2V5WzE2XSB8IGtleVsxN10gPDwgODtcbiAgICAgICAgdGhpcy5fcGFkWzFdID0ga2V5WzE4XSB8IGtleVsxOV0gPDwgODtcbiAgICAgICAgdGhpcy5fcGFkWzJdID0ga2V5WzIwXSB8IGtleVsyMV0gPDwgODtcbiAgICAgICAgdGhpcy5fcGFkWzNdID0ga2V5WzIyXSB8IGtleVsyM10gPDwgODtcbiAgICAgICAgdGhpcy5fcGFkWzRdID0ga2V5WzI0XSB8IGtleVsyNV0gPDwgODtcbiAgICAgICAgdGhpcy5fcGFkWzVdID0ga2V5WzI2XSB8IGtleVsyN10gPDwgODtcbiAgICAgICAgdGhpcy5fcGFkWzZdID0ga2V5WzI4XSB8IGtleVsyOV0gPDwgODtcbiAgICAgICAgdGhpcy5fcGFkWzddID0ga2V5WzMwXSB8IGtleVszMV0gPDwgODtcbiAgICB9XG4gICAgUG9seTEzMDUucHJvdG90eXBlLl9ibG9ja3MgPSBmdW5jdGlvbiAobSwgbXBvcywgYnl0ZXMpIHtcbiAgICAgICAgdmFyIGhpYml0ID0gdGhpcy5fZmluID8gMCA6IDEgPDwgMTE7XG4gICAgICAgIHZhciBoMCA9IHRoaXMuX2hbMF0sIGgxID0gdGhpcy5faFsxXSwgaDIgPSB0aGlzLl9oWzJdLCBoMyA9IHRoaXMuX2hbM10sIGg0ID0gdGhpcy5faFs0XSwgaDUgPSB0aGlzLl9oWzVdLCBoNiA9IHRoaXMuX2hbNl0sIGg3ID0gdGhpcy5faFs3XSwgaDggPSB0aGlzLl9oWzhdLCBoOSA9IHRoaXMuX2hbOV07XG4gICAgICAgIHZhciByMCA9IHRoaXMuX3JbMF0sIHIxID0gdGhpcy5fclsxXSwgcjIgPSB0aGlzLl9yWzJdLCByMyA9IHRoaXMuX3JbM10sIHI0ID0gdGhpcy5fcls0XSwgcjUgPSB0aGlzLl9yWzVdLCByNiA9IHRoaXMuX3JbNl0sIHI3ID0gdGhpcy5fcls3XSwgcjggPSB0aGlzLl9yWzhdLCByOSA9IHRoaXMuX3JbOV07XG4gICAgICAgIHdoaWxlIChieXRlcyA+PSAxNikge1xuICAgICAgICAgICAgdmFyIHQwID0gbVttcG9zICsgMF0gfCBtW21wb3MgKyAxXSA8PCA4O1xuICAgICAgICAgICAgaDAgKz0gKHQwKSAmIDB4MWZmZjtcbiAgICAgICAgICAgIHZhciB0MSA9IG1bbXBvcyArIDJdIHwgbVttcG9zICsgM10gPDwgODtcbiAgICAgICAgICAgIGgxICs9ICgodDAgPj4+IDEzKSB8ICh0MSA8PCAzKSkgJiAweDFmZmY7XG4gICAgICAgICAgICB2YXIgdDIgPSBtW21wb3MgKyA0XSB8IG1bbXBvcyArIDVdIDw8IDg7XG4gICAgICAgICAgICBoMiArPSAoKHQxID4+PiAxMCkgfCAodDIgPDwgNikpICYgMHgxZmZmO1xuICAgICAgICAgICAgdmFyIHQzID0gbVttcG9zICsgNl0gfCBtW21wb3MgKyA3XSA8PCA4O1xuICAgICAgICAgICAgaDMgKz0gKCh0MiA+Pj4gNykgfCAodDMgPDwgOSkpICYgMHgxZmZmO1xuICAgICAgICAgICAgdmFyIHQ0ID0gbVttcG9zICsgOF0gfCBtW21wb3MgKyA5XSA8PCA4O1xuICAgICAgICAgICAgaDQgKz0gKCh0MyA+Pj4gNCkgfCAodDQgPDwgMTIpKSAmIDB4MWZmZjtcbiAgICAgICAgICAgIGg1ICs9ICgodDQgPj4+IDEpKSAmIDB4MWZmZjtcbiAgICAgICAgICAgIHZhciB0NSA9IG1bbXBvcyArIDEwXSB8IG1bbXBvcyArIDExXSA8PCA4O1xuICAgICAgICAgICAgaDYgKz0gKCh0NCA+Pj4gMTQpIHwgKHQ1IDw8IDIpKSAmIDB4MWZmZjtcbiAgICAgICAgICAgIHZhciB0NiA9IG1bbXBvcyArIDEyXSB8IG1bbXBvcyArIDEzXSA8PCA4O1xuICAgICAgICAgICAgaDcgKz0gKCh0NSA+Pj4gMTEpIHwgKHQ2IDw8IDUpKSAmIDB4MWZmZjtcbiAgICAgICAgICAgIHZhciB0NyA9IG1bbXBvcyArIDE0XSB8IG1bbXBvcyArIDE1XSA8PCA4O1xuICAgICAgICAgICAgaDggKz0gKCh0NiA+Pj4gOCkgfCAodDcgPDwgOCkpICYgMHgxZmZmO1xuICAgICAgICAgICAgaDkgKz0gKCh0NyA+Pj4gNSkpIHwgaGliaXQ7XG4gICAgICAgICAgICB2YXIgYyA9IDA7XG4gICAgICAgICAgICB2YXIgZDAgPSBjO1xuICAgICAgICAgICAgZDAgKz0gaDAgKiByMDtcbiAgICAgICAgICAgIGQwICs9IGgxICogKDUgKiByOSk7XG4gICAgICAgICAgICBkMCArPSBoMiAqICg1ICogcjgpO1xuICAgICAgICAgICAgZDAgKz0gaDMgKiAoNSAqIHI3KTtcbiAgICAgICAgICAgIGQwICs9IGg0ICogKDUgKiByNik7XG4gICAgICAgICAgICBjID0gKGQwID4+PiAxMyk7XG4gICAgICAgICAgICBkMCAmPSAweDFmZmY7XG4gICAgICAgICAgICBkMCArPSBoNSAqICg1ICogcjUpO1xuICAgICAgICAgICAgZDAgKz0gaDYgKiAoNSAqIHI0KTtcbiAgICAgICAgICAgIGQwICs9IGg3ICogKDUgKiByMyk7XG4gICAgICAgICAgICBkMCArPSBoOCAqICg1ICogcjIpO1xuICAgICAgICAgICAgZDAgKz0gaDkgKiAoNSAqIHIxKTtcbiAgICAgICAgICAgIGMgKz0gKGQwID4+PiAxMyk7XG4gICAgICAgICAgICBkMCAmPSAweDFmZmY7XG4gICAgICAgICAgICB2YXIgZDEgPSBjO1xuICAgICAgICAgICAgZDEgKz0gaDAgKiByMTtcbiAgICAgICAgICAgIGQxICs9IGgxICogcjA7XG4gICAgICAgICAgICBkMSArPSBoMiAqICg1ICogcjkpO1xuICAgICAgICAgICAgZDEgKz0gaDMgKiAoNSAqIHI4KTtcbiAgICAgICAgICAgIGQxICs9IGg0ICogKDUgKiByNyk7XG4gICAgICAgICAgICBjID0gKGQxID4+PiAxMyk7XG4gICAgICAgICAgICBkMSAmPSAweDFmZmY7XG4gICAgICAgICAgICBkMSArPSBoNSAqICg1ICogcjYpO1xuICAgICAgICAgICAgZDEgKz0gaDYgKiAoNSAqIHI1KTtcbiAgICAgICAgICAgIGQxICs9IGg3ICogKDUgKiByNCk7XG4gICAgICAgICAgICBkMSArPSBoOCAqICg1ICogcjMpO1xuICAgICAgICAgICAgZDEgKz0gaDkgKiAoNSAqIHIyKTtcbiAgICAgICAgICAgIGMgKz0gKGQxID4+PiAxMyk7XG4gICAgICAgICAgICBkMSAmPSAweDFmZmY7XG4gICAgICAgICAgICB2YXIgZDIgPSBjO1xuICAgICAgICAgICAgZDIgKz0gaDAgKiByMjtcbiAgICAgICAgICAgIGQyICs9IGgxICogcjE7XG4gICAgICAgICAgICBkMiArPSBoMiAqIHIwO1xuICAgICAgICAgICAgZDIgKz0gaDMgKiAoNSAqIHI5KTtcbiAgICAgICAgICAgIGQyICs9IGg0ICogKDUgKiByOCk7XG4gICAgICAgICAgICBjID0gKGQyID4+PiAxMyk7XG4gICAgICAgICAgICBkMiAmPSAweDFmZmY7XG4gICAgICAgICAgICBkMiArPSBoNSAqICg1ICogcjcpO1xuICAgICAgICAgICAgZDIgKz0gaDYgKiAoNSAqIHI2KTtcbiAgICAgICAgICAgIGQyICs9IGg3ICogKDUgKiByNSk7XG4gICAgICAgICAgICBkMiArPSBoOCAqICg1ICogcjQpO1xuICAgICAgICAgICAgZDIgKz0gaDkgKiAoNSAqIHIzKTtcbiAgICAgICAgICAgIGMgKz0gKGQyID4+PiAxMyk7XG4gICAgICAgICAgICBkMiAmPSAweDFmZmY7XG4gICAgICAgICAgICB2YXIgZDMgPSBjO1xuICAgICAgICAgICAgZDMgKz0gaDAgKiByMztcbiAgICAgICAgICAgIGQzICs9IGgxICogcjI7XG4gICAgICAgICAgICBkMyArPSBoMiAqIHIxO1xuICAgICAgICAgICAgZDMgKz0gaDMgKiByMDtcbiAgICAgICAgICAgIGQzICs9IGg0ICogKDUgKiByOSk7XG4gICAgICAgICAgICBjID0gKGQzID4+PiAxMyk7XG4gICAgICAgICAgICBkMyAmPSAweDFmZmY7XG4gICAgICAgICAgICBkMyArPSBoNSAqICg1ICogcjgpO1xuICAgICAgICAgICAgZDMgKz0gaDYgKiAoNSAqIHI3KTtcbiAgICAgICAgICAgIGQzICs9IGg3ICogKDUgKiByNik7XG4gICAgICAgICAgICBkMyArPSBoOCAqICg1ICogcjUpO1xuICAgICAgICAgICAgZDMgKz0gaDkgKiAoNSAqIHI0KTtcbiAgICAgICAgICAgIGMgKz0gKGQzID4+PiAxMyk7XG4gICAgICAgICAgICBkMyAmPSAweDFmZmY7XG4gICAgICAgICAgICB2YXIgZDQgPSBjO1xuICAgICAgICAgICAgZDQgKz0gaDAgKiByNDtcbiAgICAgICAgICAgIGQ0ICs9IGgxICogcjM7XG4gICAgICAgICAgICBkNCArPSBoMiAqIHIyO1xuICAgICAgICAgICAgZDQgKz0gaDMgKiByMTtcbiAgICAgICAgICAgIGQ0ICs9IGg0ICogcjA7XG4gICAgICAgICAgICBjID0gKGQ0ID4+PiAxMyk7XG4gICAgICAgICAgICBkNCAmPSAweDFmZmY7XG4gICAgICAgICAgICBkNCArPSBoNSAqICg1ICogcjkpO1xuICAgICAgICAgICAgZDQgKz0gaDYgKiAoNSAqIHI4KTtcbiAgICAgICAgICAgIGQ0ICs9IGg3ICogKDUgKiByNyk7XG4gICAgICAgICAgICBkNCArPSBoOCAqICg1ICogcjYpO1xuICAgICAgICAgICAgZDQgKz0gaDkgKiAoNSAqIHI1KTtcbiAgICAgICAgICAgIGMgKz0gKGQ0ID4+PiAxMyk7XG4gICAgICAgICAgICBkNCAmPSAweDFmZmY7XG4gICAgICAgICAgICB2YXIgZDUgPSBjO1xuICAgICAgICAgICAgZDUgKz0gaDAgKiByNTtcbiAgICAgICAgICAgIGQ1ICs9IGgxICogcjQ7XG4gICAgICAgICAgICBkNSArPSBoMiAqIHIzO1xuICAgICAgICAgICAgZDUgKz0gaDMgKiByMjtcbiAgICAgICAgICAgIGQ1ICs9IGg0ICogcjE7XG4gICAgICAgICAgICBjID0gKGQ1ID4+PiAxMyk7XG4gICAgICAgICAgICBkNSAmPSAweDFmZmY7XG4gICAgICAgICAgICBkNSArPSBoNSAqIHIwO1xuICAgICAgICAgICAgZDUgKz0gaDYgKiAoNSAqIHI5KTtcbiAgICAgICAgICAgIGQ1ICs9IGg3ICogKDUgKiByOCk7XG4gICAgICAgICAgICBkNSArPSBoOCAqICg1ICogcjcpO1xuICAgICAgICAgICAgZDUgKz0gaDkgKiAoNSAqIHI2KTtcbiAgICAgICAgICAgIGMgKz0gKGQ1ID4+PiAxMyk7XG4gICAgICAgICAgICBkNSAmPSAweDFmZmY7XG4gICAgICAgICAgICB2YXIgZDYgPSBjO1xuICAgICAgICAgICAgZDYgKz0gaDAgKiByNjtcbiAgICAgICAgICAgIGQ2ICs9IGgxICogcjU7XG4gICAgICAgICAgICBkNiArPSBoMiAqIHI0O1xuICAgICAgICAgICAgZDYgKz0gaDMgKiByMztcbiAgICAgICAgICAgIGQ2ICs9IGg0ICogcjI7XG4gICAgICAgICAgICBjID0gKGQ2ID4+PiAxMyk7XG4gICAgICAgICAgICBkNiAmPSAweDFmZmY7XG4gICAgICAgICAgICBkNiArPSBoNSAqIHIxO1xuICAgICAgICAgICAgZDYgKz0gaDYgKiByMDtcbiAgICAgICAgICAgIGQ2ICs9IGg3ICogKDUgKiByOSk7XG4gICAgICAgICAgICBkNiArPSBoOCAqICg1ICogcjgpO1xuICAgICAgICAgICAgZDYgKz0gaDkgKiAoNSAqIHI3KTtcbiAgICAgICAgICAgIGMgKz0gKGQ2ID4+PiAxMyk7XG4gICAgICAgICAgICBkNiAmPSAweDFmZmY7XG4gICAgICAgICAgICB2YXIgZDcgPSBjO1xuICAgICAgICAgICAgZDcgKz0gaDAgKiByNztcbiAgICAgICAgICAgIGQ3ICs9IGgxICogcjY7XG4gICAgICAgICAgICBkNyArPSBoMiAqIHI1O1xuICAgICAgICAgICAgZDcgKz0gaDMgKiByNDtcbiAgICAgICAgICAgIGQ3ICs9IGg0ICogcjM7XG4gICAgICAgICAgICBjID0gKGQ3ID4+PiAxMyk7XG4gICAgICAgICAgICBkNyAmPSAweDFmZmY7XG4gICAgICAgICAgICBkNyArPSBoNSAqIHIyO1xuICAgICAgICAgICAgZDcgKz0gaDYgKiByMTtcbiAgICAgICAgICAgIGQ3ICs9IGg3ICogcjA7XG4gICAgICAgICAgICBkNyArPSBoOCAqICg1ICogcjkpO1xuICAgICAgICAgICAgZDcgKz0gaDkgKiAoNSAqIHI4KTtcbiAgICAgICAgICAgIGMgKz0gKGQ3ID4+PiAxMyk7XG4gICAgICAgICAgICBkNyAmPSAweDFmZmY7XG4gICAgICAgICAgICB2YXIgZDggPSBjO1xuICAgICAgICAgICAgZDggKz0gaDAgKiByODtcbiAgICAgICAgICAgIGQ4ICs9IGgxICogcjc7XG4gICAgICAgICAgICBkOCArPSBoMiAqIHI2O1xuICAgICAgICAgICAgZDggKz0gaDMgKiByNTtcbiAgICAgICAgICAgIGQ4ICs9IGg0ICogcjQ7XG4gICAgICAgICAgICBjID0gKGQ4ID4+PiAxMyk7XG4gICAgICAgICAgICBkOCAmPSAweDFmZmY7XG4gICAgICAgICAgICBkOCArPSBoNSAqIHIzO1xuICAgICAgICAgICAgZDggKz0gaDYgKiByMjtcbiAgICAgICAgICAgIGQ4ICs9IGg3ICogcjE7XG4gICAgICAgICAgICBkOCArPSBoOCAqIHIwO1xuICAgICAgICAgICAgZDggKz0gaDkgKiAoNSAqIHI5KTtcbiAgICAgICAgICAgIGMgKz0gKGQ4ID4+PiAxMyk7XG4gICAgICAgICAgICBkOCAmPSAweDFmZmY7XG4gICAgICAgICAgICB2YXIgZDkgPSBjO1xuICAgICAgICAgICAgZDkgKz0gaDAgKiByOTtcbiAgICAgICAgICAgIGQ5ICs9IGgxICogcjg7XG4gICAgICAgICAgICBkOSArPSBoMiAqIHI3O1xuICAgICAgICAgICAgZDkgKz0gaDMgKiByNjtcbiAgICAgICAgICAgIGQ5ICs9IGg0ICogcjU7XG4gICAgICAgICAgICBjID0gKGQ5ID4+PiAxMyk7XG4gICAgICAgICAgICBkOSAmPSAweDFmZmY7XG4gICAgICAgICAgICBkOSArPSBoNSAqIHI0O1xuICAgICAgICAgICAgZDkgKz0gaDYgKiByMztcbiAgICAgICAgICAgIGQ5ICs9IGg3ICogcjI7XG4gICAgICAgICAgICBkOSArPSBoOCAqIHIxO1xuICAgICAgICAgICAgZDkgKz0gaDkgKiByMDtcbiAgICAgICAgICAgIGMgKz0gKGQ5ID4+PiAxMyk7XG4gICAgICAgICAgICBkOSAmPSAweDFmZmY7XG4gICAgICAgICAgICBjID0gKCgoYyA8PCAyKSArIGMpKSB8IDA7XG4gICAgICAgICAgICBjID0gKGMgKyBkMCkgfCAwO1xuICAgICAgICAgICAgZDAgPSBjICYgMHgxZmZmO1xuICAgICAgICAgICAgYyA9IChjID4+PiAxMyk7XG4gICAgICAgICAgICBkMSArPSBjO1xuICAgICAgICAgICAgaDAgPSBkMDtcbiAgICAgICAgICAgIGgxID0gZDE7XG4gICAgICAgICAgICBoMiA9IGQyO1xuICAgICAgICAgICAgaDMgPSBkMztcbiAgICAgICAgICAgIGg0ID0gZDQ7XG4gICAgICAgICAgICBoNSA9IGQ1O1xuICAgICAgICAgICAgaDYgPSBkNjtcbiAgICAgICAgICAgIGg3ID0gZDc7XG4gICAgICAgICAgICBoOCA9IGQ4O1xuICAgICAgICAgICAgaDkgPSBkOTtcbiAgICAgICAgICAgIG1wb3MgKz0gMTY7XG4gICAgICAgICAgICBieXRlcyAtPSAxNjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oWzBdID0gaDA7XG4gICAgICAgIHRoaXMuX2hbMV0gPSBoMTtcbiAgICAgICAgdGhpcy5faFsyXSA9IGgyO1xuICAgICAgICB0aGlzLl9oWzNdID0gaDM7XG4gICAgICAgIHRoaXMuX2hbNF0gPSBoNDtcbiAgICAgICAgdGhpcy5faFs1XSA9IGg1O1xuICAgICAgICB0aGlzLl9oWzZdID0gaDY7XG4gICAgICAgIHRoaXMuX2hbN10gPSBoNztcbiAgICAgICAgdGhpcy5faFs4XSA9IGg4O1xuICAgICAgICB0aGlzLl9oWzldID0gaDk7XG4gICAgfTtcbiAgICBQb2x5MTMwNS5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24gKG1hYywgbWFjcG9zKSB7XG4gICAgICAgIGlmIChtYWNwb3MgPT09IHZvaWQgMCkgeyBtYWNwb3MgPSAwOyB9XG4gICAgICAgIHZhciBnID0gbmV3IFVpbnQxNkFycmF5KDEwKTtcbiAgICAgICAgdmFyIGM7XG4gICAgICAgIHZhciBtYXNrO1xuICAgICAgICB2YXIgZjtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGlmICh0aGlzLl9sZWZ0b3Zlcikge1xuICAgICAgICAgICAgaSA9IHRoaXMuX2xlZnRvdmVyO1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyW2krK10gPSAxO1xuICAgICAgICAgICAgZm9yICg7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYnVmZmVyW2ldID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2ZpbiA9IDE7XG4gICAgICAgICAgICB0aGlzLl9ibG9ja3ModGhpcy5fYnVmZmVyLCAwLCAxNik7XG4gICAgICAgIH1cbiAgICAgICAgYyA9IHRoaXMuX2hbMV0gPj4+IDEzO1xuICAgICAgICB0aGlzLl9oWzFdICY9IDB4MWZmZjtcbiAgICAgICAgZm9yIChpID0gMjsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2hbaV0gKz0gYztcbiAgICAgICAgICAgIGMgPSB0aGlzLl9oW2ldID4+PiAxMztcbiAgICAgICAgICAgIHRoaXMuX2hbaV0gJj0gMHgxZmZmO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hbMF0gKz0gKGMgKiA1KTtcbiAgICAgICAgYyA9IHRoaXMuX2hbMF0gPj4+IDEzO1xuICAgICAgICB0aGlzLl9oWzBdICY9IDB4MWZmZjtcbiAgICAgICAgdGhpcy5faFsxXSArPSBjO1xuICAgICAgICBjID0gdGhpcy5faFsxXSA+Pj4gMTM7XG4gICAgICAgIHRoaXMuX2hbMV0gJj0gMHgxZmZmO1xuICAgICAgICB0aGlzLl9oWzJdICs9IGM7XG4gICAgICAgIGdbMF0gPSB0aGlzLl9oWzBdICsgNTtcbiAgICAgICAgYyA9IGdbMF0gPj4+IDEzO1xuICAgICAgICBnWzBdICY9IDB4MWZmZjtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgICAgIGdbaV0gPSB0aGlzLl9oW2ldICsgYztcbiAgICAgICAgICAgIGMgPSBnW2ldID4+PiAxMztcbiAgICAgICAgICAgIGdbaV0gJj0gMHgxZmZmO1xuICAgICAgICB9XG4gICAgICAgIGdbOV0gLT0gKDEgPDwgMTMpO1xuICAgICAgICBtYXNrID0gKGMgXiAxKSAtIDE7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgICAgICBnW2ldICY9IG1hc2s7XG4gICAgICAgIH1cbiAgICAgICAgbWFzayA9IH5tYXNrO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5faFtpXSA9ICh0aGlzLl9oW2ldICYgbWFzaykgfCBnW2ldO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hbMF0gPSAoKHRoaXMuX2hbMF0pIHwgKHRoaXMuX2hbMV0gPDwgMTMpKSAmIDB4ZmZmZjtcbiAgICAgICAgdGhpcy5faFsxXSA9ICgodGhpcy5faFsxXSA+Pj4gMykgfCAodGhpcy5faFsyXSA8PCAxMCkpICYgMHhmZmZmO1xuICAgICAgICB0aGlzLl9oWzJdID0gKCh0aGlzLl9oWzJdID4+PiA2KSB8ICh0aGlzLl9oWzNdIDw8IDcpKSAmIDB4ZmZmZjtcbiAgICAgICAgdGhpcy5faFszXSA9ICgodGhpcy5faFszXSA+Pj4gOSkgfCAodGhpcy5faFs0XSA8PCA0KSkgJiAweGZmZmY7XG4gICAgICAgIHRoaXMuX2hbNF0gPSAoKHRoaXMuX2hbNF0gPj4+IDEyKSB8ICh0aGlzLl9oWzVdIDw8IDEpIHwgKHRoaXMuX2hbNl0gPDwgMTQpKSAmIDB4ZmZmZjtcbiAgICAgICAgdGhpcy5faFs1XSA9ICgodGhpcy5faFs2XSA+Pj4gMikgfCAodGhpcy5faFs3XSA8PCAxMSkpICYgMHhmZmZmO1xuICAgICAgICB0aGlzLl9oWzZdID0gKCh0aGlzLl9oWzddID4+PiA1KSB8ICh0aGlzLl9oWzhdIDw8IDgpKSAmIDB4ZmZmZjtcbiAgICAgICAgdGhpcy5faFs3XSA9ICgodGhpcy5faFs4XSA+Pj4gOCkgfCAodGhpcy5faFs5XSA8PCA1KSkgJiAweGZmZmY7XG4gICAgICAgIGYgPSB0aGlzLl9oWzBdICsgdGhpcy5fcGFkWzBdO1xuICAgICAgICB0aGlzLl9oWzBdID0gZiAmIDB4ZmZmZjtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IDg7IGkrKykge1xuICAgICAgICAgICAgZiA9ICgoKHRoaXMuX2hbaV0gKyB0aGlzLl9wYWRbaV0pIHwgMCkgKyAoZiA+Pj4gMTYpKSB8IDA7XG4gICAgICAgICAgICB0aGlzLl9oW2ldID0gZiAmIDB4ZmZmZjtcbiAgICAgICAgfVxuICAgICAgICBtYWNbbWFjcG9zICsgMF0gPSB0aGlzLl9oWzBdID4+PiAwO1xuICAgICAgICBtYWNbbWFjcG9zICsgMV0gPSB0aGlzLl9oWzBdID4+PiA4O1xuICAgICAgICBtYWNbbWFjcG9zICsgMl0gPSB0aGlzLl9oWzFdID4+PiAwO1xuICAgICAgICBtYWNbbWFjcG9zICsgM10gPSB0aGlzLl9oWzFdID4+PiA4O1xuICAgICAgICBtYWNbbWFjcG9zICsgNF0gPSB0aGlzLl9oWzJdID4+PiAwO1xuICAgICAgICBtYWNbbWFjcG9zICsgNV0gPSB0aGlzLl9oWzJdID4+PiA4O1xuICAgICAgICBtYWNbbWFjcG9zICsgNl0gPSB0aGlzLl9oWzNdID4+PiAwO1xuICAgICAgICBtYWNbbWFjcG9zICsgN10gPSB0aGlzLl9oWzNdID4+PiA4O1xuICAgICAgICBtYWNbbWFjcG9zICsgOF0gPSB0aGlzLl9oWzRdID4+PiAwO1xuICAgICAgICBtYWNbbWFjcG9zICsgOV0gPSB0aGlzLl9oWzRdID4+PiA4O1xuICAgICAgICBtYWNbbWFjcG9zICsgMTBdID0gdGhpcy5faFs1XSA+Pj4gMDtcbiAgICAgICAgbWFjW21hY3BvcyArIDExXSA9IHRoaXMuX2hbNV0gPj4+IDg7XG4gICAgICAgIG1hY1ttYWNwb3MgKyAxMl0gPSB0aGlzLl9oWzZdID4+PiAwO1xuICAgICAgICBtYWNbbWFjcG9zICsgMTNdID0gdGhpcy5faFs2XSA+Pj4gODtcbiAgICAgICAgbWFjW21hY3BvcyArIDE0XSA9IHRoaXMuX2hbN10gPj4+IDA7XG4gICAgICAgIG1hY1ttYWNwb3MgKyAxNV0gPSB0aGlzLl9oWzddID4+PiA4O1xuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgUG9seTEzMDUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHZhciBtcG9zID0gMDtcbiAgICAgICAgdmFyIGJ5dGVzID0gbS5sZW5ndGg7XG4gICAgICAgIHZhciB3YW50O1xuICAgICAgICBpZiAodGhpcy5fbGVmdG92ZXIpIHtcbiAgICAgICAgICAgIHdhbnQgPSAoMTYgLSB0aGlzLl9sZWZ0b3Zlcik7XG4gICAgICAgICAgICBpZiAod2FudCA+IGJ5dGVzKSB7XG4gICAgICAgICAgICAgICAgd2FudCA9IGJ5dGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3YW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9idWZmZXJbdGhpcy5fbGVmdG92ZXIgKyBpXSA9IG1bbXBvcyArIGldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnl0ZXMgLT0gd2FudDtcbiAgICAgICAgICAgIG1wb3MgKz0gd2FudDtcbiAgICAgICAgICAgIHRoaXMuX2xlZnRvdmVyICs9IHdhbnQ7XG4gICAgICAgICAgICBpZiAodGhpcy5fbGVmdG92ZXIgPCAxNikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYmxvY2tzKHRoaXMuX2J1ZmZlciwgMCwgMTYpO1xuICAgICAgICAgICAgdGhpcy5fbGVmdG92ZXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChieXRlcyA+PSAxNikge1xuICAgICAgICAgICAgd2FudCA9IGJ5dGVzIC0gKGJ5dGVzICUgMTYpO1xuICAgICAgICAgICAgdGhpcy5fYmxvY2tzKG0sIG1wb3MsIHdhbnQpO1xuICAgICAgICAgICAgbXBvcyArPSB3YW50O1xuICAgICAgICAgICAgYnl0ZXMgLT0gd2FudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9sZWZ0b3ZlciArIGldID0gbVttcG9zICsgaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9sZWZ0b3ZlciArPSBieXRlcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFBvbHkxMzA1LnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRPRE8oZGNoZXN0KTogaXQgYmVoYXZlcyBkaWZmZXJlbnRseSB0aGFuIG90aGVyIGhhc2hlcy9ITUFDLFxuICAgICAgICAvLyBiZWNhdXNlIGl0IHRocm93cyB3aGVuIGZpbmlzaGVkIOKAlCBvdGhlcnMganVzdCByZXR1cm4gc2F2ZWQgcmVzdWx0LlxuICAgICAgICBpZiAodGhpcy5fZmluaXNoZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBvbHkxMzA1IHdhcyBmaW5pc2hlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWFjID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuICAgICAgICB0aGlzLmZpbmlzaChtYWMpO1xuICAgICAgICByZXR1cm4gbWFjO1xuICAgIH07XG4gICAgUG9seTEzMDUucHJvdG90eXBlLmNsZWFuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3aXBlXzEud2lwZSh0aGlzLl9idWZmZXIpO1xuICAgICAgICB3aXBlXzEud2lwZSh0aGlzLl9yKTtcbiAgICAgICAgd2lwZV8xLndpcGUodGhpcy5faCk7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX3BhZCk7XG4gICAgICAgIHRoaXMuX2xlZnRvdmVyID0gMDtcbiAgICAgICAgdGhpcy5fZmluID0gMDtcbiAgICAgICAgdGhpcy5fZmluaXNoZWQgPSB0cnVlOyAvLyBtYXJrIGFzIGZpbmlzaGVkIGV2ZW4gaWYgbm90XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIFBvbHkxMzA1O1xufSgpKTtcbmV4cG9ydHMuUG9seTEzMDUgPSBQb2x5MTMwNTtcbi8qKlxuICogUmV0dXJucyAxNi1ieXRlIGF1dGhlbnRpY2F0b3Igb2YgZGF0YSB1c2luZyBhIG9uZS10aW1lIDMyLWJ5dGUga2V5LlxuICpcbiAqIEltcG9ydGFudDoga2V5IHNob3VsZCBiZSB1c2VkIGZvciBvbmx5IG9uZSBtZXNzYWdlLCBpdCBzaG91bGQgbmV2ZXIgcmVwZWF0LlxuICovXG5mdW5jdGlvbiBvbmVUaW1lQXV0aChrZXksIGRhdGEpIHtcbiAgICB2YXIgaCA9IG5ldyBQb2x5MTMwNShrZXkpO1xuICAgIGgudXBkYXRlKGRhdGEpO1xuICAgIHZhciBkaWdlc3QgPSBoLmRpZ2VzdCgpO1xuICAgIGguY2xlYW4oKTtcbiAgICByZXR1cm4gZGlnZXN0O1xufVxuZXhwb3J0cy5vbmVUaW1lQXV0aCA9IG9uZVRpbWVBdXRoO1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdHdvIGF1dGhlbnRpY2F0b3JzIGFyZSAxNi1ieXRlIGxvbmcgYW5kIGVxdWFsLlxuICogVXNlcyBjb250YW50LXRpbWUgY29tcGFyaXNvbiB0byBhdm9pZCBsZWFraW5nIHRpbWluZyBpbmZvcm1hdGlvbi5cbiAqL1xuZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gZXhwb3J0cy5ESUdFU1RfTEVOR1RIIHx8IGIubGVuZ3RoICE9PSBleHBvcnRzLkRJR0VTVF9MRU5HVEgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gY29uc3RhbnRfdGltZV8xLmVxdWFsKGEsIGIpO1xufVxuZXhwb3J0cy5lcXVhbCA9IGVxdWFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9seTEzMDUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKEMpIDIwMTYgRG1pdHJ5IENoZXN0bnlraFxuLy8gTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJhbmRvbVN0cmluZ0ZvckVudHJvcHkgPSBleHBvcnRzLnJhbmRvbVN0cmluZyA9IGV4cG9ydHMucmFuZG9tVWludDMyID0gZXhwb3J0cy5yYW5kb21CeXRlcyA9IGV4cG9ydHMuZGVmYXVsdFJhbmRvbVNvdXJjZSA9IHZvaWQgMDtcbmNvbnN0IHN5c3RlbV8xID0gcmVxdWlyZShcIi4vc291cmNlL3N5c3RlbVwiKTtcbmNvbnN0IGJpbmFyeV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvYmluYXJ5XCIpO1xuY29uc3Qgd2lwZV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvd2lwZVwiKTtcbmV4cG9ydHMuZGVmYXVsdFJhbmRvbVNvdXJjZSA9IG5ldyBzeXN0ZW1fMS5TeXN0ZW1SYW5kb21Tb3VyY2UoKTtcbmZ1bmN0aW9uIHJhbmRvbUJ5dGVzKGxlbmd0aCwgcHJuZyA9IGV4cG9ydHMuZGVmYXVsdFJhbmRvbVNvdXJjZSkge1xuICAgIHJldHVybiBwcm5nLnJhbmRvbUJ5dGVzKGxlbmd0aCk7XG59XG5leHBvcnRzLnJhbmRvbUJ5dGVzID0gcmFuZG9tQnl0ZXM7XG4vKipcbiAqIFJldHVybnMgYSB1bmlmb3JtbHkgcmFuZG9tIHVuc2lnbmVkIDMyLWJpdCBpbnRlZ2VyLlxuICovXG5mdW5jdGlvbiByYW5kb21VaW50MzIocHJuZyA9IGV4cG9ydHMuZGVmYXVsdFJhbmRvbVNvdXJjZSkge1xuICAgIC8vIEdlbmVyYXRlIDQtYnl0ZSByYW5kb20gYnVmZmVyLlxuICAgIGNvbnN0IGJ1ZiA9IHJhbmRvbUJ5dGVzKDQsIHBybmcpO1xuICAgIC8vIENvbnZlcnQgYnl0ZXMgZnJvbSBidWZmZXIgaW50byBhIDMyLWJpdCBpbnRlZ2VyLlxuICAgIC8vIEl0J3Mgbm90IGltcG9ydGFudCB3aGljaCBieXRlIG9yZGVyIHRvIHVzZSwgc2luY2VcbiAgICAvLyB0aGUgcmVzdWx0IGlzIHJhbmRvbS5cbiAgICBjb25zdCByZXN1bHQgPSAoMCwgYmluYXJ5XzEucmVhZFVpbnQzMkxFKShidWYpO1xuICAgIC8vIENsZWFuIHRoZSBidWZmZXIuXG4gICAgKDAsIHdpcGVfMS53aXBlKShidWYpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLnJhbmRvbVVpbnQzMiA9IHJhbmRvbVVpbnQzMjtcbi8qKiA2MiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBmb3IgZGVmYXVsdCBjaGFyc2V0IG9mIHJhbmRvbVN0cmluZygpICovXG5jb25zdCBBTFBIQU5VTUVSSUMgPSBcIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7XG4vKipcbiAqIFJldHVybnMgYSB1bmlmb3JtIHJhbmRvbSBzdHJpbmcgb2YgdGhlIGdpdmVuIGxlbmd0aFxuICogd2l0aCBjaGFyYWN0ZXJzIGZyb20gdGhlIGdpdmVuIGNoYXJzZXQuXG4gKlxuICogQ2hhcnNldCBtdXN0IG5vdCBoYXZlIG1vcmUgdGhhbiAyNTYgY2hhcmFjdGVycy5cbiAqXG4gKiBEZWZhdWx0IGNoYXJzZXQgZ2VuZXJhdGVzIGNhc2Utc2Vuc2l0aXZlIGFscGhhbnVtZXJpY1xuICogc3RyaW5ncyAoMC05LCBBLVosIGEteikuXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbVN0cmluZyhsZW5ndGgsIGNoYXJzZXQgPSBBTFBIQU5VTUVSSUMsIHBybmcgPSBleHBvcnRzLmRlZmF1bHRSYW5kb21Tb3VyY2UpIHtcbiAgICBpZiAoY2hhcnNldC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInJhbmRvbVN0cmluZyBjaGFyc2V0IGlzIHRvbyBzaG9ydFwiKTtcbiAgICB9XG4gICAgaWYgKGNoYXJzZXQubGVuZ3RoID4gMjU2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInJhbmRvbVN0cmluZyBjaGFyc2V0IGlzIHRvbyBsb25nXCIpO1xuICAgIH1cbiAgICBsZXQgb3V0ID0gJyc7XG4gICAgY29uc3QgY2hhcnNMZW4gPSBjaGFyc2V0Lmxlbmd0aDtcbiAgICBjb25zdCBtYXhCeXRlID0gMjU2IC0gKDI1NiAlIGNoYXJzTGVuKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBidWYgPSByYW5kb21CeXRlcyhNYXRoLmNlaWwobGVuZ3RoICogMjU2IC8gbWF4Qnl0ZSksIHBybmcpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGggJiYgbGVuZ3RoID4gMDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByYW5kb21CeXRlID0gYnVmW2ldO1xuICAgICAgICAgICAgaWYgKHJhbmRvbUJ5dGUgPCBtYXhCeXRlKSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9IGNoYXJzZXQuY2hhckF0KHJhbmRvbUJ5dGUgJSBjaGFyc0xlbik7XG4gICAgICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKDAsIHdpcGVfMS53aXBlKShidWYpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy5yYW5kb21TdHJpbmcgPSByYW5kb21TdHJpbmc7XG4vKipcbiAqIFJldHVybnMgdW5pZm9ybSByYW5kb20gc3RyaW5nIGNvbnRhaW5pbmcgYXQgbGVhc3QgdGhlIGdpdmVuXG4gKiBudW1iZXIgb2YgYml0cyBvZiBlbnRyb3B5LlxuICpcbiAqIEZvciBleGFtcGxlLCByYW5kb21TdHJpbmdGb3JFbnRyb3B5KDEyOCkgd2lsbCByZXR1cm4gYSAyMi1jaGFyYWN0ZXJcbiAqIGFscGhhbnVtZXJpYyBzdHJpbmcsIHdoaWxlIHJhbmRvbVN0cmluZ0ZvckVudHJvcHkoMTI4LCBcIjAxMjM0NTY3ODlcIilcbiAqIHdpbGwgcmV0dXJuIGEgMzktY2hhcmFjdGVyIG51bWVyaWMgc3RyaW5nLCBib3RoIHdpbGwgY29udGFpbiBhdFxuICogbGVhc3QgMTI4IGJpdHMgb2YgZW50cm9weS5cbiAqXG4gKiBEZWZhdWx0IGNoYXJzZXQgZ2VuZXJhdGVzIGNhc2Utc2Vuc2l0aXZlIGFscGhhbnVtZXJpY1xuICogc3RyaW5ncyAoMC05LCBBLVosIGEteikuXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbVN0cmluZ0ZvckVudHJvcHkoYml0cywgY2hhcnNldCA9IEFMUEhBTlVNRVJJQywgcHJuZyA9IGV4cG9ydHMuZGVmYXVsdFJhbmRvbVNvdXJjZSkge1xuICAgIGNvbnN0IGxlbmd0aCA9IE1hdGguY2VpbChiaXRzIC8gKE1hdGgubG9nKGNoYXJzZXQubGVuZ3RoKSAvIE1hdGguTE4yKSk7XG4gICAgcmV0dXJuIHJhbmRvbVN0cmluZyhsZW5ndGgsIGNoYXJzZXQsIHBybmcpO1xufVxuZXhwb3J0cy5yYW5kb21TdHJpbmdGb3JFbnRyb3B5ID0gcmFuZG9tU3RyaW5nRm9yRW50cm9weTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhbmRvbS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoQykgMjAxNiBEbWl0cnkgQ2hlc3RueWtoXG4vLyBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQnJvd3NlclJhbmRvbVNvdXJjZSA9IHZvaWQgMDtcbmNvbnN0IFFVT1RBID0gNjU1MzY7XG5jbGFzcyBCcm93c2VyUmFuZG9tU291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5pc0F2YWlsYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzSW5zdGFudGlhdGVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGJyb3dzZXJDcnlwdG8gPSB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgID8gKHNlbGYuY3J5cHRvIHx8IHNlbGYubXNDcnlwdG8pIC8vIElFMTEgaGFzIG1zQ3J5cHRvXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGlmIChicm93c2VyQ3J5cHRvICYmIGJyb3dzZXJDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NyeXB0byA9IGJyb3dzZXJDcnlwdG87XG4gICAgICAgICAgICB0aGlzLmlzQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaXNJbnN0YW50aWF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJhbmRvbUJ5dGVzKGxlbmd0aCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNBdmFpbGFibGUgfHwgIXRoaXMuX2NyeXB0bykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlciByYW5kb20gYnl0ZSBnZW5lcmF0b3IgaXMgbm90IGF2YWlsYWJsZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXQubGVuZ3RoOyBpICs9IFFVT1RBKSB7XG4gICAgICAgICAgICB0aGlzLl9jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG91dC5zdWJhcnJheShpLCBpICsgTWF0aC5taW4ob3V0Lmxlbmd0aCAtIGksIFFVT1RBKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxufVxuZXhwb3J0cy5Ccm93c2VyUmFuZG9tU291cmNlID0gQnJvd3NlclJhbmRvbVNvdXJjZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyb3dzZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKEMpIDIwMTYgRG1pdHJ5IENoZXN0bnlraFxuLy8gTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5vZGVSYW5kb21Tb3VyY2UgPSB2b2lkIDA7XG5jb25zdCB3aXBlXzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi93aXBlXCIpO1xuY2xhc3MgTm9kZVJhbmRvbVNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaXNBdmFpbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0luc3RhbnRpYXRlZCA9IGZhbHNlO1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVDcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuICAgICAgICAgICAgaWYgKG5vZGVDcnlwdG8gJiYgbm9kZUNyeXB0by5yYW5kb21CeXRlcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NyeXB0byA9IG5vZGVDcnlwdG87XG4gICAgICAgICAgICAgICAgdGhpcy5pc0F2YWlsYWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0luc3RhbnRpYXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmFuZG9tQnl0ZXMobGVuZ3RoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0F2YWlsYWJsZSB8fCAhdGhpcy5fY3J5cHRvKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb2RlLmpzIHJhbmRvbSBieXRlIGdlbmVyYXRvciBpcyBub3QgYXZhaWxhYmxlLlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBHZXQgcmFuZG9tIGJ5dGVzIChyZXN1bHQgaXMgQnVmZmVyKS5cbiAgICAgICAgbGV0IGJ1ZmZlciA9IHRoaXMuX2NyeXB0by5yYW5kb21CeXRlcyhsZW5ndGgpO1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZ290IHRoZSBsZW5ndGggdGhhdCB3ZSByZXF1ZXN0ZWQuXG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoICE9PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vZGVSYW5kb21Tb3VyY2U6IGdvdCBmZXdlciBieXRlcyB0aGFuIHJlcXVlc3RlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbGxvY2F0ZSBvdXRwdXQgYXJyYXkuXG4gICAgICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgICAgIC8vIENvcHkgYnl0ZXMgZnJvbSBidWZmZXIgdG8gb3V0cHV0LlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gYnVmZmVyW2ldO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsZWFudXAuXG4gICAgICAgICgwLCB3aXBlXzEud2lwZSkoYnVmZmVyKTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG59XG5leHBvcnRzLk5vZGVSYW5kb21Tb3VyY2UgPSBOb2RlUmFuZG9tU291cmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoQykgMjAxNiBEbWl0cnkgQ2hlc3RueWtoXG4vLyBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3lzdGVtUmFuZG9tU291cmNlID0gdm9pZCAwO1xuY29uc3QgYnJvd3Nlcl8xID0gcmVxdWlyZShcIi4vYnJvd3NlclwiKTtcbmNvbnN0IG5vZGVfMSA9IHJlcXVpcmUoXCIuL25vZGVcIik7XG5jbGFzcyBTeXN0ZW1SYW5kb21Tb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmlzQXZhaWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiXCI7XG4gICAgICAgIC8vIFRyeSBicm93c2VyLlxuICAgICAgICB0aGlzLl9zb3VyY2UgPSBuZXcgYnJvd3Nlcl8xLkJyb3dzZXJSYW5kb21Tb3VyY2UoKTtcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZS5pc0F2YWlsYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5pc0F2YWlsYWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBcIkJyb3dzZXJcIjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBubyBicm93c2VyIHNvdXJjZSwgdHJ5IE5vZGUuXG4gICAgICAgIHRoaXMuX3NvdXJjZSA9IG5ldyBub2RlXzEuTm9kZVJhbmRvbVNvdXJjZSgpO1xuICAgICAgICBpZiAodGhpcy5fc291cmNlLmlzQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmlzQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiTm9kZVwiO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vIHNvdXJjZXMsIHdlJ3JlIG91dCBvZiBvcHRpb25zLlxuICAgIH1cbiAgICByYW5kb21CeXRlcyhsZW5ndGgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTeXN0ZW0gcmFuZG9tIGJ5dGUgZ2VuZXJhdG9yIGlzIG5vdCBhdmFpbGFibGUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zb3VyY2UucmFuZG9tQnl0ZXMobGVuZ3RoKTtcbiAgICB9XG59XG5leHBvcnRzLlN5c3RlbVJhbmRvbVNvdXJjZSA9IFN5c3RlbVJhbmRvbVNvdXJjZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN5c3RlbS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoQykgMjAxNiBEbWl0cnkgQ2hlc3RueWtoXG4vLyBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBiaW5hcnlfMSA9IHJlcXVpcmUoXCJAc3RhYmxlbGliL2JpbmFyeVwiKTtcbnZhciB3aXBlXzEgPSByZXF1aXJlKFwiQHN0YWJsZWxpYi93aXBlXCIpO1xuZXhwb3J0cy5ESUdFU1RfTEVOR1RIID0gMzI7XG5leHBvcnRzLkJMT0NLX1NJWkUgPSA2NDtcbi8qKlxuICogU0hBMi0yNTYgY3J5cHRvZ3JhcGhpYyBoYXNoIGFsZ29yaXRobS5cbiAqL1xudmFyIFNIQTI1NiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTSEEyNTYoKSB7XG4gICAgICAgIC8qKiBMZW5ndGggb2YgaGFzaCBvdXRwdXQgKi9cbiAgICAgICAgdGhpcy5kaWdlc3RMZW5ndGggPSBleHBvcnRzLkRJR0VTVF9MRU5HVEg7XG4gICAgICAgIC8qKiBCbG9jayBzaXplICovXG4gICAgICAgIHRoaXMuYmxvY2tTaXplID0gZXhwb3J0cy5CTE9DS19TSVpFO1xuICAgICAgICAvLyBOb3RlOiBJbnQzMkFycmF5IGlzIHVzZWQgaW5zdGVhZCBvZiBVaW50MzJBcnJheSBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAgICAgICAgdGhpcy5fc3RhdGUgPSBuZXcgSW50MzJBcnJheSg4KTsgLy8gaGFzaCBzdGF0ZVxuICAgICAgICB0aGlzLl90ZW1wID0gbmV3IEludDMyQXJyYXkoNjQpOyAvLyB0ZW1wb3Jhcnkgc3RhdGVcbiAgICAgICAgdGhpcy5fYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMTI4KTsgLy8gYnVmZmVyIGZvciBkYXRhIHRvIGhhc2hcbiAgICAgICAgdGhpcy5fYnVmZmVyTGVuZ3RoID0gMDsgLy8gbnVtYmVyIG9mIGJ5dGVzIGluIGJ1ZmZlclxuICAgICAgICB0aGlzLl9ieXRlc0hhc2hlZCA9IDA7IC8vIG51bWJlciBvZiB0b3RhbCBieXRlcyBoYXNoZWRcbiAgICAgICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTsgLy8gaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGhhc2ggd2FzIGZpbmFsaXplZFxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuICAgIFNIQTI1Ni5wcm90b3R5cGUuX2luaXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc3RhdGVbMF0gPSAweDZhMDllNjY3O1xuICAgICAgICB0aGlzLl9zdGF0ZVsxXSA9IDB4YmI2N2FlODU7XG4gICAgICAgIHRoaXMuX3N0YXRlWzJdID0gMHgzYzZlZjM3MjtcbiAgICAgICAgdGhpcy5fc3RhdGVbM10gPSAweGE1NGZmNTNhO1xuICAgICAgICB0aGlzLl9zdGF0ZVs0XSA9IDB4NTEwZTUyN2Y7XG4gICAgICAgIHRoaXMuX3N0YXRlWzVdID0gMHg5YjA1Njg4YztcbiAgICAgICAgdGhpcy5fc3RhdGVbNl0gPSAweDFmODNkOWFiO1xuICAgICAgICB0aGlzLl9zdGF0ZVs3XSA9IDB4NWJlMGNkMTk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXNldHMgaGFzaCBzdGF0ZSBtYWtpbmcgaXQgcG9zc2libGVcbiAgICAgKiB0byByZS11c2UgdGhpcyBpbnN0YW5jZSB0byBoYXNoIG90aGVyIGRhdGEuXG4gICAgICovXG4gICAgU0hBMjU2LnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5faW5pdFN0YXRlKCk7XG4gICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX2J5dGVzSGFzaGVkID0gMDtcbiAgICAgICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbGVhbnMgaW50ZXJuYWwgYnVmZmVycyBhbmQgcmVzZXRzIGhhc2ggc3RhdGUuXG4gICAgICovXG4gICAgU0hBMjU2LnByb3RvdHlwZS5jbGVhbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2lwZV8xLndpcGUodGhpcy5fYnVmZmVyKTtcbiAgICAgICAgd2lwZV8xLndpcGUodGhpcy5fdGVtcCk7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgaGFzaCBzdGF0ZSB3aXRoIHRoZSBnaXZlbiBkYXRhLlxuICAgICAqXG4gICAgICogVGhyb3dzIGVycm9yIHdoZW4gdHJ5aW5nIHRvIHVwZGF0ZSBhbHJlYWR5IGZpbmFsaXplZCBoYXNoOlxuICAgICAqIGluc3RhbmNlIG11c3QgYmUgcmVzZXQgdG8gdXBkYXRlIGl0IGFnYWluLlxuICAgICAqL1xuICAgIFNIQTI1Ni5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGRhdGFMZW5ndGgpIHtcbiAgICAgICAgaWYgKGRhdGFMZW5ndGggPT09IHZvaWQgMCkgeyBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7IH1cbiAgICAgICAgaWYgKHRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTSEEyNTY6IGNhbid0IHVwZGF0ZSBiZWNhdXNlIGhhc2ggd2FzIGZpbmlzaGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF0YVBvcyA9IDA7XG4gICAgICAgIHRoaXMuX2J5dGVzSGFzaGVkICs9IGRhdGFMZW5ndGg7XG4gICAgICAgIGlmICh0aGlzLl9idWZmZXJMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5fYnVmZmVyTGVuZ3RoIDwgdGhpcy5ibG9ja1NpemUgJiYgZGF0YUxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9idWZmZXJbdGhpcy5fYnVmZmVyTGVuZ3RoKytdID0gZGF0YVtkYXRhUG9zKytdO1xuICAgICAgICAgICAgICAgIGRhdGFMZW5ndGgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9idWZmZXJMZW5ndGggPT09IHRoaXMuYmxvY2tTaXplKSB7XG4gICAgICAgICAgICAgICAgaGFzaEJsb2Nrcyh0aGlzLl90ZW1wLCB0aGlzLl9zdGF0ZSwgdGhpcy5fYnVmZmVyLCAwLCB0aGlzLmJsb2NrU2l6ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYnVmZmVyTGVuZ3RoID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YUxlbmd0aCA+PSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgICAgICAgICAgZGF0YVBvcyA9IGhhc2hCbG9ja3ModGhpcy5fdGVtcCwgdGhpcy5fc3RhdGUsIGRhdGEsIGRhdGFQb3MsIGRhdGFMZW5ndGgpO1xuICAgICAgICAgICAgZGF0YUxlbmd0aCAlPSB0aGlzLmJsb2NrU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoZGF0YUxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9idWZmZXJMZW5ndGgrK10gPSBkYXRhW2RhdGFQb3MrK107XG4gICAgICAgICAgICBkYXRhTGVuZ3RoLS07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGaW5hbGl6ZXMgaGFzaCBzdGF0ZSBhbmQgcHV0cyBoYXNoIGludG8gb3V0LlxuICAgICAqIElmIGhhc2ggd2FzIGFscmVhZHkgZmluYWxpemVkLCBwdXRzIHRoZSBzYW1lIHZhbHVlLlxuICAgICAqL1xuICAgIFNIQTI1Ni5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24gKG91dCkge1xuICAgICAgICBpZiAoIXRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgICB2YXIgYnl0ZXNIYXNoZWQgPSB0aGlzLl9ieXRlc0hhc2hlZDtcbiAgICAgICAgICAgIHZhciBsZWZ0ID0gdGhpcy5fYnVmZmVyTGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGJpdExlbkhpID0gKGJ5dGVzSGFzaGVkIC8gMHgyMDAwMDAwMCkgfCAwO1xuICAgICAgICAgICAgdmFyIGJpdExlbkxvID0gYnl0ZXNIYXNoZWQgPDwgMztcbiAgICAgICAgICAgIHZhciBwYWRMZW5ndGggPSAoYnl0ZXNIYXNoZWQgJSA2NCA8IDU2KSA/IDY0IDogMTI4O1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyW2xlZnRdID0gMHg4MDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBsZWZ0ICsgMTsgaSA8IHBhZExlbmd0aCAtIDg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlcltpXSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiaW5hcnlfMS53cml0ZVVpbnQzMkJFKGJpdExlbkhpLCB0aGlzLl9idWZmZXIsIHBhZExlbmd0aCAtIDgpO1xuICAgICAgICAgICAgYmluYXJ5XzEud3JpdGVVaW50MzJCRShiaXRMZW5MbywgdGhpcy5fYnVmZmVyLCBwYWRMZW5ndGggLSA0KTtcbiAgICAgICAgICAgIGhhc2hCbG9ja3ModGhpcy5fdGVtcCwgdGhpcy5fc3RhdGUsIHRoaXMuX2J1ZmZlciwgMCwgcGFkTGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZGlnZXN0TGVuZ3RoIC8gNDsgaSsrKSB7XG4gICAgICAgICAgICBiaW5hcnlfMS53cml0ZVVpbnQzMkJFKHRoaXMuX3N0YXRlW2ldLCBvdXQsIGkgKiA0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGZpbmFsIGhhc2ggZGlnZXN0LlxuICAgICAqL1xuICAgIFNIQTI1Ni5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kaWdlc3RMZW5ndGgpO1xuICAgICAgICB0aGlzLmZpbmlzaChvdXQpO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZnVsIGZvciBITUFDL1BCS0RGMiBvcHRpbWl6YXRpb24uXG4gICAgICogUmV0dXJucyBoYXNoIHN0YXRlIHRvIGJlIHVzZWQgd2l0aCByZXN0b3JlU3RhdGUoKS5cbiAgICAgKiBPbmx5IGNoYWluIHZhbHVlIGlzIHNhdmVkLCBub3QgYnVmZmVycyBvciBvdGhlclxuICAgICAqIHN0YXRlIHZhcmlhYmxlcy5cbiAgICAgKi9cbiAgICBTSEEyNTYucHJvdG90eXBlLnNhdmVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTSEEyNTY6IGNhbm5vdCBzYXZlIGZpbmlzaGVkIHN0YXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0ZTogbmV3IEludDMyQXJyYXkodGhpcy5fc3RhdGUpLFxuICAgICAgICAgICAgYnVmZmVyOiB0aGlzLl9idWZmZXJMZW5ndGggPiAwID8gbmV3IFVpbnQ4QXJyYXkodGhpcy5fYnVmZmVyKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJ1ZmZlckxlbmd0aDogdGhpcy5fYnVmZmVyTGVuZ3RoLFxuICAgICAgICAgICAgYnl0ZXNIYXNoZWQ6IHRoaXMuX2J5dGVzSGFzaGVkXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VmdWwgZm9yIEhNQUMvUEJLREYyIG9wdGltaXphdGlvbi5cbiAgICAgKiBSZXN0b3JlcyBzdGF0ZSBzYXZlZCBieSBzYXZlU3RhdGUoKSBhbmQgc2V0cyBieXRlc0hhc2hlZFxuICAgICAqIHRvIHRoZSBnaXZlbiB2YWx1ZS5cbiAgICAgKi9cbiAgICBTSEEyNTYucHJvdG90eXBlLnJlc3RvcmVTdGF0ZSA9IGZ1bmN0aW9uIChzYXZlZFN0YXRlKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlLnNldChzYXZlZFN0YXRlLnN0YXRlKTtcbiAgICAgICAgdGhpcy5fYnVmZmVyTGVuZ3RoID0gc2F2ZWRTdGF0ZS5idWZmZXJMZW5ndGg7XG4gICAgICAgIGlmIChzYXZlZFN0YXRlLmJ1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyLnNldChzYXZlZFN0YXRlLmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYnl0ZXNIYXNoZWQgPSBzYXZlZFN0YXRlLmJ5dGVzSGFzaGVkO1xuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFucyBzdGF0ZSByZXR1cm5lZCBieSBzYXZlU3RhdGUoKS5cbiAgICAgKi9cbiAgICBTSEEyNTYucHJvdG90eXBlLmNsZWFuU2F2ZWRTdGF0ZSA9IGZ1bmN0aW9uIChzYXZlZFN0YXRlKSB7XG4gICAgICAgIHdpcGVfMS53aXBlKHNhdmVkU3RhdGUuc3RhdGUpO1xuICAgICAgICBpZiAoc2F2ZWRTdGF0ZS5idWZmZXIpIHtcbiAgICAgICAgICAgIHdpcGVfMS53aXBlKHNhdmVkU3RhdGUuYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICBzYXZlZFN0YXRlLmJ1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgIHNhdmVkU3RhdGUuYnl0ZXNIYXNoZWQgPSAwO1xuICAgIH07XG4gICAgcmV0dXJuIFNIQTI1Njtcbn0oKSk7XG5leHBvcnRzLlNIQTI1NiA9IFNIQTI1Njtcbi8vIENvbnN0YW50c1xudmFyIEsgPSBuZXcgSW50MzJBcnJheShbXG4gICAgMHg0MjhhMmY5OCwgMHg3MTM3NDQ5MSwgMHhiNWMwZmJjZiwgMHhlOWI1ZGJhNSwgMHgzOTU2YzI1YixcbiAgICAweDU5ZjExMWYxLCAweDkyM2Y4MmE0LCAweGFiMWM1ZWQ1LCAweGQ4MDdhYTk4LCAweDEyODM1YjAxLFxuICAgIDB4MjQzMTg1YmUsIDB4NTUwYzdkYzMsIDB4NzJiZTVkNzQsIDB4ODBkZWIxZmUsIDB4OWJkYzA2YTcsXG4gICAgMHhjMTliZjE3NCwgMHhlNDliNjljMSwgMHhlZmJlNDc4NiwgMHgwZmMxOWRjNiwgMHgyNDBjYTFjYyxcbiAgICAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLCAweDk4M2U1MTUyLFxuICAgIDB4YTgzMWM2NmQsIDB4YjAwMzI3YzgsIDB4YmY1OTdmYzcsIDB4YzZlMDBiZjMsIDB4ZDVhNzkxNDcsXG4gICAgMHgwNmNhNjM1MSwgMHgxNDI5Mjk2NywgMHgyN2I3MGE4NSwgMHgyZTFiMjEzOCwgMHg0ZDJjNmRmYyxcbiAgICAweDUzMzgwZDEzLCAweDY1MGE3MzU0LCAweDc2NmEwYWJiLCAweDgxYzJjOTJlLCAweDkyNzIyYzg1LFxuICAgIDB4YTJiZmU4YTEsIDB4YTgxYTY2NGIsIDB4YzI0YjhiNzAsIDB4Yzc2YzUxYTMsIDB4ZDE5MmU4MTksXG4gICAgMHhkNjk5MDYyNCwgMHhmNDBlMzU4NSwgMHgxMDZhYTA3MCwgMHgxOWE0YzExNiwgMHgxZTM3NmMwOCxcbiAgICAweDI3NDg3NzRjLCAweDM0YjBiY2I1LCAweDM5MWMwY2IzLCAweDRlZDhhYTRhLCAweDViOWNjYTRmLFxuICAgIDB4NjgyZTZmZjMsIDB4NzQ4ZjgyZWUsIDB4NzhhNTYzNmYsIDB4ODRjODc4MTQsIDB4OGNjNzAyMDgsXG4gICAgMHg5MGJlZmZmYSwgMHhhNDUwNmNlYiwgMHhiZWY5YTNmNywgMHhjNjcxNzhmMlxuXSk7XG5mdW5jdGlvbiBoYXNoQmxvY2tzKHcsIHYsIHAsIHBvcywgbGVuKSB7XG4gICAgd2hpbGUgKGxlbiA+PSA2NCkge1xuICAgICAgICB2YXIgYSA9IHZbMF07XG4gICAgICAgIHZhciBiID0gdlsxXTtcbiAgICAgICAgdmFyIGMgPSB2WzJdO1xuICAgICAgICB2YXIgZCA9IHZbM107XG4gICAgICAgIHZhciBlID0gdls0XTtcbiAgICAgICAgdmFyIGYgPSB2WzVdO1xuICAgICAgICB2YXIgZyA9IHZbNl07XG4gICAgICAgIHZhciBoID0gdls3XTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaiA9IHBvcyArIGkgKiA0O1xuICAgICAgICAgICAgd1tpXSA9IGJpbmFyeV8xLnJlYWRVaW50MzJCRShwLCBqKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMTY7IGkgPCA2NDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdSA9IHdbaSAtIDJdO1xuICAgICAgICAgICAgdmFyIHQxID0gKHUgPj4+IDE3IHwgdSA8PCAoMzIgLSAxNykpIF4gKHUgPj4+IDE5IHwgdSA8PCAoMzIgLSAxOSkpIF4gKHUgPj4+IDEwKTtcbiAgICAgICAgICAgIHUgPSB3W2kgLSAxNV07XG4gICAgICAgICAgICB2YXIgdDIgPSAodSA+Pj4gNyB8IHUgPDwgKDMyIC0gNykpIF4gKHUgPj4+IDE4IHwgdSA8PCAoMzIgLSAxOCkpIF4gKHUgPj4+IDMpO1xuICAgICAgICAgICAgd1tpXSA9ICh0MSArIHdbaSAtIDddIHwgMCkgKyAodDIgKyB3W2kgLSAxNl0gfCAwKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY0OyBpKyspIHtcbiAgICAgICAgICAgIHZhciB0MSA9ICgoKCgoZSA+Pj4gNiB8IGUgPDwgKDMyIC0gNikpIF4gKGUgPj4+IDExIHwgZSA8PCAoMzIgLSAxMSkpIF5cbiAgICAgICAgICAgICAgICAoZSA+Pj4gMjUgfCBlIDw8ICgzMiAtIDI1KSkpICsgKChlICYgZikgXiAofmUgJiBnKSkpIHwgMCkgK1xuICAgICAgICAgICAgICAgICgoaCArICgoS1tpXSArIHdbaV0pIHwgMCkpIHwgMCkpIHwgMDtcbiAgICAgICAgICAgIHZhciB0MiA9ICgoKGEgPj4+IDIgfCBhIDw8ICgzMiAtIDIpKSBeIChhID4+PiAxMyB8IGEgPDwgKDMyIC0gMTMpKSBeXG4gICAgICAgICAgICAgICAgKGEgPj4+IDIyIHwgYSA8PCAoMzIgLSAyMikpKSArICgoYSAmIGIpIF4gKGEgJiBjKSBeIChiICYgYykpKSB8IDA7XG4gICAgICAgICAgICBoID0gZztcbiAgICAgICAgICAgIGcgPSBmO1xuICAgICAgICAgICAgZiA9IGU7XG4gICAgICAgICAgICBlID0gKGQgKyB0MSkgfCAwO1xuICAgICAgICAgICAgZCA9IGM7XG4gICAgICAgICAgICBjID0gYjtcbiAgICAgICAgICAgIGIgPSBhO1xuICAgICAgICAgICAgYSA9ICh0MSArIHQyKSB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgdlswXSArPSBhO1xuICAgICAgICB2WzFdICs9IGI7XG4gICAgICAgIHZbMl0gKz0gYztcbiAgICAgICAgdlszXSArPSBkO1xuICAgICAgICB2WzRdICs9IGU7XG4gICAgICAgIHZbNV0gKz0gZjtcbiAgICAgICAgdls2XSArPSBnO1xuICAgICAgICB2WzddICs9IGg7XG4gICAgICAgIHBvcyArPSA2NDtcbiAgICAgICAgbGVuIC09IDY0O1xuICAgIH1cbiAgICByZXR1cm4gcG9zO1xufVxuZnVuY3Rpb24gaGFzaChkYXRhKSB7XG4gICAgdmFyIGggPSBuZXcgU0hBMjU2KCk7XG4gICAgaC51cGRhdGUoZGF0YSk7XG4gICAgdmFyIGRpZ2VzdCA9IGguZGlnZXN0KCk7XG4gICAgaC5jbGVhbigpO1xuICAgIHJldHVybiBkaWdlc3Q7XG59XG5leHBvcnRzLmhhc2ggPSBoYXNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhMjU2LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGJpbmFyeV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvYmluYXJ5XCIpO1xudmFyIHdpcGVfMSA9IHJlcXVpcmUoXCJAc3RhYmxlbGliL3dpcGVcIik7XG5leHBvcnRzLkRJR0VTVF9MRU5HVEggPSA2NDtcbmV4cG9ydHMuQkxPQ0tfU0laRSA9IDEyODtcbi8qKlxuICogU0hBLTItNTEyIGNyeXB0b2dyYXBoaWMgaGFzaCBhbGdvcml0aG0uXG4gKi9cbnZhciBTSEE1MTIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU0hBNTEyKCkge1xuICAgICAgICAvKiogTGVuZ3RoIG9mIGhhc2ggb3V0cHV0ICovXG4gICAgICAgIHRoaXMuZGlnZXN0TGVuZ3RoID0gZXhwb3J0cy5ESUdFU1RfTEVOR1RIO1xuICAgICAgICAvKiogQmxvY2sgc2l6ZSAqL1xuICAgICAgICB0aGlzLmJsb2NrU2l6ZSA9IGV4cG9ydHMuQkxPQ0tfU0laRTtcbiAgICAgICAgLy8gTm90ZTogSW50MzJBcnJheSBpcyB1c2VkIGluc3RlYWQgb2YgVWludDMyQXJyYXkgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gICAgICAgIHRoaXMuX3N0YXRlSGkgPSBuZXcgSW50MzJBcnJheSg4KTsgLy8gaGFzaCBzdGF0ZSwgaGlnaCBieXRlc1xuICAgICAgICB0aGlzLl9zdGF0ZUxvID0gbmV3IEludDMyQXJyYXkoOCk7IC8vIGhhc2ggc3RhdGUsIGxvdyBieXRlc1xuICAgICAgICB0aGlzLl90ZW1wSGkgPSBuZXcgSW50MzJBcnJheSgxNik7IC8vIHRlbXBvcmFyeSBzdGF0ZSwgaGlnaCBieXRlc1xuICAgICAgICB0aGlzLl90ZW1wTG8gPSBuZXcgSW50MzJBcnJheSgxNik7IC8vIHRlbXBvcmFyeSBzdGF0ZSwgbG93IGJ5dGVzXG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBVaW50OEFycmF5KDI1Nik7IC8vIGJ1ZmZlciBmb3IgZGF0YSB0byBoYXNoXG4gICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IDA7IC8vIG51bWJlciBvZiBieXRlcyBpbiBidWZmZXJcbiAgICAgICAgdGhpcy5fYnl0ZXNIYXNoZWQgPSAwOyAvLyBudW1iZXIgb2YgdG90YWwgYnl0ZXMgaGFzaGVkXG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7IC8vIGluZGljYXRlcyB3aGV0aGVyIHRoZSBoYXNoIHdhcyBmaW5hbGl6ZWRcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cbiAgICBTSEE1MTIucHJvdG90eXBlLl9pbml0U3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlSGlbMF0gPSAweDZhMDllNjY3O1xuICAgICAgICB0aGlzLl9zdGF0ZUhpWzFdID0gMHhiYjY3YWU4NTtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVsyXSA9IDB4M2M2ZWYzNzI7XG4gICAgICAgIHRoaXMuX3N0YXRlSGlbM10gPSAweGE1NGZmNTNhO1xuICAgICAgICB0aGlzLl9zdGF0ZUhpWzRdID0gMHg1MTBlNTI3ZjtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVs1XSA9IDB4OWIwNTY4OGM7XG4gICAgICAgIHRoaXMuX3N0YXRlSGlbNl0gPSAweDFmODNkOWFiO1xuICAgICAgICB0aGlzLl9zdGF0ZUhpWzddID0gMHg1YmUwY2QxOTtcbiAgICAgICAgdGhpcy5fc3RhdGVMb1swXSA9IDB4ZjNiY2M5MDg7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bMV0gPSAweDg0Y2FhNzNiO1xuICAgICAgICB0aGlzLl9zdGF0ZUxvWzJdID0gMHhmZTk0ZjgyYjtcbiAgICAgICAgdGhpcy5fc3RhdGVMb1szXSA9IDB4NWYxZDM2ZjE7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bNF0gPSAweGFkZTY4MmQxO1xuICAgICAgICB0aGlzLl9zdGF0ZUxvWzVdID0gMHgyYjNlNmMxZjtcbiAgICAgICAgdGhpcy5fc3RhdGVMb1s2XSA9IDB4ZmI0MWJkNmI7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bN10gPSAweDEzN2UyMTc5O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVzZXRzIGhhc2ggc3RhdGUgbWFraW5nIGl0IHBvc3NpYmxlXG4gICAgICogdG8gcmUtdXNlIHRoaXMgaW5zdGFuY2UgdG8gaGFzaCBvdGhlciBkYXRhLlxuICAgICAqL1xuICAgIFNIQTUxMi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2luaXRTdGF0ZSgpO1xuICAgICAgICB0aGlzLl9idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9ieXRlc0hhc2hlZCA9IDA7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xlYW5zIGludGVybmFsIGJ1ZmZlcnMgYW5kIHJlc2V0cyBoYXNoIHN0YXRlLlxuICAgICAqL1xuICAgIFNIQTUxMi5wcm90b3R5cGUuY2xlYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX2J1ZmZlcik7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX3RlbXBIaSk7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX3RlbXBMbyk7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgaGFzaCBzdGF0ZSB3aXRoIHRoZSBnaXZlbiBkYXRhLlxuICAgICAqXG4gICAgICogVGhyb3dzIGVycm9yIHdoZW4gdHJ5aW5nIHRvIHVwZGF0ZSBhbHJlYWR5IGZpbmFsaXplZCBoYXNoOlxuICAgICAqIGluc3RhbmNlIG11c3QgYmUgcmVzZXQgdG8gdXBkYXRlIGl0IGFnYWluLlxuICAgICAqL1xuICAgIFNIQTUxMi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGRhdGFMZW5ndGgpIHtcbiAgICAgICAgaWYgKGRhdGFMZW5ndGggPT09IHZvaWQgMCkgeyBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7IH1cbiAgICAgICAgaWYgKHRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTSEE1MTI6IGNhbid0IHVwZGF0ZSBiZWNhdXNlIGhhc2ggd2FzIGZpbmlzaGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF0YVBvcyA9IDA7XG4gICAgICAgIHRoaXMuX2J5dGVzSGFzaGVkICs9IGRhdGFMZW5ndGg7XG4gICAgICAgIGlmICh0aGlzLl9idWZmZXJMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5fYnVmZmVyTGVuZ3RoIDwgZXhwb3J0cy5CTE9DS19TSVpFICYmIGRhdGFMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYnVmZmVyW3RoaXMuX2J1ZmZlckxlbmd0aCsrXSA9IGRhdGFbZGF0YVBvcysrXTtcbiAgICAgICAgICAgICAgICBkYXRhTGVuZ3RoLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fYnVmZmVyTGVuZ3RoID09PSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgICAgICAgICAgICAgIGhhc2hCbG9ja3ModGhpcy5fdGVtcEhpLCB0aGlzLl90ZW1wTG8sIHRoaXMuX3N0YXRlSGksIHRoaXMuX3N0YXRlTG8sIHRoaXMuX2J1ZmZlciwgMCwgdGhpcy5ibG9ja1NpemUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGFMZW5ndGggPj0gdGhpcy5ibG9ja1NpemUpIHtcbiAgICAgICAgICAgIGRhdGFQb3MgPSBoYXNoQmxvY2tzKHRoaXMuX3RlbXBIaSwgdGhpcy5fdGVtcExvLCB0aGlzLl9zdGF0ZUhpLCB0aGlzLl9zdGF0ZUxvLCBkYXRhLCBkYXRhUG9zLCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgICAgIGRhdGFMZW5ndGggJT0gdGhpcy5ibG9ja1NpemU7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGRhdGFMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9idWZmZXJbdGhpcy5fYnVmZmVyTGVuZ3RoKytdID0gZGF0YVtkYXRhUG9zKytdO1xuICAgICAgICAgICAgZGF0YUxlbmd0aC0tO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRmluYWxpemVzIGhhc2ggc3RhdGUgYW5kIHB1dHMgaGFzaCBpbnRvIG91dC5cbiAgICAgKiBJZiBoYXNoIHdhcyBhbHJlYWR5IGZpbmFsaXplZCwgcHV0cyB0aGUgc2FtZSB2YWx1ZS5cbiAgICAgKi9cbiAgICBTSEE1MTIucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uIChvdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgICAgdmFyIGJ5dGVzSGFzaGVkID0gdGhpcy5fYnl0ZXNIYXNoZWQ7XG4gICAgICAgICAgICB2YXIgbGVmdCA9IHRoaXMuX2J1ZmZlckxlbmd0aDtcbiAgICAgICAgICAgIHZhciBiaXRMZW5IaSA9IChieXRlc0hhc2hlZCAvIDB4MjAwMDAwMDApIHwgMDtcbiAgICAgICAgICAgIHZhciBiaXRMZW5MbyA9IGJ5dGVzSGFzaGVkIDw8IDM7XG4gICAgICAgICAgICB2YXIgcGFkTGVuZ3RoID0gKGJ5dGVzSGFzaGVkICUgMTI4IDwgMTEyKSA/IDEyOCA6IDI1NjtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlcltsZWZ0XSA9IDB4ODA7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gbGVmdCArIDE7IGkgPCBwYWRMZW5ndGggLSA4OyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9idWZmZXJbaV0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmluYXJ5XzEud3JpdGVVaW50MzJCRShiaXRMZW5IaSwgdGhpcy5fYnVmZmVyLCBwYWRMZW5ndGggLSA4KTtcbiAgICAgICAgICAgIGJpbmFyeV8xLndyaXRlVWludDMyQkUoYml0TGVuTG8sIHRoaXMuX2J1ZmZlciwgcGFkTGVuZ3RoIC0gNCk7XG4gICAgICAgICAgICBoYXNoQmxvY2tzKHRoaXMuX3RlbXBIaSwgdGhpcy5fdGVtcExvLCB0aGlzLl9zdGF0ZUhpLCB0aGlzLl9zdGF0ZUxvLCB0aGlzLl9idWZmZXIsIDAsIHBhZExlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLl9maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmRpZ2VzdExlbmd0aCAvIDg7IGkrKykge1xuICAgICAgICAgICAgYmluYXJ5XzEud3JpdGVVaW50MzJCRSh0aGlzLl9zdGF0ZUhpW2ldLCBvdXQsIGkgKiA4KTtcbiAgICAgICAgICAgIGJpbmFyeV8xLndyaXRlVWludDMyQkUodGhpcy5fc3RhdGVMb1tpXSwgb3V0LCBpICogOCArIDQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZmluYWwgaGFzaCBkaWdlc3QuXG4gICAgICovXG4gICAgU0hBNTEyLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdXQgPSBuZXcgVWludDhBcnJheSh0aGlzLmRpZ2VzdExlbmd0aCk7XG4gICAgICAgIHRoaXMuZmluaXNoKG91dCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VmdWwgZm9yIEhNQUMvUEJLREYyIG9wdGltaXphdGlvbi4gUmV0dXJucyBoYXNoIHN0YXRlIHRvIGJlXG4gICAgICogdXNlZCB3aXRoIHJlc3RvcmVTdGF0ZSgpLiBPbmx5IGNoYWluIHZhbHVlIGlzIHNhdmVkLCBub3QgYnVmZmVycyBvclxuICAgICAqIG90aGVyIHN0YXRlIHZhcmlhYmxlcy5cbiAgICAgKi9cbiAgICBTSEE1MTIucHJvdG90eXBlLnNhdmVTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTSEEyNTY6IGNhbm5vdCBzYXZlIGZpbmlzaGVkIHN0YXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0ZUhpOiBuZXcgSW50MzJBcnJheSh0aGlzLl9zdGF0ZUhpKSxcbiAgICAgICAgICAgIHN0YXRlTG86IG5ldyBJbnQzMkFycmF5KHRoaXMuX3N0YXRlTG8pLFxuICAgICAgICAgICAgYnVmZmVyOiB0aGlzLl9idWZmZXJMZW5ndGggPiAwID8gbmV3IFVpbnQ4QXJyYXkodGhpcy5fYnVmZmVyKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJ1ZmZlckxlbmd0aDogdGhpcy5fYnVmZmVyTGVuZ3RoLFxuICAgICAgICAgICAgYnl0ZXNIYXNoZWQ6IHRoaXMuX2J5dGVzSGFzaGVkXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB1c2VmdWwgZm9yIEhNQUMvUEJLREYyIG9wdGltaXphdGlvbi4gUmVzdG9yZXMgc3RhdGUgc2F2ZWQgYnlcbiAgICAgKiBzYXZlU3RhdGUoKSBhbmQgc2V0cyBieXRlc0hhc2hlZCB0byB0aGUgZ2l2ZW4gdmFsdWUuXG4gICAgICovXG4gICAgU0hBNTEyLnByb3RvdHlwZS5yZXN0b3JlU3RhdGUgPSBmdW5jdGlvbiAoc2F2ZWRTdGF0ZSkge1xuICAgICAgICB0aGlzLl9zdGF0ZUhpLnNldChzYXZlZFN0YXRlLnN0YXRlSGkpO1xuICAgICAgICB0aGlzLl9zdGF0ZUxvLnNldChzYXZlZFN0YXRlLnN0YXRlTG8pO1xuICAgICAgICB0aGlzLl9idWZmZXJMZW5ndGggPSBzYXZlZFN0YXRlLmJ1ZmZlckxlbmd0aDtcbiAgICAgICAgaWYgKHNhdmVkU3RhdGUuYnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9idWZmZXIuc2V0KHNhdmVkU3RhdGUuYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ieXRlc0hhc2hlZCA9IHNhdmVkU3RhdGUuYnl0ZXNIYXNoZWQ7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xlYW5zIHN0YXRlIHJldHVybmVkIGJ5IHNhdmVTdGF0ZSgpLlxuICAgICAqL1xuICAgIFNIQTUxMi5wcm90b3R5cGUuY2xlYW5TYXZlZFN0YXRlID0gZnVuY3Rpb24gKHNhdmVkU3RhdGUpIHtcbiAgICAgICAgd2lwZV8xLndpcGUoc2F2ZWRTdGF0ZS5zdGF0ZUhpKTtcbiAgICAgICAgd2lwZV8xLndpcGUoc2F2ZWRTdGF0ZS5zdGF0ZUxvKTtcbiAgICAgICAgaWYgKHNhdmVkU3RhdGUuYnVmZmVyKSB7XG4gICAgICAgICAgICB3aXBlXzEud2lwZShzYXZlZFN0YXRlLmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgc2F2ZWRTdGF0ZS5idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICBzYXZlZFN0YXRlLmJ5dGVzSGFzaGVkID0gMDtcbiAgICB9O1xuICAgIHJldHVybiBTSEE1MTI7XG59KCkpO1xuZXhwb3J0cy5TSEE1MTIgPSBTSEE1MTI7XG4vLyBDb25zdGFudHNcbnZhciBLID0gbmV3IEludDMyQXJyYXkoW1xuICAgIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gICAgMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiwgMHhlOWI1ZGJhNSwgMHg4MTg5ZGJiYyxcbiAgICAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LFxuICAgIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gICAgMHhkODA3YWE5OCwgMHhhMzAzMDI0MiwgMHgxMjgzNWIwMSwgMHg0NTcwNmZiZSxcbiAgICAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLFxuICAgIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gICAgMHg5YmRjMDZhNywgMHgyNWM3MTIzNSwgMHhjMTliZjE3NCwgMHhjZjY5MjY5NCxcbiAgICAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLFxuICAgIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gICAgMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSwgMHg0YTc0ODRhYSwgMHg2ZWE2ZTQ4MyxcbiAgICAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LFxuICAgIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gICAgMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiwgMHhiZjU5N2ZjNywgMHhiZWVmMGVlNCxcbiAgICAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LFxuICAgIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gICAgMHgyN2I3MGE4NSwgMHg0NmQyMmZmYywgMHgyZTFiMjEzOCwgMHg1YzI2YzkyNixcbiAgICAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLFxuICAgIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gICAgMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiwgMHg5MjcyMmM4NSwgMHgxNDgyMzUzYixcbiAgICAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLFxuICAgIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gICAgMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCwgMHhkNjk5MDYyNCwgMHg1NTY1YTkxMCxcbiAgICAweGY0MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LFxuICAgIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gICAgMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSwgMHgzNGIwYmNiNSwgMHhlMTliNDhhOCxcbiAgICAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLFxuICAgIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gICAgMHg3NDhmODJlZSwgMHg1ZGVmYjJmYywgMHg3OGE1NjM2ZiwgMHg0MzE3MmY2MCxcbiAgICAweDg0Yzg3ODE0LCAweGExZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLFxuICAgIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gICAgMHhiZWY5YTNmNywgMHhiMmM2NzkxNSwgMHhjNjcxNzhmMiwgMHhlMzcyNTMyYixcbiAgICAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LFxuICAgIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gICAgMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSwgMHgwYTYzN2RjNSwgMHhhMmM4OThhNixcbiAgICAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFiNzEwYjM1LCAweDEzMWM0NzFiLFxuICAgIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gICAgMHgzYzllYmUwYSwgMHgxNWM5YmViYywgMHg0MzFkNjdjNCwgMHg5YzEwMGQ0YyxcbiAgICAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLFxuICAgIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl0pO1xuZnVuY3Rpb24gaGFzaEJsb2Nrcyh3aCwgd2wsIGhoLCBobCwgbSwgcG9zLCBsZW4pIHtcbiAgICB2YXIgYWgwID0gaGhbMF0sIGFoMSA9IGhoWzFdLCBhaDIgPSBoaFsyXSwgYWgzID0gaGhbM10sIGFoNCA9IGhoWzRdLCBhaDUgPSBoaFs1XSwgYWg2ID0gaGhbNl0sIGFoNyA9IGhoWzddLCBhbDAgPSBobFswXSwgYWwxID0gaGxbMV0sIGFsMiA9IGhsWzJdLCBhbDMgPSBobFszXSwgYWw0ID0gaGxbNF0sIGFsNSA9IGhsWzVdLCBhbDYgPSBobFs2XSwgYWw3ID0gaGxbN107XG4gICAgdmFyIGgsIGw7XG4gICAgdmFyIHRoLCB0bDtcbiAgICB2YXIgYSwgYiwgYywgZDtcbiAgICB3aGlsZSAobGVuID49IDEyOCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICAgIHZhciBqID0gOCAqIGkgKyBwb3M7XG4gICAgICAgICAgICB3aFtpXSA9IGJpbmFyeV8xLnJlYWRVaW50MzJCRShtLCBqKTtcbiAgICAgICAgICAgIHdsW2ldID0gYmluYXJ5XzEucmVhZFVpbnQzMkJFKG0sIGogKyA0KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBiaDAgPSBhaDA7XG4gICAgICAgICAgICB2YXIgYmgxID0gYWgxO1xuICAgICAgICAgICAgdmFyIGJoMiA9IGFoMjtcbiAgICAgICAgICAgIHZhciBiaDMgPSBhaDM7XG4gICAgICAgICAgICB2YXIgYmg0ID0gYWg0O1xuICAgICAgICAgICAgdmFyIGJoNSA9IGFoNTtcbiAgICAgICAgICAgIHZhciBiaDYgPSBhaDY7XG4gICAgICAgICAgICB2YXIgYmg3ID0gYWg3O1xuICAgICAgICAgICAgdmFyIGJsMCA9IGFsMDtcbiAgICAgICAgICAgIHZhciBibDEgPSBhbDE7XG4gICAgICAgICAgICB2YXIgYmwyID0gYWwyO1xuICAgICAgICAgICAgdmFyIGJsMyA9IGFsMztcbiAgICAgICAgICAgIHZhciBibDQgPSBhbDQ7XG4gICAgICAgICAgICB2YXIgYmw1ID0gYWw1O1xuICAgICAgICAgICAgdmFyIGJsNiA9IGFsNjtcbiAgICAgICAgICAgIHZhciBibDcgPSBhbDc7XG4gICAgICAgICAgICAvLyBhZGRcbiAgICAgICAgICAgIGggPSBhaDc7XG4gICAgICAgICAgICBsID0gYWw3O1xuICAgICAgICAgICAgYSA9IGwgJiAweGZmZmY7XG4gICAgICAgICAgICBiID0gbCA+Pj4gMTY7XG4gICAgICAgICAgICBjID0gaCAmIDB4ZmZmZjtcbiAgICAgICAgICAgIGQgPSBoID4+PiAxNjtcbiAgICAgICAgICAgIC8vIFNpZ21hMVxuICAgICAgICAgICAgaCA9ICgoYWg0ID4+PiAxNCkgfCAoYWw0IDw8ICgzMiAtIDE0KSkpIF4gKChhaDQgPj4+IDE4KSB8XG4gICAgICAgICAgICAgICAgKGFsNCA8PCAoMzIgLSAxOCkpKSBeICgoYWw0ID4+PiAoNDEgLSAzMikpIHwgKGFoNCA8PCAoMzIgLSAoNDEgLSAzMikpKSk7XG4gICAgICAgICAgICBsID0gKChhbDQgPj4+IDE0KSB8IChhaDQgPDwgKDMyIC0gMTQpKSkgXiAoKGFsNCA+Pj4gMTgpIHxcbiAgICAgICAgICAgICAgICAoYWg0IDw8ICgzMiAtIDE4KSkpIF4gKChhaDQgPj4+ICg0MSAtIDMyKSkgfCAoYWw0IDw8ICgzMiAtICg0MSAtIDMyKSkpKTtcbiAgICAgICAgICAgIGEgKz0gbCAmIDB4ZmZmZjtcbiAgICAgICAgICAgIGIgKz0gbCA+Pj4gMTY7XG4gICAgICAgICAgICBjICs9IGggJiAweGZmZmY7XG4gICAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgICAgLy8gQ2hcbiAgICAgICAgICAgIGggPSAoYWg0ICYgYWg1KSBeICh+YWg0ICYgYWg2KTtcbiAgICAgICAgICAgIGwgPSAoYWw0ICYgYWw1KSBeICh+YWw0ICYgYWw2KTtcbiAgICAgICAgICAgIGEgKz0gbCAmIDB4ZmZmZjtcbiAgICAgICAgICAgIGIgKz0gbCA+Pj4gMTY7XG4gICAgICAgICAgICBjICs9IGggJiAweGZmZmY7XG4gICAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgICAgLy8gS1xuICAgICAgICAgICAgaCA9IEtbaSAqIDJdO1xuICAgICAgICAgICAgbCA9IEtbaSAqIDIgKyAxXTtcbiAgICAgICAgICAgIGEgKz0gbCAmIDB4ZmZmZjtcbiAgICAgICAgICAgIGIgKz0gbCA+Pj4gMTY7XG4gICAgICAgICAgICBjICs9IGggJiAweGZmZmY7XG4gICAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgICAgLy8gd1xuICAgICAgICAgICAgaCA9IHdoW2kgJSAxNl07XG4gICAgICAgICAgICBsID0gd2xbaSAlIDE2XTtcbiAgICAgICAgICAgIGEgKz0gbCAmIDB4ZmZmZjtcbiAgICAgICAgICAgIGIgKz0gbCA+Pj4gMTY7XG4gICAgICAgICAgICBjICs9IGggJiAweGZmZmY7XG4gICAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICAgICAgdGggPSBjICYgMHhmZmZmIHwgZCA8PCAxNjtcbiAgICAgICAgICAgIHRsID0gYSAmIDB4ZmZmZiB8IGIgPDwgMTY7XG4gICAgICAgICAgICAvLyBhZGRcbiAgICAgICAgICAgIGggPSB0aDtcbiAgICAgICAgICAgIGwgPSB0bDtcbiAgICAgICAgICAgIGEgPSBsICYgMHhmZmZmO1xuICAgICAgICAgICAgYiA9IGwgPj4+IDE2O1xuICAgICAgICAgICAgYyA9IGggJiAweGZmZmY7XG4gICAgICAgICAgICBkID0gaCA+Pj4gMTY7XG4gICAgICAgICAgICAvLyBTaWdtYTBcbiAgICAgICAgICAgIGggPSAoKGFoMCA+Pj4gMjgpIHwgKGFsMCA8PCAoMzIgLSAyOCkpKSBeICgoYWwwID4+PiAoMzQgLSAzMikpIHxcbiAgICAgICAgICAgICAgICAoYWgwIDw8ICgzMiAtICgzNCAtIDMyKSkpKSBeICgoYWwwID4+PiAoMzkgLSAzMikpIHwgKGFoMCA8PCAoMzIgLSAoMzkgLSAzMikpKSk7XG4gICAgICAgICAgICBsID0gKChhbDAgPj4+IDI4KSB8IChhaDAgPDwgKDMyIC0gMjgpKSkgXiAoKGFoMCA+Pj4gKDM0IC0gMzIpKSB8XG4gICAgICAgICAgICAgICAgKGFsMCA8PCAoMzIgLSAoMzQgLSAzMikpKSkgXiAoKGFoMCA+Pj4gKDM5IC0gMzIpKSB8IChhbDAgPDwgKDMyIC0gKDM5IC0gMzIpKSkpO1xuICAgICAgICAgICAgYSArPSBsICYgMHhmZmZmO1xuICAgICAgICAgICAgYiArPSBsID4+PiAxNjtcbiAgICAgICAgICAgIGMgKz0gaCAmIDB4ZmZmZjtcbiAgICAgICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgICAgICAvLyBNYWpcbiAgICAgICAgICAgIGggPSAoYWgwICYgYWgxKSBeIChhaDAgJiBhaDIpIF4gKGFoMSAmIGFoMik7XG4gICAgICAgICAgICBsID0gKGFsMCAmIGFsMSkgXiAoYWwwICYgYWwyKSBeIChhbDEgJiBhbDIpO1xuICAgICAgICAgICAgYSArPSBsICYgMHhmZmZmO1xuICAgICAgICAgICAgYiArPSBsID4+PiAxNjtcbiAgICAgICAgICAgIGMgKz0gaCAmIDB4ZmZmZjtcbiAgICAgICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICAgICAgYyArPSBiID4+PiAxNjtcbiAgICAgICAgICAgIGQgKz0gYyA+Pj4gMTY7XG4gICAgICAgICAgICBiaDcgPSAoYyAmIDB4ZmZmZikgfCAoZCA8PCAxNik7XG4gICAgICAgICAgICBibDcgPSAoYSAmIDB4ZmZmZikgfCAoYiA8PCAxNik7XG4gICAgICAgICAgICAvLyBhZGRcbiAgICAgICAgICAgIGggPSBiaDM7XG4gICAgICAgICAgICBsID0gYmwzO1xuICAgICAgICAgICAgYSA9IGwgJiAweGZmZmY7XG4gICAgICAgICAgICBiID0gbCA+Pj4gMTY7XG4gICAgICAgICAgICBjID0gaCAmIDB4ZmZmZjtcbiAgICAgICAgICAgIGQgPSBoID4+PiAxNjtcbiAgICAgICAgICAgIGggPSB0aDtcbiAgICAgICAgICAgIGwgPSB0bDtcbiAgICAgICAgICAgIGEgKz0gbCAmIDB4ZmZmZjtcbiAgICAgICAgICAgIGIgKz0gbCA+Pj4gMTY7XG4gICAgICAgICAgICBjICs9IGggJiAweGZmZmY7XG4gICAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICAgICAgYmgzID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgICAgICAgICAgYmwzID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuICAgICAgICAgICAgYWgxID0gYmgwO1xuICAgICAgICAgICAgYWgyID0gYmgxO1xuICAgICAgICAgICAgYWgzID0gYmgyO1xuICAgICAgICAgICAgYWg0ID0gYmgzO1xuICAgICAgICAgICAgYWg1ID0gYmg0O1xuICAgICAgICAgICAgYWg2ID0gYmg1O1xuICAgICAgICAgICAgYWg3ID0gYmg2O1xuICAgICAgICAgICAgYWgwID0gYmg3O1xuICAgICAgICAgICAgYWwxID0gYmwwO1xuICAgICAgICAgICAgYWwyID0gYmwxO1xuICAgICAgICAgICAgYWwzID0gYmwyO1xuICAgICAgICAgICAgYWw0ID0gYmwzO1xuICAgICAgICAgICAgYWw1ID0gYmw0O1xuICAgICAgICAgICAgYWw2ID0gYmw1O1xuICAgICAgICAgICAgYWw3ID0gYmw2O1xuICAgICAgICAgICAgYWwwID0gYmw3O1xuICAgICAgICAgICAgaWYgKGkgJSAxNiA9PT0gMTUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkXG4gICAgICAgICAgICAgICAgICAgIGggPSB3aFtqXTtcbiAgICAgICAgICAgICAgICAgICAgbCA9IHdsW2pdO1xuICAgICAgICAgICAgICAgICAgICBhID0gbCAmIDB4ZmZmZjtcbiAgICAgICAgICAgICAgICAgICAgYiA9IGwgPj4+IDE2O1xuICAgICAgICAgICAgICAgICAgICBjID0gaCAmIDB4ZmZmZjtcbiAgICAgICAgICAgICAgICAgICAgZCA9IGggPj4+IDE2O1xuICAgICAgICAgICAgICAgICAgICBoID0gd2hbKGogKyA5KSAlIDE2XTtcbiAgICAgICAgICAgICAgICAgICAgbCA9IHdsWyhqICsgOSkgJSAxNl07XG4gICAgICAgICAgICAgICAgICAgIGEgKz0gbCAmIDB4ZmZmZjtcbiAgICAgICAgICAgICAgICAgICAgYiArPSBsID4+PiAxNjtcbiAgICAgICAgICAgICAgICAgICAgYyArPSBoICYgMHhmZmZmO1xuICAgICAgICAgICAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgICAgICAgICAgICAvLyBzaWdtYTBcbiAgICAgICAgICAgICAgICAgICAgdGggPSB3aFsoaiArIDEpICUgMTZdO1xuICAgICAgICAgICAgICAgICAgICB0bCA9IHdsWyhqICsgMSkgJSAxNl07XG4gICAgICAgICAgICAgICAgICAgIGggPSAoKHRoID4+PiAxKSB8ICh0bCA8PCAoMzIgLSAxKSkpIF4gKCh0aCA+Pj4gOCkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgKHRsIDw8ICgzMiAtIDgpKSkgXiAodGggPj4+IDcpO1xuICAgICAgICAgICAgICAgICAgICBsID0gKCh0bCA+Pj4gMSkgfCAodGggPDwgKDMyIC0gMSkpKSBeICgodGwgPj4+IDgpIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aCA8PCAoMzIgLSA4KSkpIF4gKCh0bCA+Pj4gNykgfCAodGggPDwgKDMyIC0gNykpKTtcbiAgICAgICAgICAgICAgICAgICAgYSArPSBsICYgMHhmZmZmO1xuICAgICAgICAgICAgICAgICAgICBiICs9IGwgPj4+IDE2O1xuICAgICAgICAgICAgICAgICAgICBjICs9IGggJiAweGZmZmY7XG4gICAgICAgICAgICAgICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNpZ21hMVxuICAgICAgICAgICAgICAgICAgICB0aCA9IHdoWyhqICsgMTQpICUgMTZdO1xuICAgICAgICAgICAgICAgICAgICB0bCA9IHdsWyhqICsgMTQpICUgMTZdO1xuICAgICAgICAgICAgICAgICAgICBoID0gKCh0aCA+Pj4gMTkpIHwgKHRsIDw8ICgzMiAtIDE5KSkpIF4gKCh0bCA+Pj4gKDYxIC0gMzIpKSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAodGggPDwgKDMyIC0gKDYxIC0gMzIpKSkpIF4gKHRoID4+PiA2KTtcbiAgICAgICAgICAgICAgICAgICAgbCA9ICgodGwgPj4+IDE5KSB8ICh0aCA8PCAoMzIgLSAxOSkpKSBeICgodGggPj4+ICg2MSAtIDMyKSkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgKHRsIDw8ICgzMiAtICg2MSAtIDMyKSkpKSBeICgodGwgPj4+IDYpIHwgKHRoIDw8ICgzMiAtIDYpKSk7XG4gICAgICAgICAgICAgICAgICAgIGEgKz0gbCAmIDB4ZmZmZjtcbiAgICAgICAgICAgICAgICAgICAgYiArPSBsID4+PiAxNjtcbiAgICAgICAgICAgICAgICAgICAgYyArPSBoICYgMHhmZmZmO1xuICAgICAgICAgICAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgICAgICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICAgICAgICAgICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgICAgICAgICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICAgICAgICAgICAgICB3aFtqXSA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICAgICAgICAgICAgICAgICAgd2xbal0gPSAoYSAmIDB4ZmZmZikgfCAoYiA8PCAxNik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGFkZFxuICAgICAgICBoID0gYWgwO1xuICAgICAgICBsID0gYWwwO1xuICAgICAgICBhID0gbCAmIDB4ZmZmZjtcbiAgICAgICAgYiA9IGwgPj4+IDE2O1xuICAgICAgICBjID0gaCAmIDB4ZmZmZjtcbiAgICAgICAgZCA9IGggPj4+IDE2O1xuICAgICAgICBoID0gaGhbMF07XG4gICAgICAgIGwgPSBobFswXTtcbiAgICAgICAgYSArPSBsICYgMHhmZmZmO1xuICAgICAgICBiICs9IGwgPj4+IDE2O1xuICAgICAgICBjICs9IGggJiAweGZmZmY7XG4gICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgIGQgKz0gYyA+Pj4gMTY7XG4gICAgICAgIGhoWzBdID0gYWgwID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgICAgICBobFswXSA9IGFsMCA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcbiAgICAgICAgaCA9IGFoMTtcbiAgICAgICAgbCA9IGFsMTtcbiAgICAgICAgYSA9IGwgJiAweGZmZmY7XG4gICAgICAgIGIgPSBsID4+PiAxNjtcbiAgICAgICAgYyA9IGggJiAweGZmZmY7XG4gICAgICAgIGQgPSBoID4+PiAxNjtcbiAgICAgICAgaCA9IGhoWzFdO1xuICAgICAgICBsID0gaGxbMV07XG4gICAgICAgIGEgKz0gbCAmIDB4ZmZmZjtcbiAgICAgICAgYiArPSBsID4+PiAxNjtcbiAgICAgICAgYyArPSBoICYgMHhmZmZmO1xuICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICBoaFsxXSA9IGFoMSA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICAgICAgaGxbMV0gPSBhbDEgPSAoYSAmIDB4ZmZmZikgfCAoYiA8PCAxNik7XG4gICAgICAgIGggPSBhaDI7XG4gICAgICAgIGwgPSBhbDI7XG4gICAgICAgIGEgPSBsICYgMHhmZmZmO1xuICAgICAgICBiID0gbCA+Pj4gMTY7XG4gICAgICAgIGMgPSBoICYgMHhmZmZmO1xuICAgICAgICBkID0gaCA+Pj4gMTY7XG4gICAgICAgIGggPSBoaFsyXTtcbiAgICAgICAgbCA9IGhsWzJdO1xuICAgICAgICBhICs9IGwgJiAweGZmZmY7XG4gICAgICAgIGIgKz0gbCA+Pj4gMTY7XG4gICAgICAgIGMgKz0gaCAmIDB4ZmZmZjtcbiAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgICAgYyArPSBiID4+PiAxNjtcbiAgICAgICAgZCArPSBjID4+PiAxNjtcbiAgICAgICAgaGhbMl0gPSBhaDIgPSAoYyAmIDB4ZmZmZikgfCAoZCA8PCAxNik7XG4gICAgICAgIGhsWzJdID0gYWwyID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuICAgICAgICBoID0gYWgzO1xuICAgICAgICBsID0gYWwzO1xuICAgICAgICBhID0gbCAmIDB4ZmZmZjtcbiAgICAgICAgYiA9IGwgPj4+IDE2O1xuICAgICAgICBjID0gaCAmIDB4ZmZmZjtcbiAgICAgICAgZCA9IGggPj4+IDE2O1xuICAgICAgICBoID0gaGhbM107XG4gICAgICAgIGwgPSBobFszXTtcbiAgICAgICAgYSArPSBsICYgMHhmZmZmO1xuICAgICAgICBiICs9IGwgPj4+IDE2O1xuICAgICAgICBjICs9IGggJiAweGZmZmY7XG4gICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgIGQgKz0gYyA+Pj4gMTY7XG4gICAgICAgIGhoWzNdID0gYWgzID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgICAgICBobFszXSA9IGFsMyA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcbiAgICAgICAgaCA9IGFoNDtcbiAgICAgICAgbCA9IGFsNDtcbiAgICAgICAgYSA9IGwgJiAweGZmZmY7XG4gICAgICAgIGIgPSBsID4+PiAxNjtcbiAgICAgICAgYyA9IGggJiAweGZmZmY7XG4gICAgICAgIGQgPSBoID4+PiAxNjtcbiAgICAgICAgaCA9IGhoWzRdO1xuICAgICAgICBsID0gaGxbNF07XG4gICAgICAgIGEgKz0gbCAmIDB4ZmZmZjtcbiAgICAgICAgYiArPSBsID4+PiAxNjtcbiAgICAgICAgYyArPSBoICYgMHhmZmZmO1xuICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICBoaFs0XSA9IGFoNCA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICAgICAgaGxbNF0gPSBhbDQgPSAoYSAmIDB4ZmZmZikgfCAoYiA8PCAxNik7XG4gICAgICAgIGggPSBhaDU7XG4gICAgICAgIGwgPSBhbDU7XG4gICAgICAgIGEgPSBsICYgMHhmZmZmO1xuICAgICAgICBiID0gbCA+Pj4gMTY7XG4gICAgICAgIGMgPSBoICYgMHhmZmZmO1xuICAgICAgICBkID0gaCA+Pj4gMTY7XG4gICAgICAgIGggPSBoaFs1XTtcbiAgICAgICAgbCA9IGhsWzVdO1xuICAgICAgICBhICs9IGwgJiAweGZmZmY7XG4gICAgICAgIGIgKz0gbCA+Pj4gMTY7XG4gICAgICAgIGMgKz0gaCAmIDB4ZmZmZjtcbiAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgICAgYyArPSBiID4+PiAxNjtcbiAgICAgICAgZCArPSBjID4+PiAxNjtcbiAgICAgICAgaGhbNV0gPSBhaDUgPSAoYyAmIDB4ZmZmZikgfCAoZCA8PCAxNik7XG4gICAgICAgIGhsWzVdID0gYWw1ID0gKGEgJiAweGZmZmYpIHwgKGIgPDwgMTYpO1xuICAgICAgICBoID0gYWg2O1xuICAgICAgICBsID0gYWw2O1xuICAgICAgICBhID0gbCAmIDB4ZmZmZjtcbiAgICAgICAgYiA9IGwgPj4+IDE2O1xuICAgICAgICBjID0gaCAmIDB4ZmZmZjtcbiAgICAgICAgZCA9IGggPj4+IDE2O1xuICAgICAgICBoID0gaGhbNl07XG4gICAgICAgIGwgPSBobFs2XTtcbiAgICAgICAgYSArPSBsICYgMHhmZmZmO1xuICAgICAgICBiICs9IGwgPj4+IDE2O1xuICAgICAgICBjICs9IGggJiAweGZmZmY7XG4gICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgIGQgKz0gYyA+Pj4gMTY7XG4gICAgICAgIGhoWzZdID0gYWg2ID0gKGMgJiAweGZmZmYpIHwgKGQgPDwgMTYpO1xuICAgICAgICBobFs2XSA9IGFsNiA9IChhICYgMHhmZmZmKSB8IChiIDw8IDE2KTtcbiAgICAgICAgaCA9IGFoNztcbiAgICAgICAgbCA9IGFsNztcbiAgICAgICAgYSA9IGwgJiAweGZmZmY7XG4gICAgICAgIGIgPSBsID4+PiAxNjtcbiAgICAgICAgYyA9IGggJiAweGZmZmY7XG4gICAgICAgIGQgPSBoID4+PiAxNjtcbiAgICAgICAgaCA9IGhoWzddO1xuICAgICAgICBsID0gaGxbN107XG4gICAgICAgIGEgKz0gbCAmIDB4ZmZmZjtcbiAgICAgICAgYiArPSBsID4+PiAxNjtcbiAgICAgICAgYyArPSBoICYgMHhmZmZmO1xuICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICBoaFs3XSA9IGFoNyA9IChjICYgMHhmZmZmKSB8IChkIDw8IDE2KTtcbiAgICAgICAgaGxbN10gPSBhbDcgPSAoYSAmIDB4ZmZmZikgfCAoYiA8PCAxNik7XG4gICAgICAgIHBvcyArPSAxMjg7XG4gICAgICAgIGxlbiAtPSAxMjg7XG4gICAgfVxuICAgIHJldHVybiBwb3M7XG59XG5mdW5jdGlvbiBoYXNoKGRhdGEpIHtcbiAgICB2YXIgaCA9IG5ldyBTSEE1MTIoKTtcbiAgICBoLnVwZGF0ZShkYXRhKTtcbiAgICB2YXIgZGlnZXN0ID0gaC5kaWdlc3QoKTtcbiAgICBoLmNsZWFuKCk7XG4gICAgcmV0dXJuIGRpZ2VzdDtcbn1cbmV4cG9ydHMuaGFzaCA9IGhhc2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGE1MTIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKEMpIDIwMTYgRG1pdHJ5IENoZXN0bnlraFxuLy8gTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIFNldHMgYWxsIHZhbHVlcyBpbiB0aGUgZ2l2ZW4gYXJyYXkgdG8gemVybyBhbmQgcmV0dXJucyBpdC5cbiAqXG4gKiBUaGUgZmFjdCB0aGF0IGl0IHNldHMgYnl0ZXMgdG8gemVybyBjYW4gYmUgcmVsaWVkIG9uLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHRoaXMgZnVuY3Rpb24gbWFrZXMgZGF0YSBkaXNhcHBlYXIgZnJvbSBtZW1vcnksXG4gKiBhcyBydW50aW1lIGltcGxlbWVudGF0aW9uIGNhbiwgZm9yIGV4YW1wbGUsIGhhdmUgY29weWluZyBnYXJiYWdlIGNvbGxlY3RvclxuICogdGhhdCB3aWxsIG1ha2UgY29waWVzIG9mIHNlbnNpdGl2ZSBkYXRhIGJlZm9yZSB3ZSB3aXBlIGl0LiBPciB0aGF0IGFuXG4gKiBvcGVyYXRpbmcgc3lzdGVtIHdpbGwgd3JpdGUgb3VyIGRhdGEgdG8gc3dhcCBvciBzbGVlcCBpbWFnZS4gQW5vdGhlciB0aGluZ1xuICogaXMgdGhhdCBhbiBvcHRpbWl6aW5nIGNvbXBpbGVyIGNhbiByZW1vdmUgY2FsbHMgdG8gdGhpcyBmdW5jdGlvbiBvciBtYWtlIGl0XG4gKiBuby1vcC4gVGhlcmUncyBub3RoaW5nIHdlIGNhbiBkbyB3aXRoIGl0LCBzbyB3ZSBqdXN0IGRvIG91ciBiZXN0IGFuZCBob3BlXG4gKiB0aGF0IGV2ZXJ5dGhpbmcgd2lsbCBiZSBva2F5IGFuZCBnb29kIHdpbGwgdHJpdW1waCBvdmVyIGV2aWwuXG4gKi9cbmZ1bmN0aW9uIHdpcGUoYXJyYXkpIHtcbiAgICAvLyBSaWdodCBub3cgaXQncyBzaW1pbGFyIHRvIGFycmF5LmZpbGwoMCkuIElmIGl0IHR1cm5zXG4gICAgLy8gb3V0IHRoYXQgcnVudGltZXMgb3B0aW1pemUgdGhpcyBjYWxsIGF3YXksIG1heWJlXG4gICAgLy8gd2UgY2FuIHRyeSBzb21ldGhpbmcgZWxzZS5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFycmF5W2ldID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuZXhwb3J0cy53aXBlID0gd2lwZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpcGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKEMpIDIwMTYgRG1pdHJ5IENoZXN0bnlraFxuLy8gTUlUIExpY2Vuc2UuIFNlZSBMSUNFTlNFIGZpbGUgZm9yIGRldGFpbHMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNoYXJlZEtleSA9IGV4cG9ydHMuZ2VuZXJhdGVLZXlQYWlyID0gZXhwb3J0cy5nZW5lcmF0ZUtleVBhaXJGcm9tU2VlZCA9IGV4cG9ydHMuc2NhbGFyTXVsdEJhc2UgPSBleHBvcnRzLnNjYWxhck11bHQgPSBleHBvcnRzLlNIQVJFRF9LRVlfTEVOR1RIID0gZXhwb3J0cy5TRUNSRVRfS0VZX0xFTkdUSCA9IGV4cG9ydHMuUFVCTElDX0tFWV9MRU5HVEggPSB2b2lkIDA7XG4vKipcbiAqIFBhY2thZ2UgeDI1NTE5IGltcGxlbWVudHMgWDI1NTE5IGtleSBhZ3JlZW1lbnQuXG4gKi9cbmNvbnN0IHJhbmRvbV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvcmFuZG9tXCIpO1xuY29uc3Qgd2lwZV8xID0gcmVxdWlyZShcIkBzdGFibGVsaWIvd2lwZVwiKTtcbmV4cG9ydHMuUFVCTElDX0tFWV9MRU5HVEggPSAzMjtcbmV4cG9ydHMuU0VDUkVUX0tFWV9MRU5HVEggPSAzMjtcbmV4cG9ydHMuU0hBUkVEX0tFWV9MRU5HVEggPSAzMjtcbi8vIFJldHVybnMgbmV3IHplcm8tZmlsbGVkIDE2LWVsZW1lbnQgR0YgKEZsb2F0NjRBcnJheSkuXG4vLyBJZiBwYXNzZWQgYW4gYXJyYXkgb2YgbnVtYmVycywgcHJlZmlsbHMgdGhlIHJldHVybmVkXG4vLyBhcnJheSB3aXRoIHRoZW0uXG4vL1xuLy8gV2UgdXNlIEZsb2F0NjRBcnJheSwgYmVjYXVzZSB3ZSBuZWVkIDQ4LWJpdCBudW1iZXJzXG4vLyBmb3IgdGhpcyBpbXBsZW1lbnRhdGlvbi5cbmZ1bmN0aW9uIGdmKGluaXQpIHtcbiAgICBjb25zdCByID0gbmV3IEZsb2F0NjRBcnJheSgxNik7XG4gICAgaWYgKGluaXQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbml0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByW2ldID0gaW5pdFtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbn1cbi8vIEJhc2UgcG9pbnQuXG5jb25zdCBfOSA9IG5ldyBVaW50OEFycmF5KDMyKTtcbl85WzBdID0gOTtcbmNvbnN0IF8xMjE2NjUgPSBnZihbMHhkYjQxLCAxXSk7XG5mdW5jdGlvbiBjYXIyNTUxOShvKSB7XG4gICAgbGV0IGMgPSAxO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICBsZXQgdiA9IG9baV0gKyBjICsgNjU1MzU7XG4gICAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICAgIG9baV0gPSB2IC0gYyAqIDY1NTM2O1xuICAgIH1cbiAgICBvWzBdICs9IGMgLSAxICsgMzcgKiAoYyAtIDEpO1xufVxuZnVuY3Rpb24gc2VsMjU1MTkocCwgcSwgYikge1xuICAgIGNvbnN0IGMgPSB+KGIgLSAxKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgY29uc3QgdCA9IGMgJiAocFtpXSBeIHFbaV0pO1xuICAgICAgICBwW2ldIF49IHQ7XG4gICAgICAgIHFbaV0gXj0gdDtcbiAgICB9XG59XG5mdW5jdGlvbiBwYWNrMjU1MTkobywgbikge1xuICAgIGNvbnN0IG0gPSBnZigpO1xuICAgIGNvbnN0IHQgPSBnZigpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICB0W2ldID0gbltpXTtcbiAgICB9XG4gICAgY2FyMjU1MTkodCk7XG4gICAgY2FyMjU1MTkodCk7XG4gICAgY2FyMjU1MTkodCk7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCAyOyBqKyspIHtcbiAgICAgICAgbVswXSA9IHRbMF0gLSAweGZmZWQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgMTU7IGkrKykge1xuICAgICAgICAgICAgbVtpXSA9IHRbaV0gLSAweGZmZmYgLSAoKG1baSAtIDFdID4+IDE2KSAmIDEpO1xuICAgICAgICAgICAgbVtpIC0gMV0gJj0gMHhmZmZmO1xuICAgICAgICB9XG4gICAgICAgIG1bMTVdID0gdFsxNV0gLSAweDdmZmYgLSAoKG1bMTRdID4+IDE2KSAmIDEpO1xuICAgICAgICBjb25zdCBiID0gKG1bMTVdID4+IDE2KSAmIDE7XG4gICAgICAgIG1bMTRdICY9IDB4ZmZmZjtcbiAgICAgICAgc2VsMjU1MTkodCwgbSwgMSAtIGIpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgb1syICogaV0gPSB0W2ldICYgMHhmZjtcbiAgICAgICAgb1syICogaSArIDFdID0gdFtpXSA+PiA4O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVucGFjazI1NTE5KG8sIG4pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgb1tpXSA9IG5bMiAqIGldICsgKG5bMiAqIGkgKyAxXSA8PCA4KTtcbiAgICB9XG4gICAgb1sxNV0gJj0gMHg3ZmZmO1xufVxuZnVuY3Rpb24gYWRkKG8sIGEsIGIpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgb1tpXSA9IGFbaV0gKyBiW2ldO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN1YihvLCBhLCBiKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgIG9baV0gPSBhW2ldIC0gYltpXTtcbiAgICB9XG59XG5mdW5jdGlvbiBtdWwobywgYSwgYikge1xuICAgIGxldCB2LCBjLCB0MCA9IDAsIHQxID0gMCwgdDIgPSAwLCB0MyA9IDAsIHQ0ID0gMCwgdDUgPSAwLCB0NiA9IDAsIHQ3ID0gMCwgdDggPSAwLCB0OSA9IDAsIHQxMCA9IDAsIHQxMSA9IDAsIHQxMiA9IDAsIHQxMyA9IDAsIHQxNCA9IDAsIHQxNSA9IDAsIHQxNiA9IDAsIHQxNyA9IDAsIHQxOCA9IDAsIHQxOSA9IDAsIHQyMCA9IDAsIHQyMSA9IDAsIHQyMiA9IDAsIHQyMyA9IDAsIHQyNCA9IDAsIHQyNSA9IDAsIHQyNiA9IDAsIHQyNyA9IDAsIHQyOCA9IDAsIHQyOSA9IDAsIHQzMCA9IDAsIGIwID0gYlswXSwgYjEgPSBiWzFdLCBiMiA9IGJbMl0sIGIzID0gYlszXSwgYjQgPSBiWzRdLCBiNSA9IGJbNV0sIGI2ID0gYls2XSwgYjcgPSBiWzddLCBiOCA9IGJbOF0sIGI5ID0gYls5XSwgYjEwID0gYlsxMF0sIGIxMSA9IGJbMTFdLCBiMTIgPSBiWzEyXSwgYjEzID0gYlsxM10sIGIxNCA9IGJbMTRdLCBiMTUgPSBiWzE1XTtcbiAgICB2ID0gYVswXTtcbiAgICB0MCArPSB2ICogYjA7XG4gICAgdDEgKz0gdiAqIGIxO1xuICAgIHQyICs9IHYgKiBiMjtcbiAgICB0MyArPSB2ICogYjM7XG4gICAgdDQgKz0gdiAqIGI0O1xuICAgIHQ1ICs9IHYgKiBiNTtcbiAgICB0NiArPSB2ICogYjY7XG4gICAgdDcgKz0gdiAqIGI3O1xuICAgIHQ4ICs9IHYgKiBiODtcbiAgICB0OSArPSB2ICogYjk7XG4gICAgdDEwICs9IHYgKiBiMTA7XG4gICAgdDExICs9IHYgKiBiMTE7XG4gICAgdDEyICs9IHYgKiBiMTI7XG4gICAgdDEzICs9IHYgKiBiMTM7XG4gICAgdDE0ICs9IHYgKiBiMTQ7XG4gICAgdDE1ICs9IHYgKiBiMTU7XG4gICAgdiA9IGFbMV07XG4gICAgdDEgKz0gdiAqIGIwO1xuICAgIHQyICs9IHYgKiBiMTtcbiAgICB0MyArPSB2ICogYjI7XG4gICAgdDQgKz0gdiAqIGIzO1xuICAgIHQ1ICs9IHYgKiBiNDtcbiAgICB0NiArPSB2ICogYjU7XG4gICAgdDcgKz0gdiAqIGI2O1xuICAgIHQ4ICs9IHYgKiBiNztcbiAgICB0OSArPSB2ICogYjg7XG4gICAgdDEwICs9IHYgKiBiOTtcbiAgICB0MTEgKz0gdiAqIGIxMDtcbiAgICB0MTIgKz0gdiAqIGIxMTtcbiAgICB0MTMgKz0gdiAqIGIxMjtcbiAgICB0MTQgKz0gdiAqIGIxMztcbiAgICB0MTUgKz0gdiAqIGIxNDtcbiAgICB0MTYgKz0gdiAqIGIxNTtcbiAgICB2ID0gYVsyXTtcbiAgICB0MiArPSB2ICogYjA7XG4gICAgdDMgKz0gdiAqIGIxO1xuICAgIHQ0ICs9IHYgKiBiMjtcbiAgICB0NSArPSB2ICogYjM7XG4gICAgdDYgKz0gdiAqIGI0O1xuICAgIHQ3ICs9IHYgKiBiNTtcbiAgICB0OCArPSB2ICogYjY7XG4gICAgdDkgKz0gdiAqIGI3O1xuICAgIHQxMCArPSB2ICogYjg7XG4gICAgdDExICs9IHYgKiBiOTtcbiAgICB0MTIgKz0gdiAqIGIxMDtcbiAgICB0MTMgKz0gdiAqIGIxMTtcbiAgICB0MTQgKz0gdiAqIGIxMjtcbiAgICB0MTUgKz0gdiAqIGIxMztcbiAgICB0MTYgKz0gdiAqIGIxNDtcbiAgICB0MTcgKz0gdiAqIGIxNTtcbiAgICB2ID0gYVszXTtcbiAgICB0MyArPSB2ICogYjA7XG4gICAgdDQgKz0gdiAqIGIxO1xuICAgIHQ1ICs9IHYgKiBiMjtcbiAgICB0NiArPSB2ICogYjM7XG4gICAgdDcgKz0gdiAqIGI0O1xuICAgIHQ4ICs9IHYgKiBiNTtcbiAgICB0OSArPSB2ICogYjY7XG4gICAgdDEwICs9IHYgKiBiNztcbiAgICB0MTEgKz0gdiAqIGI4O1xuICAgIHQxMiArPSB2ICogYjk7XG4gICAgdDEzICs9IHYgKiBiMTA7XG4gICAgdDE0ICs9IHYgKiBiMTE7XG4gICAgdDE1ICs9IHYgKiBiMTI7XG4gICAgdDE2ICs9IHYgKiBiMTM7XG4gICAgdDE3ICs9IHYgKiBiMTQ7XG4gICAgdDE4ICs9IHYgKiBiMTU7XG4gICAgdiA9IGFbNF07XG4gICAgdDQgKz0gdiAqIGIwO1xuICAgIHQ1ICs9IHYgKiBiMTtcbiAgICB0NiArPSB2ICogYjI7XG4gICAgdDcgKz0gdiAqIGIzO1xuICAgIHQ4ICs9IHYgKiBiNDtcbiAgICB0OSArPSB2ICogYjU7XG4gICAgdDEwICs9IHYgKiBiNjtcbiAgICB0MTEgKz0gdiAqIGI3O1xuICAgIHQxMiArPSB2ICogYjg7XG4gICAgdDEzICs9IHYgKiBiOTtcbiAgICB0MTQgKz0gdiAqIGIxMDtcbiAgICB0MTUgKz0gdiAqIGIxMTtcbiAgICB0MTYgKz0gdiAqIGIxMjtcbiAgICB0MTcgKz0gdiAqIGIxMztcbiAgICB0MTggKz0gdiAqIGIxNDtcbiAgICB0MTkgKz0gdiAqIGIxNTtcbiAgICB2ID0gYVs1XTtcbiAgICB0NSArPSB2ICogYjA7XG4gICAgdDYgKz0gdiAqIGIxO1xuICAgIHQ3ICs9IHYgKiBiMjtcbiAgICB0OCArPSB2ICogYjM7XG4gICAgdDkgKz0gdiAqIGI0O1xuICAgIHQxMCArPSB2ICogYjU7XG4gICAgdDExICs9IHYgKiBiNjtcbiAgICB0MTIgKz0gdiAqIGI3O1xuICAgIHQxMyArPSB2ICogYjg7XG4gICAgdDE0ICs9IHYgKiBiOTtcbiAgICB0MTUgKz0gdiAqIGIxMDtcbiAgICB0MTYgKz0gdiAqIGIxMTtcbiAgICB0MTcgKz0gdiAqIGIxMjtcbiAgICB0MTggKz0gdiAqIGIxMztcbiAgICB0MTkgKz0gdiAqIGIxNDtcbiAgICB0MjAgKz0gdiAqIGIxNTtcbiAgICB2ID0gYVs2XTtcbiAgICB0NiArPSB2ICogYjA7XG4gICAgdDcgKz0gdiAqIGIxO1xuICAgIHQ4ICs9IHYgKiBiMjtcbiAgICB0OSArPSB2ICogYjM7XG4gICAgdDEwICs9IHYgKiBiNDtcbiAgICB0MTEgKz0gdiAqIGI1O1xuICAgIHQxMiArPSB2ICogYjY7XG4gICAgdDEzICs9IHYgKiBiNztcbiAgICB0MTQgKz0gdiAqIGI4O1xuICAgIHQxNSArPSB2ICogYjk7XG4gICAgdDE2ICs9IHYgKiBiMTA7XG4gICAgdDE3ICs9IHYgKiBiMTE7XG4gICAgdDE4ICs9IHYgKiBiMTI7XG4gICAgdDE5ICs9IHYgKiBiMTM7XG4gICAgdDIwICs9IHYgKiBiMTQ7XG4gICAgdDIxICs9IHYgKiBiMTU7XG4gICAgdiA9IGFbN107XG4gICAgdDcgKz0gdiAqIGIwO1xuICAgIHQ4ICs9IHYgKiBiMTtcbiAgICB0OSArPSB2ICogYjI7XG4gICAgdDEwICs9IHYgKiBiMztcbiAgICB0MTEgKz0gdiAqIGI0O1xuICAgIHQxMiArPSB2ICogYjU7XG4gICAgdDEzICs9IHYgKiBiNjtcbiAgICB0MTQgKz0gdiAqIGI3O1xuICAgIHQxNSArPSB2ICogYjg7XG4gICAgdDE2ICs9IHYgKiBiOTtcbiAgICB0MTcgKz0gdiAqIGIxMDtcbiAgICB0MTggKz0gdiAqIGIxMTtcbiAgICB0MTkgKz0gdiAqIGIxMjtcbiAgICB0MjAgKz0gdiAqIGIxMztcbiAgICB0MjEgKz0gdiAqIGIxNDtcbiAgICB0MjIgKz0gdiAqIGIxNTtcbiAgICB2ID0gYVs4XTtcbiAgICB0OCArPSB2ICogYjA7XG4gICAgdDkgKz0gdiAqIGIxO1xuICAgIHQxMCArPSB2ICogYjI7XG4gICAgdDExICs9IHYgKiBiMztcbiAgICB0MTIgKz0gdiAqIGI0O1xuICAgIHQxMyArPSB2ICogYjU7XG4gICAgdDE0ICs9IHYgKiBiNjtcbiAgICB0MTUgKz0gdiAqIGI3O1xuICAgIHQxNiArPSB2ICogYjg7XG4gICAgdDE3ICs9IHYgKiBiOTtcbiAgICB0MTggKz0gdiAqIGIxMDtcbiAgICB0MTkgKz0gdiAqIGIxMTtcbiAgICB0MjAgKz0gdiAqIGIxMjtcbiAgICB0MjEgKz0gdiAqIGIxMztcbiAgICB0MjIgKz0gdiAqIGIxNDtcbiAgICB0MjMgKz0gdiAqIGIxNTtcbiAgICB2ID0gYVs5XTtcbiAgICB0OSArPSB2ICogYjA7XG4gICAgdDEwICs9IHYgKiBiMTtcbiAgICB0MTEgKz0gdiAqIGIyO1xuICAgIHQxMiArPSB2ICogYjM7XG4gICAgdDEzICs9IHYgKiBiNDtcbiAgICB0MTQgKz0gdiAqIGI1O1xuICAgIHQxNSArPSB2ICogYjY7XG4gICAgdDE2ICs9IHYgKiBiNztcbiAgICB0MTcgKz0gdiAqIGI4O1xuICAgIHQxOCArPSB2ICogYjk7XG4gICAgdDE5ICs9IHYgKiBiMTA7XG4gICAgdDIwICs9IHYgKiBiMTE7XG4gICAgdDIxICs9IHYgKiBiMTI7XG4gICAgdDIyICs9IHYgKiBiMTM7XG4gICAgdDIzICs9IHYgKiBiMTQ7XG4gICAgdDI0ICs9IHYgKiBiMTU7XG4gICAgdiA9IGFbMTBdO1xuICAgIHQxMCArPSB2ICogYjA7XG4gICAgdDExICs9IHYgKiBiMTtcbiAgICB0MTIgKz0gdiAqIGIyO1xuICAgIHQxMyArPSB2ICogYjM7XG4gICAgdDE0ICs9IHYgKiBiNDtcbiAgICB0MTUgKz0gdiAqIGI1O1xuICAgIHQxNiArPSB2ICogYjY7XG4gICAgdDE3ICs9IHYgKiBiNztcbiAgICB0MTggKz0gdiAqIGI4O1xuICAgIHQxOSArPSB2ICogYjk7XG4gICAgdDIwICs9IHYgKiBiMTA7XG4gICAgdDIxICs9IHYgKiBiMTE7XG4gICAgdDIyICs9IHYgKiBiMTI7XG4gICAgdDIzICs9IHYgKiBiMTM7XG4gICAgdDI0ICs9IHYgKiBiMTQ7XG4gICAgdDI1ICs9IHYgKiBiMTU7XG4gICAgdiA9IGFbMTFdO1xuICAgIHQxMSArPSB2ICogYjA7XG4gICAgdDEyICs9IHYgKiBiMTtcbiAgICB0MTMgKz0gdiAqIGIyO1xuICAgIHQxNCArPSB2ICogYjM7XG4gICAgdDE1ICs9IHYgKiBiNDtcbiAgICB0MTYgKz0gdiAqIGI1O1xuICAgIHQxNyArPSB2ICogYjY7XG4gICAgdDE4ICs9IHYgKiBiNztcbiAgICB0MTkgKz0gdiAqIGI4O1xuICAgIHQyMCArPSB2ICogYjk7XG4gICAgdDIxICs9IHYgKiBiMTA7XG4gICAgdDIyICs9IHYgKiBiMTE7XG4gICAgdDIzICs9IHYgKiBiMTI7XG4gICAgdDI0ICs9IHYgKiBiMTM7XG4gICAgdDI1ICs9IHYgKiBiMTQ7XG4gICAgdDI2ICs9IHYgKiBiMTU7XG4gICAgdiA9IGFbMTJdO1xuICAgIHQxMiArPSB2ICogYjA7XG4gICAgdDEzICs9IHYgKiBiMTtcbiAgICB0MTQgKz0gdiAqIGIyO1xuICAgIHQxNSArPSB2ICogYjM7XG4gICAgdDE2ICs9IHYgKiBiNDtcbiAgICB0MTcgKz0gdiAqIGI1O1xuICAgIHQxOCArPSB2ICogYjY7XG4gICAgdDE5ICs9IHYgKiBiNztcbiAgICB0MjAgKz0gdiAqIGI4O1xuICAgIHQyMSArPSB2ICogYjk7XG4gICAgdDIyICs9IHYgKiBiMTA7XG4gICAgdDIzICs9IHYgKiBiMTE7XG4gICAgdDI0ICs9IHYgKiBiMTI7XG4gICAgdDI1ICs9IHYgKiBiMTM7XG4gICAgdDI2ICs9IHYgKiBiMTQ7XG4gICAgdDI3ICs9IHYgKiBiMTU7XG4gICAgdiA9IGFbMTNdO1xuICAgIHQxMyArPSB2ICogYjA7XG4gICAgdDE0ICs9IHYgKiBiMTtcbiAgICB0MTUgKz0gdiAqIGIyO1xuICAgIHQxNiArPSB2ICogYjM7XG4gICAgdDE3ICs9IHYgKiBiNDtcbiAgICB0MTggKz0gdiAqIGI1O1xuICAgIHQxOSArPSB2ICogYjY7XG4gICAgdDIwICs9IHYgKiBiNztcbiAgICB0MjEgKz0gdiAqIGI4O1xuICAgIHQyMiArPSB2ICogYjk7XG4gICAgdDIzICs9IHYgKiBiMTA7XG4gICAgdDI0ICs9IHYgKiBiMTE7XG4gICAgdDI1ICs9IHYgKiBiMTI7XG4gICAgdDI2ICs9IHYgKiBiMTM7XG4gICAgdDI3ICs9IHYgKiBiMTQ7XG4gICAgdDI4ICs9IHYgKiBiMTU7XG4gICAgdiA9IGFbMTRdO1xuICAgIHQxNCArPSB2ICogYjA7XG4gICAgdDE1ICs9IHYgKiBiMTtcbiAgICB0MTYgKz0gdiAqIGIyO1xuICAgIHQxNyArPSB2ICogYjM7XG4gICAgdDE4ICs9IHYgKiBiNDtcbiAgICB0MTkgKz0gdiAqIGI1O1xuICAgIHQyMCArPSB2ICogYjY7XG4gICAgdDIxICs9IHYgKiBiNztcbiAgICB0MjIgKz0gdiAqIGI4O1xuICAgIHQyMyArPSB2ICogYjk7XG4gICAgdDI0ICs9IHYgKiBiMTA7XG4gICAgdDI1ICs9IHYgKiBiMTE7XG4gICAgdDI2ICs9IHYgKiBiMTI7XG4gICAgdDI3ICs9IHYgKiBiMTM7XG4gICAgdDI4ICs9IHYgKiBiMTQ7XG4gICAgdDI5ICs9IHYgKiBiMTU7XG4gICAgdiA9IGFbMTVdO1xuICAgIHQxNSArPSB2ICogYjA7XG4gICAgdDE2ICs9IHYgKiBiMTtcbiAgICB0MTcgKz0gdiAqIGIyO1xuICAgIHQxOCArPSB2ICogYjM7XG4gICAgdDE5ICs9IHYgKiBiNDtcbiAgICB0MjAgKz0gdiAqIGI1O1xuICAgIHQyMSArPSB2ICogYjY7XG4gICAgdDIyICs9IHYgKiBiNztcbiAgICB0MjMgKz0gdiAqIGI4O1xuICAgIHQyNCArPSB2ICogYjk7XG4gICAgdDI1ICs9IHYgKiBiMTA7XG4gICAgdDI2ICs9IHYgKiBiMTE7XG4gICAgdDI3ICs9IHYgKiBiMTI7XG4gICAgdDI4ICs9IHYgKiBiMTM7XG4gICAgdDI5ICs9IHYgKiBiMTQ7XG4gICAgdDMwICs9IHYgKiBiMTU7XG4gICAgdDAgKz0gMzggKiB0MTY7XG4gICAgdDEgKz0gMzggKiB0MTc7XG4gICAgdDIgKz0gMzggKiB0MTg7XG4gICAgdDMgKz0gMzggKiB0MTk7XG4gICAgdDQgKz0gMzggKiB0MjA7XG4gICAgdDUgKz0gMzggKiB0MjE7XG4gICAgdDYgKz0gMzggKiB0MjI7XG4gICAgdDcgKz0gMzggKiB0MjM7XG4gICAgdDggKz0gMzggKiB0MjQ7XG4gICAgdDkgKz0gMzggKiB0MjU7XG4gICAgdDEwICs9IDM4ICogdDI2O1xuICAgIHQxMSArPSAzOCAqIHQyNztcbiAgICB0MTIgKz0gMzggKiB0Mjg7XG4gICAgdDEzICs9IDM4ICogdDI5O1xuICAgIHQxNCArPSAzOCAqIHQzMDtcbiAgICAvLyB0MTUgbGVmdCBhcyBpc1xuICAgIC8vIGZpcnN0IGNhclxuICAgIGMgPSAxO1xuICAgIHYgPSB0MCArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQwID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDEgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MSA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQyICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDIgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MyArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQzID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDQgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0NCA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQ1ICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDUgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0NiArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQ2ID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDcgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0NyA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQ4ICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDggPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0OSArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQ5ID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDEwICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDEwID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDExICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDExID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDEyICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDEyID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDEzICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDEzID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDE0ICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDE0ID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDE1ICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDE1ID0gdiAtIGMgKiA2NTUzNjtcbiAgICB0MCArPSBjIC0gMSArIDM3ICogKGMgLSAxKTtcbiAgICAvLyBzZWNvbmQgY2FyXG4gICAgYyA9IDE7XG4gICAgdiA9IHQwICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDAgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MSArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQxID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDIgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MiA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQzICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDMgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0NCArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQ0ID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDUgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0NSA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQ2ICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDYgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0NyArIGMgKyA2NTUzNTtcbiAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgIHQ3ID0gdiAtIGMgKiA2NTUzNjtcbiAgICB2ID0gdDggKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0OCA9IHYgLSBjICogNjU1MzY7XG4gICAgdiA9IHQ5ICsgYyArIDY1NTM1O1xuICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgdDkgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MTAgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MTAgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MTEgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MTEgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MTIgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MTIgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MTMgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MTMgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MTQgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MTQgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHYgPSB0MTUgKyBjICsgNjU1MzU7XG4gICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICB0MTUgPSB2IC0gYyAqIDY1NTM2O1xuICAgIHQwICs9IGMgLSAxICsgMzcgKiAoYyAtIDEpO1xuICAgIG9bMF0gPSB0MDtcbiAgICBvWzFdID0gdDE7XG4gICAgb1syXSA9IHQyO1xuICAgIG9bM10gPSB0MztcbiAgICBvWzRdID0gdDQ7XG4gICAgb1s1XSA9IHQ1O1xuICAgIG9bNl0gPSB0NjtcbiAgICBvWzddID0gdDc7XG4gICAgb1s4XSA9IHQ4O1xuICAgIG9bOV0gPSB0OTtcbiAgICBvWzEwXSA9IHQxMDtcbiAgICBvWzExXSA9IHQxMTtcbiAgICBvWzEyXSA9IHQxMjtcbiAgICBvWzEzXSA9IHQxMztcbiAgICBvWzE0XSA9IHQxNDtcbiAgICBvWzE1XSA9IHQxNTtcbn1cbmZ1bmN0aW9uIHNxdWFyZShvLCBhKSB7XG4gICAgbXVsKG8sIGEsIGEpO1xufVxuZnVuY3Rpb24gaW52MjU1MTkobywgaW5wKSB7XG4gICAgY29uc3QgYyA9IGdmKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgIGNbaV0gPSBpbnBbaV07XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAyNTM7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHNxdWFyZShjLCBjKTtcbiAgICAgICAgaWYgKGkgIT09IDIgJiYgaSAhPT0gNCkge1xuICAgICAgICAgICAgbXVsKGMsIGMsIGlucCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgIG9baV0gPSBjW2ldO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNjYWxhck11bHQobiwgcCkge1xuICAgIGNvbnN0IHogPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgY29uc3QgeCA9IG5ldyBGbG9hdDY0QXJyYXkoODApO1xuICAgIGNvbnN0IGEgPSBnZigpLCBiID0gZ2YoKSwgYyA9IGdmKCksIGQgPSBnZigpLCBlID0gZ2YoKSwgZiA9IGdmKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMTsgaSsrKSB7XG4gICAgICAgIHpbaV0gPSBuW2ldO1xuICAgIH1cbiAgICB6WzMxXSA9IChuWzMxXSAmIDEyNykgfCA2NDtcbiAgICB6WzBdICY9IDI0ODtcbiAgICB1bnBhY2syNTUxOSh4LCBwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgYltpXSA9IHhbaV07XG4gICAgfVxuICAgIGFbMF0gPSBkWzBdID0gMTtcbiAgICBmb3IgKGxldCBpID0gMjU0OyBpID49IDA7IC0taSkge1xuICAgICAgICBjb25zdCByID0gKHpbaSA+Pj4gM10gPj4+IChpICYgNykpICYgMTtcbiAgICAgICAgc2VsMjU1MTkoYSwgYiwgcik7XG4gICAgICAgIHNlbDI1NTE5KGMsIGQsIHIpO1xuICAgICAgICBhZGQoZSwgYSwgYyk7XG4gICAgICAgIHN1YihhLCBhLCBjKTtcbiAgICAgICAgYWRkKGMsIGIsIGQpO1xuICAgICAgICBzdWIoYiwgYiwgZCk7XG4gICAgICAgIHNxdWFyZShkLCBlKTtcbiAgICAgICAgc3F1YXJlKGYsIGEpO1xuICAgICAgICBtdWwoYSwgYywgYSk7XG4gICAgICAgIG11bChjLCBiLCBlKTtcbiAgICAgICAgYWRkKGUsIGEsIGMpO1xuICAgICAgICBzdWIoYSwgYSwgYyk7XG4gICAgICAgIHNxdWFyZShiLCBhKTtcbiAgICAgICAgc3ViKGMsIGQsIGYpO1xuICAgICAgICBtdWwoYSwgYywgXzEyMTY2NSk7XG4gICAgICAgIGFkZChhLCBhLCBkKTtcbiAgICAgICAgbXVsKGMsIGMsIGEpO1xuICAgICAgICBtdWwoYSwgZCwgZik7XG4gICAgICAgIG11bChkLCBiLCB4KTtcbiAgICAgICAgc3F1YXJlKGIsIGUpO1xuICAgICAgICBzZWwyNTUxOShhLCBiLCByKTtcbiAgICAgICAgc2VsMjU1MTkoYywgZCwgcik7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICB4W2kgKyAxNl0gPSBhW2ldO1xuICAgICAgICB4W2kgKyAzMl0gPSBjW2ldO1xuICAgICAgICB4W2kgKyA0OF0gPSBiW2ldO1xuICAgICAgICB4W2kgKyA2NF0gPSBkW2ldO1xuICAgIH1cbiAgICBjb25zdCB4MzIgPSB4LnN1YmFycmF5KDMyKTtcbiAgICBjb25zdCB4MTYgPSB4LnN1YmFycmF5KDE2KTtcbiAgICBpbnYyNTUxOSh4MzIsIHgzMik7XG4gICAgbXVsKHgxNiwgeDE2LCB4MzIpO1xuICAgIGNvbnN0IHEgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgcGFjazI1NTE5KHEsIHgxNik7XG4gICAgcmV0dXJuIHE7XG59XG5leHBvcnRzLnNjYWxhck11bHQgPSBzY2FsYXJNdWx0O1xuZnVuY3Rpb24gc2NhbGFyTXVsdEJhc2Uobikge1xuICAgIHJldHVybiBzY2FsYXJNdWx0KG4sIF85KTtcbn1cbmV4cG9ydHMuc2NhbGFyTXVsdEJhc2UgPSBzY2FsYXJNdWx0QmFzZTtcbmZ1bmN0aW9uIGdlbmVyYXRlS2V5UGFpckZyb21TZWVkKHNlZWQpIHtcbiAgICBpZiAoc2VlZC5sZW5ndGggIT09IGV4cG9ydHMuU0VDUkVUX0tFWV9MRU5HVEgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB4MjU1MTk6IHNlZWQgbXVzdCBiZSAke2V4cG9ydHMuU0VDUkVUX0tFWV9MRU5HVEh9IGJ5dGVzYCk7XG4gICAgfVxuICAgIGNvbnN0IHNlY3JldEtleSA9IG5ldyBVaW50OEFycmF5KHNlZWQpO1xuICAgIGNvbnN0IHB1YmxpY0tleSA9IHNjYWxhck11bHRCYXNlKHNlY3JldEtleSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHVibGljS2V5LFxuICAgICAgICBzZWNyZXRLZXlcbiAgICB9O1xufVxuZXhwb3J0cy5nZW5lcmF0ZUtleVBhaXJGcm9tU2VlZCA9IGdlbmVyYXRlS2V5UGFpckZyb21TZWVkO1xuZnVuY3Rpb24gZ2VuZXJhdGVLZXlQYWlyKHBybmcpIHtcbiAgICBjb25zdCBzZWVkID0gKDAsIHJhbmRvbV8xLnJhbmRvbUJ5dGVzKSgzMiwgcHJuZyk7XG4gICAgY29uc3QgcmVzdWx0ID0gZ2VuZXJhdGVLZXlQYWlyRnJvbVNlZWQoc2VlZCk7XG4gICAgKDAsIHdpcGVfMS53aXBlKShzZWVkKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5nZW5lcmF0ZUtleVBhaXIgPSBnZW5lcmF0ZUtleVBhaXI7XG4vKipcbiAqIFJldHVybnMgYSBzaGFyZWQga2V5IGJldHdlZW4gb3VyIHNlY3JldCBrZXkgYW5kIGEgcGVlcidzIHB1YmxpYyBrZXkuXG4gKlxuICogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBnaXZlbiBrZXlzIGFyZSBvZiB3cm9uZyBsZW5ndGguXG4gKlxuICogSWYgcmVqZWN0WmVybyBpcyB0cnVlIHRocm93cyBpZiB0aGUgY2FsY3VsYXRlZCBzaGFyZWQga2V5IGlzIGFsbC16ZXJvLlxuICogRnJvbSBSRkMgNzc0ODpcbiAqXG4gKiA+IFByb3RvY29sIGRlc2lnbmVycyB1c2luZyBEaWZmaWUtSGVsbG1hbiBvdmVyIHRoZSBjdXJ2ZXMgZGVmaW5lZCBpblxuICogPiB0aGlzIGRvY3VtZW50IG11c3Qgbm90IGFzc3VtZSBcImNvbnRyaWJ1dG9yeSBiZWhhdmlvclwiLiAgU3BlY2lhbGx5LFxuICogPiBjb250cmlidXRvcnkgYmVoYXZpb3IgbWVhbnMgdGhhdCBib3RoIHBhcnRpZXMnIHByaXZhdGUga2V5c1xuICogPiBjb250cmlidXRlIHRvIHRoZSByZXN1bHRpbmcgc2hhcmVkIGtleS4gIFNpbmNlIGN1cnZlMjU1MTkgYW5kXG4gKiA+IGN1cnZlNDQ4IGhhdmUgY29mYWN0b3JzIG9mIDggYW5kIDQgKHJlc3BlY3RpdmVseSksIGFuIGlucHV0IHBvaW50IG9mXG4gKiA+IHNtYWxsIG9yZGVyIHdpbGwgZWxpbWluYXRlIGFueSBjb250cmlidXRpb24gZnJvbSB0aGUgb3RoZXIgcGFydHknc1xuICogPiBwcml2YXRlIGtleS4gIFRoaXMgc2l0dWF0aW9uIGNhbiBiZSBkZXRlY3RlZCBieSBjaGVja2luZyBmb3IgdGhlIGFsbC1cbiAqID4gemVybyBvdXRwdXQsIHdoaWNoIGltcGxlbWVudGF0aW9ucyBNQVkgZG8sIGFzIHNwZWNpZmllZCBpbiBTZWN0aW9uIDYuXG4gKiA+IEhvd2V2ZXIsIGEgbGFyZ2UgbnVtYmVyIG9mIGV4aXN0aW5nIGltcGxlbWVudGF0aW9ucyBkbyBub3QgZG8gdGhpcy5cbiAqXG4gKiBJTVBPUlRBTlQ6IHRoZSByZXR1cm5lZCBrZXkgaXMgYSByYXcgcmVzdWx0IG9mIHNjYWxhciBtdWx0aXBsaWNhdGlvbi5cbiAqIFRvIHVzZSBpdCBhcyBhIGtleSBtYXRlcmlhbCwgaGFzaCBpdCB3aXRoIGEgY3J5cHRvZ3JhcGhpYyBoYXNoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaGFyZWRLZXkobXlTZWNyZXRLZXksIHRoZWlyUHVibGljS2V5LCByZWplY3RaZXJvID0gZmFsc2UpIHtcbiAgICBpZiAobXlTZWNyZXRLZXkubGVuZ3RoICE9PSBleHBvcnRzLlBVQkxJQ19LRVlfTEVOR1RIKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlgyNTUxOTogaW5jb3JyZWN0IHNlY3JldCBrZXkgbGVuZ3RoXCIpO1xuICAgIH1cbiAgICBpZiAodGhlaXJQdWJsaWNLZXkubGVuZ3RoICE9PSBleHBvcnRzLlBVQkxJQ19LRVlfTEVOR1RIKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlgyNTUxOTogaW5jb3JyZWN0IHB1YmxpYyBrZXkgbGVuZ3RoXCIpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBzY2FsYXJNdWx0KG15U2VjcmV0S2V5LCB0aGVpclB1YmxpY0tleSk7XG4gICAgaWYgKHJlamVjdFplcm8pIHtcbiAgICAgICAgbGV0IHplcm9zID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHplcm9zIHw9IHJlc3VsdFtpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoemVyb3MgPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlgyNTUxOTogaW52YWxpZCBzaGFyZWQga2V5XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLnNoYXJlZEtleSA9IHNoYXJlZEtleTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXgyNTUxOS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlID0gZXhwb3J0cy5nZXRTdWJ0bGVDcnlwdG8gPSBleHBvcnRzLmdldEJyb3dlckNyeXB0byA9IHZvaWQgMDtcbmZ1bmN0aW9uIGdldEJyb3dlckNyeXB0bygpIHtcbiAgICByZXR1cm4gKGdsb2JhbCA9PT0gbnVsbCB8fCBnbG9iYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdsb2JhbC5jcnlwdG8pIHx8IChnbG9iYWwgPT09IG51bGwgfHwgZ2xvYmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnbG9iYWwubXNDcnlwdG8pIHx8IHt9O1xufVxuZXhwb3J0cy5nZXRCcm93ZXJDcnlwdG8gPSBnZXRCcm93ZXJDcnlwdG87XG5mdW5jdGlvbiBnZXRTdWJ0bGVDcnlwdG8oKSB7XG4gICAgY29uc3QgYnJvd3NlckNyeXB0byA9IGdldEJyb3dlckNyeXB0bygpO1xuICAgIHJldHVybiBicm93c2VyQ3J5cHRvLnN1YnRsZSB8fCBicm93c2VyQ3J5cHRvLndlYmtpdFN1YnRsZTtcbn1cbmV4cG9ydHMuZ2V0U3VidGxlQ3J5cHRvID0gZ2V0U3VidGxlQ3J5cHRvO1xuZnVuY3Rpb24gaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlKCkge1xuICAgIHJldHVybiAhIWdldEJyb3dlckNyeXB0bygpICYmICEhZ2V0U3VidGxlQ3J5cHRvKCk7XG59XG5leHBvcnRzLmlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSA9IGlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0by5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNCcm93c2VyID0gZXhwb3J0cy5pc05vZGUgPSBleHBvcnRzLmlzUmVhY3ROYXRpdmUgPSB2b2lkIDA7XG5mdW5jdGlvbiBpc1JlYWN0TmF0aXZlKCkge1xuICAgIHJldHVybiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09IFwiUmVhY3ROYXRpdmVcIik7XG59XG5leHBvcnRzLmlzUmVhY3ROYXRpdmUgPSBpc1JlYWN0TmF0aXZlO1xuZnVuY3Rpb24gaXNOb2RlKCkge1xuICAgIHJldHVybiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPT0gXCJ1bmRlZmluZWRcIik7XG59XG5leHBvcnRzLmlzTm9kZSA9IGlzTm9kZTtcbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgICByZXR1cm4gIWlzUmVhY3ROYXRpdmUoKSAmJiAhaXNOb2RlKCk7XG59XG5leHBvcnRzLmlzQnJvd3NlciA9IGlzQnJvd3Nlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jcnlwdG9cIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW52XCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImV4cG9ydCBjbGFzcyBJRXZlbnRzIHtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSEVBUlRCRUFUX0VWRU5UUyA9IGV4cG9ydHMuSEVBUlRCRUFUX0lOVEVSVkFMID0gdm9pZCAwO1xuY29uc3QgdGltZV8xID0gcmVxdWlyZShcIkB3YWxsZXRjb25uZWN0L3RpbWVcIik7XG5leHBvcnRzLkhFQVJUQkVBVF9JTlRFUlZBTCA9IHRpbWVfMS5GSVZFX1NFQ09ORFM7XG5leHBvcnRzLkhFQVJUQkVBVF9FVkVOVFMgPSB7XG4gICAgcHVsc2U6IFwiaGVhcnRiZWF0X3B1bHNlXCIsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVhcnRiZWF0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2hlYXJ0YmVhdFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSGVhcnRCZWF0ID0gdm9pZCAwO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmNvbnN0IHRpbWVfMSA9IHJlcXVpcmUoXCJAd2FsbGV0Y29ubmVjdC90aW1lXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jbGFzcyBIZWFydEJlYXQgZXh0ZW5kcyB0eXBlc18xLklIZWFydEJlYXQge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIob3B0cyk7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gbmV3IGV2ZW50c18xLkV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLmludGVydmFsID0gY29uc3RhbnRzXzEuSEVBUlRCRUFUX0lOVEVSVkFMO1xuICAgICAgICB0aGlzLmludGVydmFsID0gKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5pbnRlcnZhbCkgfHwgY29uc3RhbnRzXzEuSEVBUlRCRUFUX0lOVEVSVkFMO1xuICAgIH1cbiAgICBzdGF0aWMgaW5pdChvcHRzKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYXJ0YmVhdCA9IG5ldyBIZWFydEJlYXQob3B0cyk7XG4gICAgICAgICAgICB5aWVsZCBoZWFydGJlYXQuaW5pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGhlYXJ0YmVhdDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIG9uY2UoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uY2UoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgb2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmV2ZW50cy5vZmYoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHNldEludGVydmFsKCgpID0+IHRoaXMucHVsc2UoKSwgdGltZV8xLnRvTWlsaXNlY29uZHModGhpcy5pbnRlcnZhbCkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcHVsc2UoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLmVtaXQoY29uc3RhbnRzXzEuSEVBUlRCRUFUX0VWRU5UUy5wdWxzZSk7XG4gICAgfVxufVxuZXhwb3J0cy5IZWFydEJlYXQgPSBIZWFydEJlYXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWFydGJlYXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVhcnRiZWF0XCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSUhlYXJ0QmVhdCA9IHZvaWQgMDtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcIkB3YWxsZXRjb25uZWN0L2V2ZW50c1wiKTtcbmNsYXNzIElIZWFydEJlYXQgZXh0ZW5kcyBldmVudHNfMS5JRXZlbnRzIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxufVxuZXhwb3J0cy5JSGVhcnRCZWF0ID0gSUhlYXJ0QmVhdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlYXJ0YmVhdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWFydGJlYXRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZXhwb3J0IGNsYXNzIElFdmVudHMge1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlzYy5qcy5tYXAiLCJpbXBvcnQgeyBJRXZlbnRzIH0gZnJvbSBcIi4vbWlzY1wiO1xuZXhwb3J0IGNsYXNzIElKc29uUnBjQ29ubmVjdGlvbiBleHRlbmRzIElFdmVudHMge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSUJhc2VKc29uUnBjUHJvdmlkZXIgZXh0ZW5kcyBJRXZlbnRzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSUpzb25ScGNQcm92aWRlciBleHRlbmRzIElCYXNlSnNvblJwY1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXIuanMubWFwIiwiZXhwb3J0IGNvbnN0IFBBUlNFX0VSUk9SID0gXCJQQVJTRV9FUlJPUlwiO1xuZXhwb3J0IGNvbnN0IElOVkFMSURfUkVRVUVTVCA9IFwiSU5WQUxJRF9SRVFVRVNUXCI7XG5leHBvcnQgY29uc3QgTUVUSE9EX05PVF9GT1VORCA9IFwiTUVUSE9EX05PVF9GT1VORFwiO1xuZXhwb3J0IGNvbnN0IElOVkFMSURfUEFSQU1TID0gXCJJTlZBTElEX1BBUkFNU1wiO1xuZXhwb3J0IGNvbnN0IElOVEVSTkFMX0VSUk9SID0gXCJJTlRFUk5BTF9FUlJPUlwiO1xuZXhwb3J0IGNvbnN0IFNFUlZFUl9FUlJPUiA9IFwiU0VSVkVSX0VSUk9SXCI7XG5leHBvcnQgY29uc3QgUkVTRVJWRURfRVJST1JfQ09ERVMgPSBbLTMyNzAwLCAtMzI2MDAsIC0zMjYwMSwgLTMyNjAyLCAtMzI2MDNdO1xuZXhwb3J0IGNvbnN0IFNFUlZFUl9FUlJPUl9DT0RFX1JBTkdFID0gWy0zMjAwMCwgLTMyMDk5XTtcbmV4cG9ydCBjb25zdCBTVEFOREFSRF9FUlJPUl9NQVAgPSB7XG4gICAgW1BBUlNFX0VSUk9SXTogeyBjb2RlOiAtMzI3MDAsIG1lc3NhZ2U6IFwiUGFyc2UgZXJyb3JcIiB9LFxuICAgIFtJTlZBTElEX1JFUVVFU1RdOiB7IGNvZGU6IC0zMjYwMCwgbWVzc2FnZTogXCJJbnZhbGlkIFJlcXVlc3RcIiB9LFxuICAgIFtNRVRIT0RfTk9UX0ZPVU5EXTogeyBjb2RlOiAtMzI2MDEsIG1lc3NhZ2U6IFwiTWV0aG9kIG5vdCBmb3VuZFwiIH0sXG4gICAgW0lOVkFMSURfUEFSQU1TXTogeyBjb2RlOiAtMzI2MDIsIG1lc3NhZ2U6IFwiSW52YWxpZCBwYXJhbXNcIiB9LFxuICAgIFtJTlRFUk5BTF9FUlJPUl06IHsgY29kZTogLTMyNjAzLCBtZXNzYWdlOiBcIkludGVybmFsIGVycm9yXCIgfSxcbiAgICBbU0VSVkVSX0VSUk9SXTogeyBjb2RlOiAtMzIwMDAsIG1lc3NhZ2U6IFwiU2VydmVyIGVycm9yXCIgfSxcbn07XG5leHBvcnQgY29uc3QgREVGQVVMVF9FUlJPUiA9IFNFUlZFUl9FUlJPUjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCJpbXBvcnQgeyBTRVJWRVJfRVJST1JfQ09ERV9SQU5HRSwgUkVTRVJWRURfRVJST1JfQ09ERVMsIFNUQU5EQVJEX0VSUk9SX01BUCwgREVGQVVMVF9FUlJPUiwgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1NlcnZlckVycm9yQ29kZShjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPD0gU0VSVkVSX0VSUk9SX0NPREVfUkFOR0VbMF0gJiYgY29kZSA+PSBTRVJWRVJfRVJST1JfQ09ERV9SQU5HRVsxXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Jlc2VydmVkRXJyb3JDb2RlKGNvZGUpIHtcbiAgICByZXR1cm4gUkVTRVJWRURfRVJST1JfQ09ERVMuaW5jbHVkZXMoY29kZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZEVycm9yQ29kZShjb2RlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBjb2RlID09PSBcIm51bWJlclwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEVycm9yKHR5cGUpIHtcbiAgICBpZiAoIU9iamVjdC5rZXlzKFNUQU5EQVJEX0VSUk9SX01BUCkuaW5jbHVkZXModHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIFNUQU5EQVJEX0VSUk9SX01BUFtERUZBVUxUX0VSUk9SXTtcbiAgICB9XG4gICAgcmV0dXJuIFNUQU5EQVJEX0VSUk9SX01BUFt0eXBlXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFcnJvckJ5Q29kZShjb2RlKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBPYmplY3QudmFsdWVzKFNUQU5EQVJEX0VSUk9SX01BUCkuZmluZChlID0+IGUuY29kZSA9PT0gY29kZSk7XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgICByZXR1cm4gU1RBTkRBUkRfRVJST1JfTUFQW0RFRkFVTFRfRVJST1JdO1xuICAgIH1cbiAgICByZXR1cm4gbWF0Y2g7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVKc29uUnBjRXJyb3IocmVzcG9uc2UpIHtcbiAgICBpZiAodHlwZW9mIHJlc3BvbnNlLmVycm9yLmNvZGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlLCBlcnJvcjogXCJNaXNzaW5nIGNvZGUgZm9yIEpTT04tUlBDIGVycm9yXCIgfTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXNwb25zZS5lcnJvci5tZXNzYWdlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiB7IHZhbGlkOiBmYWxzZSwgZXJyb3I6IFwiTWlzc2luZyBtZXNzYWdlIGZvciBKU09OLVJQQyBlcnJvclwiIH07XG4gICAgfVxuICAgIGlmICghaXNWYWxpZEVycm9yQ29kZShyZXNwb25zZS5lcnJvci5jb2RlKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IGBJbnZhbGlkIGVycm9yIGNvZGUgdHlwZSBmb3IgSlNPTi1SUEM6ICR7cmVzcG9uc2UuZXJyb3IuY29kZX1gLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNSZXNlcnZlZEVycm9yQ29kZShyZXNwb25zZS5lcnJvci5jb2RlKSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IGdldEVycm9yQnlDb2RlKHJlc3BvbnNlLmVycm9yLmNvZGUpO1xuICAgICAgICBpZiAoZXJyb3IubWVzc2FnZSAhPT0gU1RBTkRBUkRfRVJST1JfTUFQW0RFRkFVTFRfRVJST1JdLm1lc3NhZ2UgJiZcbiAgICAgICAgICAgIHJlc3BvbnNlLmVycm9yLm1lc3NhZ2UgPT09IGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBgSW52YWxpZCBlcnJvciBjb2RlIG1lc3NhZ2UgZm9yIEpTT04tUlBDOiAke3Jlc3BvbnNlLmVycm9yLmNvZGV9YCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNvbm5lY3Rpb25FcnJvcihlLCB1cmwsIHR5cGUpIHtcbiAgICByZXR1cm4gZS5tZXNzYWdlLmluY2x1ZGVzKFwiZ2V0YWRkcmluZm8gRU5PVEZPVU5EXCIpIHx8IGUubWVzc2FnZS5pbmNsdWRlcyhcImNvbm5lY3QgRUNPTk5SRUZVU0VEXCIpXG4gICAgICAgID8gbmV3IEVycm9yKGBVbmF2YWlsYWJsZSAke3R5cGV9IFJQQyB1cmwgYXQgJHt1cmx9YClcbiAgICAgICAgOiBlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3IuanMubWFwIiwiaW1wb3J0IHsgZ2V0RXJyb3IsIGdldEVycm9yQnlDb2RlLCBpc1Jlc2VydmVkRXJyb3JDb2RlIH0gZnJvbSBcIi4vZXJyb3JcIjtcbmltcG9ydCB7IElOVEVSTkFMX0VSUk9SLCBTRVJWRVJfRVJST1IgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXlsb2FkSWQoKSB7XG4gICAgY29uc3QgZGF0ZSA9IERhdGUubm93KCkgKiBNYXRoLnBvdygxMCwgMyk7XG4gICAgY29uc3QgZXh0cmEgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygxMCwgMykpO1xuICAgIHJldHVybiBkYXRlICsgZXh0cmE7XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0SnNvblJwY1JlcXVlc3QobWV0aG9kLCBwYXJhbXMsIGlkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGlkIHx8IHBheWxvYWRJZCgpLFxuICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICBtZXRob2QsXG4gICAgICAgIHBhcmFtcyxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEpzb25ScGNSZXN1bHQoaWQsIHJlc3VsdCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkLFxuICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICByZXN1bHQsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRKc29uUnBjRXJyb3IoaWQsIGVycm9yLCBkYXRhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQsXG4gICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIGVycm9yOiBmb3JtYXRFcnJvck1lc3NhZ2UoZXJyb3IsIGRhdGEpLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RXJyb3JNZXNzYWdlKGVycm9yLCBkYXRhKSB7XG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZ2V0RXJyb3IoSU5URVJOQUxfRVJST1IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVycm9yID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGVycm9yID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBnZXRFcnJvcihTRVJWRVJfRVJST1IpKSwgeyBtZXNzYWdlOiBlcnJvciB9KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGVycm9yLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgICBpZiAoaXNSZXNlcnZlZEVycm9yQ29kZShlcnJvci5jb2RlKSkge1xuICAgICAgICBlcnJvciA9IGdldEVycm9yQnlDb2RlKGVycm9yLmNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3I7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtYXQuanMubWFwIiwiY29uc3QgSFRUUF9SRUdFWCA9IFwiXmh0dHBzPzpcIjtcbmNvbnN0IFdTX1JFR0VYID0gXCJed3NzPzpcIjtcbmZ1bmN0aW9uIGdldFVybFByb3RvY29sKHVybCkge1xuICAgIGNvbnN0IG1hdGNoZXMgPSB1cmwubWF0Y2gobmV3IFJlZ0V4cCgvXlxcdys6LywgXCJnaVwiKSk7XG4gICAgaWYgKCFtYXRjaGVzIHx8ICFtYXRjaGVzLmxlbmd0aClcbiAgICAgICAgcmV0dXJuO1xuICAgIHJldHVybiBtYXRjaGVzWzBdO1xufVxuZnVuY3Rpb24gbWF0Y2hSZWdleFByb3RvY29sKHVybCwgcmVnZXgpIHtcbiAgICBjb25zdCBwcm90b2NvbCA9IGdldFVybFByb3RvY29sKHVybCk7XG4gICAgaWYgKHR5cGVvZiBwcm90b2NvbCA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4KS50ZXN0KHByb3RvY29sKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0h0dHBVcmwodXJsKSB7XG4gICAgcmV0dXJuIG1hdGNoUmVnZXhQcm90b2NvbCh1cmwsIEhUVFBfUkVHRVgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzV3NVcmwodXJsKSB7XG4gICAgcmV0dXJuIG1hdGNoUmVnZXhQcm90b2NvbCh1cmwsIFdTX1JFR0VYKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0xvY2FsaG9zdFVybCh1cmwpIHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChcIndzcz86Ly9sb2NhbGhvc3QoOmR7Miw1fSk/XCIpLnRlc3QodXJsKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVybC5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjUGF5bG9hZChwYXlsb2FkKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcGF5bG9hZCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBcImlkXCIgaW4gcGF5bG9hZCAmJlxuICAgICAgICBcImpzb25ycGNcIiBpbiBwYXlsb2FkICYmXG4gICAgICAgIHBheWxvYWQuanNvbnJwYyA9PT0gXCIyLjBcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjUmVxdWVzdChwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGlzSnNvblJwY1BheWxvYWQocGF5bG9hZCkgJiYgXCJtZXRob2RcIiBpbiBwYXlsb2FkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1Jlc3BvbnNlKHBheWxvYWQpIHtcbiAgICByZXR1cm4gaXNKc29uUnBjUGF5bG9hZChwYXlsb2FkKSAmJiAoaXNKc29uUnBjUmVzdWx0KHBheWxvYWQpIHx8IGlzSnNvblJwY0Vycm9yKHBheWxvYWQpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25ScGNSZXN1bHQocGF5bG9hZCkge1xuICAgIHJldHVybiBcInJlc3VsdFwiIGluIHBheWxvYWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjRXJyb3IocGF5bG9hZCkge1xuICAgIHJldHVybiBcImVycm9yXCIgaW4gcGF5bG9hZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25ScGNWYWxpZGF0aW9uSW52YWxpZCh2YWxpZGF0aW9uKSB7XG4gICAgcmV0dXJuIFwiZXJyb3JcIiBpbiB2YWxpZGF0aW9uICYmIHZhbGlkYXRpb24udmFsaWQgPT09IGZhbHNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdG9ycy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS2V5VmFsdWVTdG9yYWdlID0gdm9pZCAwO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbmNvbnN0IHNhZmVfanNvbl91dGlsc18xID0gcmVxdWlyZShcInNhZmUtanNvbi11dGlsc1wiKTtcbmNvbnN0IGxvY2FsU3RvcmFnZV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbGliL2xvY2FsU3RvcmFnZVwiKSk7XG5jb25zdCBzaGFyZWRfMSA9IHJlcXVpcmUoXCIuLi9zaGFyZWRcIik7XG5jbGFzcyBLZXlWYWx1ZVN0b3JhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmxvY2FsU3RvcmFnZSA9IGxvY2FsU3RvcmFnZV8xLmRlZmF1bHQ7XG4gICAgfVxuICAgIGdldEtleXMoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmxvY2FsU3RvcmFnZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRFbnRyaWVzKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy5sb2NhbFN0b3JhZ2UpLm1hcChzaGFyZWRfMS5wYXJzZUVudHJ5KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldEl0ZW0oa2V5KSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2FmZV9qc29uX3V0aWxzXzEuc2FmZUpzb25QYXJzZShpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldEl0ZW0oa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgc2FmZV9qc29uX3V0aWxzXzEuc2FmZUpzb25TdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbW92ZUl0ZW0oa2V5KSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5LZXlWYWx1ZVN0b3JhZ2UgPSBLZXlWYWx1ZVN0b3JhZ2U7XG5leHBvcnRzLmRlZmF1bHQgPSBLZXlWYWx1ZVN0b3JhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgbGV0IGRiO1xuICAgIGZ1bmN0aW9uIExvY2FsU3RvcmFnZSgpIHsgfVxuICAgIGRiID0gTG9jYWxTdG9yYWdlO1xuICAgIGRiLnByb3RvdHlwZS5nZXRJdGVtID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKHRoaXNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBkYi5wcm90b3R5cGUuc2V0SXRlbSA9IGZ1bmN0aW9uIChrZXksIHZhbCkge1xuICAgICAgICB0aGlzW2tleV0gPSBTdHJpbmcodmFsKTtcbiAgICB9O1xuICAgIGRiLnByb3RvdHlwZS5yZW1vdmVJdGVtID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgIH07XG4gICAgZGIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmtleXMoc2VsZikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBzZWxmW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGRiLnByb3RvdHlwZS5rZXkgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICBpID0gaSB8fCAwO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcylbaV07XG4gICAgfTtcbiAgICBkYi5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhcImxlbmd0aFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzKS5sZW5ndGg7XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmxvY2FsU3RvcmFnZSkge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5sb2NhbFN0b3JhZ2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2FsU3RvcmFnZSkge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IG5ldyBMb2NhbFN0b3JhZ2UoKTtcbiAgICB9XG59KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYWxTdG9yYWdlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JS2V5VmFsdWVTdG9yYWdlID0gdm9pZCAwO1xuY2xhc3MgSUtleVZhbHVlU3RvcmFnZSB7XG59XG5leHBvcnRzLklLZXlWYWx1ZVN0b3JhZ2UgPSBJS2V5VmFsdWVTdG9yYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlRW50cnkgPSB2b2lkIDA7XG5jb25zdCBzYWZlX2pzb25fdXRpbHNfMSA9IHJlcXVpcmUoXCJzYWZlLWpzb24tdXRpbHNcIik7XG5mdW5jdGlvbiBwYXJzZUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiBbZW50cnlbMF0sIHNhZmVfanNvbl91dGlsc18xLnNhZmVKc29uUGFyc2UoKF9hID0gZW50cnlbMV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCIpXTtcbn1cbmV4cG9ydHMucGFyc2VFbnRyeSA9IHBhcnNlRW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUElOT19DVVNUT01fQ09OVEVYVF9LRVkgPSBleHBvcnRzLlBJTk9fTE9HR0VSX0RFRkFVTFRTID0gdm9pZCAwO1xuZXhwb3J0cy5QSU5PX0xPR0dFUl9ERUZBVUxUUyA9IHtcbiAgICBsZXZlbDogXCJpbmZvXCIsXG59O1xuZXhwb3J0cy5QSU5PX0NVU1RPTV9DT05URVhUX0tFWSA9IFwiY3VzdG9tX2NvbnRleHRcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGlubyA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBwaW5vXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicGlub1wiKSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwaW5vXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwaW5vXzEuZGVmYXVsdDsgfSB9KTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2VuZXJhdGVDaGlsZExvZ2dlciA9IGV4cG9ydHMuZm9ybWF0Q2hpbGRMb2dnZXJDb250ZXh0ID0gZXhwb3J0cy5nZXRMb2dnZXJDb250ZXh0ID0gZXhwb3J0cy5zZXRCcm93c2VyTG9nZ2VyQ29udGV4dCA9IGV4cG9ydHMuZ2V0QnJvd3NlckxvZ2dlckNvbnRleHQgPSBleHBvcnRzLmdldERlZmF1bHRMb2dnZXJPcHRpb25zID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5mdW5jdGlvbiBnZXREZWZhdWx0TG9nZ2VyT3B0aW9ucyhvcHRzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0cyksIHsgbGV2ZWw6IChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMubGV2ZWwpIHx8IGNvbnN0YW50c18xLlBJTk9fTE9HR0VSX0RFRkFVTFRTLmxldmVsIH0pO1xufVxuZXhwb3J0cy5nZXREZWZhdWx0TG9nZ2VyT3B0aW9ucyA9IGdldERlZmF1bHRMb2dnZXJPcHRpb25zO1xuZnVuY3Rpb24gZ2V0QnJvd3NlckxvZ2dlckNvbnRleHQobG9nZ2VyLCBjdXN0b21Db250ZXh0S2V5ID0gY29uc3RhbnRzXzEuUElOT19DVVNUT01fQ09OVEVYVF9LRVkpIHtcbiAgICByZXR1cm4gbG9nZ2VyW2N1c3RvbUNvbnRleHRLZXldIHx8IFwiXCI7XG59XG5leHBvcnRzLmdldEJyb3dzZXJMb2dnZXJDb250ZXh0ID0gZ2V0QnJvd3NlckxvZ2dlckNvbnRleHQ7XG5mdW5jdGlvbiBzZXRCcm93c2VyTG9nZ2VyQ29udGV4dChsb2dnZXIsIGNvbnRleHQsIGN1c3RvbUNvbnRleHRLZXkgPSBjb25zdGFudHNfMS5QSU5PX0NVU1RPTV9DT05URVhUX0tFWSkge1xuICAgIGxvZ2dlcltjdXN0b21Db250ZXh0S2V5XSA9IGNvbnRleHQ7XG4gICAgcmV0dXJuIGxvZ2dlcjtcbn1cbmV4cG9ydHMuc2V0QnJvd3NlckxvZ2dlckNvbnRleHQgPSBzZXRCcm93c2VyTG9nZ2VyQ29udGV4dDtcbmZ1bmN0aW9uIGdldExvZ2dlckNvbnRleHQobG9nZ2VyLCBjdXN0b21Db250ZXh0S2V5ID0gY29uc3RhbnRzXzEuUElOT19DVVNUT01fQ09OVEVYVF9LRVkpIHtcbiAgICBsZXQgY29udGV4dCA9IFwiXCI7XG4gICAgaWYgKHR5cGVvZiBsb2dnZXIuYmluZGluZ3MgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgY29udGV4dCA9IGdldEJyb3dzZXJMb2dnZXJDb250ZXh0KGxvZ2dlciwgY3VzdG9tQ29udGV4dEtleSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb250ZXh0ID0gbG9nZ2VyLmJpbmRpbmdzKCkuY29udGV4dCB8fCBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dDtcbn1cbmV4cG9ydHMuZ2V0TG9nZ2VyQ29udGV4dCA9IGdldExvZ2dlckNvbnRleHQ7XG5mdW5jdGlvbiBmb3JtYXRDaGlsZExvZ2dlckNvbnRleHQobG9nZ2VyLCBjaGlsZENvbnRleHQsIGN1c3RvbUNvbnRleHRLZXkgPSBjb25zdGFudHNfMS5QSU5PX0NVU1RPTV9DT05URVhUX0tFWSkge1xuICAgIGNvbnN0IHBhcmVudENvbnRleHQgPSBnZXRMb2dnZXJDb250ZXh0KGxvZ2dlciwgY3VzdG9tQ29udGV4dEtleSk7XG4gICAgY29uc3QgY29udGV4dCA9IHBhcmVudENvbnRleHQudHJpbSgpXG4gICAgICAgID8gYCR7cGFyZW50Q29udGV4dH0vJHtjaGlsZENvbnRleHR9YFxuICAgICAgICA6IGNoaWxkQ29udGV4dDtcbiAgICByZXR1cm4gY29udGV4dDtcbn1cbmV4cG9ydHMuZm9ybWF0Q2hpbGRMb2dnZXJDb250ZXh0ID0gZm9ybWF0Q2hpbGRMb2dnZXJDb250ZXh0O1xuZnVuY3Rpb24gZ2VuZXJhdGVDaGlsZExvZ2dlcihsb2dnZXIsIGNoaWxkQ29udGV4dCwgY3VzdG9tQ29udGV4dEtleSA9IGNvbnN0YW50c18xLlBJTk9fQ1VTVE9NX0NPTlRFWFRfS0VZKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGZvcm1hdENoaWxkTG9nZ2VyQ29udGV4dChsb2dnZXIsIGNoaWxkQ29udGV4dCwgY3VzdG9tQ29udGV4dEtleSk7XG4gICAgY29uc3QgY2hpbGQgPSBsb2dnZXIuY2hpbGQoeyBjb250ZXh0IH0pO1xuICAgIHJldHVybiBzZXRCcm93c2VyTG9nZ2VyQ29udGV4dChjaGlsZCwgY29udGV4dCwgY3VzdG9tQ29udGV4dEtleSk7XG59XG5leHBvcnRzLmdlbmVyYXRlQ2hpbGRMb2dnZXIgPSBnZW5lcmF0ZUNoaWxkTG9nZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZSA9IGV4cG9ydHMuZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdyA9IGV4cG9ydHMuZ2V0Q3J5cHRvID0gZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZXhwb3J0cy5nZXRMb2NhdGlvbiA9IGV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZXhwb3J0cy5nZXROYXZpZ2F0b3IgPSBleHBvcnRzLmdldE5hdmlnYXRvck9yVGhyb3cgPSBleHBvcnRzLmdldERvY3VtZW50ID0gZXhwb3J0cy5nZXREb2N1bWVudE9yVGhyb3cgPSBleHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZXhwb3J0cy5nZXRGcm9tV2luZG93ID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0RnJvbVdpbmRvdyhuYW1lKSB7XG4gICAgbGV0IHJlcyA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93W25hbWVdICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJlcyA9IHdpbmRvd1tuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZ2V0RnJvbVdpbmRvdyA9IGdldEZyb21XaW5kb3c7XG5mdW5jdGlvbiBnZXRGcm9tV2luZG93T3JUaHJvdyhuYW1lKSB7XG4gICAgY29uc3QgcmVzID0gZ2V0RnJvbVdpbmRvdyhuYW1lKTtcbiAgICBpZiAoIXJlcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gaXMgbm90IGRlZmluZWQgaW4gV2luZG93YCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmdldEZyb21XaW5kb3dPclRocm93ID0gZ2V0RnJvbVdpbmRvd09yVGhyb3c7XG5mdW5jdGlvbiBnZXREb2N1bWVudE9yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50T3JUaHJvdyA9IGdldERvY3VtZW50T3JUaHJvdztcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwiZG9jdW1lbnRcIik7XG59XG5leHBvcnRzLmdldERvY3VtZW50ID0gZ2V0RG9jdW1lbnQ7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3JPclRocm93KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93T3JUaHJvdyhcIm5hdmlnYXRvclwiKTtcbn1cbmV4cG9ydHMuZ2V0TmF2aWdhdG9yT3JUaHJvdyA9IGdldE5hdmlnYXRvck9yVGhyb3c7XG5mdW5jdGlvbiBnZXROYXZpZ2F0b3IoKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJuYXZpZ2F0b3JcIik7XG59XG5leHBvcnRzLmdldE5hdmlnYXRvciA9IGdldE5hdmlnYXRvcjtcbmZ1bmN0aW9uIGdldExvY2F0aW9uT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb25PclRocm93ID0gZ2V0TG9jYXRpb25PclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJsb2NhdGlvblwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYXRpb24gPSBnZXRMb2NhdGlvbjtcbmZ1bmN0aW9uIGdldENyeXB0b09yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwiY3J5cHRvXCIpO1xufVxuZXhwb3J0cy5nZXRDcnlwdG9PclRocm93ID0gZ2V0Q3J5cHRvT3JUaHJvdztcbmZ1bmN0aW9uIGdldENyeXB0bygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvdyhcImNyeXB0b1wiKTtcbn1cbmV4cG9ydHMuZ2V0Q3J5cHRvID0gZ2V0Q3J5cHRvO1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJsb2NhbFN0b3JhZ2VcIik7XG59XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZU9yVGhyb3cgPSBnZXRMb2NhbFN0b3JhZ2VPclRocm93O1xuZnVuY3Rpb24gZ2V0TG9jYWxTdG9yYWdlKCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwibG9jYWxTdG9yYWdlXCIpO1xufVxuZXhwb3J0cy5nZXRMb2NhbFN0b3JhZ2UgPSBnZXRMb2NhbFN0b3JhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0V2luZG93TWV0YWRhdGEgPSB2b2lkIDA7XG5jb25zdCB3aW5kb3dfZ2V0dGVyc18xID0gcmVxdWlyZShcIkB3YWxsZXRjb25uZWN0L3dpbmRvdy1nZXR0ZXJzXCIpO1xuZnVuY3Rpb24gZ2V0V2luZG93TWV0YWRhdGEoKSB7XG4gICAgbGV0IGRvYztcbiAgICBsZXQgbG9jO1xuICAgIHRyeSB7XG4gICAgICAgIGRvYyA9IHdpbmRvd19nZXR0ZXJzXzEuZ2V0RG9jdW1lbnRPclRocm93KCk7XG4gICAgICAgIGxvYyA9IHdpbmRvd19nZXR0ZXJzXzEuZ2V0TG9jYXRpb25PclRocm93KCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRJY29ucygpIHtcbiAgICAgICAgY29uc3QgbGlua3MgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuICAgICAgICBjb25zdCBpY29ucyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rID0gbGlua3NbaV07XG4gICAgICAgICAgICBjb25zdCByZWwgPSBsaW5rLmdldEF0dHJpYnV0ZShcInJlbFwiKTtcbiAgICAgICAgICAgIGlmIChyZWwpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVsLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImljb25cIikgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBocmVmID0gbGluay5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhyZWYudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiaHR0cHM6XCIpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWYudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiaHR0cDpcIikgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZi5pbmRleE9mKFwiLy9cIikgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWJzb2x1dGVIcmVmID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgbG9jLmhvc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhyZWYuaW5kZXhPZihcIi9cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVIcmVmICs9IGhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gbG9jLnBhdGhuYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmluYWxQYXRoID0gcGF0aC5qb2luKFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVIcmVmICs9IGZpbmFsUGF0aCArIFwiL1wiICsgaHJlZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMucHVzaChhYnNvbHV0ZUhyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaHJlZi5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhYnNvbHV0ZVVybCA9IGxvYy5wcm90b2NvbCArIGhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbnMucHVzaChhYnNvbHV0ZVVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29ucy5wdXNoKGhyZWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpY29ucztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0V2luZG93TWV0YWRhdGFPZkFueSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IG1ldGFUYWdzID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibWV0YVwiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXRhVGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdGFnID0gbWV0YVRhZ3NbaV07XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gW1wiaXRlbXByb3BcIiwgXCJwcm9wZXJ0eVwiLCBcIm5hbWVcIl1cbiAgICAgICAgICAgICAgICAubWFwKCh0YXJnZXQpID0+IHRhZy5nZXRBdHRyaWJ1dGUodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChhdHRyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MuaW5jbHVkZXMoYXR0cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMubGVuZ3RoICYmIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGFnLmdldEF0dHJpYnV0ZShcImNvbnRlbnRcIik7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXROYW1lKCkge1xuICAgICAgICBsZXQgbmFtZSA9IGdldFdpbmRvd01ldGFkYXRhT2ZBbnkoXCJuYW1lXCIsIFwib2c6c2l0ZV9uYW1lXCIsIFwib2c6dGl0bGVcIiwgXCJ0d2l0dGVyOnRpdGxlXCIpO1xuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIG5hbWUgPSBkb2MudGl0bGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldERlc2NyaXB0aW9uKCkge1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGdldFdpbmRvd01ldGFkYXRhT2ZBbnkoXCJkZXNjcmlwdGlvblwiLCBcIm9nOmRlc2NyaXB0aW9uXCIsIFwidHdpdHRlcjpkZXNjcmlwdGlvblwiLCBcImtleXdvcmRzXCIpO1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgfVxuICAgIGNvbnN0IG5hbWUgPSBnZXROYW1lKCk7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBnZXREZXNjcmlwdGlvbigpO1xuICAgIGNvbnN0IHVybCA9IGxvYy5vcmlnaW47XG4gICAgY29uc3QgaWNvbnMgPSBnZXRJY29ucygpO1xuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICB1cmwsXG4gICAgICAgIGljb25zLFxuICAgICAgICBuYW1lLFxuICAgIH07XG4gICAgcmV0dXJuIG1ldGE7XG59XG5leHBvcnRzLmdldFdpbmRvd01ldGFkYXRhID0gZ2V0V2luZG93TWV0YWRhdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5jb25zdCBzdHJpY3RVcmlFbmNvZGUgPSByZXF1aXJlKCdzdHJpY3QtdXJpLWVuY29kZScpO1xuY29uc3QgZGVjb2RlQ29tcG9uZW50ID0gcmVxdWlyZSgnZGVjb2RlLXVyaS1jb21wb25lbnQnKTtcbmNvbnN0IHNwbGl0T25GaXJzdCA9IHJlcXVpcmUoJ3NwbGl0LW9uLWZpcnN0Jyk7XG5jb25zdCBmaWx0ZXJPYmplY3QgPSByZXF1aXJlKCdmaWx0ZXItb2JqJyk7XG5cbmNvbnN0IGlzTnVsbE9yVW5kZWZpbmVkID0gdmFsdWUgPT4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuY29uc3QgZW5jb2RlRnJhZ21lbnRJZGVudGlmaWVyID0gU3ltYm9sKCdlbmNvZGVGcmFnbWVudElkZW50aWZpZXInKTtcblxuZnVuY3Rpb24gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpIHtcblx0c3dpdGNoIChvcHRpb25zLmFycmF5Rm9ybWF0KSB7XG5cdFx0Y2FzZSAnaW5kZXgnOlxuXHRcdFx0cmV0dXJuIGtleSA9PiAocmVzdWx0LCB2YWx1ZSkgPT4ge1xuXHRcdFx0XHRjb25zdCBpbmRleCA9IHJlc3VsdC5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHZhbHVlID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwTnVsbCAmJiB2YWx1ZSA9PT0gbnVsbCkgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwRW1wdHlTdHJpbmcgJiYgdmFsdWUgPT09ICcnKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1snLCBpbmRleCwgJ10nXS5qb2luKCcnKV07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRcdC4uLnJlc3VsdCxcblx0XHRcdFx0XHRbZW5jb2RlKGtleSwgb3B0aW9ucyksICdbJywgZW5jb2RlKGluZGV4LCBvcHRpb25zKSwgJ109JywgZW5jb2RlKHZhbHVlLCBvcHRpb25zKV0uam9pbignJylcblx0XHRcdFx0XTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiBrZXkgPT4gKHJlc3VsdCwgdmFsdWUpID0+IHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHZhbHVlID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwTnVsbCAmJiB2YWx1ZSA9PT0gbnVsbCkgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwRW1wdHlTdHJpbmcgJiYgdmFsdWUgPT09ICcnKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1tdJ10uam9pbignJyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJ1tdPScsIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyldLmpvaW4oJycpXTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdjb2xvbi1saXN0LXNlcGFyYXRvcic6XG5cdFx0XHRyZXR1cm4ga2V5ID0+IChyZXN1bHQsIHZhbHVlKSA9PiB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHR2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdFx0KG9wdGlvbnMuc2tpcE51bGwgJiYgdmFsdWUgPT09IG51bGwpIHx8XG5cdFx0XHRcdFx0KG9wdGlvbnMuc2tpcEVtcHR5U3RyaW5nICYmIHZhbHVlID09PSAnJylcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybiBbLi4ucmVzdWx0LCBbZW5jb2RlKGtleSwgb3B0aW9ucyksICc6bGlzdD0nXS5qb2luKCcnKV07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gWy4uLnJlc3VsdCwgW2VuY29kZShrZXksIG9wdGlvbnMpLCAnOmxpc3Q9JywgZW5jb2RlKHZhbHVlLCBvcHRpb25zKV0uam9pbignJyldO1xuXHRcdFx0fTtcblxuXHRcdGNhc2UgJ2NvbW1hJzpcblx0XHRjYXNlICdzZXBhcmF0b3InOlxuXHRcdGNhc2UgJ2JyYWNrZXQtc2VwYXJhdG9yJzoge1xuXHRcdFx0Y29uc3Qga2V5VmFsdWVTZXAgPSBvcHRpb25zLmFycmF5Rm9ybWF0ID09PSAnYnJhY2tldC1zZXBhcmF0b3InID9cblx0XHRcdFx0J1tdPScgOlxuXHRcdFx0XHQnPSc7XG5cblx0XHRcdHJldHVybiBrZXkgPT4gKHJlc3VsdCwgdmFsdWUpID0+IHtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHZhbHVlID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwTnVsbCAmJiB2YWx1ZSA9PT0gbnVsbCkgfHxcblx0XHRcdFx0XHQob3B0aW9ucy5za2lwRW1wdHlTdHJpbmcgJiYgdmFsdWUgPT09ICcnKVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhbnNsYXRlIG51bGwgdG8gYW4gZW1wdHkgc3RyaW5nIHNvIHRoYXQgaXQgZG9lc24ndCBzZXJpYWxpemUgYXMgJ251bGwnXG5cdFx0XHRcdHZhbHVlID0gdmFsdWUgPT09IG51bGwgPyAnJyA6IHZhbHVlO1xuXG5cdFx0XHRcdGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFtbZW5jb2RlKGtleSwgb3B0aW9ucyksIGtleVZhbHVlU2VwLCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKCcnKV07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW1tyZXN1bHQsIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyldLmpvaW4ob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcildO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIGtleSA9PiAocmVzdWx0LCB2YWx1ZSkgPT4ge1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0dmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHRcdChvcHRpb25zLnNraXBOdWxsICYmIHZhbHVlID09PSBudWxsKSB8fFxuXHRcdFx0XHRcdChvcHRpb25zLnNraXBFbXB0eVN0cmluZyAmJiB2YWx1ZSA9PT0gJycpXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodmFsdWUgPT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gWy4uLnJlc3VsdCwgZW5jb2RlKGtleSwgb3B0aW9ucyldO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFsuLi5yZXN1bHQsIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgJz0nLCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKCcnKV07XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHBhcnNlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpIHtcblx0bGV0IHJlc3VsdDtcblxuXHRzd2l0Y2ggKG9wdGlvbnMuYXJyYXlGb3JtYXQpIHtcblx0XHRjYXNlICdpbmRleCc6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdHJlc3VsdCA9IC9cXFsoXFxkKilcXF0kLy5leGVjKGtleSk7XG5cblx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoL1xcW1xcZCpcXF0kLywgJycpO1xuXG5cdFx0XHRcdGlmICghcmVzdWx0KSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0ge307XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhY2N1bXVsYXRvcltrZXldW3Jlc3VsdFsxXV0gPSB2YWx1ZTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpID0+IHtcblx0XHRcdFx0cmVzdWx0ID0gLyhcXFtcXF0pJC8uZXhlYyhrZXkpO1xuXHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvXFxbXFxdJC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFt2YWx1ZV07XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnY29sb24tbGlzdC1zZXBhcmF0b3InOlxuXHRcdFx0cmV0dXJuIChrZXksIHZhbHVlLCBhY2N1bXVsYXRvcikgPT4ge1xuXHRcdFx0XHRyZXN1bHQgPSAvKDpsaXN0KSQvLmV4ZWMoa2V5KTtcblx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoLzpsaXN0JC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFt2YWx1ZV07XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnY29tbWEnOlxuXHRcdGNhc2UgJ3NlcGFyYXRvcic6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGlzQXJyYXkgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmluY2x1ZGVzKG9wdGlvbnMuYXJyYXlGb3JtYXRTZXBhcmF0b3IpO1xuXHRcdFx0XHRjb25zdCBpc0VuY29kZWRBcnJheSA9ICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICFpc0FycmF5ICYmIGRlY29kZSh2YWx1ZSwgb3B0aW9ucykuaW5jbHVkZXMob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcikpO1xuXHRcdFx0XHR2YWx1ZSA9IGlzRW5jb2RlZEFycmF5ID8gZGVjb2RlKHZhbHVlLCBvcHRpb25zKSA6IHZhbHVlO1xuXHRcdFx0XHRjb25zdCBuZXdWYWx1ZSA9IGlzQXJyYXkgfHwgaXNFbmNvZGVkQXJyYXkgPyB2YWx1ZS5zcGxpdChvcHRpb25zLmFycmF5Rm9ybWF0U2VwYXJhdG9yKS5tYXAoaXRlbSA9PiBkZWNvZGUoaXRlbSwgb3B0aW9ucykpIDogdmFsdWUgPT09IG51bGwgPyB2YWx1ZSA6IGRlY29kZSh2YWx1ZSwgb3B0aW9ucyk7XG5cdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSBuZXdWYWx1ZTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0LXNlcGFyYXRvcic6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGlzQXJyYXkgPSAvKFxcW1xcXSkkLy50ZXN0KGtleSk7XG5cdFx0XHRcdGtleSA9IGtleS5yZXBsYWNlKC9cXFtcXF0kLywgJycpO1xuXG5cdFx0XHRcdGlmICghaXNBcnJheSkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZSA/IGRlY29kZSh2YWx1ZSwgb3B0aW9ucykgOiB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBhcnJheVZhbHVlID0gdmFsdWUgPT09IG51bGwgP1xuXHRcdFx0XHRcdFtdIDpcblx0XHRcdFx0XHR2YWx1ZS5zcGxpdChvcHRpb25zLmFycmF5Rm9ybWF0U2VwYXJhdG9yKS5tYXAoaXRlbSA9PiBkZWNvZGUoaXRlbSwgb3B0aW9ucykpO1xuXG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gYXJyYXlWYWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gW10uY29uY2F0KGFjY3VtdWxhdG9yW2tleV0sIGFycmF5VmFsdWUpO1xuXHRcdFx0fTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlGb3JtYXRTZXBhcmF0b3IodmFsdWUpIHtcblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgdmFsdWUubGVuZ3RoICE9PSAxKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignYXJyYXlGb3JtYXRTZXBhcmF0b3IgbXVzdCBiZSBzaW5nbGUgY2hhcmFjdGVyIHN0cmluZycpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWx1ZSwgb3B0aW9ucykge1xuXHRpZiAob3B0aW9ucy5lbmNvZGUpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5zdHJpY3QgPyBzdHJpY3RVcmlFbmNvZGUodmFsdWUpIDogZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKHZhbHVlLCBvcHRpb25zKSB7XG5cdGlmIChvcHRpb25zLmRlY29kZSkge1xuXHRcdHJldHVybiBkZWNvZGVDb21wb25lbnQodmFsdWUpO1xuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBrZXlzU29ydGVyKGlucHV0KSB7XG5cdGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHRcdHJldHVybiBpbnB1dC5zb3J0KCk7XG5cdH1cblxuXHRpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBrZXlzU29ydGVyKE9iamVjdC5rZXlzKGlucHV0KSlcblx0XHRcdC5zb3J0KChhLCBiKSA9PiBOdW1iZXIoYSkgLSBOdW1iZXIoYikpXG5cdFx0XHQubWFwKGtleSA9PiBpbnB1dFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSGFzaChpbnB1dCkge1xuXHRjb25zdCBoYXNoU3RhcnQgPSBpbnB1dC5pbmRleE9mKCcjJyk7XG5cdGlmIChoYXNoU3RhcnQgIT09IC0xKSB7XG5cdFx0aW5wdXQgPSBpbnB1dC5zbGljZSgwLCBoYXNoU3RhcnQpO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoKHVybCkge1xuXHRsZXQgaGFzaCA9ICcnO1xuXHRjb25zdCBoYXNoU3RhcnQgPSB1cmwuaW5kZXhPZignIycpO1xuXHRpZiAoaGFzaFN0YXJ0ICE9PSAtMSkge1xuXHRcdGhhc2ggPSB1cmwuc2xpY2UoaGFzaFN0YXJ0KTtcblx0fVxuXG5cdHJldHVybiBoYXNoO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0KGlucHV0KSB7XG5cdGlucHV0ID0gcmVtb3ZlSGFzaChpbnB1dCk7XG5cdGNvbnN0IHF1ZXJ5U3RhcnQgPSBpbnB1dC5pbmRleE9mKCc/Jyk7XG5cdGlmIChxdWVyeVN0YXJ0ID09PSAtMSkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdHJldHVybiBpbnB1dC5zbGljZShxdWVyeVN0YXJ0ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVmFsdWUodmFsdWUsIG9wdGlvbnMpIHtcblx0aWYgKG9wdGlvbnMucGFyc2VOdW1iZXJzICYmICFOdW1iZXIuaXNOYU4oTnVtYmVyKHZhbHVlKSkgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUudHJpbSgpICE9PSAnJykpIHtcblx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5wYXJzZUJvb2xlYW5zICYmIHZhbHVlICE9PSBudWxsICYmICh2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgfHwgdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ2ZhbHNlJykpIHtcblx0XHR2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gcGFyc2UocXVlcnksIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdGRlY29kZTogdHJ1ZSxcblx0XHRzb3J0OiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZScsXG5cdFx0YXJyYXlGb3JtYXRTZXBhcmF0b3I6ICcsJyxcblx0XHRwYXJzZU51bWJlcnM6IGZhbHNlLFxuXHRcdHBhcnNlQm9vbGVhbnM6IGZhbHNlXG5cdH0sIG9wdGlvbnMpO1xuXG5cdHZhbGlkYXRlQXJyYXlGb3JtYXRTZXBhcmF0b3Iob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcik7XG5cblx0Y29uc3QgZm9ybWF0dGVyID0gcGFyc2VyRm9yQXJyYXlGb3JtYXQob3B0aW9ucyk7XG5cblx0Ly8gQ3JlYXRlIGFuIG9iamVjdCB3aXRoIG5vIHByb3RvdHlwZVxuXHRjb25zdCByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdGlmICh0eXBlb2YgcXVlcnkgIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdHF1ZXJ5ID0gcXVlcnkudHJpbSgpLnJlcGxhY2UoL15bPyMmXS8sICcnKTtcblxuXHRpZiAoIXF1ZXJ5KSB7XG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdGZvciAoY29uc3QgcGFyYW0gb2YgcXVlcnkuc3BsaXQoJyYnKSkge1xuXHRcdGlmIChwYXJhbSA9PT0gJycpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGxldCBba2V5LCB2YWx1ZV0gPSBzcGxpdE9uRmlyc3Qob3B0aW9ucy5kZWNvZGUgPyBwYXJhbS5yZXBsYWNlKC9cXCsvZywgJyAnKSA6IHBhcmFtLCAnPScpO1xuXG5cdFx0Ly8gTWlzc2luZyBgPWAgc2hvdWxkIGJlIGBudWxsYDpcblx0XHQvLyBodHRwOi8vdzMub3JnL1RSLzIwMTIvV0QtdXJsLTIwMTIwNTI0LyNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG5cdFx0dmFsdWUgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IFsnY29tbWEnLCAnc2VwYXJhdG9yJywgJ2JyYWNrZXQtc2VwYXJhdG9yJ10uaW5jbHVkZXMob3B0aW9ucy5hcnJheUZvcm1hdCkgPyB2YWx1ZSA6IGRlY29kZSh2YWx1ZSwgb3B0aW9ucyk7XG5cdFx0Zm9ybWF0dGVyKGRlY29kZShrZXksIG9wdGlvbnMpLCB2YWx1ZSwgcmV0KTtcblx0fVxuXG5cdGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJldCkpIHtcblx0XHRjb25zdCB2YWx1ZSA9IHJldFtrZXldO1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG5cdFx0XHRmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXModmFsdWUpKSB7XG5cdFx0XHRcdHZhbHVlW2tdID0gcGFyc2VWYWx1ZSh2YWx1ZVtrXSwgb3B0aW9ucyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldFtrZXldID0gcGFyc2VWYWx1ZSh2YWx1ZSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc29ydCA9PT0gZmFsc2UpIHtcblx0XHRyZXR1cm4gcmV0O1xuXHR9XG5cblx0cmV0dXJuIChvcHRpb25zLnNvcnQgPT09IHRydWUgPyBPYmplY3Qua2V5cyhyZXQpLnNvcnQoKSA6IE9iamVjdC5rZXlzKHJldCkuc29ydChvcHRpb25zLnNvcnQpKS5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiB7XG5cdFx0Y29uc3QgdmFsdWUgPSByZXRba2V5XTtcblx0XHRpZiAoQm9vbGVhbih2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdC8vIFNvcnQgb2JqZWN0IGtleXMsIG5vdCB2YWx1ZXNcblx0XHRcdHJlc3VsdFtrZXldID0ga2V5c1NvcnRlcih2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdFtrZXldID0gdmFsdWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG59XG5cbmV4cG9ydHMuZXh0cmFjdCA9IGV4dHJhY3Q7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5cbmV4cG9ydHMuc3RyaW5naWZ5ID0gKG9iamVjdCwgb3B0aW9ucykgPT4ge1xuXHRpZiAoIW9iamVjdCkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRlbmNvZGU6IHRydWUsXG5cdFx0c3RyaWN0OiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZScsXG5cdFx0YXJyYXlGb3JtYXRTZXBhcmF0b3I6ICcsJ1xuXHR9LCBvcHRpb25zKTtcblxuXHR2YWxpZGF0ZUFycmF5Rm9ybWF0U2VwYXJhdG9yKG9wdGlvbnMuYXJyYXlGb3JtYXRTZXBhcmF0b3IpO1xuXG5cdGNvbnN0IHNob3VsZEZpbHRlciA9IGtleSA9PiAoXG5cdFx0KG9wdGlvbnMuc2tpcE51bGwgJiYgaXNOdWxsT3JVbmRlZmluZWQob2JqZWN0W2tleV0pKSB8fFxuXHRcdChvcHRpb25zLnNraXBFbXB0eVN0cmluZyAmJiBvYmplY3Rba2V5XSA9PT0gJycpXG5cdCk7XG5cblx0Y29uc3QgZm9ybWF0dGVyID0gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpO1xuXG5cdGNvbnN0IG9iamVjdENvcHkgPSB7fTtcblxuXHRmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhvYmplY3QpKSB7XG5cdFx0aWYgKCFzaG91bGRGaWx0ZXIoa2V5KSkge1xuXHRcdFx0b2JqZWN0Q29weVtrZXldID0gb2JqZWN0W2tleV07XG5cdFx0fVxuXHR9XG5cblx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdENvcHkpO1xuXG5cdGlmIChvcHRpb25zLnNvcnQgIT09IGZhbHNlKSB7XG5cdFx0a2V5cy5zb3J0KG9wdGlvbnMuc29ydCk7XG5cdH1cblxuXHRyZXR1cm4ga2V5cy5tYXAoa2V5ID0+IHtcblx0XHRjb25zdCB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cblx0XHRpZiAodmFsdWUgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBlbmNvZGUoa2V5LCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdGlmICh2YWx1ZS5sZW5ndGggPT09IDAgJiYgb3B0aW9ucy5hcnJheUZvcm1hdCA9PT0gJ2JyYWNrZXQtc2VwYXJhdG9yJykge1xuXHRcdFx0XHRyZXR1cm4gZW5jb2RlKGtleSwgb3B0aW9ucykgKyAnW10nO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0LnJlZHVjZShmb3JtYXR0ZXIoa2V5KSwgW10pXG5cdFx0XHRcdC5qb2luKCcmJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVuY29kZShrZXksIG9wdGlvbnMpICsgJz0nICsgZW5jb2RlKHZhbHVlLCBvcHRpb25zKTtcblx0fSkuZmlsdGVyKHggPT4geC5sZW5ndGggPiAwKS5qb2luKCcmJyk7XG59O1xuXG5leHBvcnRzLnBhcnNlVXJsID0gKHVybCwgb3B0aW9ucykgPT4ge1xuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0ZGVjb2RlOiB0cnVlXG5cdH0sIG9wdGlvbnMpO1xuXG5cdGNvbnN0IFt1cmxfLCBoYXNoXSA9IHNwbGl0T25GaXJzdCh1cmwsICcjJyk7XG5cblx0cmV0dXJuIE9iamVjdC5hc3NpZ24oXG5cdFx0e1xuXHRcdFx0dXJsOiB1cmxfLnNwbGl0KCc/JylbMF0gfHwgJycsXG5cdFx0XHRxdWVyeTogcGFyc2UoZXh0cmFjdCh1cmwpLCBvcHRpb25zKVxuXHRcdH0sXG5cdFx0b3B0aW9ucyAmJiBvcHRpb25zLnBhcnNlRnJhZ21lbnRJZGVudGlmaWVyICYmIGhhc2ggPyB7ZnJhZ21lbnRJZGVudGlmaWVyOiBkZWNvZGUoaGFzaCwgb3B0aW9ucyl9IDoge31cblx0KTtcbn07XG5cbmV4cG9ydHMuc3RyaW5naWZ5VXJsID0gKG9iamVjdCwgb3B0aW9ucykgPT4ge1xuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0ZW5jb2RlOiB0cnVlLFxuXHRcdHN0cmljdDogdHJ1ZSxcblx0XHRbZW5jb2RlRnJhZ21lbnRJZGVudGlmaWVyXTogdHJ1ZVxuXHR9LCBvcHRpb25zKTtcblxuXHRjb25zdCB1cmwgPSByZW1vdmVIYXNoKG9iamVjdC51cmwpLnNwbGl0KCc/JylbMF0gfHwgJyc7XG5cdGNvbnN0IHF1ZXJ5RnJvbVVybCA9IGV4cG9ydHMuZXh0cmFjdChvYmplY3QudXJsKTtcblx0Y29uc3QgcGFyc2VkUXVlcnlGcm9tVXJsID0gZXhwb3J0cy5wYXJzZShxdWVyeUZyb21VcmwsIHtzb3J0OiBmYWxzZX0pO1xuXG5cdGNvbnN0IHF1ZXJ5ID0gT2JqZWN0LmFzc2lnbihwYXJzZWRRdWVyeUZyb21VcmwsIG9iamVjdC5xdWVyeSk7XG5cdGxldCBxdWVyeVN0cmluZyA9IGV4cG9ydHMuc3RyaW5naWZ5KHF1ZXJ5LCBvcHRpb25zKTtcblx0aWYgKHF1ZXJ5U3RyaW5nKSB7XG5cdFx0cXVlcnlTdHJpbmcgPSBgPyR7cXVlcnlTdHJpbmd9YDtcblx0fVxuXG5cdGxldCBoYXNoID0gZ2V0SGFzaChvYmplY3QudXJsKTtcblx0aWYgKG9iamVjdC5mcmFnbWVudElkZW50aWZpZXIpIHtcblx0XHRoYXNoID0gYCMke29wdGlvbnNbZW5jb2RlRnJhZ21lbnRJZGVudGlmaWVyXSA/IGVuY29kZShvYmplY3QuZnJhZ21lbnRJZGVudGlmaWVyLCBvcHRpb25zKSA6IG9iamVjdC5mcmFnbWVudElkZW50aWZpZXJ9YDtcblx0fVxuXG5cdHJldHVybiBgJHt1cmx9JHtxdWVyeVN0cmluZ30ke2hhc2h9YDtcbn07XG5cbmV4cG9ydHMucGljayA9IChpbnB1dCwgZmlsdGVyLCBvcHRpb25zKSA9PiB7XG5cdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRwYXJzZUZyYWdtZW50SWRlbnRpZmllcjogdHJ1ZSxcblx0XHRbZW5jb2RlRnJhZ21lbnRJZGVudGlmaWVyXTogZmFsc2Vcblx0fSwgb3B0aW9ucyk7XG5cblx0Y29uc3Qge3VybCwgcXVlcnksIGZyYWdtZW50SWRlbnRpZmllcn0gPSBleHBvcnRzLnBhcnNlVXJsKGlucHV0LCBvcHRpb25zKTtcblx0cmV0dXJuIGV4cG9ydHMuc3RyaW5naWZ5VXJsKHtcblx0XHR1cmwsXG5cdFx0cXVlcnk6IGZpbHRlck9iamVjdChxdWVyeSwgZmlsdGVyKSxcblx0XHRmcmFnbWVudElkZW50aWZpZXJcblx0fSwgb3B0aW9ucyk7XG59O1xuXG5leHBvcnRzLmV4Y2x1ZGUgPSAoaW5wdXQsIGZpbHRlciwgb3B0aW9ucykgPT4ge1xuXHRjb25zdCBleGNsdXNpb25GaWx0ZXIgPSBBcnJheS5pc0FycmF5KGZpbHRlcikgPyBrZXkgPT4gIWZpbHRlci5pbmNsdWRlcyhrZXkpIDogKGtleSwgdmFsdWUpID0+ICFmaWx0ZXIoa2V5LCB2YWx1ZSk7XG5cblx0cmV0dXJuIGV4cG9ydHMucGljayhpbnB1dCwgZXhjbHVzaW9uRmlsdGVyLCBvcHRpb25zKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9taXNjXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3RpbWVcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9ORV9USE9VU0FORCA9IGV4cG9ydHMuT05FX0hVTkRSRUQgPSB2b2lkIDA7XG5leHBvcnRzLk9ORV9IVU5EUkVEID0gMTAwO1xuZXhwb3J0cy5PTkVfVEhPVVNBTkQgPSAxMDAwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlzYy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT05FX1lFQVIgPSBleHBvcnRzLkZPVVJfV0VFS1MgPSBleHBvcnRzLlRIUkVFX1dFRUtTID0gZXhwb3J0cy5UV09fV0VFS1MgPSBleHBvcnRzLk9ORV9XRUVLID0gZXhwb3J0cy5USElSVFlfREFZUyA9IGV4cG9ydHMuU0VWRU5fREFZUyA9IGV4cG9ydHMuRklWRV9EQVlTID0gZXhwb3J0cy5USFJFRV9EQVlTID0gZXhwb3J0cy5PTkVfREFZID0gZXhwb3J0cy5UV0VOVFlfRk9VUl9IT1VSUyA9IGV4cG9ydHMuVFdFTFZFX0hPVVJTID0gZXhwb3J0cy5TSVhfSE9VUlMgPSBleHBvcnRzLlRIUkVFX0hPVVJTID0gZXhwb3J0cy5PTkVfSE9VUiA9IGV4cG9ydHMuU0lYVFlfTUlOVVRFUyA9IGV4cG9ydHMuVEhJUlRZX01JTlVURVMgPSBleHBvcnRzLlRFTl9NSU5VVEVTID0gZXhwb3J0cy5GSVZFX01JTlVURVMgPSBleHBvcnRzLk9ORV9NSU5VVEUgPSBleHBvcnRzLlNJWFRZX1NFQ09ORFMgPSBleHBvcnRzLlRISVJUWV9TRUNPTkRTID0gZXhwb3J0cy5URU5fU0VDT05EUyA9IGV4cG9ydHMuRklWRV9TRUNPTkRTID0gZXhwb3J0cy5PTkVfU0VDT05EID0gdm9pZCAwO1xuZXhwb3J0cy5PTkVfU0VDT05EID0gMTtcbmV4cG9ydHMuRklWRV9TRUNPTkRTID0gNTtcbmV4cG9ydHMuVEVOX1NFQ09ORFMgPSAxMDtcbmV4cG9ydHMuVEhJUlRZX1NFQ09ORFMgPSAzMDtcbmV4cG9ydHMuU0lYVFlfU0VDT05EUyA9IDYwO1xuZXhwb3J0cy5PTkVfTUlOVVRFID0gZXhwb3J0cy5TSVhUWV9TRUNPTkRTO1xuZXhwb3J0cy5GSVZFX01JTlVURVMgPSBleHBvcnRzLk9ORV9NSU5VVEUgKiA1O1xuZXhwb3J0cy5URU5fTUlOVVRFUyA9IGV4cG9ydHMuT05FX01JTlVURSAqIDEwO1xuZXhwb3J0cy5USElSVFlfTUlOVVRFUyA9IGV4cG9ydHMuT05FX01JTlVURSAqIDMwO1xuZXhwb3J0cy5TSVhUWV9NSU5VVEVTID0gZXhwb3J0cy5PTkVfTUlOVVRFICogNjA7XG5leHBvcnRzLk9ORV9IT1VSID0gZXhwb3J0cy5TSVhUWV9NSU5VVEVTO1xuZXhwb3J0cy5USFJFRV9IT1VSUyA9IGV4cG9ydHMuT05FX0hPVVIgKiAzO1xuZXhwb3J0cy5TSVhfSE9VUlMgPSBleHBvcnRzLk9ORV9IT1VSICogNjtcbmV4cG9ydHMuVFdFTFZFX0hPVVJTID0gZXhwb3J0cy5PTkVfSE9VUiAqIDEyO1xuZXhwb3J0cy5UV0VOVFlfRk9VUl9IT1VSUyA9IGV4cG9ydHMuT05FX0hPVVIgKiAyNDtcbmV4cG9ydHMuT05FX0RBWSA9IGV4cG9ydHMuVFdFTlRZX0ZPVVJfSE9VUlM7XG5leHBvcnRzLlRIUkVFX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiAzO1xuZXhwb3J0cy5GSVZFX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiA1O1xuZXhwb3J0cy5TRVZFTl9EQVlTID0gZXhwb3J0cy5PTkVfREFZICogNztcbmV4cG9ydHMuVEhJUlRZX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiAzMDtcbmV4cG9ydHMuT05FX1dFRUsgPSBleHBvcnRzLlNFVkVOX0RBWVM7XG5leHBvcnRzLlRXT19XRUVLUyA9IGV4cG9ydHMuT05FX1dFRUsgKiAyO1xuZXhwb3J0cy5USFJFRV9XRUVLUyA9IGV4cG9ydHMuT05FX1dFRUsgKiAzO1xuZXhwb3J0cy5GT1VSX1dFRUtTID0gZXhwb3J0cy5PTkVfV0VFSyAqIDQ7XG5leHBvcnRzLk9ORV9ZRUFSID0gZXhwb3J0cy5PTkVfREFZICogMzY1O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsc1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi93YXRjaFwiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25zdGFudHNcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vd2F0Y2hcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklXYXRjaCA9IHZvaWQgMDtcbmNsYXNzIElXYXRjaCB7XG59XG5leHBvcnRzLklXYXRjaCA9IElXYXRjaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhdGNoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tTWlsaXNlY29uZHMgPSBleHBvcnRzLnRvTWlsaXNlY29uZHMgPSB2b2lkIDA7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5mdW5jdGlvbiB0b01pbGlzZWNvbmRzKHNlY29uZHMpIHtcbiAgICByZXR1cm4gc2Vjb25kcyAqIGNvbnN0YW50c18xLk9ORV9USE9VU0FORDtcbn1cbmV4cG9ydHMudG9NaWxpc2Vjb25kcyA9IHRvTWlsaXNlY29uZHM7XG5mdW5jdGlvbiBmcm9tTWlsaXNlY29uZHMobWlsaXNlY29uZHMpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihtaWxpc2Vjb25kcyAvIGNvbnN0YW50c18xLk9ORV9USE9VU0FORCk7XG59XG5leHBvcnRzLmZyb21NaWxpc2Vjb25kcyA9IGZyb21NaWxpc2Vjb25kcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnZlcnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlbGF5ID0gdm9pZCAwO1xuZnVuY3Rpb24gZGVsYXkodGltZW91dCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVsYXkgPSBkZWxheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2RlbGF5XCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnZlcnRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldhdGNoID0gdm9pZCAwO1xuY2xhc3MgV2F0Y2gge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRpbWVzdGFtcHMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHN0YXJ0KGxhYmVsKSB7XG4gICAgICAgIGlmICh0aGlzLnRpbWVzdGFtcHMuaGFzKGxhYmVsKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXYXRjaCBhbHJlYWR5IHN0YXJ0ZWQgZm9yIGxhYmVsOiAke2xhYmVsfWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGltZXN0YW1wcy5zZXQobGFiZWwsIHsgc3RhcnRlZDogRGF0ZS5ub3coKSB9KTtcbiAgICB9XG4gICAgc3RvcChsYWJlbCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aGlzLmdldChsYWJlbCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGltZXN0YW1wLmVsYXBzZWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV2F0Y2ggYWxyZWFkeSBzdG9wcGVkIGZvciBsYWJlbDogJHtsYWJlbH1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbGFwc2VkID0gRGF0ZS5ub3coKSAtIHRpbWVzdGFtcC5zdGFydGVkO1xuICAgICAgICB0aGlzLnRpbWVzdGFtcHMuc2V0KGxhYmVsLCB7IHN0YXJ0ZWQ6IHRpbWVzdGFtcC5zdGFydGVkLCBlbGFwc2VkIH0pO1xuICAgIH1cbiAgICBnZXQobGFiZWwpIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy50aW1lc3RhbXBzLmdldChsYWJlbCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGltZXN0YW1wID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHRpbWVzdGFtcCBmb3VuZCBmb3IgbGFiZWw6ICR7bGFiZWx9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpbWVzdGFtcDtcbiAgICB9XG4gICAgZWxhcHNlZChsYWJlbCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aGlzLmdldChsYWJlbCk7XG4gICAgICAgIGNvbnN0IGVsYXBzZWQgPSB0aW1lc3RhbXAuZWxhcHNlZCB8fCBEYXRlLm5vdygpIC0gdGltZXN0YW1wLnN0YXJ0ZWQ7XG4gICAgICAgIHJldHVybiBlbGFwc2VkO1xuICAgIH1cbn1cbmV4cG9ydHMuV2F0Y2ggPSBXYXRjaDtcbmV4cG9ydHMuZGVmYXVsdCA9IFdhdGNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2F0Y2guanMubWFwIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxuY29uc3QgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxuY29uc3QgY3VzdG9tSW5zcGVjdFN5bWJvbCA9XG4gICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2xbJ2ZvciddID09PSAnZnVuY3Rpb24nKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgID8gU3ltYm9sWydmb3InXSgnbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIDogbnVsbFxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbmNvbnN0IEtfTUFYX0xFTkdUSCA9IDB4N2ZmZmZmZmZcbmV4cG9ydHMua01heExlbmd0aCA9IEtfTUFYX0xFTkdUSFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBQcmludCB3YXJuaW5nIGFuZCByZWNvbW1lbmQgdXNpbmcgYGJ1ZmZlcmAgdjQueCB3aGljaCBoYXMgYW4gT2JqZWN0XG4gKiAgICAgICAgICAgICAgIGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBXZSByZXBvcnQgdGhhdCB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBpZiB0aGUgYXJlIG5vdCBzdWJjbGFzc2FibGVcbiAqIHVzaW5nIF9fcHJvdG9fXy4gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWBcbiAqIChTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOCkuIElFIDEwIGxhY2tzIHN1cHBvcnRcbiAqIGZvciBfX3Byb3RvX18gYW5kIGhhcyBhIGJ1Z2d5IHR5cGVkIGFycmF5IGltcGxlbWVudGF0aW9uLlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICBjb25zb2xlLmVycm9yKFxuICAgICdUaGlzIGJyb3dzZXIgbGFja3MgdHlwZWQgYXJyYXkgKFVpbnQ4QXJyYXkpIHN1cHBvcnQgd2hpY2ggaXMgcmVxdWlyZWQgYnkgJyArXG4gICAgJ2BidWZmZXJgIHY1LnguIFVzZSBgYnVmZmVyYCB2NC54IGlmIHlvdSByZXF1aXJlIG9sZCBicm93c2VyIHN1cHBvcnQuJ1xuICApXG59XG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgLy8gQ2FuIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkP1xuICB0cnkge1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgY29uc3QgcHJvdG8gPSB7IGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfSB9XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHByb3RvLCBVaW50OEFycmF5LnByb3RvdHlwZSlcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYXJyLCBwcm90bylcbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MlxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdwYXJlbnQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyXG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAnb2Zmc2V0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ5dGVPZmZzZXRcbiAgfVxufSlcblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgbGVuZ3RoICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuICByZXR1cm4gYnVmXG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUoYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuZnVuY3Rpb24gZnJvbSAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5Vmlldyh2YWx1ZSlcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCAnICtcbiAgICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgICApXG4gIH1cblxuICBpZiAoaXNJbnN0YW5jZSh2YWx1ZSwgQXJyYXlCdWZmZXIpIHx8XG4gICAgICAodmFsdWUgJiYgaXNJbnN0YW5jZSh2YWx1ZS5idWZmZXIsIEFycmF5QnVmZmVyKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgKGlzSW5zdGFuY2UodmFsdWUsIFNoYXJlZEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBTaGFyZWRBcnJheUJ1ZmZlcikpKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICApXG4gIH1cblxuICBjb25zdCB2YWx1ZU9mID0gdmFsdWUudmFsdWVPZiAmJiB2YWx1ZS52YWx1ZU9mKClcbiAgaWYgKHZhbHVlT2YgIT0gbnVsbCAmJiB2YWx1ZU9mICE9PSB2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZU9mLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBjb25zdCBiID0gZnJvbU9iamVjdCh2YWx1ZSlcbiAgaWYgKGIpIHJldHVybiBiXG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1ByaW1pdGl2ZSAhPSBudWxsICYmXG4gICAgICB0eXBlb2YgdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdKCdzdHJpbmcnKSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICApXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gTm90ZTogQ2hhbmdlIHByb3RvdHlwZSAqYWZ0ZXIqIEJ1ZmZlci5mcm9tIGlzIGRlZmluZWQgdG8gd29ya2Fyb3VuZCBDaHJvbWUgYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC8xNDhcbk9iamVjdC5zZXRQcm90b3R5cGVPZihCdWZmZXIucHJvdG90eXBlLCBVaW50OEFycmF5LnByb3RvdHlwZSlcbk9iamVjdC5zZXRQcm90b3R5cGVPZihCdWZmZXIsIFVpbnQ4QXJyYXkpXG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBzaXplICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlIChzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgfVxuXG4gIGNvbnN0IGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIGxldCBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuXG4gIGNvbnN0IGFjdHVhbCA9IGJ1Zi53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgYnVmID0gYnVmLnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAoYXJyYXkpIHtcbiAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIGNvbnN0IGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICBidWZbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5VmlldyAoYXJyYXlWaWV3KSB7XG4gIGlmIChpc0luc3RhbmNlKGFycmF5VmlldywgVWludDhBcnJheSkpIHtcbiAgICBjb25zdCBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlWaWV3KVxuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIoY29weS5idWZmZXIsIGNvcHkuYnl0ZU9mZnNldCwgY29weS5ieXRlTGVuZ3RoKVxuICB9XG4gIHJldHVybiBmcm9tQXJyYXlMaWtlKGFycmF5Vmlldylcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyIChhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcIm9mZnNldFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGxldCBidWZcbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihidWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0IChvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgY29uc3QgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICBjb25zdCBidWYgPSBjcmVhdGVCdWZmZXIobGVuKVxuXG4gICAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBidWZcbiAgICB9XG5cbiAgICBvYmouY29weShidWYsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gYnVmXG4gIH1cblxuICBpZiAob2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBudW1iZXJJc05hTihvYmoubGVuZ3RoKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcigwKVxuICAgIH1cbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmopXG4gIH1cblxuICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIEFycmF5LmlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqLmRhdGEpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IEtfTUFYX0xFTkdUSGAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsgS19NQVhfTEVOR1RILnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyID09PSB0cnVlICYmXG4gICAgYiAhPT0gQnVmZmVyLnByb3RvdHlwZSAvLyBzbyBCdWZmZXIuaXNCdWZmZXIoQnVmZmVyLnByb3RvdHlwZSkgd2lsbCBiZSBmYWxzZVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKGlzSW5zdGFuY2UoYSwgVWludDhBcnJheSkpIGEgPSBCdWZmZXIuZnJvbShhLCBhLm9mZnNldCwgYS5ieXRlTGVuZ3RoKVxuICBpZiAoaXNJbnN0YW5jZShiLCBVaW50OEFycmF5KSkgYiA9IEJ1ZmZlci5mcm9tKGIsIGIub2Zmc2V0LCBiLmJ5dGVMZW5ndGgpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcImJ1ZjFcIiwgXCJidWYyXCIgYXJndW1lbnRzIG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXknXG4gICAgKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgbGV0IHggPSBhLmxlbmd0aFxuICBsZXQgeSA9IGIubGVuZ3RoXG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICBsZXQgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIGxldCBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoaXNJbnN0YW5jZShidWYsIFVpbnQ4QXJyYXkpKSB7XG4gICAgICBpZiAocG9zICsgYnVmLmxlbmd0aCA+IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgYnVmID0gQnVmZmVyLmZyb20oYnVmKVxuICAgICAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgICAgIGJ1ZmZlcixcbiAgICAgICAgICBidWYsXG4gICAgICAgICAgcG9zXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgfVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IGlzSW5zdGFuY2Uoc3RyaW5nLCBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIG9yIEFycmF5QnVmZmVyLiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2Ygc3RyaW5nXG4gICAgKVxuICB9XG5cbiAgY29uc3QgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBjb25zdCBtdXN0TWF0Y2ggPSAoYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdID09PSB0cnVlKVxuICBpZiAoIW11c3RNYXRjaCAmJiBsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHtcbiAgICAgICAgICByZXR1cm4gbXVzdE1hdGNoID8gLTEgOiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICB9XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcmNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIChhbmQgdGhlIGBpcy1idWZmZXJgIG5wbSBwYWNrYWdlKVxuLy8gdG8gZGV0ZWN0IGEgQnVmZmVyIGluc3RhbmNlLiBJdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgYGluc3RhbmNlb2YgQnVmZmVyYFxuLy8gcmVsaWFibHkgaW4gYSBicm93c2VyaWZ5IGNvbnRleHQgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZSBkaWZmZXJlbnRcbi8vIGNvcGllcyBvZiB0aGUgJ2J1ZmZlcicgcGFja2FnZSBpbiB1c2UuIFRoaXMgbWV0aG9kIHdvcmtzIGV2ZW4gZm9yIEJ1ZmZlclxuLy8gaW5zdGFuY2VzIHRoYXQgd2VyZSBjcmVhdGVkIGZyb20gYW5vdGhlciBjb3B5IG9mIHRoZSBgYnVmZmVyYCBwYWNrYWdlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTU0XG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICBjb25zdCBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICBjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZyA9IEJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmdcblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICBsZXQgc3RyID0gJydcbiAgY29uc3QgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLnJlcGxhY2UoLyguezJ9KS9nLCAnJDEgJykudHJpbSgpXG4gIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cbmlmIChjdXN0b21JbnNwZWN0U3ltYm9sKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGVbY3VzdG9tSW5zcGVjdFN5bWJvbF0gPSBCdWZmZXIucHJvdG90eXBlLmluc3BlY3Rcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKGlzSW5zdGFuY2UodGFyZ2V0LCBVaW50OEFycmF5KSkge1xuICAgIHRhcmdldCA9IEJ1ZmZlci5mcm9tKHRhcmdldCwgdGFyZ2V0Lm9mZnNldCwgdGFyZ2V0LmJ5dGVMZW5ndGgpXG4gIH1cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidGFyZ2V0XCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheS4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB0YXJnZXQpXG4gICAgKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgbGV0IHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIGxldCB5ID0gZW5kIC0gc3RhcnRcbiAgY29uc3QgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICBjb25zdCB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICBjb25zdCB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAobnVtYmVySXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmICh0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbdmFsXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgbGV0IGluZGV4U2l6ZSA9IDFcbiAgbGV0IGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgbGV0IHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgbGV0IGlcbiAgaWYgKGRpcikge1xuICAgIGxldCBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGxldCBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgY29uc3QgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGxldCBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAobnVtYmVySXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA+Pj4gMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICBjb25zdCByZXMgPSBbXVxuXG4gIGxldCBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICBjb25zdCBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICBsZXQgY29kZVBvaW50ID0gbnVsbFxuICAgIGxldCBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpXG4gICAgICA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpXG4gICAgICAgICAgPyAzXG4gICAgICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRilcbiAgICAgICAgICAgICAgPyAyXG4gICAgICAgICAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgbGV0IHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxuY29uc3QgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIGNvbnN0IGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgbGV0IHJlcyA9ICcnXG4gIGxldCBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBsZXQgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIGxldCBvdXQgPSAnJ1xuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSBoZXhTbGljZUxvb2t1cFRhYmxlW2J1ZltpXV1cbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIGxldCByZXMgPSAnJ1xuICAvLyBJZiBieXRlcy5sZW5ndGggaXMgb2RkLCB0aGUgbGFzdCA4IGJpdHMgbXVzdCBiZSBpZ25vcmVkIChzYW1lIGFzIG5vZGUuanMpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoIC0gMTsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyAoYnl0ZXNbaSArIDFdICogMjU2KSlcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIGNvbnN0IG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG5ld0J1ZiwgQnVmZmVyLnByb3RvdHlwZSlcblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXRdXG4gIGxldCBtdWwgPSAxXG4gIGxldCBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnRCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgbGV0IG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50OCA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQxNkJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyTEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MzJCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdVSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnVUludDY0TEUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCBsbyA9IGZpcnN0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjRcblxuICBjb25zdCBoaSA9IHRoaXNbKytvZmZzZXRdICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICBsYXN0ICogMiAqKiAyNFxuXG4gIHJldHVybiBCaWdJbnQobG8pICsgKEJpZ0ludChoaSkgPDwgQmlnSW50KDMyKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ1VJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdVSW50NjRCRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IGhpID0gZmlyc3QgKiAyICoqIDI0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XVxuXG4gIGNvbnN0IGxvID0gdGhpc1srK29mZnNldF0gKiAyICoqIDI0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICBsYXN0XG5cbiAgcmV0dXJuIChCaWdJbnQoaGkpIDw8IEJpZ0ludCgzMikpICsgQmlnSW50KGxvKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0XVxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aFxuICBsZXQgbXVsID0gMVxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgY29uc3QgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdJbnQ2NExFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgdmFsID0gdGhpc1tvZmZzZXQgKyA0XSArXG4gICAgdGhpc1tvZmZzZXQgKyA1XSAqIDIgKiogOCArXG4gICAgdGhpc1tvZmZzZXQgKyA2XSAqIDIgKiogMTYgK1xuICAgIChsYXN0IDw8IDI0KSAvLyBPdmVyZmxvd1xuXG4gIHJldHVybiAoQmlnSW50KHZhbCkgPDwgQmlnSW50KDMyKSkgK1xuICAgIEJpZ0ludChmaXJzdCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDI0KVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnSW50NjRCRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IHZhbCA9IChmaXJzdCA8PCAyNCkgKyAvLyBPdmVyZmxvd1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdXG5cbiAgcmV0dXJuIChCaWdJbnQodmFsKSA8PCBCaWdJbnQoMzIpKSArXG4gICAgQmlnSW50KHRoaXNbKytvZmZzZXRdICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgbGFzdClcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIGxldCBtdWwgPSAxXG4gIGxldCBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoIC0gMVxuICBsZXQgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQ4ID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQxNkJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MzJMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gd3J0QmlnVUludDY0TEUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbWluLCBtYXgpIHtcbiAgY2hlY2tJbnRCSSh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCA3KVxuXG4gIGxldCBsbyA9IE51bWJlcih2YWx1ZSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxldCBoaSA9IE51bWJlcih2YWx1ZSA+PiBCaWdJbnQoMzIpICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgcmV0dXJuIG9mZnNldFxufVxuXG5mdW5jdGlvbiB3cnRCaWdVSW50NjRCRSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBtaW4sIG1heCkge1xuICBjaGVja0ludEJJKHZhbHVlLCBtaW4sIG1heCwgYnVmLCBvZmZzZXQsIDcpXG5cbiAgbGV0IGxvID0gTnVtYmVyKHZhbHVlICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0ICsgN10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDZdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA1XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNF0gPSBsb1xuICBsZXQgaGkgPSBOdW1iZXIodmFsdWUgPj4gQmlnSW50KDMyKSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCArIDNdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQgKyAyXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0ICsgMV0gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldF0gPSBoaVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnVUludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdVSW50NjRMRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NExFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIEJpZ0ludCgwKSwgQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdVSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ1VJbnQ2NEJFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0QkUodGhpcywgdmFsdWUsIG9mZnNldCwgQmlnSW50KDApLCBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICBsZXQgaSA9IDBcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICBsZXQgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIGxldCBtdWwgPSAxXG4gIGxldCBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ0ludDY0TEUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRMRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAtQmlnSW50KCcweDgwMDAwMDAwMDAwMDAwMDAnKSwgQmlnSW50KCcweDdmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnSW50NjRCRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NEJFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIC1CaWdJbnQoJzB4ODAwMDAwMDAwMDAwMDAwMCcpLCBCaWdJbnQoJzB4N2ZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc2hvdWxkIGJlIGEgQnVmZmVyJylcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFVzZSBidWlsdC1pbiB3aGVuIGF2YWlsYWJsZSwgbWlzc2luZyBmcm9tIElFMTFcbiAgICB0aGlzLmNvcHlXaXRoaW4odGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpXG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoKGVuY29kaW5nID09PSAndXRmOCcgJiYgY29kZSA8IDEyOCkgfHxcbiAgICAgICAgICBlbmNvZGluZyA9PT0gJ2xhdGluMScpIHtcbiAgICAgICAgLy8gRmFzdCBwYXRoOiBJZiBgdmFsYCBmaXRzIGludG8gYSBzaW5nbGUgYnl0ZSwgdXNlIHRoYXQgbnVtZXJpYyB2YWx1ZS5cbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdib29sZWFuJykge1xuICAgIHZhbCA9IE51bWJlcih2YWwpXG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgbGV0IGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICAgIGNvbnN0IGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyB2YWwgK1xuICAgICAgICAnXCIgaXMgaW52YWxpZCBmb3IgYXJndW1lbnQgXCJ2YWx1ZVwiJylcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gQ1VTVE9NIEVSUk9SU1xuLy8gPT09PT09PT09PT09PVxuXG4vLyBTaW1wbGlmaWVkIHZlcnNpb25zIGZyb20gTm9kZSwgY2hhbmdlZCBmb3IgQnVmZmVyLW9ubHkgdXNhZ2VcbmNvbnN0IGVycm9ycyA9IHt9XG5mdW5jdGlvbiBFIChzeW0sIGdldE1lc3NhZ2UsIEJhc2UpIHtcbiAgZXJyb3JzW3N5bV0gPSBjbGFzcyBOb2RlRXJyb3IgZXh0ZW5kcyBCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICBzdXBlcigpXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbWVzc2FnZScsIHtcbiAgICAgICAgdmFsdWU6IGdldE1lc3NhZ2UuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfSlcblxuICAgICAgLy8gQWRkIHRoZSBlcnJvciBjb2RlIHRvIHRoZSBuYW1lIHRvIGluY2x1ZGUgaXQgaW4gdGhlIHN0YWNrIHRyYWNlLlxuICAgICAgdGhpcy5uYW1lID0gYCR7dGhpcy5uYW1lfSBbJHtzeW19XWBcbiAgICAgIC8vIEFjY2VzcyB0aGUgc3RhY2sgdG8gZ2VuZXJhdGUgdGhlIGVycm9yIG1lc3NhZ2UgaW5jbHVkaW5nIHRoZSBlcnJvciBjb2RlXG4gICAgICAvLyBmcm9tIHRoZSBuYW1lLlxuICAgICAgdGhpcy5zdGFjayAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuICAgICAgLy8gUmVzZXQgdGhlIG5hbWUgdG8gdGhlIGFjdHVhbCBuYW1lLlxuICAgICAgZGVsZXRlIHRoaXMubmFtZVxuICAgIH1cblxuICAgIGdldCBjb2RlICgpIHtcbiAgICAgIHJldHVybiBzeW1cbiAgICB9XG5cbiAgICBzZXQgY29kZSAodmFsdWUpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY29kZScsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdG9TdHJpbmcgKCkge1xuICAgICAgcmV0dXJuIGAke3RoaXMubmFtZX0gWyR7c3ltfV06ICR7dGhpcy5tZXNzYWdlfWBcbiAgICB9XG4gIH1cbn1cblxuRSgnRVJSX0JVRkZFUl9PVVRfT0ZfQk9VTkRTJyxcbiAgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuIGAke25hbWV9IGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kc2BcbiAgICB9XG5cbiAgICByZXR1cm4gJ0F0dGVtcHQgdG8gYWNjZXNzIG1lbW9yeSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnXG4gIH0sIFJhbmdlRXJyb3IpXG5FKCdFUlJfSU5WQUxJRF9BUkdfVFlQRScsXG4gIGZ1bmN0aW9uIChuYW1lLCBhY3R1YWwpIHtcbiAgICByZXR1cm4gYFRoZSBcIiR7bmFtZX1cIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlICR7dHlwZW9mIGFjdHVhbH1gXG4gIH0sIFR5cGVFcnJvcilcbkUoJ0VSUl9PVVRfT0ZfUkFOR0UnLFxuICBmdW5jdGlvbiAoc3RyLCByYW5nZSwgaW5wdXQpIHtcbiAgICBsZXQgbXNnID0gYFRoZSB2YWx1ZSBvZiBcIiR7c3RyfVwiIGlzIG91dCBvZiByYW5nZS5gXG4gICAgbGV0IHJlY2VpdmVkID0gaW5wdXRcbiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihpbnB1dCkgJiYgTWF0aC5hYnMoaW5wdXQpID4gMiAqKiAzMikge1xuICAgICAgcmVjZWl2ZWQgPSBhZGROdW1lcmljYWxTZXBhcmF0b3IoU3RyaW5nKGlucHV0KSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgIHJlY2VpdmVkID0gU3RyaW5nKGlucHV0KVxuICAgICAgaWYgKGlucHV0ID4gQmlnSW50KDIpICoqIEJpZ0ludCgzMikgfHwgaW5wdXQgPCAtKEJpZ0ludCgyKSAqKiBCaWdJbnQoMzIpKSkge1xuICAgICAgICByZWNlaXZlZCA9IGFkZE51bWVyaWNhbFNlcGFyYXRvcihyZWNlaXZlZClcbiAgICAgIH1cbiAgICAgIHJlY2VpdmVkICs9ICduJ1xuICAgIH1cbiAgICBtc2cgKz0gYCBJdCBtdXN0IGJlICR7cmFuZ2V9LiBSZWNlaXZlZCAke3JlY2VpdmVkfWBcbiAgICByZXR1cm4gbXNnXG4gIH0sIFJhbmdlRXJyb3IpXG5cbmZ1bmN0aW9uIGFkZE51bWVyaWNhbFNlcGFyYXRvciAodmFsKSB7XG4gIGxldCByZXMgPSAnJ1xuICBsZXQgaSA9IHZhbC5sZW5ndGhcbiAgY29uc3Qgc3RhcnQgPSB2YWxbMF0gPT09ICctJyA/IDEgOiAwXG4gIGZvciAoOyBpID49IHN0YXJ0ICsgNDsgaSAtPSAzKSB7XG4gICAgcmVzID0gYF8ke3ZhbC5zbGljZShpIC0gMywgaSl9JHtyZXN9YFxuICB9XG4gIHJldHVybiBgJHt2YWwuc2xpY2UoMCwgaSl9JHtyZXN9YFxufVxuXG4vLyBDSEVDSyBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBjaGVja0JvdW5kcyAoYnVmLCBvZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgaWYgKGJ1ZltvZmZzZXRdID09PSB1bmRlZmluZWQgfHwgYnVmW29mZnNldCArIGJ5dGVMZW5ndGhdID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIGJ1Zi5sZW5ndGggLSAoYnl0ZUxlbmd0aCArIDEpKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50QkkgKHZhbHVlLCBtaW4sIG1heCwgYnVmLCBvZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB7XG4gICAgY29uc3QgbiA9IHR5cGVvZiBtaW4gPT09ICdiaWdpbnQnID8gJ24nIDogJydcbiAgICBsZXQgcmFuZ2VcbiAgICBpZiAoYnl0ZUxlbmd0aCA+IDMpIHtcbiAgICAgIGlmIChtaW4gPT09IDAgfHwgbWluID09PSBCaWdJbnQoMCkpIHtcbiAgICAgICAgcmFuZ2UgPSBgPj0gMCR7bn0gYW5kIDwgMiR7bn0gKiogJHsoYnl0ZUxlbmd0aCArIDEpICogOH0ke259YFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmFuZ2UgPSBgPj0gLSgyJHtufSAqKiAkeyhieXRlTGVuZ3RoICsgMSkgKiA4IC0gMX0ke259KSBhbmQgPCAyICoqIGAgK1xuICAgICAgICAgICAgICAgIGAkeyhieXRlTGVuZ3RoICsgMSkgKiA4IC0gMX0ke259YFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByYW5nZSA9IGA+PSAke21pbn0ke259IGFuZCA8PSAke21heH0ke259YFxuICAgIH1cbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UoJ3ZhbHVlJywgcmFuZ2UsIHZhbHVlKVxuICB9XG4gIGNoZWNrQm91bmRzKGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU51bWJlciAodmFsdWUsIG5hbWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9JTlZBTElEX0FSR19UWVBFKG5hbWUsICdudW1iZXInLCB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBib3VuZHNFcnJvciAodmFsdWUsIGxlbmd0aCwgdHlwZSkge1xuICBpZiAoTWF0aC5mbG9vcih2YWx1ZSkgIT09IHZhbHVlKSB7XG4gICAgdmFsaWRhdGVOdW1iZXIodmFsdWUsIHR5cGUpXG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKHR5cGUgfHwgJ29mZnNldCcsICdhbiBpbnRlZ2VyJywgdmFsdWUpXG4gIH1cblxuICBpZiAobGVuZ3RoIDwgMCkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX0JVRkZFUl9PVVRfT0ZfQk9VTkRTKClcbiAgfVxuXG4gIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSh0eXBlIHx8ICdvZmZzZXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYD49ICR7dHlwZSA/IDEgOiAwfSBhbmQgPD0gJHtsZW5ndGh9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlKVxufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbmNvbnN0IElOVkFMSURfQkFTRTY0X1JFID0gL1teKy8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgdGFrZXMgZXF1YWwgc2lnbnMgYXMgZW5kIG9mIHRoZSBCYXNlNjQgZW5jb2RpbmdcbiAgc3RyID0gc3RyLnNwbGl0KCc9JylbMF1cbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0ci50cmltKCkucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICBsZXQgY29kZVBvaW50XG4gIGNvbnN0IGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgbGV0IGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIGNvbnN0IGJ5dGVzID0gW11cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgY29uc3QgYnl0ZUFycmF5ID0gW11cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICBsZXQgYywgaGksIGxvXG4gIGNvbnN0IGJ5dGVBcnJheSA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgbGV0IGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbi8vIEFycmF5QnVmZmVyIG9yIFVpbnQ4QXJyYXkgb2JqZWN0cyBmcm9tIG90aGVyIGNvbnRleHRzIChpLmUuIGlmcmFtZXMpIGRvIG5vdCBwYXNzXG4vLyB0aGUgYGluc3RhbmNlb2ZgIGNoZWNrIGJ1dCB0aGV5IHNob3VsZCBiZSB0cmVhdGVkIGFzIG9mIHRoYXQgdHlwZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE2NlxuZnVuY3Rpb24gaXNJbnN0YW5jZSAob2JqLCB0eXBlKSB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiB0eXBlIHx8XG4gICAgKG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lICE9IG51bGwgJiZcbiAgICAgIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSB0eXBlLm5hbWUpXG59XG5mdW5jdGlvbiBudW1iZXJJc05hTiAob2JqKSB7XG4gIC8vIEZvciBJRTExIHN1cHBvcnRcbiAgcmV0dXJuIG9iaiAhPT0gb2JqIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG5cbi8vIENyZWF0ZSBsb29rdXAgdGFibGUgZm9yIGB0b1N0cmluZygnaGV4JylgXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8yMTlcbmNvbnN0IGhleFNsaWNlTG9va3VwVGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5YWJjZGVmJ1xuICBjb25zdCB0YWJsZSA9IG5ldyBBcnJheSgyNTYpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgIGNvbnN0IGkxNiA9IGkgKiAxNlxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTY7ICsraikge1xuICAgICAgdGFibGVbaTE2ICsgal0gPSBhbHBoYWJldFtpXSArIGFscGhhYmV0W2pdXG4gICAgfVxuICB9XG4gIHJldHVybiB0YWJsZVxufSkoKVxuXG4vLyBSZXR1cm4gbm90IGZ1bmN0aW9uIHdpdGggRXJyb3IgaWYgQmlnSW50IG5vdCBzdXBwb3J0ZWRcbmZ1bmN0aW9uIGRlZmluZUJpZ0ludE1ldGhvZCAoZm4pIHtcbiAgcmV0dXJuIHR5cGVvZiBCaWdJbnQgPT09ICd1bmRlZmluZWQnID8gQnVmZmVyQmlnSW50Tm90RGVmaW5lZCA6IGZuXG59XG5cbmZ1bmN0aW9uIEJ1ZmZlckJpZ0ludE5vdERlZmluZWQgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0JpZ0ludCBub3Qgc3VwcG9ydGVkJylcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b2tlbiA9ICclW2EtZjAtOV17Mn0nO1xudmFyIHNpbmdsZU1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoJyArIHRva2VuICsgJyl8KFteJV0rPyknLCAnZ2knKTtcbnZhciBtdWx0aU1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoJyArIHRva2VuICsgJykrJywgJ2dpJyk7XG5cbmZ1bmN0aW9uIGRlY29kZUNvbXBvbmVudHMoY29tcG9uZW50cywgc3BsaXQpIHtcblx0dHJ5IHtcblx0XHQvLyBUcnkgdG8gZGVjb2RlIHRoZSBlbnRpcmUgc3RyaW5nIGZpcnN0XG5cdFx0cmV0dXJuIFtkZWNvZGVVUklDb21wb25lbnQoY29tcG9uZW50cy5qb2luKCcnKSldO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBEbyBub3RoaW5nXG5cdH1cblxuXHRpZiAoY29tcG9uZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRyZXR1cm4gY29tcG9uZW50cztcblx0fVxuXG5cdHNwbGl0ID0gc3BsaXQgfHwgMTtcblxuXHQvLyBTcGxpdCB0aGUgYXJyYXkgaW4gMiBwYXJ0c1xuXHR2YXIgbGVmdCA9IGNvbXBvbmVudHMuc2xpY2UoMCwgc3BsaXQpO1xuXHR2YXIgcmlnaHQgPSBjb21wb25lbnRzLnNsaWNlKHNwbGl0KTtcblxuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKFtdLCBkZWNvZGVDb21wb25lbnRzKGxlZnQpLCBkZWNvZGVDb21wb25lbnRzKHJpZ2h0KSk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHR2YXIgdG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcikgfHwgW107XG5cblx0XHRmb3IgKHZhciBpID0gMTsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aW5wdXQgPSBkZWNvZGVDb21wb25lbnRzKHRva2VucywgaSkuam9pbignJyk7XG5cblx0XHRcdHRva2VucyA9IGlucHV0Lm1hdGNoKHNpbmdsZU1hdGNoZXIpIHx8IFtdO1xuXHRcdH1cblxuXHRcdHJldHVybiBpbnB1dDtcblx0fVxufVxuXG5mdW5jdGlvbiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoaW5wdXQpIHtcblx0Ly8gS2VlcCB0cmFjayBvZiBhbGwgdGhlIHJlcGxhY2VtZW50cyBhbmQgcHJlZmlsbCB0aGUgbWFwIHdpdGggdGhlIGBCT01gXG5cdHZhciByZXBsYWNlTWFwID0ge1xuXHRcdCclRkUlRkYnOiAnXFx1RkZGRFxcdUZGRkQnLFxuXHRcdCclRkYlRkUnOiAnXFx1RkZGRFxcdUZGRkQnXG5cdH07XG5cblx0dmFyIG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR3aGlsZSAobWF0Y2gpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gRGVjb2RlIGFzIGJpZyBjaHVua3MgYXMgcG9zc2libGVcblx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzBdKTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHZhciByZXN1bHQgPSBkZWNvZGUobWF0Y2hbMF0pO1xuXG5cdFx0XHRpZiAocmVzdWx0ICE9PSBtYXRjaFswXSkge1xuXHRcdFx0XHRyZXBsYWNlTWFwW21hdGNoWzBdXSA9IHJlc3VsdDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtYXRjaCA9IG11bHRpTWF0Y2hlci5leGVjKGlucHV0KTtcblx0fVxuXG5cdC8vIEFkZCBgJUMyYCBhdCB0aGUgZW5kIG9mIHRoZSBtYXAgdG8gbWFrZSBzdXJlIGl0IGRvZXMgbm90IHJlcGxhY2UgdGhlIGNvbWJpbmF0b3IgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZVxuXHRyZXBsYWNlTWFwWyclQzInXSA9ICdcXHVGRkZEJztcblxuXHR2YXIgZW50cmllcyA9IE9iamVjdC5rZXlzKHJlcGxhY2VNYXApO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuXHRcdC8vIFJlcGxhY2UgYWxsIGRlY29kZWQgY29tcG9uZW50c1xuXHRcdHZhciBrZXkgPSBlbnRyaWVzW2ldO1xuXHRcdGlucHV0ID0gaW5wdXQucmVwbGFjZShuZXcgUmVnRXhwKGtleSwgJ2cnKSwgcmVwbGFjZU1hcFtrZXldKTtcblx0fVxuXG5cdHJldHVybiBpbnB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZW5jb2RlZFVSSSkge1xuXHRpZiAodHlwZW9mIGVuY29kZWRVUkkgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYGVuY29kZWRVUklgIHRvIGJlIG9mIHR5cGUgYHN0cmluZ2AsIGdvdCBgJyArIHR5cGVvZiBlbmNvZGVkVVJJICsgJ2AnKTtcblx0fVxuXG5cdHRyeSB7XG5cdFx0ZW5jb2RlZFVSSSA9IGVuY29kZWRVUkkucmVwbGFjZSgvXFwrL2csICcgJyk7XG5cblx0XHQvLyBUcnkgdGhlIGJ1aWx0IGluIGRlY29kZXIgZmlyc3Rcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZWRVUkkpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBGYWxsYmFjayB0byBhIG1vcmUgYWR2YW5jZWQgZGVjb2RlclxuXHRcdHJldHVybiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH1cbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmdW5jdGlvbiBlcnJvckxpc3RlbmVyKGVycikge1xuICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH07XG5cbiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgcmVzb2x2ZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgZXJyb3JMaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCAnZXJyb3InLCBoYW5kbGVyLCBmbGFncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIub24gPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdHRlci5vbihuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBFdmVudFRhcmdldCBkb2VzIG5vdCBoYXZlIGBlcnJvcmAgZXZlbnQgc2VtYW50aWNzIGxpa2UgTm9kZVxuICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZ1bmN0aW9uIHdyYXBMaXN0ZW5lcihhcmcpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYnVpbHRpbiBgeyBvbmNlOiB0cnVlIH1gIHN1cHBvcnQgc28gd2VcbiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuXG4gICAgICBpZiAoZmxhZ3Mub25jZSkge1xuICAgICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgd3JhcExpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGxpc3RlbmVyKGFyZyk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqLCBwcmVkaWNhdGUpIHtcblx0dmFyIHJldCA9IHt9O1xuXHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG5cdHZhciBpc0FyciA9IEFycmF5LmlzQXJyYXkocHJlZGljYXRlKTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIga2V5ID0ga2V5c1tpXTtcblx0XHR2YXIgdmFsID0gb2JqW2tleV07XG5cblx0XHRpZiAoaXNBcnIgPyBwcmVkaWNhdGUuaW5kZXhPZihrZXkpICE9PSAtMSA6IHByZWRpY2F0ZShrZXksIHZhbCwgb2JqKSkge1xuXHRcdFx0cmV0W2tleV0gPSB2YWw7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG4iLCIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiLyoqXG4gKiBMb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanMuZm91bmRhdGlvbi8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgU3ltYm9sID0gcm9vdC5TeW1ib2wsXG4gICAgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheSxcbiAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLFxuICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKSxcbiAgICBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKSxcbiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLFxuICAgIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8IHJlSXNVaW50LnRlc3QodmFsdWUpKSAmJlxuICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbi8qKlxuICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICogZXF1aXZhbGVudC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogb2JqZWN0ID09PSBvdGhlcjtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXF1YWw7XG4iLCIndXNlIHN0cmljdCdcbmZ1bmN0aW9uIHRyeVN0cmluZ2lmeSAobykge1xuICB0cnkgeyByZXR1cm4gSlNPTi5zdHJpbmdpZnkobykgfSBjYXRjaChlKSB7IHJldHVybiAnXCJbQ2lyY3VsYXJdXCInIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JtYXRcblxuZnVuY3Rpb24gZm9ybWF0KGYsIGFyZ3MsIG9wdHMpIHtcbiAgdmFyIHNzID0gKG9wdHMgJiYgb3B0cy5zdHJpbmdpZnkpIHx8IHRyeVN0cmluZ2lmeVxuICB2YXIgb2Zmc2V0ID0gMVxuICBpZiAodHlwZW9mIGYgPT09ICdvYmplY3QnICYmIGYgIT09IG51bGwpIHtcbiAgICB2YXIgbGVuID0gYXJncy5sZW5ndGggKyBvZmZzZXRcbiAgICBpZiAobGVuID09PSAxKSByZXR1cm4gZlxuICAgIHZhciBvYmplY3RzID0gbmV3IEFycmF5KGxlbilcbiAgICBvYmplY3RzWzBdID0gc3MoZilcbiAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgbGVuOyBpbmRleCsrKSB7XG4gICAgICBvYmplY3RzW2luZGV4XSA9IHNzKGFyZ3NbaW5kZXhdKVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJylcbiAgfVxuICBpZiAodHlwZW9mIGYgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZcbiAgfVxuICB2YXIgYXJnTGVuID0gYXJncy5sZW5ndGhcbiAgaWYgKGFyZ0xlbiA9PT0gMCkgcmV0dXJuIGZcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBhID0gMSAtIG9mZnNldFxuICB2YXIgbGFzdFBvcyA9IC0xXG4gIHZhciBmbGVuID0gKGYgJiYgZi5sZW5ndGgpIHx8IDBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbGVuOykge1xuICAgIGlmIChmLmNoYXJDb2RlQXQoaSkgPT09IDM3ICYmIGkgKyAxIDwgZmxlbikge1xuICAgICAgbGFzdFBvcyA9IGxhc3RQb3MgPiAtMSA/IGxhc3RQb3MgOiAwXG4gICAgICBzd2l0Y2ggKGYuY2hhckNvZGVBdChpICsgMSkpIHtcbiAgICAgICAgY2FzZSAxMDA6IC8vICdkJ1xuICAgICAgICBjYXNlIDEwMjogLy8gJ2YnXG4gICAgICAgICAgaWYgKGEgPj0gYXJnTGVuKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBpZiAoYXJnc1thXSA9PSBudWxsKSAgYnJlYWtcbiAgICAgICAgICBpZiAobGFzdFBvcyA8IGkpXG4gICAgICAgICAgICBzdHIgKz0gZi5zbGljZShsYXN0UG9zLCBpKVxuICAgICAgICAgIHN0ciArPSBOdW1iZXIoYXJnc1thXSlcbiAgICAgICAgICBsYXN0UG9zID0gaSArIDJcbiAgICAgICAgICBpKytcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDEwNTogLy8gJ2knXG4gICAgICAgICAgaWYgKGEgPj0gYXJnTGVuKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBpZiAoYXJnc1thXSA9PSBudWxsKSAgYnJlYWtcbiAgICAgICAgICBpZiAobGFzdFBvcyA8IGkpXG4gICAgICAgICAgICBzdHIgKz0gZi5zbGljZShsYXN0UG9zLCBpKVxuICAgICAgICAgIHN0ciArPSBNYXRoLmZsb29yKE51bWJlcihhcmdzW2FdKSlcbiAgICAgICAgICBsYXN0UG9zID0gaSArIDJcbiAgICAgICAgICBpKytcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDc5OiAvLyAnTydcbiAgICAgICAgY2FzZSAxMTE6IC8vICdvJ1xuICAgICAgICBjYXNlIDEwNjogLy8gJ2onXG4gICAgICAgICAgaWYgKGEgPj0gYXJnTGVuKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBpZiAoYXJnc1thXSA9PT0gdW5kZWZpbmVkKSBicmVha1xuICAgICAgICAgIGlmIChsYXN0UG9zIDwgaSlcbiAgICAgICAgICAgIHN0ciArPSBmLnNsaWNlKGxhc3RQb3MsIGkpXG4gICAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgYXJnc1thXVxuICAgICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc3RyICs9ICdcXCcnICsgYXJnc1thXSArICdcXCcnXG4gICAgICAgICAgICBsYXN0UG9zID0gaSArIDJcbiAgICAgICAgICAgIGkrK1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN0ciArPSBhcmdzW2FdLm5hbWUgfHwgJzxhbm9ueW1vdXM+J1xuICAgICAgICAgICAgbGFzdFBvcyA9IGkgKyAyXG4gICAgICAgICAgICBpKytcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICAgIHN0ciArPSBzcyhhcmdzW2FdKVxuICAgICAgICAgIGxhc3RQb3MgPSBpICsgMlxuICAgICAgICAgIGkrK1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTE1OiAvLyAncydcbiAgICAgICAgICBpZiAoYSA+PSBhcmdMZW4pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGlmIChsYXN0UG9zIDwgaSlcbiAgICAgICAgICAgIHN0ciArPSBmLnNsaWNlKGxhc3RQb3MsIGkpXG4gICAgICAgICAgc3RyICs9IFN0cmluZyhhcmdzW2FdKVxuICAgICAgICAgIGxhc3RQb3MgPSBpICsgMlxuICAgICAgICAgIGkrK1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzc6IC8vICclJ1xuICAgICAgICAgIGlmIChsYXN0UG9zIDwgaSlcbiAgICAgICAgICAgIHN0ciArPSBmLnNsaWNlKGxhc3RQb3MsIGkpXG4gICAgICAgICAgc3RyICs9ICclJ1xuICAgICAgICAgIGxhc3RQb3MgPSBpICsgMlxuICAgICAgICAgIGkrK1xuICAgICAgICAgIGEtLVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICArK2FcbiAgICB9XG4gICAgKytpXG4gIH1cbiAgaWYgKGxhc3RQb3MgPT09IC0xKVxuICAgIHJldHVybiBmXG4gIGVsc2UgaWYgKGxhc3RQb3MgPCBmbGVuKSB7XG4gICAgc3RyICs9IGYuc2xpY2UobGFzdFBvcylcbiAgfVxuXG4gIHJldHVybiBzdHJcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gc2FmZUpzb25QYXJzZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHNhZmUganNvbiBwYXJzZSB2YWx1ZSBvZiB0eXBlICR7dHlwZW9mIHZhbHVlfWApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuZXhwb3J0cy5zYWZlSnNvblBhcnNlID0gc2FmZUpzb25QYXJzZTtcbmZ1bmN0aW9uIHNhZmVKc29uU3RyaW5naWZ5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZydcbiAgICAgICAgPyB2YWx1ZVxuICAgICAgICA6IEpTT04uc3RyaW5naWZ5KHZhbHVlLCAoa2V5LCB2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiB2YWx1ZSk7XG59XG5leHBvcnRzLnNhZmVKc29uU3RyaW5naWZ5ID0gc2FmZUpzb25TdHJpbmdpZnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKHN0cmluZywgc2VwYXJhdG9yKSA9PiB7XG5cdGlmICghKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBzZXBhcmF0b3IgPT09ICdzdHJpbmcnKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBhcmd1bWVudHMgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCcpO1xuXHR9XG5cblx0aWYgKHNlcGFyYXRvciA9PT0gJycpIHtcblx0XHRyZXR1cm4gW3N0cmluZ107XG5cdH1cblxuXHRjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN0cmluZy5pbmRleE9mKHNlcGFyYXRvcik7XG5cblx0aWYgKHNlcGFyYXRvckluZGV4ID09PSAtMSkge1xuXHRcdHJldHVybiBbc3RyaW5nXTtcblx0fVxuXG5cdHJldHVybiBbXG5cdFx0c3RyaW5nLnNsaWNlKDAsIHNlcGFyYXRvckluZGV4KSxcblx0XHRzdHJpbmcuc2xpY2Uoc2VwYXJhdG9ySW5kZXggKyBzZXBhcmF0b3IubGVuZ3RoKVxuXHRdO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gc3RyID0+IGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpKl0vZywgeCA9PiBgJSR7eC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfWApO1xuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY3JlYXRlQmluZGluZyhvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd3cyBkb2VzIG5vdCB3b3JrIGluIHRoZSBicm93c2VyLiBCcm93c2VyIGNsaWVudHMgbXVzdCB1c2UgdGhlIG5hdGl2ZSAnICtcbiAgICAgICdXZWJTb2NrZXQgb2JqZWN0J1xuICApO1xufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBmb3JtYXQgPSByZXF1aXJlKCdxdWljay1mb3JtYXQtdW5lc2NhcGVkJylcblxubW9kdWxlLmV4cG9ydHMgPSBwaW5vXG5cbmNvbnN0IF9jb25zb2xlID0gcGZHbG9iYWxUaGlzT3JGYWxsYmFjaygpLmNvbnNvbGUgfHwge31cbmNvbnN0IHN0ZFNlcmlhbGl6ZXJzID0ge1xuICBtYXBIdHRwUmVxdWVzdDogbW9jayxcbiAgbWFwSHR0cFJlc3BvbnNlOiBtb2NrLFxuICB3cmFwUmVxdWVzdFNlcmlhbGl6ZXI6IHBhc3N0aHJvdWdoLFxuICB3cmFwUmVzcG9uc2VTZXJpYWxpemVyOiBwYXNzdGhyb3VnaCxcbiAgd3JhcEVycm9yU2VyaWFsaXplcjogcGFzc3Rocm91Z2gsXG4gIHJlcTogbW9jayxcbiAgcmVzOiBtb2NrLFxuICBlcnI6IGFzRXJyVmFsdWVcbn1cblxuZnVuY3Rpb24gc2hvdWxkU2VyaWFsaXplIChzZXJpYWxpemUsIHNlcmlhbGl6ZXJzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHNlcmlhbGl6ZSkpIHtcbiAgICBjb25zdCBoYXNUb0ZpbHRlciA9IHNlcmlhbGl6ZS5maWx0ZXIoZnVuY3Rpb24gKGspIHtcbiAgICAgIHJldHVybiBrICE9PSAnIXN0ZFNlcmlhbGl6ZXJzLmVycidcbiAgICB9KVxuICAgIHJldHVybiBoYXNUb0ZpbHRlclxuICB9IGVsc2UgaWYgKHNlcmlhbGl6ZSA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzZXJpYWxpemVycylcbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwaW5vIChvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9XG4gIG9wdHMuYnJvd3NlciA9IG9wdHMuYnJvd3NlciB8fCB7fVxuXG4gIGNvbnN0IHRyYW5zbWl0ID0gb3B0cy5icm93c2VyLnRyYW5zbWl0XG4gIGlmICh0cmFuc21pdCAmJiB0eXBlb2YgdHJhbnNtaXQuc2VuZCAhPT0gJ2Z1bmN0aW9uJykgeyB0aHJvdyBFcnJvcigncGlubzogdHJhbnNtaXQgb3B0aW9uIG11c3QgaGF2ZSBhIHNlbmQgZnVuY3Rpb24nKSB9XG5cbiAgY29uc3QgcHJvdG8gPSBvcHRzLmJyb3dzZXIud3JpdGUgfHwgX2NvbnNvbGVcbiAgaWYgKG9wdHMuYnJvd3Nlci53cml0ZSkgb3B0cy5icm93c2VyLmFzT2JqZWN0ID0gdHJ1ZVxuICBjb25zdCBzZXJpYWxpemVycyA9IG9wdHMuc2VyaWFsaXplcnMgfHwge31cbiAgY29uc3Qgc2VyaWFsaXplID0gc2hvdWxkU2VyaWFsaXplKG9wdHMuYnJvd3Nlci5zZXJpYWxpemUsIHNlcmlhbGl6ZXJzKVxuICBsZXQgc3RkRXJyU2VyaWFsaXplID0gb3B0cy5icm93c2VyLnNlcmlhbGl6ZVxuXG4gIGlmIChcbiAgICBBcnJheS5pc0FycmF5KG9wdHMuYnJvd3Nlci5zZXJpYWxpemUpICYmXG4gICAgb3B0cy5icm93c2VyLnNlcmlhbGl6ZS5pbmRleE9mKCchc3RkU2VyaWFsaXplcnMuZXJyJykgPiAtMVxuICApIHN0ZEVyclNlcmlhbGl6ZSA9IGZhbHNlXG5cbiAgY29uc3QgbGV2ZWxzID0gWydlcnJvcicsICdmYXRhbCcsICd3YXJuJywgJ2luZm8nLCAnZGVidWcnLCAndHJhY2UnXVxuXG4gIGlmICh0eXBlb2YgcHJvdG8gPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcm90by5lcnJvciA9IHByb3RvLmZhdGFsID0gcHJvdG8ud2FybiA9XG4gICAgcHJvdG8uaW5mbyA9IHByb3RvLmRlYnVnID0gcHJvdG8udHJhY2UgPSBwcm90b1xuICB9XG4gIGlmIChvcHRzLmVuYWJsZWQgPT09IGZhbHNlKSBvcHRzLmxldmVsID0gJ3NpbGVudCdcbiAgY29uc3QgbGV2ZWwgPSBvcHRzLmxldmVsIHx8ICdpbmZvJ1xuICBjb25zdCBsb2dnZXIgPSBPYmplY3QuY3JlYXRlKHByb3RvKVxuICBpZiAoIWxvZ2dlci5sb2cpIGxvZ2dlci5sb2cgPSBub29wXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGxvZ2dlciwgJ2xldmVsVmFsJywge1xuICAgIGdldDogZ2V0TGV2ZWxWYWxcbiAgfSlcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGxvZ2dlciwgJ2xldmVsJywge1xuICAgIGdldDogZ2V0TGV2ZWwsXG4gICAgc2V0OiBzZXRMZXZlbFxuICB9KVxuXG4gIGNvbnN0IHNldE9wdHMgPSB7XG4gICAgdHJhbnNtaXQsXG4gICAgc2VyaWFsaXplLFxuICAgIGFzT2JqZWN0OiBvcHRzLmJyb3dzZXIuYXNPYmplY3QsXG4gICAgbGV2ZWxzLFxuICAgIHRpbWVzdGFtcDogZ2V0VGltZUZ1bmN0aW9uKG9wdHMpXG4gIH1cbiAgbG9nZ2VyLmxldmVscyA9IHBpbm8ubGV2ZWxzXG4gIGxvZ2dlci5sZXZlbCA9IGxldmVsXG5cbiAgbG9nZ2VyLnNldE1heExpc3RlbmVycyA9IGxvZ2dlci5nZXRNYXhMaXN0ZW5lcnMgPVxuICBsb2dnZXIuZW1pdCA9IGxvZ2dlci5hZGRMaXN0ZW5lciA9IGxvZ2dlci5vbiA9XG4gIGxvZ2dlci5wcmVwZW5kTGlzdGVuZXIgPSBsb2dnZXIub25jZSA9XG4gIGxvZ2dlci5wcmVwZW5kT25jZUxpc3RlbmVyID0gbG9nZ2VyLnJlbW92ZUxpc3RlbmVyID1cbiAgbG9nZ2VyLnJlbW92ZUFsbExpc3RlbmVycyA9IGxvZ2dlci5saXN0ZW5lcnMgPVxuICBsb2dnZXIubGlzdGVuZXJDb3VudCA9IGxvZ2dlci5ldmVudE5hbWVzID1cbiAgbG9nZ2VyLndyaXRlID0gbG9nZ2VyLmZsdXNoID0gbm9vcFxuICBsb2dnZXIuc2VyaWFsaXplcnMgPSBzZXJpYWxpemVyc1xuICBsb2dnZXIuX3NlcmlhbGl6ZSA9IHNlcmlhbGl6ZVxuICBsb2dnZXIuX3N0ZEVyclNlcmlhbGl6ZSA9IHN0ZEVyclNlcmlhbGl6ZVxuICBsb2dnZXIuY2hpbGQgPSBjaGlsZFxuXG4gIGlmICh0cmFuc21pdCkgbG9nZ2VyLl9sb2dFdmVudCA9IGNyZWF0ZUxvZ0V2ZW50U2hhcGUoKVxuXG4gIGZ1bmN0aW9uIGdldExldmVsVmFsICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZXZlbCA9PT0gJ3NpbGVudCdcbiAgICAgID8gSW5maW5pdHlcbiAgICAgIDogdGhpcy5sZXZlbHMudmFsdWVzW3RoaXMubGV2ZWxdXG4gIH1cblxuICBmdW5jdGlvbiBnZXRMZXZlbCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xldmVsXG4gIH1cbiAgZnVuY3Rpb24gc2V0TGV2ZWwgKGxldmVsKSB7XG4gICAgaWYgKGxldmVsICE9PSAnc2lsZW50JyAmJiAhdGhpcy5sZXZlbHMudmFsdWVzW2xldmVsXSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ3Vua25vd24gbGV2ZWwgJyArIGxldmVsKVxuICAgIH1cbiAgICB0aGlzLl9sZXZlbCA9IGxldmVsXG5cbiAgICBzZXQoc2V0T3B0cywgbG9nZ2VyLCAnZXJyb3InLCAnbG9nJykgLy8gPC0tIG11c3Qgc3RheSBmaXJzdFxuICAgIHNldChzZXRPcHRzLCBsb2dnZXIsICdmYXRhbCcsICdlcnJvcicpXG4gICAgc2V0KHNldE9wdHMsIGxvZ2dlciwgJ3dhcm4nLCAnZXJyb3InKVxuICAgIHNldChzZXRPcHRzLCBsb2dnZXIsICdpbmZvJywgJ2xvZycpXG4gICAgc2V0KHNldE9wdHMsIGxvZ2dlciwgJ2RlYnVnJywgJ2xvZycpXG4gICAgc2V0KHNldE9wdHMsIGxvZ2dlciwgJ3RyYWNlJywgJ2xvZycpXG4gIH1cblxuICBmdW5jdGlvbiBjaGlsZCAoYmluZGluZ3MsIGNoaWxkT3B0aW9ucykge1xuICAgIGlmICghYmluZGluZ3MpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbWlzc2luZyBiaW5kaW5ncyBmb3IgY2hpbGQgUGlubycpXG4gICAgfVxuICAgIGNoaWxkT3B0aW9ucyA9IGNoaWxkT3B0aW9ucyB8fCB7fVxuICAgIGlmIChzZXJpYWxpemUgJiYgYmluZGluZ3Muc2VyaWFsaXplcnMpIHtcbiAgICAgIGNoaWxkT3B0aW9ucy5zZXJpYWxpemVycyA9IGJpbmRpbmdzLnNlcmlhbGl6ZXJzXG4gICAgfVxuICAgIGNvbnN0IGNoaWxkT3B0aW9uc1NlcmlhbGl6ZXJzID0gY2hpbGRPcHRpb25zLnNlcmlhbGl6ZXJzXG4gICAgaWYgKHNlcmlhbGl6ZSAmJiBjaGlsZE9wdGlvbnNTZXJpYWxpemVycykge1xuICAgICAgdmFyIGNoaWxkU2VyaWFsaXplcnMgPSBPYmplY3QuYXNzaWduKHt9LCBzZXJpYWxpemVycywgY2hpbGRPcHRpb25zU2VyaWFsaXplcnMpXG4gICAgICB2YXIgY2hpbGRTZXJpYWxpemUgPSBvcHRzLmJyb3dzZXIuc2VyaWFsaXplID09PSB0cnVlXG4gICAgICAgID8gT2JqZWN0LmtleXMoY2hpbGRTZXJpYWxpemVycylcbiAgICAgICAgOiBzZXJpYWxpemVcbiAgICAgIGRlbGV0ZSBiaW5kaW5ncy5zZXJpYWxpemVyc1xuICAgICAgYXBwbHlTZXJpYWxpemVycyhbYmluZGluZ3NdLCBjaGlsZFNlcmlhbGl6ZSwgY2hpbGRTZXJpYWxpemVycywgdGhpcy5fc3RkRXJyU2VyaWFsaXplKVxuICAgIH1cbiAgICBmdW5jdGlvbiBDaGlsZCAocGFyZW50KSB7XG4gICAgICB0aGlzLl9jaGlsZExldmVsID0gKHBhcmVudC5fY2hpbGRMZXZlbCB8IDApICsgMVxuICAgICAgdGhpcy5lcnJvciA9IGJpbmQocGFyZW50LCBiaW5kaW5ncywgJ2Vycm9yJylcbiAgICAgIHRoaXMuZmF0YWwgPSBiaW5kKHBhcmVudCwgYmluZGluZ3MsICdmYXRhbCcpXG4gICAgICB0aGlzLndhcm4gPSBiaW5kKHBhcmVudCwgYmluZGluZ3MsICd3YXJuJylcbiAgICAgIHRoaXMuaW5mbyA9IGJpbmQocGFyZW50LCBiaW5kaW5ncywgJ2luZm8nKVxuICAgICAgdGhpcy5kZWJ1ZyA9IGJpbmQocGFyZW50LCBiaW5kaW5ncywgJ2RlYnVnJylcbiAgICAgIHRoaXMudHJhY2UgPSBiaW5kKHBhcmVudCwgYmluZGluZ3MsICd0cmFjZScpXG4gICAgICBpZiAoY2hpbGRTZXJpYWxpemVycykge1xuICAgICAgICB0aGlzLnNlcmlhbGl6ZXJzID0gY2hpbGRTZXJpYWxpemVyc1xuICAgICAgICB0aGlzLl9zZXJpYWxpemUgPSBjaGlsZFNlcmlhbGl6ZVxuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbWl0KSB7XG4gICAgICAgIHRoaXMuX2xvZ0V2ZW50ID0gY3JlYXRlTG9nRXZlbnRTaGFwZShcbiAgICAgICAgICBbXS5jb25jYXQocGFyZW50Ll9sb2dFdmVudC5iaW5kaW5ncywgYmluZGluZ3MpXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gICAgQ2hpbGQucHJvdG90eXBlID0gdGhpc1xuICAgIHJldHVybiBuZXcgQ2hpbGQodGhpcylcbiAgfVxuICByZXR1cm4gbG9nZ2VyXG59XG5cbnBpbm8ubGV2ZWxzID0ge1xuICB2YWx1ZXM6IHtcbiAgICBmYXRhbDogNjAsXG4gICAgZXJyb3I6IDUwLFxuICAgIHdhcm46IDQwLFxuICAgIGluZm86IDMwLFxuICAgIGRlYnVnOiAyMCxcbiAgICB0cmFjZTogMTBcbiAgfSxcbiAgbGFiZWxzOiB7XG4gICAgMTA6ICd0cmFjZScsXG4gICAgMjA6ICdkZWJ1ZycsXG4gICAgMzA6ICdpbmZvJyxcbiAgICA0MDogJ3dhcm4nLFxuICAgIDUwOiAnZXJyb3InLFxuICAgIDYwOiAnZmF0YWwnXG4gIH1cbn1cblxucGluby5zdGRTZXJpYWxpemVycyA9IHN0ZFNlcmlhbGl6ZXJzXG5waW5vLnN0ZFRpbWVGdW5jdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7IG51bGxUaW1lLCBlcG9jaFRpbWUsIHVuaXhUaW1lLCBpc29UaW1lIH0pXG5cbmZ1bmN0aW9uIHNldCAob3B0cywgbG9nZ2VyLCBsZXZlbCwgZmFsbGJhY2spIHtcbiAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YobG9nZ2VyKVxuICBsb2dnZXJbbGV2ZWxdID0gbG9nZ2VyLmxldmVsVmFsID4gbG9nZ2VyLmxldmVscy52YWx1ZXNbbGV2ZWxdXG4gICAgPyBub29wXG4gICAgOiAocHJvdG9bbGV2ZWxdID8gcHJvdG9bbGV2ZWxdIDogKF9jb25zb2xlW2xldmVsXSB8fCBfY29uc29sZVtmYWxsYmFja10gfHwgbm9vcCkpXG5cbiAgd3JhcChvcHRzLCBsb2dnZXIsIGxldmVsKVxufVxuXG5mdW5jdGlvbiB3cmFwIChvcHRzLCBsb2dnZXIsIGxldmVsKSB7XG4gIGlmICghb3B0cy50cmFuc21pdCAmJiBsb2dnZXJbbGV2ZWxdID09PSBub29wKSByZXR1cm5cblxuICBsb2dnZXJbbGV2ZWxdID0gKGZ1bmN0aW9uICh3cml0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBMT0cgKCkge1xuICAgICAgY29uc3QgdHMgPSBvcHRzLnRpbWVzdGFtcCgpXG4gICAgICBjb25zdCBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICBjb25zdCBwcm90byA9IChPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpID09PSBfY29uc29sZSkgPyBfY29uc29sZSA6IHRoaXNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXVxuXG4gICAgICBpZiAob3B0cy5zZXJpYWxpemUgJiYgIW9wdHMuYXNPYmplY3QpIHtcbiAgICAgICAgYXBwbHlTZXJpYWxpemVycyhhcmdzLCB0aGlzLl9zZXJpYWxpemUsIHRoaXMuc2VyaWFsaXplcnMsIHRoaXMuX3N0ZEVyclNlcmlhbGl6ZSlcbiAgICAgIH1cbiAgICAgIGlmIChvcHRzLmFzT2JqZWN0KSB3cml0ZS5jYWxsKHByb3RvLCBhc09iamVjdCh0aGlzLCBsZXZlbCwgYXJncywgdHMpKVxuICAgICAgZWxzZSB3cml0ZS5hcHBseShwcm90bywgYXJncylcblxuICAgICAgaWYgKG9wdHMudHJhbnNtaXQpIHtcbiAgICAgICAgY29uc3QgdHJhbnNtaXRMZXZlbCA9IG9wdHMudHJhbnNtaXQubGV2ZWwgfHwgbG9nZ2VyLmxldmVsXG4gICAgICAgIGNvbnN0IHRyYW5zbWl0VmFsdWUgPSBwaW5vLmxldmVscy52YWx1ZXNbdHJhbnNtaXRMZXZlbF1cbiAgICAgICAgY29uc3QgbWV0aG9kVmFsdWUgPSBwaW5vLmxldmVscy52YWx1ZXNbbGV2ZWxdXG4gICAgICAgIGlmIChtZXRob2RWYWx1ZSA8IHRyYW5zbWl0VmFsdWUpIHJldHVyblxuICAgICAgICB0cmFuc21pdCh0aGlzLCB7XG4gICAgICAgICAgdHMsXG4gICAgICAgICAgbWV0aG9kTGV2ZWw6IGxldmVsLFxuICAgICAgICAgIG1ldGhvZFZhbHVlLFxuICAgICAgICAgIHRyYW5zbWl0TGV2ZWwsXG4gICAgICAgICAgdHJhbnNtaXRWYWx1ZTogcGluby5sZXZlbHMudmFsdWVzW29wdHMudHJhbnNtaXQubGV2ZWwgfHwgbG9nZ2VyLmxldmVsXSxcbiAgICAgICAgICBzZW5kOiBvcHRzLnRyYW5zbWl0LnNlbmQsXG4gICAgICAgICAgdmFsOiBsb2dnZXIubGV2ZWxWYWxcbiAgICAgICAgfSwgYXJncylcbiAgICAgIH1cbiAgICB9XG4gIH0pKGxvZ2dlcltsZXZlbF0pXG59XG5cbmZ1bmN0aW9uIGFzT2JqZWN0IChsb2dnZXIsIGxldmVsLCBhcmdzLCB0cykge1xuICBpZiAobG9nZ2VyLl9zZXJpYWxpemUpIGFwcGx5U2VyaWFsaXplcnMoYXJncywgbG9nZ2VyLl9zZXJpYWxpemUsIGxvZ2dlci5zZXJpYWxpemVycywgbG9nZ2VyLl9zdGRFcnJTZXJpYWxpemUpXG4gIGNvbnN0IGFyZ3NDbG9uZWQgPSBhcmdzLnNsaWNlKClcbiAgbGV0IG1zZyA9IGFyZ3NDbG9uZWRbMF1cbiAgY29uc3QgbyA9IHt9XG4gIGlmICh0cykge1xuICAgIG8udGltZSA9IHRzXG4gIH1cbiAgby5sZXZlbCA9IHBpbm8ubGV2ZWxzLnZhbHVlc1tsZXZlbF1cbiAgbGV0IGx2bCA9IChsb2dnZXIuX2NoaWxkTGV2ZWwgfCAwKSArIDFcbiAgaWYgKGx2bCA8IDEpIGx2bCA9IDFcbiAgLy8gZGVsaWJlcmF0ZSwgY2F0Y2hpbmcgb2JqZWN0cywgYXJyYXlzXG4gIGlmIChtc2cgIT09IG51bGwgJiYgdHlwZW9mIG1zZyA9PT0gJ29iamVjdCcpIHtcbiAgICB3aGlsZSAobHZsLS0gJiYgdHlwZW9mIGFyZ3NDbG9uZWRbMF0gPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3QuYXNzaWduKG8sIGFyZ3NDbG9uZWQuc2hpZnQoKSlcbiAgICB9XG4gICAgbXNnID0gYXJnc0Nsb25lZC5sZW5ndGggPyBmb3JtYXQoYXJnc0Nsb25lZC5zaGlmdCgpLCBhcmdzQ2xvbmVkKSA6IHVuZGVmaW5lZFxuICB9IGVsc2UgaWYgKHR5cGVvZiBtc2cgPT09ICdzdHJpbmcnKSBtc2cgPSBmb3JtYXQoYXJnc0Nsb25lZC5zaGlmdCgpLCBhcmdzQ2xvbmVkKVxuICBpZiAobXNnICE9PSB1bmRlZmluZWQpIG8ubXNnID0gbXNnXG4gIHJldHVybiBvXG59XG5cbmZ1bmN0aW9uIGFwcGx5U2VyaWFsaXplcnMgKGFyZ3MsIHNlcmlhbGl6ZSwgc2VyaWFsaXplcnMsIHN0ZEVyclNlcmlhbGl6ZSkge1xuICBmb3IgKGNvbnN0IGkgaW4gYXJncykge1xuICAgIGlmIChzdGRFcnJTZXJpYWxpemUgJiYgYXJnc1tpXSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBhcmdzW2ldID0gcGluby5zdGRTZXJpYWxpemVycy5lcnIoYXJnc1tpXSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmdzW2ldID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShhcmdzW2ldKSkge1xuICAgICAgZm9yIChjb25zdCBrIGluIGFyZ3NbaV0pIHtcbiAgICAgICAgaWYgKHNlcmlhbGl6ZSAmJiBzZXJpYWxpemUuaW5kZXhPZihrKSA+IC0xICYmIGsgaW4gc2VyaWFsaXplcnMpIHtcbiAgICAgICAgICBhcmdzW2ldW2tdID0gc2VyaWFsaXplcnNba10oYXJnc1tpXVtrXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kIChwYXJlbnQsIGJpbmRpbmdzLCBsZXZlbCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGFyZ3MgPSBuZXcgQXJyYXkoMSArIGFyZ3VtZW50cy5sZW5ndGgpXG4gICAgYXJnc1swXSA9IGJpbmRpbmdzXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgLSAxXVxuICAgIH1cbiAgICByZXR1cm4gcGFyZW50W2xldmVsXS5hcHBseSh0aGlzLCBhcmdzKVxuICB9XG59XG5cbmZ1bmN0aW9uIHRyYW5zbWl0IChsb2dnZXIsIG9wdHMsIGFyZ3MpIHtcbiAgY29uc3Qgc2VuZCA9IG9wdHMuc2VuZFxuICBjb25zdCB0cyA9IG9wdHMudHNcbiAgY29uc3QgbWV0aG9kTGV2ZWwgPSBvcHRzLm1ldGhvZExldmVsXG4gIGNvbnN0IG1ldGhvZFZhbHVlID0gb3B0cy5tZXRob2RWYWx1ZVxuICBjb25zdCB2YWwgPSBvcHRzLnZhbFxuICBjb25zdCBiaW5kaW5ncyA9IGxvZ2dlci5fbG9nRXZlbnQuYmluZGluZ3NcblxuICBhcHBseVNlcmlhbGl6ZXJzKFxuICAgIGFyZ3MsXG4gICAgbG9nZ2VyLl9zZXJpYWxpemUgfHwgT2JqZWN0LmtleXMobG9nZ2VyLnNlcmlhbGl6ZXJzKSxcbiAgICBsb2dnZXIuc2VyaWFsaXplcnMsXG4gICAgbG9nZ2VyLl9zdGRFcnJTZXJpYWxpemUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBsb2dnZXIuX3N0ZEVyclNlcmlhbGl6ZVxuICApXG4gIGxvZ2dlci5fbG9nRXZlbnQudHMgPSB0c1xuICBsb2dnZXIuX2xvZ0V2ZW50Lm1lc3NhZ2VzID0gYXJncy5maWx0ZXIoZnVuY3Rpb24gKGFyZykge1xuICAgIC8vIGJpbmRpbmdzIGNhbiBvbmx5IGJlIG9iamVjdHMsIHNvIHJlZmVyZW5jZSBlcXVhbGl0eSBjaGVjayB2aWEgaW5kZXhPZiBpcyBmaW5lXG4gICAgcmV0dXJuIGJpbmRpbmdzLmluZGV4T2YoYXJnKSA9PT0gLTFcbiAgfSlcblxuICBsb2dnZXIuX2xvZ0V2ZW50LmxldmVsLmxhYmVsID0gbWV0aG9kTGV2ZWxcbiAgbG9nZ2VyLl9sb2dFdmVudC5sZXZlbC52YWx1ZSA9IG1ldGhvZFZhbHVlXG5cbiAgc2VuZChtZXRob2RMZXZlbCwgbG9nZ2VyLl9sb2dFdmVudCwgdmFsKVxuXG4gIGxvZ2dlci5fbG9nRXZlbnQgPSBjcmVhdGVMb2dFdmVudFNoYXBlKGJpbmRpbmdzKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2dFdmVudFNoYXBlIChiaW5kaW5ncykge1xuICByZXR1cm4ge1xuICAgIHRzOiAwLFxuICAgIG1lc3NhZ2VzOiBbXSxcbiAgICBiaW5kaW5nczogYmluZGluZ3MgfHwgW10sXG4gICAgbGV2ZWw6IHsgbGFiZWw6ICcnLCB2YWx1ZTogMCB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNFcnJWYWx1ZSAoZXJyKSB7XG4gIGNvbnN0IG9iaiA9IHtcbiAgICB0eXBlOiBlcnIuY29uc3RydWN0b3IubmFtZSxcbiAgICBtc2c6IGVyci5tZXNzYWdlLFxuICAgIHN0YWNrOiBlcnIuc3RhY2tcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiBlcnIpIHtcbiAgICBpZiAob2JqW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqW2tleV0gPSBlcnJba2V5XVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqXG59XG5cbmZ1bmN0aW9uIGdldFRpbWVGdW5jdGlvbiAob3B0cykge1xuICBpZiAodHlwZW9mIG9wdHMudGltZXN0YW1wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG9wdHMudGltZXN0YW1wXG4gIH1cbiAgaWYgKG9wdHMudGltZXN0YW1wID09PSBmYWxzZSkge1xuICAgIHJldHVybiBudWxsVGltZVxuICB9XG4gIHJldHVybiBlcG9jaFRpbWVcbn1cblxuZnVuY3Rpb24gbW9jayAoKSB7IHJldHVybiB7fSB9XG5mdW5jdGlvbiBwYXNzdGhyb3VnaCAoYSkgeyByZXR1cm4gYSB9XG5mdW5jdGlvbiBub29wICgpIHt9XG5cbmZ1bmN0aW9uIG51bGxUaW1lICgpIHsgcmV0dXJuIGZhbHNlIH1cbmZ1bmN0aW9uIGVwb2NoVGltZSAoKSB7IHJldHVybiBEYXRlLm5vdygpIH1cbmZ1bmN0aW9uIHVuaXhUaW1lICgpIHsgcmV0dXJuIE1hdGgucm91bmQoRGF0ZS5ub3coKSAvIDEwMDAuMCkgfVxuZnVuY3Rpb24gaXNvVGltZSAoKSB7IHJldHVybiBuZXcgRGF0ZShEYXRlLm5vdygpKS50b0lTT1N0cmluZygpIH0gLy8gdXNpbmcgRGF0ZS5ub3coKSBmb3IgdGVzdGFiaWxpdHlcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwZkdsb2JhbFRoaXNPckZhbGxiYWNrICgpIHtcbiAgZnVuY3Rpb24gZGVmZCAobykgeyByZXR1cm4gdHlwZW9mIG8gIT09ICd1bmRlZmluZWQnICYmIG8gfVxuICB0cnkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBnbG9iYWxUaGlzXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5wcm90b3R5cGUsICdnbG9iYWxUaGlzJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlbGV0ZSBPYmplY3QucHJvdG90eXBlLmdsb2JhbFRoaXNcbiAgICAgICAgcmV0dXJuICh0aGlzLmdsb2JhbFRoaXMgPSB0aGlzKVxuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gICAgcmV0dXJuIGdsb2JhbFRoaXNcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkZWZkKHNlbGYpIHx8IGRlZmQod2luZG93KSB8fCBkZWZkKHRoaXMpIHx8IHt9XG4gIH1cbn1cbi8qIGVzbGludC1lbmFibGUgKi9cbiIsImNvbnN0IGU9U3ltYm9sKCksdD1TeW1ib2woKSxyPVN5bWJvbCgpO2xldCBuPShlLHQpPT5uZXcgUHJveHkoZSx0KTtjb25zdCBvPU9iamVjdC5nZXRQcm90b3R5cGVPZixzPW5ldyBXZWFrTWFwLGM9ZT0+ZSYmKHMuaGFzKGUpP3MuZ2V0KGUpOm8oZSk9PT1PYmplY3QucHJvdG90eXBlfHxvKGUpPT09QXJyYXkucHJvdG90eXBlKSxsPWU9Plwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSxhPW5ldyBXZWFrTWFwLGY9ZT0+ZVtyXXx8ZSxpPShzLGwscCk9PntpZighYyhzKSlyZXR1cm4gcztjb25zdCB5PWYocyksdT0oZT0+T2JqZWN0LmlzRnJvemVuKGUpfHxPYmplY3QudmFsdWVzKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKGUpKS5zb21lKGU9PiFlLndyaXRhYmxlKSkoeSk7bGV0IGc9cCYmcC5nZXQoeSk7cmV0dXJuIGcmJmdbMV0uZj09PXV8fChnPSgobixvKT0+e2NvbnN0IHM9e2Y6b307bGV0IGM9ITE7Y29uc3QgbD0odCxyKT0+e2lmKCFjKXtsZXQgbz1zLmEuZ2V0KG4pO298fChvPW5ldyBTZXQscy5hLnNldChuLG8pKSxyJiZvLmhhcyhlKXx8by5hZGQodCl9fSxhPXtnZXQ6KGUsdCk9PnQ9PT1yP246KGwodCksaShlW3RdLHMuYSxzLmMpKSxoYXM6KGUscik9PnI9PT10PyhjPSEwLHMuYS5kZWxldGUobiksITApOihsKHIpLHIgaW4gZSksZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOihlLHQpPT4obCh0LCEwKSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCkpLG93bktleXM6dD0+KGwoZSksUmVmbGVjdC5vd25LZXlzKHQpKX07cmV0dXJuIG8mJihhLnNldD1hLmRlbGV0ZVByb3BlcnR5PSgpPT4hMSksW2Esc119KSh5LHUpLGdbMV0ucD1uKHU/KGU9PntsZXQgdD1hLmdldChlKTtpZighdCl7aWYoQXJyYXkuaXNBcnJheShlKSl0PUFycmF5LmZyb20oZSk7ZWxzZXtjb25zdCByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKGUpO09iamVjdC52YWx1ZXMocikuZm9yRWFjaChlPT57ZS5jb25maWd1cmFibGU9ITB9KSx0PU9iamVjdC5jcmVhdGUobyhlKSxyKX1hLnNldChlLHQpfXJldHVybiB0fSkoeSk6eSxnWzBdKSxwJiZwLnNldCh5LGcpKSxnWzFdLmE9bCxnWzFdLmM9cCxnWzFdLnB9LHA9KGUsdCk9Pntjb25zdCByPVJlZmxlY3Qub3duS2V5cyhlKSxuPVJlZmxlY3Qub3duS2V5cyh0KTtyZXR1cm4gci5sZW5ndGghPT1uLmxlbmd0aHx8ci5zb21lKChlLHQpPT5lIT09blt0XSl9LHk9KHQscixuLG8pPT57aWYoT2JqZWN0LmlzKHQscikpcmV0dXJuITE7aWYoIWwodCl8fCFsKHIpKXJldHVybiEwO2NvbnN0IHM9bi5nZXQoZih0KSk7aWYoIXMpcmV0dXJuITA7aWYobyl7Y29uc3QgZT1vLmdldCh0KTtpZihlJiZlLm49PT1yKXJldHVybiBlLmc7by5zZXQodCx7bjpyLGc6ITF9KX1sZXQgYz1udWxsO2Zvcihjb25zdCBsIG9mIHMpe2NvbnN0IHM9bD09PWU/cCh0LHIpOnkodFtsXSxyW2xdLG4sbyk7aWYoITAhPT1zJiYhMSE9PXN8fChjPXMpLGMpYnJlYWt9cmV0dXJuIG51bGw9PT1jJiYoYz0hMCksbyYmby5zZXQodCx7bjpyLGc6Y30pLGN9LHU9ZT0+ISFjKGUpJiZ0IGluIGUsZz1lPT5jKGUpJiZlW3JdfHxudWxsLGI9KGUsdD0hMCk9PntzLnNldChlLHQpfSxPPShlLHQpPT57Y29uc3Qgcj1bXSxuPW5ldyBXZWFrU2V0LG89KGUscyk9PntpZihuLmhhcyhlKSlyZXR1cm47bChlKSYmbi5hZGQoZSk7Y29uc3QgYz1sKGUpJiZ0LmdldChmKGUpKTtjP2MuZm9yRWFjaCh0PT57byhlW3RdLHM/Wy4uLnMsdF06W3RdKX0pOnMmJnIucHVzaChzKX07cmV0dXJuIG8oZSkscn0sdz1lPT57bj1lfTtleHBvcnR7TyBhcyBhZmZlY3RlZFRvUGF0aExpc3QsaSBhcyBjcmVhdGVQcm94eSxnIGFzIGdldFVudHJhY2tlZCx5IGFzIGlzQ2hhbmdlZCxiIGFzIG1hcmtUb1RyYWNrLHcgYXMgcmVwbGFjZU5ld1Byb3h5LHUgYXMgdHJhY2tNZW1vfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1vZGVybi5tanMubWFwXG4iLCJpbXBvcnQgeyBtYXJrVG9UcmFjaywgZ2V0VW50cmFja2VkIH0gZnJvbSAncHJveHktY29tcGFyZSc7XG5cbmNvbnN0IGlzT2JqZWN0ID0gKHgpID0+IHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmIHggIT09IG51bGw7XG5jb25zdCBQUk9YWV9TVEFURSA9IFN5bWJvbCgpO1xuY29uc3QgcmVmU2V0ID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrU2V0KCk7XG5jb25zdCBidWlsZFByb3h5RnVuY3Rpb24gPSAob2JqZWN0SXMgPSBPYmplY3QuaXMsIG5ld1Byb3h5ID0gKHRhcmdldCwgaGFuZGxlcikgPT4gbmV3IFByb3h5KHRhcmdldCwgaGFuZGxlciksIGNhblByb3h5ID0gKHgpID0+IGlzT2JqZWN0KHgpICYmICFyZWZTZXQuaGFzKHgpICYmIChBcnJheS5pc0FycmF5KHgpIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIHgpKSAmJiAhKHggaW5zdGFuY2VvZiBXZWFrTWFwKSAmJiAhKHggaW5zdGFuY2VvZiBXZWFrU2V0KSAmJiAhKHggaW5zdGFuY2VvZiBFcnJvcikgJiYgISh4IGluc3RhbmNlb2YgTnVtYmVyKSAmJiAhKHggaW5zdGFuY2VvZiBEYXRlKSAmJiAhKHggaW5zdGFuY2VvZiBTdHJpbmcpICYmICEoeCBpbnN0YW5jZW9mIFJlZ0V4cCkgJiYgISh4IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpLCBkZWZhdWx0SGFuZGxlUHJvbWlzZSA9IChwcm9taXNlKSA9PiB7XG4gIHN3aXRjaCAocHJvbWlzZS5zdGF0dXMpIHtcbiAgICBjYXNlIFwiZnVsZmlsbGVkXCI6XG4gICAgICByZXR1cm4gcHJvbWlzZS52YWx1ZTtcbiAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgIHRocm93IHByb21pc2UucmVhc29uO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBwcm9taXNlO1xuICB9XG59LCBzbmFwQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSwgY3JlYXRlU25hcHNob3QgPSAodGFyZ2V0LCByZWNlaXZlciwgdmVyc2lvbiwgaGFuZGxlUHJvbWlzZSA9IGRlZmF1bHRIYW5kbGVQcm9taXNlKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gc25hcENhY2hlLmdldChyZWNlaXZlcik7XG4gIGlmICgoY2FjaGUgPT0gbnVsbCA/IHZvaWQgMCA6IGNhY2hlWzBdKSA9PT0gdmVyc2lvbikge1xuICAgIHJldHVybiBjYWNoZVsxXTtcbiAgfVxuICBjb25zdCBzbmFwID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpID8gW10gOiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpKTtcbiAgbWFya1RvVHJhY2soc25hcCwgdHJ1ZSk7XG4gIHNuYXBDYWNoZS5zZXQocmVjZWl2ZXIsIFt2ZXJzaW9uLCBzbmFwXSk7XG4gIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKTtcbiAgICBpZiAocmVmU2V0Lmhhcyh2YWx1ZSkpIHtcbiAgICAgIG1hcmtUb1RyYWNrKHZhbHVlLCBmYWxzZSk7XG4gICAgICBzbmFwW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNuYXAsIGtleSwge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZVByb21pc2UodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZVtQUk9YWV9TVEFURV0pIHtcbiAgICAgIHNuYXBba2V5XSA9IHNuYXBzaG90KHZhbHVlLCBoYW5kbGVQcm9taXNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc25hcFtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUoc25hcCk7XG59LCBwcm94eUNhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCksIHZlcnNpb25Ib2xkZXIgPSBbMV0sIHByb3h5RnVuY3Rpb24yID0gKGluaXRpYWxPYmplY3QpID0+IHtcbiAgaWYgKCFpc09iamVjdChpbml0aWFsT2JqZWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIm9iamVjdCByZXF1aXJlZFwiKTtcbiAgfVxuICBjb25zdCBmb3VuZCA9IHByb3h5Q2FjaGUuZ2V0KGluaXRpYWxPYmplY3QpO1xuICBpZiAoZm91bmQpIHtcbiAgICByZXR1cm4gZm91bmQ7XG4gIH1cbiAgbGV0IHZlcnNpb24gPSB2ZXJzaW9uSG9sZGVyWzBdO1xuICBjb25zdCBsaXN0ZW5lcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBjb25zdCBub3RpZnlVcGRhdGUgPSAob3AsIG5leHRWZXJzaW9uID0gKyt2ZXJzaW9uSG9sZGVyWzBdKSA9PiB7XG4gICAgaWYgKHZlcnNpb24gIT09IG5leHRWZXJzaW9uKSB7XG4gICAgICB2ZXJzaW9uID0gbmV4dFZlcnNpb247XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IGxpc3RlbmVyKG9wLCBuZXh0VmVyc2lvbikpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvcExpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IGdldFByb3BMaXN0ZW5lciA9IChwcm9wKSA9PiB7XG4gICAgbGV0IHByb3BMaXN0ZW5lciA9IHByb3BMaXN0ZW5lcnMuZ2V0KHByb3ApO1xuICAgIGlmICghcHJvcExpc3RlbmVyKSB7XG4gICAgICBwcm9wTGlzdGVuZXIgPSAob3AsIG5leHRWZXJzaW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld09wID0gWy4uLm9wXTtcbiAgICAgICAgbmV3T3BbMV0gPSBbcHJvcCwgLi4ubmV3T3BbMV1dO1xuICAgICAgICBub3RpZnlVcGRhdGUobmV3T3AsIG5leHRWZXJzaW9uKTtcbiAgICAgIH07XG4gICAgICBwcm9wTGlzdGVuZXJzLnNldChwcm9wLCBwcm9wTGlzdGVuZXIpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcExpc3RlbmVyO1xuICB9O1xuICBjb25zdCBwb3BQcm9wTGlzdGVuZXIgPSAocHJvcCkgPT4ge1xuICAgIGNvbnN0IHByb3BMaXN0ZW5lciA9IHByb3BMaXN0ZW5lcnMuZ2V0KHByb3ApO1xuICAgIHByb3BMaXN0ZW5lcnMuZGVsZXRlKHByb3ApO1xuICAgIHJldHVybiBwcm9wTGlzdGVuZXI7XG4gIH07XG4gIGNvbnN0IGJhc2VPYmplY3QgPSBBcnJheS5pc0FycmF5KGluaXRpYWxPYmplY3QpID8gW10gOiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihpbml0aWFsT2JqZWN0KSk7XG4gIGNvbnN0IGhhbmRsZXIgPSB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgIGlmIChwcm9wID09PSBQUk9YWV9TVEFURSkge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IFtcbiAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgcmVjZWl2ZXIsXG4gICAgICAgICAgdmVyc2lvbixcbiAgICAgICAgICBjcmVhdGVTbmFwc2hvdCxcbiAgICAgICAgICBsaXN0ZW5lcnNcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgIH0sXG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB7XG4gICAgICB2YXIgX2E7XG4gICAgICBjb25zdCBwcmV2VmFsdWUgPSBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3ApO1xuICAgICAgY29uc3QgY2hpbGRMaXN0ZW5lcnMgPSAoX2EgPSBwcmV2VmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHByZXZWYWx1ZVtQUk9YWV9TVEFURV0pID09IG51bGwgPyB2b2lkIDAgOiBfYVs0XTtcbiAgICAgIGlmIChjaGlsZExpc3RlbmVycykge1xuICAgICAgICBjaGlsZExpc3RlbmVycy5kZWxldGUocG9wUHJvcExpc3RlbmVyKHByb3ApKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRlbGV0ZWQgPSBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgICBpZiAoZGVsZXRlZCkge1xuICAgICAgICBub3RpZnlVcGRhdGUoW1wiZGVsZXRlXCIsIFtwcm9wXSwgcHJldlZhbHVlXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVsZXRlZDtcbiAgICB9LFxuICAgIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlLCByZWNlaXZlcikge1xuICAgICAgdmFyIF9hLCBfYjtcbiAgICAgIGNvbnN0IGhhc1ByZXZWYWx1ZSA9IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcCk7XG4gICAgICBjb25zdCBwcmV2VmFsdWUgPSBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcbiAgICAgIGlmIChoYXNQcmV2VmFsdWUgJiYgb2JqZWN0SXMocHJldlZhbHVlLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBjb25zdCBjaGlsZExpc3RlbmVycyA9IChfYSA9IHByZXZWYWx1ZSA9PSBudWxsID8gdm9pZCAwIDogcHJldlZhbHVlW1BST1hZX1NUQVRFXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hWzRdO1xuICAgICAgaWYgKGNoaWxkTGlzdGVuZXJzKSB7XG4gICAgICAgIGNoaWxkTGlzdGVuZXJzLmRlbGV0ZShwb3BQcm9wTGlzdGVuZXIocHJvcCkpO1xuICAgICAgfVxuICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IGdldFVudHJhY2tlZCh2YWx1ZSkgfHwgdmFsdWU7XG4gICAgICB9XG4gICAgICBsZXQgbmV4dFZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAoKF9iID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3ApKSA9PSBudWxsID8gdm9pZCAwIDogX2Iuc2V0KSA7IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICB2YWx1ZS50aGVuKCh2KSA9PiB7XG4gICAgICAgICAgdmFsdWUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgICAgICAgICB2YWx1ZS52YWx1ZSA9IHY7XG4gICAgICAgICAgbm90aWZ5VXBkYXRlKFtcInJlc29sdmVcIiwgW3Byb3BdLCB2XSk7XG4gICAgICAgIH0pLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgdmFsdWUuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgIHZhbHVlLnJlYXNvbiA9IGU7XG4gICAgICAgICAgbm90aWZ5VXBkYXRlKFtcInJlamVjdFwiLCBbcHJvcF0sIGVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoISh2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWVbUFJPWFlfU1RBVEVdKSAmJiBjYW5Qcm94eSh2YWx1ZSkpIHtcbiAgICAgICAgICBuZXh0VmFsdWUgPSBwcm94eSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRWYWx1ZSA9PSBudWxsID8gdm9pZCAwIDogbmV4dFZhbHVlW1BST1hZX1NUQVRFXSkge1xuICAgICAgICAgIG5leHRWYWx1ZVtQUk9YWV9TVEFURV1bNF0uYWRkKFxuICAgICAgICAgICAgZ2V0UHJvcExpc3RlbmVyKHByb3ApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wLCBuZXh0VmFsdWUsIHJlY2VpdmVyKTtcbiAgICAgIG5vdGlmeVVwZGF0ZShbXCJzZXRcIiwgW3Byb3BdLCB2YWx1ZSwgcHJldlZhbHVlXSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHByb3h5T2JqZWN0ID0gbmV3UHJveHkoYmFzZU9iamVjdCwgaGFuZGxlcik7XG4gIHByb3h5Q2FjaGUuc2V0KGluaXRpYWxPYmplY3QsIHByb3h5T2JqZWN0KTtcbiAgUmVmbGVjdC5vd25LZXlzKGluaXRpYWxPYmplY3QpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgICAgaW5pdGlhbE9iamVjdCxcbiAgICAgIGtleVxuICAgICk7XG4gICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYmFzZU9iamVjdCwga2V5LCBkZXNjKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJveHlPYmplY3Rba2V5XSA9IGluaXRpYWxPYmplY3Rba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcHJveHlPYmplY3Q7XG59KSA9PiBbXG4gIHByb3h5RnVuY3Rpb24yLFxuICBQUk9YWV9TVEFURSxcbiAgcmVmU2V0LFxuICBvYmplY3RJcyxcbiAgbmV3UHJveHksXG4gIGNhblByb3h5LFxuICBkZWZhdWx0SGFuZGxlUHJvbWlzZSxcbiAgc25hcENhY2hlLFxuICBjcmVhdGVTbmFwc2hvdCxcbiAgcHJveHlDYWNoZSxcbiAgdmVyc2lvbkhvbGRlclxuXTtcbmNvbnN0IFtwcm94eUZ1bmN0aW9uXSA9IGJ1aWxkUHJveHlGdW5jdGlvbigpO1xuZnVuY3Rpb24gcHJveHkoaW5pdGlhbE9iamVjdCA9IHt9KSB7XG4gIHJldHVybiBwcm94eUZ1bmN0aW9uKGluaXRpYWxPYmplY3QpO1xufVxuZnVuY3Rpb24gZ2V0VmVyc2lvbihwcm94eU9iamVjdCkge1xuICBjb25zdCBzdGF0ZSA9IHByb3h5T2JqZWN0ID09IG51bGwgPyB2b2lkIDAgOiBwcm94eU9iamVjdFtQUk9YWV9TVEFURV07XG4gIHJldHVybiBzdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogc3RhdGVbMl07XG59XG5mdW5jdGlvbiBzdWJzY3JpYmUocHJveHlPYmplY3QsIGNhbGxiYWNrLCBub3RpZnlJblN5bmMpIHtcbiAgaWYgKChpbXBvcnQubWV0YS5lbnYgJiYgaW1wb3J0Lm1ldGEuZW52Lk1PREUpICE9PSBcInByb2R1Y3Rpb25cIiAmJiAhKHByb3h5T2JqZWN0ID09IG51bGwgPyB2b2lkIDAgOiBwcm94eU9iamVjdFtQUk9YWV9TVEFURV0pKSB7XG4gICAgY29uc29sZS53YXJuKFwiUGxlYXNlIHVzZSBwcm94eSBvYmplY3RcIik7XG4gIH1cbiAgbGV0IHByb21pc2U7XG4gIGNvbnN0IG9wcyA9IFtdO1xuICBjb25zdCBsaXN0ZW5lcnMgPSBwcm94eU9iamVjdFtQUk9YWV9TVEFURV1bNF07XG4gIGNvbnN0IGxpc3RlbmVyID0gKG9wKSA9PiB7XG4gICAgb3BzLnB1c2gob3ApO1xuICAgIGlmIChub3RpZnlJblN5bmMpIHtcbiAgICAgIGNhbGxiYWNrKG9wcy5zcGxpY2UoMCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXByb21pc2UpIHtcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgcHJvbWlzZSA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGxpc3RlbmVycy5oYXMobGlzdGVuZXIpKSB7XG4gICAgICAgICAgY2FsbGJhY2sob3BzLnNwbGljZSgwKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgbGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gIHJldHVybiAoKSA9PiBsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbn1cbmZ1bmN0aW9uIHNuYXBzaG90KHByb3h5T2JqZWN0LCBoYW5kbGVQcm9taXNlKSB7XG4gIGlmICgoaW1wb3J0Lm1ldGEuZW52ICYmIGltcG9ydC5tZXRhLmVudi5NT0RFKSAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgIShwcm94eU9iamVjdCA9PSBudWxsID8gdm9pZCAwIDogcHJveHlPYmplY3RbUFJPWFlfU1RBVEVdKSkge1xuICAgIGNvbnNvbGUud2FybihcIlBsZWFzZSB1c2UgcHJveHkgb2JqZWN0XCIpO1xuICB9XG4gIGNvbnN0IFt0YXJnZXQsIHJlY2VpdmVyLCB2ZXJzaW9uLCBjcmVhdGVTbmFwc2hvdF0gPSBwcm94eU9iamVjdFtQUk9YWV9TVEFURV07XG4gIHJldHVybiBjcmVhdGVTbmFwc2hvdCh0YXJnZXQsIHJlY2VpdmVyLCB2ZXJzaW9uLCBoYW5kbGVQcm9taXNlKTtcbn1cbmZ1bmN0aW9uIHJlZihvYmopIHtcbiAgcmVmU2V0LmFkZChvYmopO1xuICByZXR1cm4gb2JqO1xufVxuY29uc3QgdW5zdGFibGVfYnVpbGRQcm94eUZ1bmN0aW9uID0gYnVpbGRQcm94eUZ1bmN0aW9uO1xuXG5leHBvcnQgeyBnZXRWZXJzaW9uLCBwcm94eSwgcmVmLCBzbmFwc2hvdCwgc3Vic2NyaWJlLCB1bnN0YWJsZV9idWlsZFByb3h5RnVuY3Rpb24gfTtcbiIsImltcG9ydHtwcm94eSBhcyBwLHN1YnNjcmliZSBhcyBnfWZyb21cInZhbHRpby92YW5pbGxhXCI7aW1wb3J0e0J1ZmZlciBhcyBFfWZyb21cImJ1ZmZlclwiO2NvbnN0IG49cCh7c2VsZWN0ZWRDaGFpbjp2b2lkIDAsY2hhaW5zOnZvaWQgMCxzdGFuZGFsb25lQ2hhaW5zOnZvaWQgMCxzdGFuZGFsb25lVXJpOnZvaWQgMCxhZGRyZXNzOnZvaWQgMCxwcm9maWxlTmFtZTp2b2lkIDAscHJvZmlsZUF2YXRhcjp2b2lkIDAscHJvZmlsZUxvYWRpbmc6ITEsYmFsYW5jZUxvYWRpbmc6ITEsYmFsYW5jZTp2b2lkIDAsaXNDb25uZWN0ZWQ6ITEsaXNTdGFuZGFsb25lOiExLGlzQ3VzdG9tRGVza3RvcDohMSxpc0N1c3RvbU1vYmlsZTohMSxpc0V4cGxvcmVyOiExfSksYT17c3RhdGU6bixzdWJzY3JpYmUoZSl7cmV0dXJuIGcobiwoKT0+ZShuKSl9LHNldENoYWlucyhlKXtuLmNoYWlucz1lfSxzZXRTdGFuZGFsb25lQ2hhaW5zKGUpe24uc3RhbmRhbG9uZUNoYWlucz1lfSxzZXRTdGFuZGFsb25lVXJpKGUpe24uc3RhbmRhbG9uZVVyaT1lfSxnZXRTZWxlY3RlZENoYWluKCl7aWYoIW4uc2VsZWN0ZWRDaGFpbil7Y29uc3QgZT13LmNsaWVudCgpLmdldE5ldHdvcmsoKS5jaGFpbjtuLnNlbGVjdGVkQ2hhaW49ZX1yZXR1cm4gbi5zZWxlY3RlZENoYWlufSxzZXRTZWxlY3RlZENoYWluKGUpe24uc2VsZWN0ZWRDaGFpbj1lfSxzZXRJc1N0YW5kYWxvbmUoZSl7bi5pc1N0YW5kYWxvbmU9ZX0sc2V0SXNDdXN0b21EZXNrdG9wKGUpe24uaXNDdXN0b21EZXNrdG9wPWV9LHNldElzQ3VzdG9tTW9iaWxlKGUpe24uaXNDdXN0b21Nb2JpbGU9ZX0sc2V0SXNFeHBsb3JlcihlKXtuLmlzRXhwbG9yZXI9ZX0sZ2V0QWNjb3VudCgpe2NvbnN0IGU9dy5jbGllbnQoKS5nZXRBY2NvdW50KCk7bi5hZGRyZXNzPWUuYWRkcmVzcyxuLmlzQ29ubmVjdGVkPWUuaXNDb25uZWN0ZWR9LHNldEFkZHJlc3MoZSl7bi5hZGRyZXNzPWV9LHNldElzQ29ubmVjdGVkKGUpe24uaXNDb25uZWN0ZWQ9ZX0sc2V0UHJvZmlsZU5hbWUoZSl7bi5wcm9maWxlTmFtZT1lfSxzZXRQcm9maWxlQXZhdGFyKGUpe24ucHJvZmlsZUF2YXRhcj1lfSxzZXRQcm9maWxlTG9hZGluZyhlKXtuLnByb2ZpbGVMb2FkaW5nPWV9LHNldEJhbGFuY2VMb2FkaW5nKGUpe24uYmFsYW5jZUxvYWRpbmc9ZX0sc2V0QmFsYW5jZShlKXtuLmJhbGFuY2U9ZX0scmVzZXRQcm9maWxlKCl7bi5wcm9maWxlTmFtZT12b2lkIDAsbi5wcm9maWxlQXZhdGFyPXZvaWQgMCxuLmJhbGFuY2U9dm9pZCAwfSxyZXNldEFjY291bnQoKXtuLmFkZHJlc3M9dm9pZCAwLGEucmVzZXRQcm9maWxlKCl9fSx1PXAoe2luaXRpYWxpemVkOiExLGV0aGVyZXVtQ2xpZW50OnZvaWQgMH0pLHc9e3NldEV0aGVyZXVtQ2xpZW50KGUpeyF1LmluaXRpYWxpemVkJiZlJiYodS5ldGhlcmV1bUNsaWVudD1lLGEuc2V0Q2hhaW5zKGUuY2hhaW5zKSx1LmluaXRpYWxpemVkPSEwKX0sY2xpZW50KCl7aWYodS5ldGhlcmV1bUNsaWVudClyZXR1cm4gdS5ldGhlcmV1bUNsaWVudDt0aHJvdyBuZXcgRXJyb3IoXCJDbGllbnRDdHJsIGhhcyBubyBjbGllbnQgc2V0XCIpfX0sZD17V0FMTEVUQ09OTkVDVF9ERUVQTElOS19DSE9JQ0U6XCJXQUxMRVRDT05ORUNUX0RFRVBMSU5LX0NIT0lDRVwiLGlzTW9iaWxlKCl7cmV0dXJuIHR5cGVvZiB3aW5kb3c8XCJ1XCI/Qm9vbGVhbih3aW5kb3cubWF0Y2hNZWRpYShcIihwb2ludGVyOmNvYXJzZSlcIikubWF0Y2hlc3x8L0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fE9wZXJhIE1pbmkvdS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKTohMX0saXNBbmRyb2lkKCl7cmV0dXJuIGQuaXNNb2JpbGUoKSYmbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwiYW5kcm9pZFwiKX0saXNFbXB0eU9iamVjdChlKXtyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKGUpPT09T2JqZWN0LnByb3RvdHlwZSYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSkubGVuZ3RoPT09MCYmT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKS5sZW5ndGg9PT0wfSxpc0h0dHBVcmwoZSl7cmV0dXJuIGUuc3RhcnRzV2l0aChcImh0dHA6Ly9cIil8fGUuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpfSxmb3JtYXROYXRpdmVVcmwoZSx0LHMpe2lmKGQuaXNIdHRwVXJsKGUpKXJldHVybiB0aGlzLmZvcm1hdFVuaXZlcnNhbFVybChlLHQscyk7bGV0IG89ZTtvLmluY2x1ZGVzKFwiOi8vXCIpfHwobz1lLnJlcGxhY2VBbGwoXCIvXCIsXCJcIikucmVwbGFjZUFsbChcIjpcIixcIlwiKSxvPWAke299Oi8vYCksdGhpcy5zZXRXYWxsZXRDb25uZWN0RGVlcExpbmsobyxzKTtjb25zdCBsPWVuY29kZVVSSUNvbXBvbmVudCh0KTtyZXR1cm5gJHtvfXdjP3VyaT0ke2x9YH0sZm9ybWF0VW5pdmVyc2FsVXJsKGUsdCxzKXtpZighZC5pc0h0dHBVcmwoZSkpcmV0dXJuIHRoaXMuZm9ybWF0TmF0aXZlVXJsKGUsdCxzKTtsZXQgbz1lO2UuZW5kc1dpdGgoXCIvXCIpJiYobz1lLnNsaWNlKDAsLTEpKSx0aGlzLnNldFdhbGxldENvbm5lY3REZWVwTGluayhvLHMpO2NvbnN0IGw9ZW5jb2RlVVJJQ29tcG9uZW50KHQpO3JldHVybmAke299L3djP3VyaT0ke2x9YH0sYXN5bmMgd2FpdChlKXtyZXR1cm4gbmV3IFByb21pc2UodD0+e3NldFRpbWVvdXQodCxlKX0pfSxvcGVuSHJlZihlLHQ9XCJfc2VsZlwiKXt3aW5kb3cub3BlbihlLHQsXCJub3JlZmVycmVyIG5vb3BlbmVyXCIpfSxzZXRXYWxsZXRDb25uZWN0RGVlcExpbmsoZSx0KXtsb2NhbFN0b3JhZ2Uuc2V0SXRlbShkLldBTExFVENPTk5FQ1RfREVFUExJTktfQ0hPSUNFLEpTT04uc3RyaW5naWZ5KHtocmVmOmUsbmFtZTp0fSkpfSxzZXRXYWxsZXRDb25uZWN0QW5kcm9pZERlZXBMaW5rKGUpe2NvbnN0W3RdPWUuc3BsaXQoXCI/XCIpO2xvY2FsU3RvcmFnZS5zZXRJdGVtKGQuV0FMTEVUQ09OTkVDVF9ERUVQTElOS19DSE9JQ0UsSlNPTi5zdHJpbmdpZnkoe2hyZWY6dCxuYW1lOlwiQW5kcm9pZFwifSkpfSxyZW1vdmVXYWxsZXRDb25uZWN0RGVlcExpbmsoKXtsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShkLldBTExFVENPTk5FQ1RfREVFUExJTktfQ0hPSUNFKX0saXNOdWxsKGUpe3JldHVybiBlPT09bnVsbH19O2Z1bmN0aW9uIE8oKXtyZXR1cm4gdHlwZW9mIG1hdGNoTWVkaWE8XCJ1XCImJm1hdGNoTWVkaWEoXCIocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspXCIpLm1hdGNoZXN9Y29uc3QgaD1wKHtwcm9qZWN0SWQ6dm9pZCAwLHRoZW1lTW9kZTpPKCk/XCJkYXJrXCI6XCJsaWdodFwiLHRoZW1lQ29sb3I6XCJkZWZhdWx0XCIsdGhlbWVCYWNrZ3JvdW5kOmQuaXNNb2JpbGUoKT9cInRoZW1lQ29sb3JcIjpcImdyYWRpZW50XCIsdGhlbWVaSW5kZXg6ODksbW9iaWxlV2FsbGV0czp2b2lkIDAsZGVza3RvcFdhbGxldHM6dm9pZCAwLHdhbGxldEltYWdlczp2b2lkIDAsY2hhaW5JbWFnZXM6dm9pZCAwLHRva2VuSW1hZ2VzOnZvaWQgMCxzdGFuZGFsb25lQ2hhaW5zOnZvaWQgMCxlbmFibGVTdGFuZGFsb25lTW9kZTohMSxlbmFibGVOZXR3b3JrVmlldzohMSxkZWZhdWx0Q2hhaW46dm9pZCAwLGV4cGxvcmVyQWxsb3dMaXN0OnZvaWQgMCxleHBsb3JlckRlbnlMaXN0OnZvaWQgMCx0ZXJtc09mU2VydmljZVVybDp2b2lkIDAscHJpdmFjeVBvbGljeVVybDp2b2lkIDB9KSxXPXtzdGF0ZTpoLHN1YnNjcmliZShlKXtyZXR1cm4gZyhoLCgpPT5lKGgpKX0sc2V0Q29uZmlnKGUpe3ZhciB0LHMsbyxsO2lmKGEuc2V0U3RhbmRhbG9uZUNoYWlucyhlLnN0YW5kYWxvbmVDaGFpbnMpLGEuc2V0SXNTdGFuZGFsb25lKEJvb2xlYW4oKHQ9ZS5zdGFuZGFsb25lQ2hhaW5zKT09bnVsbD92b2lkIDA6dC5sZW5ndGgpfHxCb29sZWFuKGUuZW5hYmxlU3RhbmRhbG9uZU1vZGUpKSxhLnNldElzQ3VzdG9tTW9iaWxlKEJvb2xlYW4oKHM9ZS5tb2JpbGVXYWxsZXRzKT09bnVsbD92b2lkIDA6cy5sZW5ndGgpKSxhLnNldElzQ3VzdG9tRGVza3RvcChCb29sZWFuKChvPWUuZGVza3RvcFdhbGxldHMpPT1udWxsP3ZvaWQgMDpvLmxlbmd0aCkpLGEuc2V0SXNFeHBsb3JlcihCb29sZWFuKChsPWUucHJvamVjdElkKT09bnVsbD92b2lkIDA6bC5sZW5ndGgpKSxlLmRlZmF1bHRDaGFpbilhLnNldFNlbGVjdGVkQ2hhaW4oZS5kZWZhdWx0Q2hhaW4pO2Vsc2UgaWYoIWEuc3RhdGUuaXNTdGFuZGFsb25lKXtjb25zdCBtPXcuY2xpZW50KCkuZ2V0RGVmYXVsdENoYWluKCk7YS5zZXRTZWxlY3RlZENoYWluKG0pfU9iamVjdC5hc3NpZ24oaCxlKX0sc2V0VGhlbWVDb25maWcoZSl7T2JqZWN0LmFzc2lnbihoLGUpfX0sST1cImh0dHBzOi8vZXhwbG9yZXItYXBpLndhbGxldGNvbm5lY3QuY29tXCI7ZnVuY3Rpb24gTChlKXtjb25zdCB0PU9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhlKS5maWx0ZXIoKFtzLG9dKT0+dHlwZW9mIG88XCJ1XCImJm8hPT1udWxsJiZvIT09XCJcIikubWFwKChbcyxvXSk9PltzLG8udG9TdHJpbmcoKV0pKTtyZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyh0KS50b1N0cmluZygpfWNvbnN0IGY9e2FzeW5jIGZldGNoV2FsbGV0cyhlLHQpe2NvbnN0IHM9TCh0KSxvPWAke0l9L3YzL3dhbGxldHM/cHJvamVjdElkPSR7ZX0mJHtzfWA7cmV0dXJuKGF3YWl0IGZldGNoKG8pKS5qc29uKCl9LGZvcm1hdEltYWdlVXJsKGUsdCl7cmV0dXJuYCR7SX0vdjMvbG9nby9sZy8ke3R9P3Byb2plY3RJZD0ke2V9YH19LHI9cCh7d2FsbGV0czp7bGlzdGluZ3M6W10sdG90YWw6MCxwYWdlOjF9LHNlYXJjaDp7bGlzdGluZ3M6W10sdG90YWw6MCxwYWdlOjF9LHByZXZpZXdXYWxsZXRzOltdLHJlY29tZW5kZWRXYWxsZXRzOltdfSk7ZnVuY3Rpb24gdigpe2NvbnN0e3Byb2plY3RJZDplfT1XLnN0YXRlO2lmKCFlKXRocm93IG5ldyBFcnJvcihcInByb2plY3RJZCBpcyByZXF1aXJlZCB0byB3b3JrIHdpdGggZXhwbG9yZXIgYXBpXCIpO3JldHVybiBlfWNvbnN0IFU9e3N0YXRlOnIsYXN5bmMgZ2V0UHJldmlld1dhbGxldHMoZSl7Y29uc3R7bGlzdGluZ3M6dH09YXdhaXQgZi5mZXRjaFdhbGxldHModigpLGUpO3JldHVybiByLnByZXZpZXdXYWxsZXRzPU9iamVjdC52YWx1ZXModCksci5wcmV2aWV3V2FsbGV0c30sYXN5bmMgZ2V0UmVjb21lbmRlZFdhbGxldHMoKXtjb25zdHtsaXN0aW5nczplfT1hd2FpdCBmLmZldGNoV2FsbGV0cyh2KCkse3BhZ2U6MSxlbnRyaWVzOjZ9KTtyLnJlY29tZW5kZWRXYWxsZXRzPU9iamVjdC52YWx1ZXMoZSl9LGFzeW5jIGdldFBhZ2luYXRlZFdhbGxldHMoZSl7Y29uc3R7cGFnZTp0LHNlYXJjaDpzfT1lLHtsaXN0aW5nczpvLHRvdGFsOmx9PWF3YWl0IGYuZmV0Y2hXYWxsZXRzKHYoKSxlKSxtPU9iamVjdC52YWx1ZXMobyksYj1zP1wic2VhcmNoXCI6XCJ3YWxsZXRzXCI7cmV0dXJuIHJbYl09e2xpc3RpbmdzOlsuLi5yW2JdLmxpc3RpbmdzLC4uLm1dLHRvdGFsOmwscGFnZTp0Pz8xfSx7bGlzdGluZ3M6bSx0b3RhbDpsfX0sZ2V0SW1hZ2VVcmwoZSl7cmV0dXJuIGYuZm9ybWF0SW1hZ2VVcmwodigpLGUpfSxyZXNldFNlYXJjaCgpe3Iuc2VhcmNoPXtsaXN0aW5nczpbXSx0b3RhbDowLHBhZ2U6MX19fSxpPXAoe2hpc3Rvcnk6W1wiQ29ubmVjdFdhbGxldFwiXSx2aWV3OlwiQ29ubmVjdFdhbGxldFwiLGRhdGE6dm9pZCAwfSkseT17c3RhdGU6aSxzdWJzY3JpYmUoZSl7cmV0dXJuIGcoaSwoKT0+ZShpKSl9LHB1c2goZSx0KXtlIT09aS52aWV3JiYoaS52aWV3PWUsdCYmKGkuZGF0YT10KSxpLmhpc3RvcnkucHVzaChlKSl9LHJlcGxhY2UoZSl7aS52aWV3PWUsaS5oaXN0b3J5PVtlXX0sZ29CYWNrKCl7aWYoaS5oaXN0b3J5Lmxlbmd0aD4xKXtpLmhpc3RvcnkucG9wKCk7Y29uc3RbZV09aS5oaXN0b3J5LnNsaWNlKC0xKTtpLnZpZXc9ZX19fSxDPXAoe29wZW46ITF9KSxBPXtzdGF0ZTpDLHN1YnNjcmliZShlKXtyZXR1cm4gZyhDLCgpPT5lKEMpKX0sb3BlbihlKXt2YXIgdDtlIT1udWxsJiZlLnJvdXRlJiZ5LnJlcGxhY2UoZS5yb3V0ZSksZSE9bnVsbCYmZS51cmkmJmEuc2V0U3RhbmRhbG9uZVVyaShlLnVyaSksKHQ9ZT8uc3RhbmRhbG9uZUNoYWlucykhPW51bGwmJnQubGVuZ3RoJiZhLnNldFN0YW5kYWxvbmVDaGFpbnMoZS5zdGFuZGFsb25lQ2hhaW5zKSxDLm9wZW49ITB9LGNsb3NlKCl7Qy5vcGVuPSExfX0sYz1wKHtvcGVuOiExLG1lc3NhZ2U6XCJcIix2YXJpYW50Olwic3VjY2Vzc1wifSksUD17c3RhdGU6YyxzdWJzY3JpYmUoZSl7cmV0dXJuIGcoYywoKT0+ZShjKSl9LG9wZW5Ub2FzdChlLHQpe2Mub3Blbj0hMCxjLm1lc3NhZ2U9ZSxjLnZhcmlhbnQ9dH0sY2xvc2VUb2FzdCgpe2Mub3Blbj0hMX19O3R5cGVvZiB3aW5kb3c8XCJ1XCImJih3aW5kb3cuQnVmZmVyfHwod2luZG93LkJ1ZmZlcj1FKSx3aW5kb3cuZ2xvYmFsfHwod2luZG93Lmdsb2JhbD13aW5kb3cpLHdpbmRvdy5wcm9jZXNzfHwod2luZG93LnByb2Nlc3M9e2Vudjp7fX0pKTtleHBvcnR7dyBhcyBDbGllbnRDdHJsLFcgYXMgQ29uZmlnQ3RybCxkIGFzIENvcmVVdGlsLFUgYXMgRXhwbG9yZXJDdHJsLEEgYXMgTW9kYWxDdHJsLGEgYXMgT3B0aW9uc0N0cmwseSBhcyBSb3V0ZXJDdHJsLFAgYXMgVG9hc3RDdHJsfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLndlYjN3YWxsZXQuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5mLmogPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5cdFx0dmFyIGluc3RhbGxlZENodW5rRGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpID8gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdIDogdW5kZWZpbmVkO1xuXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuXHRcdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIi5cblx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuXHRcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcblx0XHRcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IChpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSBbcmVzb2x2ZSwgcmVqZWN0XSkpO1xuXHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cblx0XHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG5cdFx0XHRcdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKTtcblx0XHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0XHRcdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkpIHtcblx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGFbMV0oZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQsIFwiY2h1bmstXCIgKyBjaHVua0lkLCBjaHVua0lkKTtcblx0XHRcdFx0fSBlbHNlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdFx0XHR9XG5cdFx0fVxufTtcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IChwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGlmKGNodW5rSWRzLnNvbWUoKGlkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2lkXSAhPT0gMCkpKSB7XG5cdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0fVxuXHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG5cdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKCk7XG5cdFx0fVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdH1cblxufVxuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua3dlYjNfc2lsdmVubGVhZlwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmt3ZWIzX3NpbHZlbmxlYWZcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsImltcG9ydHtJRXZlbnRzIGFzIGV9ZnJvbVwiQHdhbGxldGNvbm5lY3QvZXZlbnRzXCI7aW1wb3J0IGMse0V2ZW50RW1pdHRlciBhcyBpfWZyb21cImV2ZW50c1wiO2NsYXNzIG4gZXh0ZW5kcyBle2NvbnN0cnVjdG9yKHMpe3N1cGVyKCksdGhpcy5vcHRzPXMsdGhpcy5wcm90b2NvbD1cIndjXCIsdGhpcy52ZXJzaW9uPTJ9fWNsYXNzIGx7Y29uc3RydWN0b3Iocyx0LG8pe3RoaXMuY29yZT1zLHRoaXMubG9nZ2VyPXR9fWNsYXNzIGggZXh0ZW5kcyBle2NvbnN0cnVjdG9yKHMsdCl7c3VwZXIoKSx0aGlzLmNvcmU9cyx0aGlzLmxvZ2dlcj10LHRoaXMucmVjb3Jkcz1uZXcgTWFwfX1jbGFzcyBhe2NvbnN0cnVjdG9yKHMsdCl7dGhpcy5sb2dnZXI9cyx0aGlzLmNvcmU9dH19Y2xhc3MgdSBleHRlbmRzIGV7Y29uc3RydWN0b3Iocyx0KXtzdXBlcigpLHRoaXMucmVsYXllcj1zLHRoaXMubG9nZ2VyPXR9fWNsYXNzIGcgZXh0ZW5kcyBle2NvbnN0cnVjdG9yKHMpe3N1cGVyKCl9fWNsYXNzIHB7Y29uc3RydWN0b3Iocyx0LG8sUyl7dGhpcy5jb3JlPXMsdGhpcy5sb2dnZXI9dCx0aGlzLm5hbWU9b319Y2xhc3MgSXtjb25zdHJ1Y3Rvcigpe3RoaXMubWFwPW5ldyBNYXB9fWNsYXNzIHggZXh0ZW5kcyBle2NvbnN0cnVjdG9yKHMsdCl7c3VwZXIoKSx0aGlzLnJlbGF5ZXI9cyx0aGlzLmxvZ2dlcj10fX1jbGFzcyBke2NvbnN0cnVjdG9yKHMsdCl7dGhpcy5jb3JlPXMsdGhpcy5sb2dnZXI9dH19Y2xhc3MgRSBleHRlbmRzIGV7Y29uc3RydWN0b3Iocyx0KXtzdXBlcigpLHRoaXMuY29yZT1zLHRoaXMubG9nZ2VyPXR9fWNsYXNzIG17Y29uc3RydWN0b3Iocyx0KXt0aGlzLmxvZ2dlcj1zLHRoaXMuY29yZT10fX1jbGFzcyB2IGV4dGVuZHMgY3tjb25zdHJ1Y3Rvcigpe3N1cGVyKCl9fWNsYXNzIHl7Y29uc3RydWN0b3Iocyl7dGhpcy5vcHRzPXMsdGhpcy5wcm90b2NvbD1cIndjXCIsdGhpcy52ZXJzaW9uPTJ9fWNsYXNzIGIgZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKCl7c3VwZXIoKX19Y2xhc3MgQ3tjb25zdHJ1Y3RvcihzKXt0aGlzLmNsaWVudD1zfX1leHBvcnR7biBhcyBJQ29yZSxsIGFzIElDcnlwdG8sQyBhcyBJRW5naW5lLGIgYXMgSUVuZ2luZUV2ZW50cyxFIGFzIElFeHBpcmVyLGggYXMgSUpzb25ScGNIaXN0b3J5LGQgYXMgSUtleUNoYWluLGEgYXMgSU1lc3NhZ2VUcmFja2VyLG0gYXMgSVBhaXJpbmcsdSBhcyBJUHVibGlzaGVyLGcgYXMgSVJlbGF5ZXIseSBhcyBJU2lnbkNsaWVudCx2IGFzIElTaWduQ2xpZW50RXZlbnRzLHAgYXMgSVN0b3JlLHggYXMgSVN1YnNjcmliZXIsSSBhcyBJU3Vic2NyaWJlclRvcGljTWFwfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIiwiZXhwb3J0IGZ1bmN0aW9uIHNhZmVKc29uUGFyc2UodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHNhZmUganNvbiBwYXJzZSB2YWx1ZSBvZiB0eXBlICR7dHlwZW9mIHZhbHVlfWApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVKc29uU3RyaW5naWZ5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZXhwb3J0IGNvbnN0IEpXVF9JUklESVVNX0FMRyA9IFwiRWREU0FcIjtcbmV4cG9ydCBjb25zdCBKV1RfSVJJRElVTV9UWVAgPSBcIkpXVFwiO1xuZXhwb3J0IGNvbnN0IEpXVF9ERUxJTUlURVIgPSBcIi5cIjtcbmV4cG9ydCBjb25zdCBKV1RfRU5DT0RJTkcgPSBcImJhc2U2NHVybFwiO1xuZXhwb3J0IGNvbnN0IEpTT05fRU5DT0RJTkcgPSBcInV0ZjhcIjtcbmV4cG9ydCBjb25zdCBEQVRBX0VOQ09ESU5HID0gXCJ1dGY4XCI7XG5leHBvcnQgY29uc3QgRElEX0RFTElNSVRFUiA9IFwiOlwiO1xuZXhwb3J0IGNvbnN0IERJRF9QUkVGSVggPSBcImRpZFwiO1xuZXhwb3J0IGNvbnN0IERJRF9NRVRIT0QgPSBcImtleVwiO1xuZXhwb3J0IGNvbnN0IE1VTFRJQ09ERUNfRUQyNTUxOV9FTkNPRElORyA9IFwiYmFzZTU4YnRjXCI7XG5leHBvcnQgY29uc3QgTVVMVElDT0RFQ19FRDI1NTE5X0JBU0UgPSBcInpcIjtcbmV4cG9ydCBjb25zdCBNVUxUSUNPREVDX0VEMjU1MTlfSEVBREVSID0gXCJLMzZcIjtcbmV4cG9ydCBjb25zdCBNVUxUSUNPREVDX0VEMjU1MTlfTEVOR1RIID0gMzI7XG5leHBvcnQgY29uc3QgS0VZX1BBSVJfU0VFRF9MRU5HVEggPSAzMjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gYWxsb2Moc2l6ZSA9IDApIHtcbiAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyICE9IG51bGwgJiYgZ2xvYmFsVGhpcy5CdWZmZXIuYWxsb2MgIT0gbnVsbCkge1xuICAgIHJldHVybiBnbG9iYWxUaGlzLkJ1ZmZlci5hbGxvYyhzaXplKTtcbiAgfVxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYWxsb2NVbnNhZmUoc2l6ZSA9IDApIHtcbiAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyICE9IG51bGwgJiYgZ2xvYmFsVGhpcy5CdWZmZXIuYWxsb2NVbnNhZmUgIT0gbnVsbCkge1xuICAgIHJldHVybiBnbG9iYWxUaGlzLkJ1ZmZlci5hbGxvY1Vuc2FmZShzaXplKTtcbiAgfVxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG59IiwiaW1wb3J0IHsgYWxsb2NVbnNhZmUgfSBmcm9tICcuL2FsbG9jLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQoYXJyYXlzLCBsZW5ndGgpIHtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSBhcnJheXMucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyArIGN1cnIubGVuZ3RoLCAwKTtcbiAgfVxuICBjb25zdCBvdXRwdXQgPSBhbGxvY1Vuc2FmZShsZW5ndGgpO1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgZm9yIChjb25zdCBhcnIgb2YgYXJyYXlzKSB7XG4gICAgb3V0cHV0LnNldChhcnIsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IGFyci5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJmdW5jdGlvbiBiYXNlKEFMUEhBQkVULCBuYW1lKSB7XG4gIGlmIChBTFBIQUJFVC5sZW5ndGggPj0gMjU1KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxwaGFiZXQgdG9vIGxvbmcnKTtcbiAgfVxuICB2YXIgQkFTRV9NQVAgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IEJBU0VfTUFQLmxlbmd0aDsgaisrKSB7XG4gICAgQkFTRV9NQVBbal0gPSAyNTU7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBBTFBIQUJFVC5sZW5ndGg7IGkrKykge1xuICAgIHZhciB4ID0gQUxQSEFCRVQuY2hhckF0KGkpO1xuICAgIHZhciB4YyA9IHguY2hhckNvZGVBdCgwKTtcbiAgICBpZiAoQkFTRV9NQVBbeGNdICE9PSAyNTUpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoeCArICcgaXMgYW1iaWd1b3VzJyk7XG4gICAgfVxuICAgIEJBU0VfTUFQW3hjXSA9IGk7XG4gIH1cbiAgdmFyIEJBU0UgPSBBTFBIQUJFVC5sZW5ndGg7XG4gIHZhciBMRUFERVIgPSBBTFBIQUJFVC5jaGFyQXQoMCk7XG4gIHZhciBGQUNUT1IgPSBNYXRoLmxvZyhCQVNFKSAvIE1hdGgubG9nKDI1Nik7XG4gIHZhciBpRkFDVE9SID0gTWF0aC5sb2coMjU2KSAvIE1hdGgubG9nKEJBU0UpO1xuICBmdW5jdGlvbiBlbmNvZGUoc291cmNlKSB7XG4gICAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpO1xuICAgIGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzb3VyY2UpKSB7XG4gICAgICBzb3VyY2UgPSBuZXcgVWludDhBcnJheShzb3VyY2UuYnVmZmVyLCBzb3VyY2UuYnl0ZU9mZnNldCwgc291cmNlLmJ5dGVMZW5ndGgpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICBzb3VyY2UgPSBVaW50OEFycmF5LmZyb20oc291cmNlKTtcbiAgICB9XG4gICAgaWYgKCEoc291cmNlIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFVpbnQ4QXJyYXknKTtcbiAgICB9XG4gICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIHplcm9lcyA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgdmFyIHBiZWdpbiA9IDA7XG4gICAgdmFyIHBlbmQgPSBzb3VyY2UubGVuZ3RoO1xuICAgIHdoaWxlIChwYmVnaW4gIT09IHBlbmQgJiYgc291cmNlW3BiZWdpbl0gPT09IDApIHtcbiAgICAgIHBiZWdpbisrO1xuICAgICAgemVyb2VzKys7XG4gICAgfVxuICAgIHZhciBzaXplID0gKHBlbmQgLSBwYmVnaW4pICogaUZBQ1RPUiArIDEgPj4+IDA7XG4gICAgdmFyIGI1OCA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuICAgIHdoaWxlIChwYmVnaW4gIT09IHBlbmQpIHtcbiAgICAgIHZhciBjYXJyeSA9IHNvdXJjZVtwYmVnaW5dO1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgZm9yICh2YXIgaXQxID0gc2l6ZSAtIDE7IChjYXJyeSAhPT0gMCB8fCBpIDwgbGVuZ3RoKSAmJiBpdDEgIT09IC0xOyBpdDEtLSwgaSsrKSB7XG4gICAgICAgIGNhcnJ5ICs9IDI1NiAqIGI1OFtpdDFdID4+PiAwO1xuICAgICAgICBiNThbaXQxXSA9IGNhcnJ5ICUgQkFTRSA+Pj4gMDtcbiAgICAgICAgY2FycnkgPSBjYXJyeSAvIEJBU0UgPj4+IDA7XG4gICAgICB9XG4gICAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb24temVybyBjYXJyeScpO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gaTtcbiAgICAgIHBiZWdpbisrO1xuICAgIH1cbiAgICB2YXIgaXQyID0gc2l6ZSAtIGxlbmd0aDtcbiAgICB3aGlsZSAoaXQyICE9PSBzaXplICYmIGI1OFtpdDJdID09PSAwKSB7XG4gICAgICBpdDIrKztcbiAgICB9XG4gICAgdmFyIHN0ciA9IExFQURFUi5yZXBlYXQoemVyb2VzKTtcbiAgICBmb3IgKDsgaXQyIDwgc2l6ZTsgKytpdDIpIHtcbiAgICAgIHN0ciArPSBBTFBIQUJFVC5jaGFyQXQoYjU4W2l0Ml0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIGZ1bmN0aW9uIGRlY29kZVVuc2FmZShzb3VyY2UpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFN0cmluZycpO1xuICAgIH1cbiAgICBpZiAoc291cmNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KCk7XG4gICAgfVxuICAgIHZhciBwc3ogPSAwO1xuICAgIGlmIChzb3VyY2VbcHN6XSA9PT0gJyAnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB6ZXJvZXMgPSAwO1xuICAgIHZhciBsZW5ndGggPSAwO1xuICAgIHdoaWxlIChzb3VyY2VbcHN6XSA9PT0gTEVBREVSKSB7XG4gICAgICB6ZXJvZXMrKztcbiAgICAgIHBzeisrO1xuICAgIH1cbiAgICB2YXIgc2l6ZSA9IChzb3VyY2UubGVuZ3RoIC0gcHN6KSAqIEZBQ1RPUiArIDEgPj4+IDA7XG4gICAgdmFyIGIyNTYgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICB3aGlsZSAoc291cmNlW3Bzel0pIHtcbiAgICAgIHZhciBjYXJyeSA9IEJBU0VfTUFQW3NvdXJjZS5jaGFyQ29kZUF0KHBzeildO1xuICAgICAgaWYgKGNhcnJ5ID09PSAyNTUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGkgPSAwO1xuICAgICAgZm9yICh2YXIgaXQzID0gc2l6ZSAtIDE7IChjYXJyeSAhPT0gMCB8fCBpIDwgbGVuZ3RoKSAmJiBpdDMgIT09IC0xOyBpdDMtLSwgaSsrKSB7XG4gICAgICAgIGNhcnJ5ICs9IEJBU0UgKiBiMjU2W2l0M10gPj4+IDA7XG4gICAgICAgIGIyNTZbaXQzXSA9IGNhcnJ5ICUgMjU2ID4+PiAwO1xuICAgICAgICBjYXJyeSA9IGNhcnJ5IC8gMjU2ID4+PiAwO1xuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm9uLXplcm8gY2FycnknKTtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IGk7XG4gICAgICBwc3orKztcbiAgICB9XG4gICAgaWYgKHNvdXJjZVtwc3pdID09PSAnICcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGl0NCA9IHNpemUgLSBsZW5ndGg7XG4gICAgd2hpbGUgKGl0NCAhPT0gc2l6ZSAmJiBiMjU2W2l0NF0gPT09IDApIHtcbiAgICAgIGl0NCsrO1xuICAgIH1cbiAgICB2YXIgdmNoID0gbmV3IFVpbnQ4QXJyYXkoemVyb2VzICsgKHNpemUgLSBpdDQpKTtcbiAgICB2YXIgaiA9IHplcm9lcztcbiAgICB3aGlsZSAoaXQ0ICE9PSBzaXplKSB7XG4gICAgICB2Y2hbaisrXSA9IGIyNTZbaXQ0KytdO1xuICAgIH1cbiAgICByZXR1cm4gdmNoO1xuICB9XG4gIGZ1bmN0aW9uIGRlY29kZShzdHJpbmcpIHtcbiAgICB2YXIgYnVmZmVyID0gZGVjb2RlVW5zYWZlKHN0cmluZyk7XG4gICAgaWYgKGJ1ZmZlcikge1xuICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBOb24tJHsgbmFtZSB9IGNoYXJhY3RlcmApO1xuICB9XG4gIHJldHVybiB7XG4gICAgZW5jb2RlOiBlbmNvZGUsXG4gICAgZGVjb2RlVW5zYWZlOiBkZWNvZGVVbnNhZmUsXG4gICAgZGVjb2RlOiBkZWNvZGVcbiAgfTtcbn1cbnZhciBzcmMgPSBiYXNlO1xudmFyIF9icnJwX19tdWx0aWZvcm1hdHNfc2NvcGVfYmFzZVggPSBzcmM7XG5leHBvcnQgZGVmYXVsdCBfYnJycF9fbXVsdGlmb3JtYXRzX3Njb3BlX2Jhc2VYOyIsImNvbnN0IGVtcHR5ID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG5jb25zdCB0b0hleCA9IGQgPT4gZC5yZWR1Y2UoKGhleCwgYnl0ZSkgPT4gaGV4ICsgYnl0ZS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSwgJycpO1xuY29uc3QgZnJvbUhleCA9IGhleCA9PiB7XG4gIGNvbnN0IGhleGVzID0gaGV4Lm1hdGNoKC8uLi9nKTtcbiAgcmV0dXJuIGhleGVzID8gbmV3IFVpbnQ4QXJyYXkoaGV4ZXMubWFwKGIgPT4gcGFyc2VJbnQoYiwgMTYpKSkgOiBlbXB0eTtcbn07XG5jb25zdCBlcXVhbHMgPSAoYWEsIGJiKSA9PiB7XG4gIGlmIChhYSA9PT0gYmIpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmIChhYS5ieXRlTGVuZ3RoICE9PSBiYi5ieXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAobGV0IGlpID0gMDsgaWkgPCBhYS5ieXRlTGVuZ3RoOyBpaSsrKSB7XG4gICAgaWYgKGFhW2lpXSAhPT0gYmJbaWldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbmNvbnN0IGNvZXJjZSA9IG8gPT4ge1xuICBpZiAobyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgby5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVWludDhBcnJheScpXG4gICAgcmV0dXJuIG87XG4gIGlmIChvIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG8pO1xuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KG8pKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG8uYnVmZmVyLCBvLmJ5dGVPZmZzZXQsIG8uYnl0ZUxlbmd0aCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHR5cGUsIG11c3QgYmUgYmluYXJ5IHR5cGUnKTtcbn07XG5jb25zdCBpc0JpbmFyeSA9IG8gPT4gbyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IEFycmF5QnVmZmVyLmlzVmlldyhvKTtcbmNvbnN0IGZyb21TdHJpbmcgPSBzdHIgPT4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cik7XG5jb25zdCB0b1N0cmluZyA9IGIgPT4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGIpO1xuZXhwb3J0IHtcbiAgZXF1YWxzLFxuICBjb2VyY2UsXG4gIGlzQmluYXJ5LFxuICBmcm9tSGV4LFxuICB0b0hleCxcbiAgZnJvbVN0cmluZyxcbiAgdG9TdHJpbmcsXG4gIGVtcHR5XG59OyIsImltcG9ydCBiYXNleCBmcm9tICcuLi8uLi92ZW5kb3IvYmFzZS14LmpzJztcbmltcG9ydCB7IGNvZXJjZSB9IGZyb20gJy4uL2J5dGVzLmpzJztcbmNsYXNzIEVuY29kZXIge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBwcmVmaXgsIGJhc2VFbmNvZGUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICAgIHRoaXMuYmFzZUVuY29kZSA9IGJhc2VFbmNvZGU7XG4gIH1cbiAgZW5jb2RlKGJ5dGVzKSB7XG4gICAgaWYgKGJ5dGVzIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgcmV0dXJuIGAkeyB0aGlzLnByZWZpeCB9JHsgdGhpcy5iYXNlRW5jb2RlKGJ5dGVzKSB9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gdHlwZSwgbXVzdCBiZSBiaW5hcnkgdHlwZScpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgRGVjb2RlciB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIHByZWZpeCwgYmFzZURlY29kZSkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5wcmVmaXggPSBwcmVmaXg7XG4gICAgaWYgKHByZWZpeC5jb2RlUG9pbnRBdCgwKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcHJlZml4IGNoYXJhY3RlcicpO1xuICAgIH1cbiAgICB0aGlzLnByZWZpeENvZGVQb2ludCA9IHByZWZpeC5jb2RlUG9pbnRBdCgwKTtcbiAgICB0aGlzLmJhc2VEZWNvZGUgPSBiYXNlRGVjb2RlO1xuICB9XG4gIGRlY29kZSh0ZXh0KSB7XG4gICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHRleHQuY29kZVBvaW50QXQoMCkgIT09IHRoaXMucHJlZml4Q29kZVBvaW50KSB7XG4gICAgICAgIHRocm93IEVycm9yKGBVbmFibGUgdG8gZGVjb2RlIG11bHRpYmFzZSBzdHJpbmcgJHsgSlNPTi5zdHJpbmdpZnkodGV4dCkgfSwgJHsgdGhpcy5uYW1lIH0gZGVjb2RlciBvbmx5IHN1cHBvcnRzIGlucHV0cyBwcmVmaXhlZCB3aXRoICR7IHRoaXMucHJlZml4IH1gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmJhc2VEZWNvZGUodGV4dC5zbGljZSh0aGlzLnByZWZpeC5sZW5ndGgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NhbiBvbmx5IG11bHRpYmFzZSBkZWNvZGUgc3RyaW5ncycpO1xuICAgIH1cbiAgfVxuICBvcihkZWNvZGVyKSB7XG4gICAgcmV0dXJuIG9yKHRoaXMsIGRlY29kZXIpO1xuICB9XG59XG5jbGFzcyBDb21wb3NlZERlY29kZXIge1xuICBjb25zdHJ1Y3RvcihkZWNvZGVycykge1xuICAgIHRoaXMuZGVjb2RlcnMgPSBkZWNvZGVycztcbiAgfVxuICBvcihkZWNvZGVyKSB7XG4gICAgcmV0dXJuIG9yKHRoaXMsIGRlY29kZXIpO1xuICB9XG4gIGRlY29kZShpbnB1dCkge1xuICAgIGNvbnN0IHByZWZpeCA9IGlucHV0WzBdO1xuICAgIGNvbnN0IGRlY29kZXIgPSB0aGlzLmRlY29kZXJzW3ByZWZpeF07XG4gICAgaWYgKGRlY29kZXIpIHtcbiAgICAgIHJldHVybiBkZWNvZGVyLmRlY29kZShpbnB1dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IFJhbmdlRXJyb3IoYFVuYWJsZSB0byBkZWNvZGUgbXVsdGliYXNlIHN0cmluZyAkeyBKU09OLnN0cmluZ2lmeShpbnB1dCkgfSwgb25seSBpbnB1dHMgcHJlZml4ZWQgd2l0aCAkeyBPYmplY3Qua2V5cyh0aGlzLmRlY29kZXJzKSB9IGFyZSBzdXBwb3J0ZWRgKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBjb25zdCBvciA9IChsZWZ0LCByaWdodCkgPT4gbmV3IENvbXBvc2VkRGVjb2Rlcih7XG4gIC4uLmxlZnQuZGVjb2RlcnMgfHwgeyBbbGVmdC5wcmVmaXhdOiBsZWZ0IH0sXG4gIC4uLnJpZ2h0LmRlY29kZXJzIHx8IHsgW3JpZ2h0LnByZWZpeF06IHJpZ2h0IH1cbn0pO1xuZXhwb3J0IGNsYXNzIENvZGVjIHtcbiAgY29uc3RydWN0b3IobmFtZSwgcHJlZml4LCBiYXNlRW5jb2RlLCBiYXNlRGVjb2RlKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnByZWZpeCA9IHByZWZpeDtcbiAgICB0aGlzLmJhc2VFbmNvZGUgPSBiYXNlRW5jb2RlO1xuICAgIHRoaXMuYmFzZURlY29kZSA9IGJhc2VEZWNvZGU7XG4gICAgdGhpcy5lbmNvZGVyID0gbmV3IEVuY29kZXIobmFtZSwgcHJlZml4LCBiYXNlRW5jb2RlKTtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgRGVjb2RlcihuYW1lLCBwcmVmaXgsIGJhc2VEZWNvZGUpO1xuICB9XG4gIGVuY29kZShpbnB1dCkge1xuICAgIHJldHVybiB0aGlzLmVuY29kZXIuZW5jb2RlKGlucHV0KTtcbiAgfVxuICBkZWNvZGUoaW5wdXQpIHtcbiAgICByZXR1cm4gdGhpcy5kZWNvZGVyLmRlY29kZShpbnB1dCk7XG4gIH1cbn1cbmV4cG9ydCBjb25zdCBmcm9tID0gKHtuYW1lLCBwcmVmaXgsIGVuY29kZSwgZGVjb2RlfSkgPT4gbmV3IENvZGVjKG5hbWUsIHByZWZpeCwgZW5jb2RlLCBkZWNvZGUpO1xuZXhwb3J0IGNvbnN0IGJhc2VYID0gKHtwcmVmaXgsIG5hbWUsIGFscGhhYmV0fSkgPT4ge1xuICBjb25zdCB7ZW5jb2RlLCBkZWNvZGV9ID0gYmFzZXgoYWxwaGFiZXQsIG5hbWUpO1xuICByZXR1cm4gZnJvbSh7XG4gICAgcHJlZml4LFxuICAgIG5hbWUsXG4gICAgZW5jb2RlLFxuICAgIGRlY29kZTogdGV4dCA9PiBjb2VyY2UoZGVjb2RlKHRleHQpKVxuICB9KTtcbn07XG5jb25zdCBkZWNvZGUgPSAoc3RyaW5nLCBhbHBoYWJldCwgYml0c1BlckNoYXIsIG5hbWUpID0+IHtcbiAgY29uc3QgY29kZXMgPSB7fTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbHBoYWJldC5sZW5ndGg7ICsraSkge1xuICAgIGNvZGVzW2FscGhhYmV0W2ldXSA9IGk7XG4gIH1cbiAgbGV0IGVuZCA9IHN0cmluZy5sZW5ndGg7XG4gIHdoaWxlIChzdHJpbmdbZW5kIC0gMV0gPT09ICc9Jykge1xuICAgIC0tZW5kO1xuICB9XG4gIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KGVuZCAqIGJpdHNQZXJDaGFyIC8gOCB8IDApO1xuICBsZXQgYml0cyA9IDA7XG4gIGxldCBidWZmZXIgPSAwO1xuICBsZXQgd3JpdHRlbiA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW5kOyArK2kpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGNvZGVzW3N0cmluZ1tpXV07XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgTm9uLSR7IG5hbWUgfSBjaGFyYWN0ZXJgKTtcbiAgICB9XG4gICAgYnVmZmVyID0gYnVmZmVyIDw8IGJpdHNQZXJDaGFyIHwgdmFsdWU7XG4gICAgYml0cyArPSBiaXRzUGVyQ2hhcjtcbiAgICBpZiAoYml0cyA+PSA4KSB7XG4gICAgICBiaXRzIC09IDg7XG4gICAgICBvdXRbd3JpdHRlbisrXSA9IDI1NSAmIGJ1ZmZlciA+PiBiaXRzO1xuICAgIH1cbiAgfVxuICBpZiAoYml0cyA+PSBiaXRzUGVyQ2hhciB8fCAyNTUgJiBidWZmZXIgPDwgOCAtIGJpdHMpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1VuZXhwZWN0ZWQgZW5kIG9mIGRhdGEnKTtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcbmNvbnN0IGVuY29kZSA9IChkYXRhLCBhbHBoYWJldCwgYml0c1BlckNoYXIpID0+IHtcbiAgY29uc3QgcGFkID0gYWxwaGFiZXRbYWxwaGFiZXQubGVuZ3RoIC0gMV0gPT09ICc9JztcbiAgY29uc3QgbWFzayA9ICgxIDw8IGJpdHNQZXJDaGFyKSAtIDE7XG4gIGxldCBvdXQgPSAnJztcbiAgbGV0IGJpdHMgPSAwO1xuICBsZXQgYnVmZmVyID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgYnVmZmVyID0gYnVmZmVyIDw8IDggfCBkYXRhW2ldO1xuICAgIGJpdHMgKz0gODtcbiAgICB3aGlsZSAoYml0cyA+IGJpdHNQZXJDaGFyKSB7XG4gICAgICBiaXRzIC09IGJpdHNQZXJDaGFyO1xuICAgICAgb3V0ICs9IGFscGhhYmV0W21hc2sgJiBidWZmZXIgPj4gYml0c107XG4gICAgfVxuICB9XG4gIGlmIChiaXRzKSB7XG4gICAgb3V0ICs9IGFscGhhYmV0W21hc2sgJiBidWZmZXIgPDwgYml0c1BlckNoYXIgLSBiaXRzXTtcbiAgfVxuICBpZiAocGFkKSB7XG4gICAgd2hpbGUgKG91dC5sZW5ndGggKiBiaXRzUGVyQ2hhciAmIDcpIHtcbiAgICAgIG91dCArPSAnPSc7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuZXhwb3J0IGNvbnN0IHJmYzQ2NDggPSAoe25hbWUsIHByZWZpeCwgYml0c1BlckNoYXIsIGFscGhhYmV0fSkgPT4ge1xuICByZXR1cm4gZnJvbSh7XG4gICAgcHJlZml4LFxuICAgIG5hbWUsXG4gICAgZW5jb2RlKGlucHV0KSB7XG4gICAgICByZXR1cm4gZW5jb2RlKGlucHV0LCBhbHBoYWJldCwgYml0c1BlckNoYXIpO1xuICAgIH0sXG4gICAgZGVjb2RlKGlucHV0KSB7XG4gICAgICByZXR1cm4gZGVjb2RlKGlucHV0LCBhbHBoYWJldCwgYml0c1BlckNoYXIsIG5hbWUpO1xuICAgIH1cbiAgfSk7XG59OyIsImltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Jhc2UuanMnO1xuaW1wb3J0IHtcbiAgZnJvbVN0cmluZyxcbiAgdG9TdHJpbmdcbn0gZnJvbSAnLi4vYnl0ZXMuanMnO1xuZXhwb3J0IGNvbnN0IGlkZW50aXR5ID0gZnJvbSh7XG4gIHByZWZpeDogJ1xcMCcsXG4gIG5hbWU6ICdpZGVudGl0eScsXG4gIGVuY29kZTogYnVmID0+IHRvU3RyaW5nKGJ1ZiksXG4gIGRlY29kZTogc3RyID0+IGZyb21TdHJpbmcoc3RyKVxufSk7IiwiaW1wb3J0IHsgcmZjNDY0OCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTIgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnMCcsXG4gIG5hbWU6ICdiYXNlMicsXG4gIGFscGhhYmV0OiAnMDEnLFxuICBiaXRzUGVyQ2hhcjogMVxufSk7IiwiaW1wb3J0IHsgcmZjNDY0OCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTggPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnNycsXG4gIG5hbWU6ICdiYXNlOCcsXG4gIGFscGhhYmV0OiAnMDEyMzQ1NjcnLFxuICBiaXRzUGVyQ2hhcjogM1xufSk7IiwiaW1wb3J0IHsgYmFzZVggfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNvbnN0IGJhc2UxMCA9IGJhc2VYKHtcbiAgcHJlZml4OiAnOScsXG4gIG5hbWU6ICdiYXNlMTAnLFxuICBhbHBoYWJldDogJzAxMjM0NTY3ODknXG59KTsiLCJpbXBvcnQgeyByZmM0NjQ4IH0gZnJvbSAnLi9iYXNlLmpzJztcbmV4cG9ydCBjb25zdCBiYXNlMTYgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnZicsXG4gIG5hbWU6ICdiYXNlMTYnLFxuICBhbHBoYWJldDogJzAxMjM0NTY3ODlhYmNkZWYnLFxuICBiaXRzUGVyQ2hhcjogNFxufSk7XG5leHBvcnQgY29uc3QgYmFzZTE2dXBwZXIgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnRicsXG4gIG5hbWU6ICdiYXNlMTZ1cHBlcicsXG4gIGFscGhhYmV0OiAnMDEyMzQ1Njc4OUFCQ0RFRicsXG4gIGJpdHNQZXJDaGFyOiA0XG59KTsiLCJpbXBvcnQgeyByZmM0NjQ4IH0gZnJvbSAnLi9iYXNlLmpzJztcbmV4cG9ydCBjb25zdCBiYXNlMzIgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnYicsXG4gIG5hbWU6ICdiYXNlMzInLFxuICBhbHBoYWJldDogJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MjM0NTY3JyxcbiAgYml0c1BlckNoYXI6IDVcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMnVwcGVyID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ0InLFxuICBuYW1lOiAnYmFzZTMydXBwZXInLFxuICBhbHBoYWJldDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMjM0NTY3JyxcbiAgYml0c1BlckNoYXI6IDVcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMnBhZCA9IHJmYzQ2NDgoe1xuICBwcmVmaXg6ICdjJyxcbiAgbmFtZTogJ2Jhc2UzMnBhZCcsXG4gIGFscGhhYmV0OiAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoyMzQ1Njc9JyxcbiAgYml0c1BlckNoYXI6IDVcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMnBhZHVwcGVyID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ0MnLFxuICBuYW1lOiAnYmFzZTMycGFkdXBwZXInLFxuICBhbHBoYWJldDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMjM0NTY3PScsXG4gIGJpdHNQZXJDaGFyOiA1XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlMzJoZXggPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAndicsXG4gIG5hbWU6ICdiYXNlMzJoZXgnLFxuICBhbHBoYWJldDogJzAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2JyxcbiAgYml0c1BlckNoYXI6IDVcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMmhleHVwcGVyID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ1YnLFxuICBuYW1lOiAnYmFzZTMyaGV4dXBwZXInLFxuICBhbHBoYWJldDogJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWJyxcbiAgYml0c1BlckNoYXI6IDVcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMmhleHBhZCA9IHJmYzQ2NDgoe1xuICBwcmVmaXg6ICd0JyxcbiAgbmFtZTogJ2Jhc2UzMmhleHBhZCcsXG4gIGFscGhhYmV0OiAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXY9JyxcbiAgYml0c1BlckNoYXI6IDVcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2UzMmhleHBhZHVwcGVyID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ1QnLFxuICBuYW1lOiAnYmFzZTMyaGV4cGFkdXBwZXInLFxuICBhbHBoYWJldDogJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWPScsXG4gIGJpdHNQZXJDaGFyOiA1XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlMzJ6ID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ2gnLFxuICBuYW1lOiAnYmFzZTMyeicsXG4gIGFscGhhYmV0OiAneWJuZHJmZzhlamttY3BxeG90MXV3aXN6YTM0NWg3NjknLFxuICBiaXRzUGVyQ2hhcjogNVxufSk7IiwiaW1wb3J0IHsgYmFzZVggfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNvbnN0IGJhc2UzNiA9IGJhc2VYKHtcbiAgcHJlZml4OiAnaycsXG4gIG5hbWU6ICdiYXNlMzYnLFxuICBhbHBoYWJldDogJzAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eidcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2UzNnVwcGVyID0gYmFzZVgoe1xuICBwcmVmaXg6ICdLJyxcbiAgbmFtZTogJ2Jhc2UzNnVwcGVyJyxcbiAgYWxwaGFiZXQ6ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonXG59KTsiLCJpbXBvcnQgeyBiYXNlWCB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY29uc3QgYmFzZTU4YnRjID0gYmFzZVgoe1xuICBuYW1lOiAnYmFzZTU4YnRjJyxcbiAgcHJlZml4OiAneicsXG4gIGFscGhhYmV0OiAnMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5eidcbn0pO1xuZXhwb3J0IGNvbnN0IGJhc2U1OGZsaWNrciA9IGJhc2VYKHtcbiAgbmFtZTogJ2Jhc2U1OGZsaWNrcicsXG4gIHByZWZpeDogJ1onLFxuICBhbHBoYWJldDogJzEyMzQ1Njc4OWFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpBQkNERUZHSEpLTE1OUFFSU1RVVldYWVonXG59KTsiLCJpbXBvcnQgeyByZmM0NjQ4IH0gZnJvbSAnLi9iYXNlLmpzJztcbmV4cG9ydCBjb25zdCBiYXNlNjQgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAnbScsXG4gIG5hbWU6ICdiYXNlNjQnLFxuICBhbHBoYWJldDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLFxuICBiaXRzUGVyQ2hhcjogNlxufSk7XG5leHBvcnQgY29uc3QgYmFzZTY0cGFkID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ00nLFxuICBuYW1lOiAnYmFzZTY0cGFkJyxcbiAgYWxwaGFiZXQ6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPScsXG4gIGJpdHNQZXJDaGFyOiA2XG59KTtcbmV4cG9ydCBjb25zdCBiYXNlNjR1cmwgPSByZmM0NjQ4KHtcbiAgcHJlZml4OiAndScsXG4gIG5hbWU6ICdiYXNlNjR1cmwnLFxuICBhbHBoYWJldDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV8nLFxuICBiaXRzUGVyQ2hhcjogNlxufSk7XG5leHBvcnQgY29uc3QgYmFzZTY0dXJscGFkID0gcmZjNDY0OCh7XG4gIHByZWZpeDogJ1UnLFxuICBuYW1lOiAnYmFzZTY0dXJscGFkJyxcbiAgYWxwaGFiZXQ6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OS1fPScsXG4gIGJpdHNQZXJDaGFyOiA2XG59KTsiLCJpbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9iYXNlLmpzJztcbmNvbnN0IGFscGhhYmV0ID0gQXJyYXkuZnJvbSgnXFx1RDgzRFxcdURFODBcXHVEODNFXFx1REU5MFxcdTI2MDRcXHVEODNEXFx1REVGMFxcdUQ4M0NcXHVERjBDXFx1RDgzQ1xcdURGMTFcXHVEODNDXFx1REYxMlxcdUQ4M0NcXHVERjEzXFx1RDgzQ1xcdURGMTRcXHVEODNDXFx1REYxNVxcdUQ4M0NcXHVERjE2XFx1RDgzQ1xcdURGMTdcXHVEODNDXFx1REYxOFxcdUQ4M0NcXHVERjBEXFx1RDgzQ1xcdURGMEZcXHVEODNDXFx1REYwRVxcdUQ4M0RcXHVEQzA5XFx1MjYwMFxcdUQ4M0RcXHVEQ0JCXFx1RDgzRFxcdUREQTVcXHVEODNEXFx1RENCRVxcdUQ4M0RcXHVEQ0JGXFx1RDgzRFxcdURFMDJcXHUyNzY0XFx1RDgzRFxcdURFMERcXHVEODNFXFx1REQyM1xcdUQ4M0RcXHVERTBBXFx1RDgzRFxcdURFNEZcXHVEODNEXFx1REM5NVxcdUQ4M0RcXHVERTJEXFx1RDgzRFxcdURFMThcXHVEODNEXFx1REM0RFxcdUQ4M0RcXHVERTA1XFx1RDgzRFxcdURDNEZcXHVEODNEXFx1REUwMVxcdUQ4M0RcXHVERDI1XFx1RDgzRVxcdURENzBcXHVEODNEXFx1REM5NFxcdUQ4M0RcXHVEQzk2XFx1RDgzRFxcdURDOTlcXHVEODNEXFx1REUyMlxcdUQ4M0VcXHVERDE0XFx1RDgzRFxcdURFMDZcXHVEODNEXFx1REU0NFxcdUQ4M0RcXHVEQ0FBXFx1RDgzRFxcdURFMDlcXHUyNjNBXFx1RDgzRFxcdURDNENcXHVEODNFXFx1REQxN1xcdUQ4M0RcXHVEQzlDXFx1RDgzRFxcdURFMTRcXHVEODNEXFx1REUwRVxcdUQ4M0RcXHVERTA3XFx1RDgzQ1xcdURGMzlcXHVEODNFXFx1REQyNlxcdUQ4M0NcXHVERjg5XFx1RDgzRFxcdURDOUVcXHUyNzBDXFx1MjcyOFxcdUQ4M0VcXHVERDM3XFx1RDgzRFxcdURFMzFcXHVEODNEXFx1REUwQ1xcdUQ4M0NcXHVERjM4XFx1RDgzRFxcdURFNENcXHVEODNEXFx1REUwQlxcdUQ4M0RcXHVEQzk3XFx1RDgzRFxcdURDOUFcXHVEODNEXFx1REUwRlxcdUQ4M0RcXHVEQzlCXFx1RDgzRFxcdURFNDJcXHVEODNEXFx1REM5M1xcdUQ4M0VcXHVERDI5XFx1RDgzRFxcdURFMDRcXHVEODNEXFx1REUwMFxcdUQ4M0RcXHVEREE0XFx1RDgzRFxcdURFMDNcXHVEODNEXFx1RENBRlxcdUQ4M0RcXHVERTQ4XFx1RDgzRFxcdURDNDdcXHVEODNDXFx1REZCNlxcdUQ4M0RcXHVERTEyXFx1RDgzRVxcdUREMkRcXHUyNzYzXFx1RDgzRFxcdURFMUNcXHVEODNEXFx1REM4QlxcdUQ4M0RcXHVEQzQwXFx1RDgzRFxcdURFMkFcXHVEODNEXFx1REUxMVxcdUQ4M0RcXHVEQ0E1XFx1RDgzRFxcdURFNEJcXHVEODNEXFx1REUxRVxcdUQ4M0RcXHVERTI5XFx1RDgzRFxcdURFMjFcXHVEODNFXFx1REQyQVxcdUQ4M0RcXHVEQzRBXFx1RDgzRVxcdURENzNcXHVEODNEXFx1REUyNVxcdUQ4M0VcXHVERDI0XFx1RDgzRFxcdURDNDlcXHVEODNEXFx1REM4M1xcdUQ4M0RcXHVERTMzXFx1MjcwQlxcdUQ4M0RcXHVERTFBXFx1RDgzRFxcdURFMURcXHVEODNEXFx1REUzNFxcdUQ4M0NcXHVERjFGXFx1RDgzRFxcdURFMkNcXHVEODNEXFx1REU0M1xcdUQ4M0NcXHVERjQwXFx1RDgzQ1xcdURGMzdcXHVEODNEXFx1REUzQlxcdUQ4M0RcXHVERTEzXFx1MkI1MFxcdTI3MDVcXHVEODNFXFx1REQ3QVxcdUQ4M0NcXHVERjA4XFx1RDgzRFxcdURFMDhcXHVEODNFXFx1REQxOFxcdUQ4M0RcXHVEQ0E2XFx1MjcxNFxcdUQ4M0RcXHVERTIzXFx1RDgzQ1xcdURGQzNcXHVEODNEXFx1REM5MFxcdTI2MzlcXHVEODNDXFx1REY4QVxcdUQ4M0RcXHVEQzk4XFx1RDgzRFxcdURFMjBcXHUyNjFEXFx1RDgzRFxcdURFMTVcXHVEODNDXFx1REYzQVxcdUQ4M0NcXHVERjgyXFx1RDgzQ1xcdURGM0JcXHVEODNEXFx1REUxMFxcdUQ4M0RcXHVERDk1XFx1RDgzRFxcdURDOURcXHVEODNEXFx1REU0QVxcdUQ4M0RcXHVERTM5XFx1RDgzRFxcdURERTNcXHVEODNEXFx1RENBQlxcdUQ4M0RcXHVEQzgwXFx1RDgzRFxcdURDNTFcXHVEODNDXFx1REZCNVxcdUQ4M0VcXHVERDFFXFx1RDgzRFxcdURFMUJcXHVEODNEXFx1REQzNFxcdUQ4M0RcXHVERTI0XFx1RDgzQ1xcdURGM0NcXHVEODNEXFx1REUyQlxcdTI2QkRcXHVEODNFXFx1REQxOVxcdTI2MTVcXHVEODNDXFx1REZDNlxcdUQ4M0VcXHVERDJCXFx1RDgzRFxcdURDNDhcXHVEODNEXFx1REUyRVxcdUQ4M0RcXHVERTQ2XFx1RDgzQ1xcdURGN0JcXHVEODNDXFx1REY0M1xcdUQ4M0RcXHVEQzM2XFx1RDgzRFxcdURDODFcXHVEODNEXFx1REUzMlxcdUQ4M0NcXHVERjNGXFx1RDgzRVxcdURERTFcXHVEODNDXFx1REY4MVxcdTI2QTFcXHVEODNDXFx1REYxRVxcdUQ4M0NcXHVERjg4XFx1Mjc0Q1xcdTI3MEFcXHVEODNEXFx1REM0QlxcdUQ4M0RcXHVERTMwXFx1RDgzRVxcdUREMjhcXHVEODNEXFx1REUzNlxcdUQ4M0VcXHVERDFEXFx1RDgzRFxcdURFQjZcXHVEODNEXFx1RENCMFxcdUQ4M0NcXHVERjUzXFx1RDgzRFxcdURDQTJcXHVEODNFXFx1REQxRlxcdUQ4M0RcXHVERTQxXFx1RDgzRFxcdURFQThcXHVEODNEXFx1RENBOFxcdUQ4M0VcXHVERDJDXFx1MjcwOFxcdUQ4M0NcXHVERjgwXFx1RDgzQ1xcdURGN0FcXHVEODNFXFx1REQxM1xcdUQ4M0RcXHVERTE5XFx1RDgzRFxcdURDOUZcXHVEODNDXFx1REYzMVxcdUQ4M0RcXHVERTE2XFx1RDgzRFxcdURDNzZcXHVEODNFXFx1REQ3NFxcdTI1QjZcXHUyN0ExXFx1Mjc1M1xcdUQ4M0RcXHVEQzhFXFx1RDgzRFxcdURDQjhcXHUyQjA3XFx1RDgzRFxcdURFMjhcXHVEODNDXFx1REYxQVxcdUQ4M0VcXHVERDhCXFx1RDgzRFxcdURFMzdcXHVEODNEXFx1REQ3QVxcdTI2QTBcXHVEODNEXFx1REU0NVxcdUQ4M0RcXHVERTFGXFx1RDgzRFxcdURFMzVcXHVEODNEXFx1REM0RVxcdUQ4M0VcXHVERDMyXFx1RDgzRVxcdUREMjBcXHVEODNFXFx1REQyN1xcdUQ4M0RcXHVEQ0NDXFx1RDgzRFxcdUREMzVcXHVEODNEXFx1REM4NVxcdUQ4M0VcXHVEREQwXFx1RDgzRFxcdURDM0VcXHVEODNDXFx1REY1MlxcdUQ4M0RcXHVERTE3XFx1RDgzRVxcdUREMTFcXHVEODNDXFx1REYwQVxcdUQ4M0VcXHVERDJGXFx1RDgzRFxcdURDMzdcXHUyNjBFXFx1RDgzRFxcdURDQTdcXHVEODNEXFx1REUyRlxcdUQ4M0RcXHVEQzg2XFx1RDgzRFxcdURDNDZcXHVEODNDXFx1REZBNFxcdUQ4M0RcXHVERTQ3XFx1RDgzQ1xcdURGNTFcXHUyNzQ0XFx1RDgzQ1xcdURGMzRcXHVEODNEXFx1RENBM1xcdUQ4M0RcXHVEQzM4XFx1RDgzRFxcdURDOENcXHVEODNEXFx1RENDRFxcdUQ4M0VcXHVERDQwXFx1RDgzRVxcdUREMjJcXHVEODNEXFx1REM0NVxcdUQ4M0RcXHVEQ0ExXFx1RDgzRFxcdURDQTlcXHVEODNEXFx1REM1MFxcdUQ4M0RcXHVEQ0Y4XFx1RDgzRFxcdURDN0JcXHVEODNFXFx1REQxMFxcdUQ4M0VcXHVERDJFXFx1RDgzQ1xcdURGQkNcXHVEODNFXFx1REQ3NVxcdUQ4M0RcXHVERUE5XFx1RDgzQ1xcdURGNEVcXHVEODNDXFx1REY0QVxcdUQ4M0RcXHVEQzdDXFx1RDgzRFxcdURDOERcXHVEODNEXFx1RENFM1xcdUQ4M0VcXHVERDQyJyk7XG5jb25zdCBhbHBoYWJldEJ5dGVzVG9DaGFycyA9IGFscGhhYmV0LnJlZHVjZSgocCwgYywgaSkgPT4ge1xuICBwW2ldID0gYztcbiAgcmV0dXJuIHA7XG59LCBbXSk7XG5jb25zdCBhbHBoYWJldENoYXJzVG9CeXRlcyA9IGFscGhhYmV0LnJlZHVjZSgocCwgYywgaSkgPT4ge1xuICBwW2MuY29kZVBvaW50QXQoMCldID0gaTtcbiAgcmV0dXJuIHA7XG59LCBbXSk7XG5mdW5jdGlvbiBlbmNvZGUoZGF0YSkge1xuICByZXR1cm4gZGF0YS5yZWR1Y2UoKHAsIGMpID0+IHtcbiAgICBwICs9IGFscGhhYmV0Qnl0ZXNUb0NoYXJzW2NdO1xuICAgIHJldHVybiBwO1xuICB9LCAnJyk7XG59XG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gIGNvbnN0IGJ5dHMgPSBbXTtcbiAgZm9yIChjb25zdCBjaGFyIG9mIHN0cikge1xuICAgIGNvbnN0IGJ5dCA9IGFscGhhYmV0Q2hhcnNUb0J5dGVzW2NoYXIuY29kZVBvaW50QXQoMCldO1xuICAgIGlmIChieXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb24tYmFzZTI1NmVtb2ppIGNoYXJhY3RlcjogJHsgY2hhciB9YCk7XG4gICAgfVxuICAgIGJ5dHMucHVzaChieXQpO1xuICB9XG4gIHJldHVybiBuZXcgVWludDhBcnJheShieXRzKTtcbn1cbmV4cG9ydCBjb25zdCBiYXNlMjU2ZW1vamkgPSBmcm9tKHtcbiAgcHJlZml4OiAnXFx1RDgzRFxcdURFODAnLFxuICBuYW1lOiAnYmFzZTI1NmVtb2ppJyxcbiAgZW5jb2RlLFxuICBkZWNvZGVcbn0pOyIsInZhciBlbmNvZGVfMSA9IGVuY29kZTtcbnZhciBNU0IgPSAxMjgsIFJFU1QgPSAxMjcsIE1TQkFMTCA9IH5SRVNULCBJTlQgPSBNYXRoLnBvdygyLCAzMSk7XG5mdW5jdGlvbiBlbmNvZGUobnVtLCBvdXQsIG9mZnNldCkge1xuICBvdXQgPSBvdXQgfHwgW107XG4gIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICB2YXIgb2xkT2Zmc2V0ID0gb2Zmc2V0O1xuICB3aGlsZSAobnVtID49IElOVCkge1xuICAgIG91dFtvZmZzZXQrK10gPSBudW0gJiAyNTUgfCBNU0I7XG4gICAgbnVtIC89IDEyODtcbiAgfVxuICB3aGlsZSAobnVtICYgTVNCQUxMKSB7XG4gICAgb3V0W29mZnNldCsrXSA9IG51bSAmIDI1NSB8IE1TQjtcbiAgICBudW0gPj4+PSA3O1xuICB9XG4gIG91dFtvZmZzZXRdID0gbnVtIHwgMDtcbiAgZW5jb2RlLmJ5dGVzID0gb2Zmc2V0IC0gb2xkT2Zmc2V0ICsgMTtcbiAgcmV0dXJuIG91dDtcbn1cbnZhciBkZWNvZGUgPSByZWFkO1xudmFyIE1TQiQxID0gMTI4LCBSRVNUJDEgPSAxMjc7XG5mdW5jdGlvbiByZWFkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciByZXMgPSAwLCBvZmZzZXQgPSBvZmZzZXQgfHwgMCwgc2hpZnQgPSAwLCBjb3VudGVyID0gb2Zmc2V0LCBiLCBsID0gYnVmLmxlbmd0aDtcbiAgZG8ge1xuICAgIGlmIChjb3VudGVyID49IGwpIHtcbiAgICAgIHJlYWQuYnl0ZXMgPSAwO1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0NvdWxkIG5vdCBkZWNvZGUgdmFyaW50Jyk7XG4gICAgfVxuICAgIGIgPSBidWZbY291bnRlcisrXTtcbiAgICByZXMgKz0gc2hpZnQgPCAyOCA/IChiICYgUkVTVCQxKSA8PCBzaGlmdCA6IChiICYgUkVTVCQxKSAqIE1hdGgucG93KDIsIHNoaWZ0KTtcbiAgICBzaGlmdCArPSA3O1xuICB9IHdoaWxlIChiID49IE1TQiQxKTtcbiAgcmVhZC5ieXRlcyA9IGNvdW50ZXIgLSBvZmZzZXQ7XG4gIHJldHVybiByZXM7XG59XG52YXIgTjEgPSBNYXRoLnBvdygyLCA3KTtcbnZhciBOMiA9IE1hdGgucG93KDIsIDE0KTtcbnZhciBOMyA9IE1hdGgucG93KDIsIDIxKTtcbnZhciBONCA9IE1hdGgucG93KDIsIDI4KTtcbnZhciBONSA9IE1hdGgucG93KDIsIDM1KTtcbnZhciBONiA9IE1hdGgucG93KDIsIDQyKTtcbnZhciBONyA9IE1hdGgucG93KDIsIDQ5KTtcbnZhciBOOCA9IE1hdGgucG93KDIsIDU2KTtcbnZhciBOOSA9IE1hdGgucG93KDIsIDYzKTtcbnZhciBsZW5ndGggPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDwgTjEgPyAxIDogdmFsdWUgPCBOMiA/IDIgOiB2YWx1ZSA8IE4zID8gMyA6IHZhbHVlIDwgTjQgPyA0IDogdmFsdWUgPCBONSA/IDUgOiB2YWx1ZSA8IE42ID8gNiA6IHZhbHVlIDwgTjcgPyA3IDogdmFsdWUgPCBOOCA/IDggOiB2YWx1ZSA8IE45ID8gOSA6IDEwO1xufTtcbnZhciB2YXJpbnQgPSB7XG4gIGVuY29kZTogZW5jb2RlXzEsXG4gIGRlY29kZTogZGVjb2RlLFxuICBlbmNvZGluZ0xlbmd0aDogbGVuZ3RoXG59O1xudmFyIF9icnJwX3ZhcmludCA9IHZhcmludDtcbmV4cG9ydCBkZWZhdWx0IF9icnJwX3ZhcmludDsiLCJpbXBvcnQgdmFyaW50IGZyb20gJy4uL3ZlbmRvci92YXJpbnQuanMnO1xuZXhwb3J0IGNvbnN0IGRlY29kZSA9IChkYXRhLCBvZmZzZXQgPSAwKSA9PiB7XG4gIGNvbnN0IGNvZGUgPSB2YXJpbnQuZGVjb2RlKGRhdGEsIG9mZnNldCk7XG4gIHJldHVybiBbXG4gICAgY29kZSxcbiAgICB2YXJpbnQuZGVjb2RlLmJ5dGVzXG4gIF07XG59O1xuZXhwb3J0IGNvbnN0IGVuY29kZVRvID0gKGludCwgdGFyZ2V0LCBvZmZzZXQgPSAwKSA9PiB7XG4gIHZhcmludC5lbmNvZGUoaW50LCB0YXJnZXQsIG9mZnNldCk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuZXhwb3J0IGNvbnN0IGVuY29kaW5nTGVuZ3RoID0gaW50ID0+IHtcbiAgcmV0dXJuIHZhcmludC5lbmNvZGluZ0xlbmd0aChpbnQpO1xufTsiLCJpbXBvcnQge1xuICBjb2VyY2UsXG4gIGVxdWFscyBhcyBlcXVhbEJ5dGVzXG59IGZyb20gJy4uL2J5dGVzLmpzJztcbmltcG9ydCAqIGFzIHZhcmludCBmcm9tICcuLi92YXJpbnQuanMnO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9IChjb2RlLCBkaWdlc3QpID0+IHtcbiAgY29uc3Qgc2l6ZSA9IGRpZ2VzdC5ieXRlTGVuZ3RoO1xuICBjb25zdCBzaXplT2Zmc2V0ID0gdmFyaW50LmVuY29kaW5nTGVuZ3RoKGNvZGUpO1xuICBjb25zdCBkaWdlc3RPZmZzZXQgPSBzaXplT2Zmc2V0ICsgdmFyaW50LmVuY29kaW5nTGVuZ3RoKHNpemUpO1xuICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGRpZ2VzdE9mZnNldCArIHNpemUpO1xuICB2YXJpbnQuZW5jb2RlVG8oY29kZSwgYnl0ZXMsIDApO1xuICB2YXJpbnQuZW5jb2RlVG8oc2l6ZSwgYnl0ZXMsIHNpemVPZmZzZXQpO1xuICBieXRlcy5zZXQoZGlnZXN0LCBkaWdlc3RPZmZzZXQpO1xuICByZXR1cm4gbmV3IERpZ2VzdChjb2RlLCBzaXplLCBkaWdlc3QsIGJ5dGVzKTtcbn07XG5leHBvcnQgY29uc3QgZGVjb2RlID0gbXVsdGloYXNoID0+IHtcbiAgY29uc3QgYnl0ZXMgPSBjb2VyY2UobXVsdGloYXNoKTtcbiAgY29uc3QgW2NvZGUsIHNpemVPZmZzZXRdID0gdmFyaW50LmRlY29kZShieXRlcyk7XG4gIGNvbnN0IFtzaXplLCBkaWdlc3RPZmZzZXRdID0gdmFyaW50LmRlY29kZShieXRlcy5zdWJhcnJheShzaXplT2Zmc2V0KSk7XG4gIGNvbnN0IGRpZ2VzdCA9IGJ5dGVzLnN1YmFycmF5KHNpemVPZmZzZXQgKyBkaWdlc3RPZmZzZXQpO1xuICBpZiAoZGlnZXN0LmJ5dGVMZW5ndGggIT09IHNpemUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0luY29ycmVjdCBsZW5ndGgnKTtcbiAgfVxuICByZXR1cm4gbmV3IERpZ2VzdChjb2RlLCBzaXplLCBkaWdlc3QsIGJ5dGVzKTtcbn07XG5leHBvcnQgY29uc3QgZXF1YWxzID0gKGEsIGIpID0+IHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYS5jb2RlID09PSBiLmNvZGUgJiYgYS5zaXplID09PSBiLnNpemUgJiYgZXF1YWxCeXRlcyhhLmJ5dGVzLCBiLmJ5dGVzKTtcbiAgfVxufTtcbmV4cG9ydCBjbGFzcyBEaWdlc3Qge1xuICBjb25zdHJ1Y3Rvcihjb2RlLCBzaXplLCBkaWdlc3QsIGJ5dGVzKSB7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgIHRoaXMuZGlnZXN0ID0gZGlnZXN0O1xuICAgIHRoaXMuYnl0ZXMgPSBieXRlcztcbiAgfVxufSIsImltcG9ydCAqIGFzIERpZ2VzdCBmcm9tICcuL2RpZ2VzdC5qcyc7XG5leHBvcnQgY29uc3QgZnJvbSA9ICh7bmFtZSwgY29kZSwgZW5jb2RlfSkgPT4gbmV3IEhhc2hlcihuYW1lLCBjb2RlLCBlbmNvZGUpO1xuZXhwb3J0IGNsYXNzIEhhc2hlciB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGNvZGUsIGVuY29kZSkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB0aGlzLmVuY29kZSA9IGVuY29kZTtcbiAgfVxuICBkaWdlc3QoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmVuY29kZShpbnB1dCk7XG4gICAgICByZXR1cm4gcmVzdWx0IGluc3RhbmNlb2YgVWludDhBcnJheSA/IERpZ2VzdC5jcmVhdGUodGhpcy5jb2RlLCByZXN1bHQpIDogcmVzdWx0LnRoZW4oZGlnZXN0ID0+IERpZ2VzdC5jcmVhdGUodGhpcy5jb2RlLCBkaWdlc3QpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gdHlwZSwgbXVzdCBiZSBiaW5hcnkgdHlwZScpO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCB7IGZyb20gfSBmcm9tICcuL2hhc2hlci5qcyc7XG5jb25zdCBzaGEgPSBuYW1lID0+IGFzeW5jIGRhdGEgPT4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QobmFtZSwgZGF0YSkpO1xuZXhwb3J0IGNvbnN0IHNoYTI1NiA9IGZyb20oe1xuICBuYW1lOiAnc2hhMi0yNTYnLFxuICBjb2RlOiAxOCxcbiAgZW5jb2RlOiBzaGEoJ1NIQS0yNTYnKVxufSk7XG5leHBvcnQgY29uc3Qgc2hhNTEyID0gZnJvbSh7XG4gIG5hbWU6ICdzaGEyLTUxMicsXG4gIGNvZGU6IDE5LFxuICBlbmNvZGU6IHNoYSgnU0hBLTUxMicpXG59KTsiLCJpbXBvcnQgeyBjb2VyY2UgfSBmcm9tICcuLi9ieXRlcy5qcyc7XG5pbXBvcnQgKiBhcyBEaWdlc3QgZnJvbSAnLi9kaWdlc3QuanMnO1xuY29uc3QgY29kZSA9IDA7XG5jb25zdCBuYW1lID0gJ2lkZW50aXR5JztcbmNvbnN0IGVuY29kZSA9IGNvZXJjZTtcbmNvbnN0IGRpZ2VzdCA9IGlucHV0ID0+IERpZ2VzdC5jcmVhdGUoY29kZSwgZW5jb2RlKGlucHV0KSk7XG5leHBvcnQgY29uc3QgaWRlbnRpdHkgPSB7XG4gIGNvZGUsXG4gIG5hbWUsXG4gIGVuY29kZSxcbiAgZGlnZXN0XG59OyIsImltcG9ydCB7IGNvZXJjZSB9IGZyb20gJy4uL2J5dGVzLmpzJztcbmV4cG9ydCBjb25zdCBuYW1lID0gJ3Jhdyc7XG5leHBvcnQgY29uc3QgY29kZSA9IDg1O1xuZXhwb3J0IGNvbnN0IGVuY29kZSA9IG5vZGUgPT4gY29lcmNlKG5vZGUpO1xuZXhwb3J0IGNvbnN0IGRlY29kZSA9IGRhdGEgPT4gY29lcmNlKGRhdGEpOyIsImNvbnN0IHRleHRFbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG5jb25zdCB0ZXh0RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuZXhwb3J0IGNvbnN0IG5hbWUgPSAnanNvbic7XG5leHBvcnQgY29uc3QgY29kZSA9IDUxMjtcbmV4cG9ydCBjb25zdCBlbmNvZGUgPSBub2RlID0+IHRleHRFbmNvZGVyLmVuY29kZShKU09OLnN0cmluZ2lmeShub2RlKSk7XG5leHBvcnQgY29uc3QgZGVjb2RlID0gZGF0YSA9PiBKU09OLnBhcnNlKHRleHREZWNvZGVyLmRlY29kZShkYXRhKSk7IiwiaW1wb3J0ICogYXMgdmFyaW50IGZyb20gJy4vdmFyaW50LmpzJztcbmltcG9ydCAqIGFzIERpZ2VzdCBmcm9tICcuL2hhc2hlcy9kaWdlc3QuanMnO1xuaW1wb3J0IHsgYmFzZTU4YnRjIH0gZnJvbSAnLi9iYXNlcy9iYXNlNTguanMnO1xuaW1wb3J0IHsgYmFzZTMyIH0gZnJvbSAnLi9iYXNlcy9iYXNlMzIuanMnO1xuaW1wb3J0IHsgY29lcmNlIH0gZnJvbSAnLi9ieXRlcy5qcyc7XG5leHBvcnQgY2xhc3MgQ0lEIHtcbiAgY29uc3RydWN0b3IodmVyc2lvbiwgY29kZSwgbXVsdGloYXNoLCBieXRlcykge1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICB0aGlzLm11bHRpaGFzaCA9IG11bHRpaGFzaDtcbiAgICB0aGlzLmJ5dGVzID0gYnl0ZXM7XG4gICAgdGhpcy5ieXRlT2Zmc2V0ID0gYnl0ZXMuYnl0ZU9mZnNldDtcbiAgICB0aGlzLmJ5dGVMZW5ndGggPSBieXRlcy5ieXRlTGVuZ3RoO1xuICAgIHRoaXMuYXNDSUQgPSB0aGlzO1xuICAgIHRoaXMuX2Jhc2VDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICBieXRlT2Zmc2V0OiBoaWRkZW4sXG4gICAgICBieXRlTGVuZ3RoOiBoaWRkZW4sXG4gICAgICBjb2RlOiByZWFkb25seSxcbiAgICAgIHZlcnNpb246IHJlYWRvbmx5LFxuICAgICAgbXVsdGloYXNoOiByZWFkb25seSxcbiAgICAgIGJ5dGVzOiByZWFkb25seSxcbiAgICAgIF9iYXNlQ2FjaGU6IGhpZGRlbixcbiAgICAgIGFzQ0lEOiBoaWRkZW5cbiAgICB9KTtcbiAgfVxuICB0b1YwKCkge1xuICAgIHN3aXRjaCAodGhpcy52ZXJzaW9uKSB7XG4gICAgY2FzZSAwOiB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY29uc3Qge2NvZGUsIG11bHRpaGFzaH0gPSB0aGlzO1xuICAgICAgICBpZiAoY29kZSAhPT0gREFHX1BCX0NPREUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgbm9uIGRhZy1wYiBDSUQgdG8gQ0lEdjAnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXVsdGloYXNoLmNvZGUgIT09IFNIQV8yNTZfQ09ERSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNvbnZlcnQgbm9uIHNoYTItMjU2IG11bHRpaGFzaCBDSUQgdG8gQ0lEdjAnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQ0lELmNyZWF0ZVYwKG11bHRpaGFzaCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHRvVjEoKSB7XG4gICAgc3dpdGNoICh0aGlzLnZlcnNpb24pIHtcbiAgICBjYXNlIDA6IHtcbiAgICAgICAgY29uc3Qge2NvZGUsIGRpZ2VzdH0gPSB0aGlzLm11bHRpaGFzaDtcbiAgICAgICAgY29uc3QgbXVsdGloYXNoID0gRGlnZXN0LmNyZWF0ZShjb2RlLCBkaWdlc3QpO1xuICAgICAgICByZXR1cm4gQ0lELmNyZWF0ZVYxKHRoaXMuY29kZSwgbXVsdGloYXNoKTtcbiAgICAgIH1cbiAgICBjYXNlIDE6IHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyBFcnJvcihgQ2FuIG5vdCBjb252ZXJ0IENJRCB2ZXJzaW9uICR7IHRoaXMudmVyc2lvbiB9IHRvIHZlcnNpb24gMC4gVGhpcyBpcyBhIGJ1ZyBwbGVhc2UgcmVwb3J0YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVxdWFscyhvdGhlcikge1xuICAgIHJldHVybiBvdGhlciAmJiB0aGlzLmNvZGUgPT09IG90aGVyLmNvZGUgJiYgdGhpcy52ZXJzaW9uID09PSBvdGhlci52ZXJzaW9uICYmIERpZ2VzdC5lcXVhbHModGhpcy5tdWx0aWhhc2gsIG90aGVyLm11bHRpaGFzaCk7XG4gIH1cbiAgdG9TdHJpbmcoYmFzZSkge1xuICAgIGNvbnN0IHtieXRlcywgdmVyc2lvbiwgX2Jhc2VDYWNoZX0gPSB0aGlzO1xuICAgIHN3aXRjaCAodmVyc2lvbikge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiB0b1N0cmluZ1YwKGJ5dGVzLCBfYmFzZUNhY2hlLCBiYXNlIHx8IGJhc2U1OGJ0Yy5lbmNvZGVyKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHRvU3RyaW5nVjEoYnl0ZXMsIF9iYXNlQ2FjaGUsIGJhc2UgfHwgYmFzZTMyLmVuY29kZXIpO1xuICAgIH1cbiAgfVxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHZlcnNpb246IHRoaXMudmVyc2lvbixcbiAgICAgIGhhc2g6IHRoaXMubXVsdGloYXNoLmJ5dGVzXG4gICAgfTtcbiAgfVxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdDSUQnO1xuICB9XG4gIFtTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSgpIHtcbiAgICByZXR1cm4gJ0NJRCgnICsgdGhpcy50b1N0cmluZygpICsgJyknO1xuICB9XG4gIHN0YXRpYyBpc0NJRCh2YWx1ZSkge1xuICAgIGRlcHJlY2F0ZSgvXjBcXC4wLywgSVNfQ0lEX0RFUFJFQ0FUSU9OKTtcbiAgICByZXR1cm4gISEodmFsdWUgJiYgKHZhbHVlW2NpZFN5bWJvbF0gfHwgdmFsdWUuYXNDSUQgPT09IHZhbHVlKSk7XG4gIH1cbiAgZ2V0IHRvQmFzZUVuY29kZWRTdHJpbmcoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdEZXByZWNhdGVkLCB1c2UgLnRvU3RyaW5nKCknKTtcbiAgfVxuICBnZXQgY29kZWMoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcImNvZGVjXCIgcHJvcGVydHkgaXMgZGVwcmVjYXRlZCwgdXNlIGludGVnZXIgXCJjb2RlXCIgcHJvcGVydHkgaW5zdGVhZCcpO1xuICB9XG4gIGdldCBidWZmZXIoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdEZXByZWNhdGVkIC5idWZmZXIgcHJvcGVydHksIHVzZSAuYnl0ZXMgdG8gZ2V0IFVpbnQ4QXJyYXkgaW5zdGVhZCcpO1xuICB9XG4gIGdldCBtdWx0aWJhc2VOYW1lKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignXCJtdWx0aWJhc2VOYW1lXCIgcHJvcGVydHkgaXMgZGVwcmVjYXRlZCcpO1xuICB9XG4gIGdldCBwcmVmaXgoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcInByZWZpeFwiIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQnKTtcbiAgfVxuICBzdGF0aWMgYXNDSUQodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBDSUQpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlICE9IG51bGwgJiYgdmFsdWUuYXNDSUQgPT09IHZhbHVlKSB7XG4gICAgICBjb25zdCB7dmVyc2lvbiwgY29kZSwgbXVsdGloYXNoLCBieXRlc30gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBuZXcgQ0lEKHZlcnNpb24sIGNvZGUsIG11bHRpaGFzaCwgYnl0ZXMgfHwgZW5jb2RlQ0lEKHZlcnNpb24sIGNvZGUsIG11bHRpaGFzaC5ieXRlcykpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZVtjaWRTeW1ib2xdID09PSB0cnVlKSB7XG4gICAgICBjb25zdCB7dmVyc2lvbiwgbXVsdGloYXNoLCBjb2RlfSA9IHZhbHVlO1xuICAgICAgY29uc3QgZGlnZXN0ID0gRGlnZXN0LmRlY29kZShtdWx0aWhhc2gpO1xuICAgICAgcmV0dXJuIENJRC5jcmVhdGUodmVyc2lvbiwgY29kZSwgZGlnZXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBjcmVhdGUodmVyc2lvbiwgY29kZSwgZGlnZXN0KSB7XG4gICAgaWYgKHR5cGVvZiBjb2RlICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHJpbmcgY29kZWNzIGFyZSBubyBsb25nZXIgc3VwcG9ydGVkJyk7XG4gICAgfVxuICAgIHN3aXRjaCAodmVyc2lvbikge1xuICAgIGNhc2UgMDoge1xuICAgICAgICBpZiAoY29kZSAhPT0gREFHX1BCX0NPREUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFZlcnNpb24gMCBDSUQgbXVzdCB1c2UgZGFnLXBiIChjb2RlOiAkeyBEQUdfUEJfQ09ERSB9KSBibG9jayBlbmNvZGluZ2ApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBuZXcgQ0lEKHZlcnNpb24sIGNvZGUsIGRpZ2VzdCwgZGlnZXN0LmJ5dGVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGNhc2UgMToge1xuICAgICAgICBjb25zdCBieXRlcyA9IGVuY29kZUNJRCh2ZXJzaW9uLCBjb2RlLCBkaWdlc3QuYnl0ZXMpO1xuICAgICAgICByZXR1cm4gbmV3IENJRCh2ZXJzaW9uLCBjb2RlLCBkaWdlc3QsIGJ5dGVzKTtcbiAgICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2ZXJzaW9uJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN0YXRpYyBjcmVhdGVWMChkaWdlc3QpIHtcbiAgICByZXR1cm4gQ0lELmNyZWF0ZSgwLCBEQUdfUEJfQ09ERSwgZGlnZXN0KTtcbiAgfVxuICBzdGF0aWMgY3JlYXRlVjEoY29kZSwgZGlnZXN0KSB7XG4gICAgcmV0dXJuIENJRC5jcmVhdGUoMSwgY29kZSwgZGlnZXN0KTtcbiAgfVxuICBzdGF0aWMgZGVjb2RlKGJ5dGVzKSB7XG4gICAgY29uc3QgW2NpZCwgcmVtYWluZGVyXSA9IENJRC5kZWNvZGVGaXJzdChieXRlcyk7XG4gICAgaWYgKHJlbWFpbmRlci5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb3JyZWN0IGxlbmd0aCcpO1xuICAgIH1cbiAgICByZXR1cm4gY2lkO1xuICB9XG4gIHN0YXRpYyBkZWNvZGVGaXJzdChieXRlcykge1xuICAgIGNvbnN0IHNwZWNzID0gQ0lELmluc3BlY3RCeXRlcyhieXRlcyk7XG4gICAgY29uc3QgcHJlZml4U2l6ZSA9IHNwZWNzLnNpemUgLSBzcGVjcy5tdWx0aWhhc2hTaXplO1xuICAgIGNvbnN0IG11bHRpaGFzaEJ5dGVzID0gY29lcmNlKGJ5dGVzLnN1YmFycmF5KHByZWZpeFNpemUsIHByZWZpeFNpemUgKyBzcGVjcy5tdWx0aWhhc2hTaXplKSk7XG4gICAgaWYgKG11bHRpaGFzaEJ5dGVzLmJ5dGVMZW5ndGggIT09IHNwZWNzLm11bHRpaGFzaFNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb3JyZWN0IGxlbmd0aCcpO1xuICAgIH1cbiAgICBjb25zdCBkaWdlc3RCeXRlcyA9IG11bHRpaGFzaEJ5dGVzLnN1YmFycmF5KHNwZWNzLm11bHRpaGFzaFNpemUgLSBzcGVjcy5kaWdlc3RTaXplKTtcbiAgICBjb25zdCBkaWdlc3QgPSBuZXcgRGlnZXN0LkRpZ2VzdChzcGVjcy5tdWx0aWhhc2hDb2RlLCBzcGVjcy5kaWdlc3RTaXplLCBkaWdlc3RCeXRlcywgbXVsdGloYXNoQnl0ZXMpO1xuICAgIGNvbnN0IGNpZCA9IHNwZWNzLnZlcnNpb24gPT09IDAgPyBDSUQuY3JlYXRlVjAoZGlnZXN0KSA6IENJRC5jcmVhdGVWMShzcGVjcy5jb2RlYywgZGlnZXN0KTtcbiAgICByZXR1cm4gW1xuICAgICAgY2lkLFxuICAgICAgYnl0ZXMuc3ViYXJyYXkoc3BlY3Muc2l6ZSlcbiAgICBdO1xuICB9XG4gIHN0YXRpYyBpbnNwZWN0Qnl0ZXMoaW5pdGlhbEJ5dGVzKSB7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgY29uc3QgbmV4dCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IFtpLCBsZW5ndGhdID0gdmFyaW50LmRlY29kZShpbml0aWFsQnl0ZXMuc3ViYXJyYXkob2Zmc2V0KSk7XG4gICAgICBvZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgcmV0dXJuIGk7XG4gICAgfTtcbiAgICBsZXQgdmVyc2lvbiA9IG5leHQoKTtcbiAgICBsZXQgY29kZWMgPSBEQUdfUEJfQ09ERTtcbiAgICBpZiAodmVyc2lvbiA9PT0gMTgpIHtcbiAgICAgIHZlcnNpb24gPSAwO1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9IGVsc2UgaWYgKHZlcnNpb24gPT09IDEpIHtcbiAgICAgIGNvZGVjID0gbmV4dCgpO1xuICAgIH1cbiAgICBpZiAodmVyc2lvbiAhPT0gMCAmJiB2ZXJzaW9uICE9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgSW52YWxpZCBDSUQgdmVyc2lvbiAkeyB2ZXJzaW9uIH1gKTtcbiAgICB9XG4gICAgY29uc3QgcHJlZml4U2l6ZSA9IG9mZnNldDtcbiAgICBjb25zdCBtdWx0aWhhc2hDb2RlID0gbmV4dCgpO1xuICAgIGNvbnN0IGRpZ2VzdFNpemUgPSBuZXh0KCk7XG4gICAgY29uc3Qgc2l6ZSA9IG9mZnNldCArIGRpZ2VzdFNpemU7XG4gICAgY29uc3QgbXVsdGloYXNoU2l6ZSA9IHNpemUgLSBwcmVmaXhTaXplO1xuICAgIHJldHVybiB7XG4gICAgICB2ZXJzaW9uLFxuICAgICAgY29kZWMsXG4gICAgICBtdWx0aWhhc2hDb2RlLFxuICAgICAgZGlnZXN0U2l6ZSxcbiAgICAgIG11bHRpaGFzaFNpemUsXG4gICAgICBzaXplXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgcGFyc2Uoc291cmNlLCBiYXNlKSB7XG4gICAgY29uc3QgW3ByZWZpeCwgYnl0ZXNdID0gcGFyc2VDSUR0b0J5dGVzKHNvdXJjZSwgYmFzZSk7XG4gICAgY29uc3QgY2lkID0gQ0lELmRlY29kZShieXRlcyk7XG4gICAgY2lkLl9iYXNlQ2FjaGUuc2V0KHByZWZpeCwgc291cmNlKTtcbiAgICByZXR1cm4gY2lkO1xuICB9XG59XG5jb25zdCBwYXJzZUNJRHRvQnl0ZXMgPSAoc291cmNlLCBiYXNlKSA9PiB7XG4gIHN3aXRjaCAoc291cmNlWzBdKSB7XG4gIGNhc2UgJ1EnOiB7XG4gICAgICBjb25zdCBkZWNvZGVyID0gYmFzZSB8fCBiYXNlNThidGM7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBiYXNlNThidGMucHJlZml4LFxuICAgICAgICBkZWNvZGVyLmRlY29kZShgJHsgYmFzZTU4YnRjLnByZWZpeCB9JHsgc291cmNlIH1gKVxuICAgICAgXTtcbiAgICB9XG4gIGNhc2UgYmFzZTU4YnRjLnByZWZpeDoge1xuICAgICAgY29uc3QgZGVjb2RlciA9IGJhc2UgfHwgYmFzZTU4YnRjO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgYmFzZTU4YnRjLnByZWZpeCxcbiAgICAgICAgZGVjb2Rlci5kZWNvZGUoc291cmNlKVxuICAgICAgXTtcbiAgICB9XG4gIGNhc2UgYmFzZTMyLnByZWZpeDoge1xuICAgICAgY29uc3QgZGVjb2RlciA9IGJhc2UgfHwgYmFzZTMyO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgYmFzZTMyLnByZWZpeCxcbiAgICAgICAgZGVjb2Rlci5kZWNvZGUoc291cmNlKVxuICAgICAgXTtcbiAgICB9XG4gIGRlZmF1bHQ6IHtcbiAgICAgIGlmIChiYXNlID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1RvIHBhcnNlIG5vbiBiYXNlMzIgb3IgYmFzZTU4YnRjIGVuY29kZWQgQ0lEIG11bHRpYmFzZSBkZWNvZGVyIG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbXG4gICAgICAgIHNvdXJjZVswXSxcbiAgICAgICAgYmFzZS5kZWNvZGUoc291cmNlKVxuICAgICAgXTtcbiAgICB9XG4gIH1cbn07XG5jb25zdCB0b1N0cmluZ1YwID0gKGJ5dGVzLCBjYWNoZSwgYmFzZSkgPT4ge1xuICBjb25zdCB7cHJlZml4fSA9IGJhc2U7XG4gIGlmIChwcmVmaXggIT09IGJhc2U1OGJ0Yy5wcmVmaXgpIHtcbiAgICB0aHJvdyBFcnJvcihgQ2Fubm90IHN0cmluZyBlbmNvZGUgVjAgaW4gJHsgYmFzZS5uYW1lIH0gZW5jb2RpbmdgKTtcbiAgfVxuICBjb25zdCBjaWQgPSBjYWNoZS5nZXQocHJlZml4KTtcbiAgaWYgKGNpZCA9PSBudWxsKSB7XG4gICAgY29uc3QgY2lkID0gYmFzZS5lbmNvZGUoYnl0ZXMpLnNsaWNlKDEpO1xuICAgIGNhY2hlLnNldChwcmVmaXgsIGNpZCk7XG4gICAgcmV0dXJuIGNpZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2lkO1xuICB9XG59O1xuY29uc3QgdG9TdHJpbmdWMSA9IChieXRlcywgY2FjaGUsIGJhc2UpID0+IHtcbiAgY29uc3Qge3ByZWZpeH0gPSBiYXNlO1xuICBjb25zdCBjaWQgPSBjYWNoZS5nZXQocHJlZml4KTtcbiAgaWYgKGNpZCA9PSBudWxsKSB7XG4gICAgY29uc3QgY2lkID0gYmFzZS5lbmNvZGUoYnl0ZXMpO1xuICAgIGNhY2hlLnNldChwcmVmaXgsIGNpZCk7XG4gICAgcmV0dXJuIGNpZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2lkO1xuICB9XG59O1xuY29uc3QgREFHX1BCX0NPREUgPSAxMTI7XG5jb25zdCBTSEFfMjU2X0NPREUgPSAxODtcbmNvbnN0IGVuY29kZUNJRCA9ICh2ZXJzaW9uLCBjb2RlLCBtdWx0aWhhc2gpID0+IHtcbiAgY29uc3QgY29kZU9mZnNldCA9IHZhcmludC5lbmNvZGluZ0xlbmd0aCh2ZXJzaW9uKTtcbiAgY29uc3QgaGFzaE9mZnNldCA9IGNvZGVPZmZzZXQgKyB2YXJpbnQuZW5jb2RpbmdMZW5ndGgoY29kZSk7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoaGFzaE9mZnNldCArIG11bHRpaGFzaC5ieXRlTGVuZ3RoKTtcbiAgdmFyaW50LmVuY29kZVRvKHZlcnNpb24sIGJ5dGVzLCAwKTtcbiAgdmFyaW50LmVuY29kZVRvKGNvZGUsIGJ5dGVzLCBjb2RlT2Zmc2V0KTtcbiAgYnl0ZXMuc2V0KG11bHRpaGFzaCwgaGFzaE9mZnNldCk7XG4gIHJldHVybiBieXRlcztcbn07XG5jb25zdCBjaWRTeW1ib2wgPSBTeW1ib2wuZm9yKCdAaXBsZC9qcy1jaWQvQ0lEJyk7XG5jb25zdCByZWFkb25seSA9IHtcbiAgd3JpdGFibGU6IGZhbHNlLFxuICBjb25maWd1cmFibGU6IGZhbHNlLFxuICBlbnVtZXJhYmxlOiB0cnVlXG59O1xuY29uc3QgaGlkZGVuID0ge1xuICB3cml0YWJsZTogZmFsc2UsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBjb25maWd1cmFibGU6IGZhbHNlXG59O1xuY29uc3QgdmVyc2lvbiA9ICcwLjAuMC1kZXYnO1xuY29uc3QgZGVwcmVjYXRlID0gKHJhbmdlLCBtZXNzYWdlKSA9PiB7XG4gIGlmIChyYW5nZS50ZXN0KHZlcnNpb24pKSB7XG4gICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufTtcbmNvbnN0IElTX0NJRF9ERVBSRUNBVElPTiA9IGBDSUQuaXNDSUQodikgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXG5Gb2xsb3dpbmcgY29kZSBwYXR0ZXJuOlxuXG5pZiAoQ0lELmlzQ0lEKHZhbHVlKSkge1xuICBkb1NvbWV0aGluZ1dpdGhDSUQodmFsdWUpXG59XG5cbklzIHJlcGxhY2VkIHdpdGg6XG5cbmNvbnN0IGNpZCA9IENJRC5hc0NJRCh2YWx1ZSlcbmlmIChjaWQpIHtcbiAgLy8gTWFrZSBzdXJlIHRvIHVzZSBjaWQgaW5zdGVhZCBvZiB2YWx1ZVxuICBkb1NvbWV0aGluZ1dpdGhDSUQoY2lkKVxufVxuYDsiLCJpbXBvcnQgKiBhcyBpZGVudGl0eUJhc2UgZnJvbSAnLi9iYXNlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgKiBhcyBiYXNlMiBmcm9tICcuL2Jhc2VzL2Jhc2UyLmpzJztcbmltcG9ydCAqIGFzIGJhc2U4IGZyb20gJy4vYmFzZXMvYmFzZTguanMnO1xuaW1wb3J0ICogYXMgYmFzZTEwIGZyb20gJy4vYmFzZXMvYmFzZTEwLmpzJztcbmltcG9ydCAqIGFzIGJhc2UxNiBmcm9tICcuL2Jhc2VzL2Jhc2UxNi5qcyc7XG5pbXBvcnQgKiBhcyBiYXNlMzIgZnJvbSAnLi9iYXNlcy9iYXNlMzIuanMnO1xuaW1wb3J0ICogYXMgYmFzZTM2IGZyb20gJy4vYmFzZXMvYmFzZTM2LmpzJztcbmltcG9ydCAqIGFzIGJhc2U1OCBmcm9tICcuL2Jhc2VzL2Jhc2U1OC5qcyc7XG5pbXBvcnQgKiBhcyBiYXNlNjQgZnJvbSAnLi9iYXNlcy9iYXNlNjQuanMnO1xuaW1wb3J0ICogYXMgYmFzZTI1NmVtb2ppIGZyb20gJy4vYmFzZXMvYmFzZTI1NmVtb2ppLmpzJztcbmltcG9ydCAqIGFzIHNoYTIgZnJvbSAnLi9oYXNoZXMvc2hhMi5qcyc7XG5pbXBvcnQgKiBhcyBpZGVudGl0eSBmcm9tICcuL2hhc2hlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgKiBhcyByYXcgZnJvbSAnLi9jb2RlY3MvcmF3LmpzJztcbmltcG9ydCAqIGFzIGpzb24gZnJvbSAnLi9jb2RlY3MvanNvbi5qcyc7XG5pbXBvcnQge1xuICBDSUQsXG4gIGhhc2hlcixcbiAgZGlnZXN0LFxuICB2YXJpbnQsXG4gIGJ5dGVzXG59IGZyb20gJy4vaW5kZXguanMnO1xuY29uc3QgYmFzZXMgPSB7XG4gIC4uLmlkZW50aXR5QmFzZSxcbiAgLi4uYmFzZTIsXG4gIC4uLmJhc2U4LFxuICAuLi5iYXNlMTAsXG4gIC4uLmJhc2UxNixcbiAgLi4uYmFzZTMyLFxuICAuLi5iYXNlMzYsXG4gIC4uLmJhc2U1OCxcbiAgLi4uYmFzZTY0LFxuICAuLi5iYXNlMjU2ZW1vamlcbn07XG5jb25zdCBoYXNoZXMgPSB7XG4gIC4uLnNoYTIsXG4gIC4uLmlkZW50aXR5XG59O1xuY29uc3QgY29kZWNzID0ge1xuICByYXcsXG4gIGpzb25cbn07XG5leHBvcnQge1xuICBDSUQsXG4gIGhhc2hlcixcbiAgZGlnZXN0LFxuICB2YXJpbnQsXG4gIGJ5dGVzLFxuICBoYXNoZXMsXG4gIGJhc2VzLFxuICBjb2RlY3Ncbn07IiwiaW1wb3J0IHsgYmFzZXMgfSBmcm9tICdtdWx0aWZvcm1hdHMvYmFzaWNzJztcbmltcG9ydCB7IGFsbG9jVW5zYWZlIH0gZnJvbSAnLi4vYWxsb2MuanMnO1xuZnVuY3Rpb24gY3JlYXRlQ29kZWMobmFtZSwgcHJlZml4LCBlbmNvZGUsIGRlY29kZSkge1xuICByZXR1cm4ge1xuICAgIG5hbWUsXG4gICAgcHJlZml4LFxuICAgIGVuY29kZXI6IHtcbiAgICAgIG5hbWUsXG4gICAgICBwcmVmaXgsXG4gICAgICBlbmNvZGVcbiAgICB9LFxuICAgIGRlY29kZXI6IHsgZGVjb2RlIH1cbiAgfTtcbn1cbmNvbnN0IHN0cmluZyA9IGNyZWF0ZUNvZGVjKCd1dGY4JywgJ3UnLCBidWYgPT4ge1xuICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCd1dGY4Jyk7XG4gIHJldHVybiAndScgKyBkZWNvZGVyLmRlY29kZShidWYpO1xufSwgc3RyID0+IHtcbiAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICByZXR1cm4gZW5jb2Rlci5lbmNvZGUoc3RyLnN1YnN0cmluZygxKSk7XG59KTtcbmNvbnN0IGFzY2lpID0gY3JlYXRlQ29kZWMoJ2FzY2lpJywgJ2EnLCBidWYgPT4ge1xuICBsZXQgc3RyaW5nID0gJ2EnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkrKykge1xuICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSk7XG4gIH1cbiAgcmV0dXJuIHN0cmluZztcbn0sIHN0ciA9PiB7XG4gIHN0ciA9IHN0ci5zdWJzdHJpbmcoMSk7XG4gIGNvbnN0IGJ1ZiA9IGFsbG9jVW5zYWZlKHN0ci5sZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGJ1ZltpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICB9XG4gIHJldHVybiBidWY7XG59KTtcbmNvbnN0IEJBU0VTID0ge1xuICB1dGY4OiBzdHJpbmcsXG4gICd1dGYtOCc6IHN0cmluZyxcbiAgaGV4OiBiYXNlcy5iYXNlMTYsXG4gIGxhdGluMTogYXNjaWksXG4gIGFzY2lpOiBhc2NpaSxcbiAgYmluYXJ5OiBhc2NpaSxcbiAgLi4uYmFzZXNcbn07XG5leHBvcnQgZGVmYXVsdCBCQVNFUzsiLCJpbXBvcnQgYmFzZXMgZnJvbSAnLi91dGlsL2Jhc2VzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiB0b1N0cmluZyhhcnJheSwgZW5jb2RpbmcgPSAndXRmOCcpIHtcbiAgY29uc3QgYmFzZSA9IGJhc2VzW2VuY29kaW5nXTtcbiAgaWYgKCFiYXNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBlbmNvZGluZyBcIiR7IGVuY29kaW5nIH1cImApO1xuICB9XG4gIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi04JykgJiYgZ2xvYmFsVGhpcy5CdWZmZXIgIT0gbnVsbCAmJiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tICE9IG51bGwpIHtcbiAgICByZXR1cm4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShhcnJheS5idWZmZXIsIGFycmF5LmJ5dGVPZmZzZXQsIGFycmF5LmJ5dGVMZW5ndGgpLnRvU3RyaW5nKCd1dGY4Jyk7XG4gIH1cbiAgcmV0dXJuIGJhc2UuZW5jb2Rlci5lbmNvZGUoYXJyYXkpLnN1YnN0cmluZygxKTtcbn0iLCJpbXBvcnQgYmFzZXMgZnJvbSAnLi91dGlsL2Jhc2VzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBmcm9tU3RyaW5nKHN0cmluZywgZW5jb2RpbmcgPSAndXRmOCcpIHtcbiAgY29uc3QgYmFzZSA9IGJhc2VzW2VuY29kaW5nXTtcbiAgaWYgKCFiYXNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBlbmNvZGluZyBcIiR7IGVuY29kaW5nIH1cImApO1xuICB9XG4gIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi04JykgJiYgZ2xvYmFsVGhpcy5CdWZmZXIgIT0gbnVsbCAmJiBnbG9iYWxUaGlzLkJ1ZmZlci5mcm9tICE9IG51bGwpIHtcbiAgICByZXR1cm4gZ2xvYmFsVGhpcy5CdWZmZXIuZnJvbShzdHJpbmcsICd1dGY4Jyk7XG4gIH1cbiAgcmV0dXJuIGJhc2UuZGVjb2Rlci5kZWNvZGUoYCR7IGJhc2UucHJlZml4IH0keyBzdHJpbmcgfWApO1xufSIsImltcG9ydCB7IGNvbmNhdCB9IGZyb20gXCJ1aW50OGFycmF5cy9jb25jYXRcIjtcbmltcG9ydCB7IHRvU3RyaW5nIH0gZnJvbSBcInVpbnQ4YXJyYXlzL3RvLXN0cmluZ1wiO1xuaW1wb3J0IHsgZnJvbVN0cmluZyB9IGZyb20gXCJ1aW50OGFycmF5cy9mcm9tLXN0cmluZ1wiO1xuaW1wb3J0IHsgc2FmZUpzb25QYXJzZSwgc2FmZUpzb25TdHJpbmdpZnkgfSBmcm9tIFwiQHdhbGxldGNvbm5lY3Qvc2FmZS1qc29uXCI7XG5pbXBvcnQgeyBEQVRBX0VOQ09ESU5HLCBESURfREVMSU1JVEVSLCBESURfTUVUSE9ELCBESURfUFJFRklYLCBKU09OX0VOQ09ESU5HLCBKV1RfREVMSU1JVEVSLCBKV1RfRU5DT0RJTkcsIE1VTFRJQ09ERUNfRUQyNTUxOV9CQVNFLCBNVUxUSUNPREVDX0VEMjU1MTlfRU5DT0RJTkcsIE1VTFRJQ09ERUNfRUQyNTUxOV9IRUFERVIsIE1VTFRJQ09ERUNfRUQyNTUxOV9MRU5HVEgsIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlSlNPTihzdHIpIHtcbiAgICByZXR1cm4gc2FmZUpzb25QYXJzZSh0b1N0cmluZyhmcm9tU3RyaW5nKHN0ciwgSldUX0VOQ09ESU5HKSwgSlNPTl9FTkNPRElORykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUpTT04odmFsKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nKGZyb21TdHJpbmcoc2FmZUpzb25TdHJpbmdpZnkodmFsKSwgSlNPTl9FTkNPRElORyksIEpXVF9FTkNPRElORyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlSXNzKHB1YmxpY0tleSkge1xuICAgIGNvbnN0IGhlYWRlciA9IGZyb21TdHJpbmcoTVVMVElDT0RFQ19FRDI1NTE5X0hFQURFUiwgTVVMVElDT0RFQ19FRDI1NTE5X0VOQ09ESU5HKTtcbiAgICBjb25zdCBtdWx0aWNvZGVjID0gTVVMVElDT0RFQ19FRDI1NTE5X0JBU0UgK1xuICAgICAgICB0b1N0cmluZyhjb25jYXQoW2hlYWRlciwgcHVibGljS2V5XSksIE1VTFRJQ09ERUNfRUQyNTUxOV9FTkNPRElORyk7XG4gICAgcmV0dXJuIFtESURfUFJFRklYLCBESURfTUVUSE9ELCBtdWx0aWNvZGVjXS5qb2luKERJRF9ERUxJTUlURVIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUlzcyhpc3N1ZXIpIHtcbiAgICBjb25zdCBbcHJlZml4LCBtZXRob2QsIG11bHRpY29kZWNdID0gaXNzdWVyLnNwbGl0KERJRF9ERUxJTUlURVIpO1xuICAgIGlmIChwcmVmaXggIT09IERJRF9QUkVGSVggfHwgbWV0aG9kICE9PSBESURfTUVUSE9EKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSXNzdWVyIG11c3QgYmUgYSBESUQgd2l0aCBtZXRob2QgXCJrZXlcImApO1xuICAgIH1cbiAgICBjb25zdCBiYXNlID0gbXVsdGljb2RlYy5zbGljZSgwLCAxKTtcbiAgICBpZiAoYmFzZSAhPT0gTVVMVElDT0RFQ19FRDI1NTE5X0JBU0UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJc3N1ZXIgbXVzdCBiZSBhIGtleSBpbiBtdWxpY29kZWMgZm9ybWF0YCk7XG4gICAgfVxuICAgIGNvbnN0IGJ5dGVzID0gZnJvbVN0cmluZyhtdWx0aWNvZGVjLnNsaWNlKDEpLCBNVUxUSUNPREVDX0VEMjU1MTlfRU5DT0RJTkcpO1xuICAgIGNvbnN0IHR5cGUgPSB0b1N0cmluZyhieXRlcy5zbGljZSgwLCAyKSwgTVVMVElDT0RFQ19FRDI1NTE5X0VOQ09ESU5HKTtcbiAgICBpZiAodHlwZSAhPT0gTVVMVElDT0RFQ19FRDI1NTE5X0hFQURFUikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYElzc3VlciBtdXN0IGJlIGEgcHVibGljIGtleSB3aXRoIHR5cGUgXCJFZDI1NTE5XCJgKTtcbiAgICB9XG4gICAgY29uc3QgcHVibGljS2V5ID0gYnl0ZXMuc2xpY2UoMik7XG4gICAgaWYgKHB1YmxpY0tleS5sZW5ndGggIT09IE1VTFRJQ09ERUNfRUQyNTUxOV9MRU5HVEgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJc3N1ZXIgbXVzdCBiZSBhIHB1YmxpYyBrZXkgd2l0aCBsZW5ndGggMzIgYnl0ZXNgKTtcbiAgICB9XG4gICAgcmV0dXJuIHB1YmxpY0tleTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVTaWcoYnl0ZXMpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcoYnl0ZXMsIEpXVF9FTkNPRElORyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlU2lnKGVuY29kZWQpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyhlbmNvZGVkLCBKV1RfRU5DT0RJTkcpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZURhdGEocGFyYW1zKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcoW2VuY29kZUpTT04ocGFyYW1zLmhlYWRlciksIGVuY29kZUpTT04ocGFyYW1zLnBheWxvYWQpXS5qb2luKEpXVF9ERUxJTUlURVIpLCBEQVRBX0VOQ09ESU5HKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVEYXRhKGRhdGEpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB0b1N0cmluZyhkYXRhLCBEQVRBX0VOQ09ESU5HKS5zcGxpdChKV1RfREVMSU1JVEVSKTtcbiAgICBjb25zdCBoZWFkZXIgPSBkZWNvZGVKU09OKHBhcmFtc1swXSk7XG4gICAgY29uc3QgcGF5bG9hZCA9IGRlY29kZUpTT04ocGFyYW1zWzFdKTtcbiAgICByZXR1cm4geyBoZWFkZXIsIHBheWxvYWQgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVKV1QocGFyYW1zKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgZW5jb2RlSlNPTihwYXJhbXMuaGVhZGVyKSxcbiAgICAgICAgZW5jb2RlSlNPTihwYXJhbXMucGF5bG9hZCksXG4gICAgICAgIGVuY29kZVNpZyhwYXJhbXMuc2lnbmF0dXJlKSxcbiAgICBdLmpvaW4oSldUX0RFTElNSVRFUik7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlSldUKGp3dCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IGp3dC5zcGxpdChKV1RfREVMSU1JVEVSKTtcbiAgICBjb25zdCBoZWFkZXIgPSBkZWNvZGVKU09OKHBhcmFtc1swXSk7XG4gICAgY29uc3QgcGF5bG9hZCA9IGRlY29kZUpTT04ocGFyYW1zWzFdKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBkZWNvZGVTaWcocGFyYW1zWzJdKTtcbiAgICBjb25zdCBkYXRhID0gZnJvbVN0cmluZyhwYXJhbXMuc2xpY2UoMCwgMikuam9pbihKV1RfREVMSU1JVEVSKSwgREFUQV9FTkNPRElORyk7XG4gICAgcmV0dXJuIHsgaGVhZGVyLCBwYXlsb2FkLCBzaWduYXR1cmUsIGRhdGEgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsImltcG9ydCAqIGFzIGVkMjU1MTkgZnJvbSBcIkBzdGFibGVsaWIvZWQyNTUxOVwiO1xuaW1wb3J0IHsgcmFuZG9tQnl0ZXMgfSBmcm9tIFwiQHN0YWJsZWxpYi9yYW5kb21cIjtcbmltcG9ydCB7IGZyb21NaWxpc2Vjb25kcyB9IGZyb20gXCJAd2FsbGV0Y29ubmVjdC90aW1lXCI7XG5pbXBvcnQgeyBKV1RfSVJJRElVTV9BTEcsIEpXVF9JUklESVVNX1RZUCwgS0VZX1BBSVJfU0VFRF9MRU5HVEgsIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBkZWNvZGVJc3MsIGRlY29kZUpXVCwgZW5jb2RlRGF0YSwgZW5jb2RlSXNzLCBlbmNvZGVKV1QsIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUtleVBhaXIoc2VlZCA9IHJhbmRvbUJ5dGVzKEtFWV9QQUlSX1NFRURfTEVOR1RIKSkge1xuICAgIHJldHVybiBlZDI1NTE5LmdlbmVyYXRlS2V5UGFpckZyb21TZWVkKHNlZWQpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25KV1Qoc3ViLCBhdWQsIHR0bCwga2V5UGFpciwgaWF0ID0gZnJvbU1pbGlzZWNvbmRzKERhdGUubm93KCkpKSB7XG4gICAgY29uc3QgaGVhZGVyID0geyBhbGc6IEpXVF9JUklESVVNX0FMRywgdHlwOiBKV1RfSVJJRElVTV9UWVAgfTtcbiAgICBjb25zdCBpc3MgPSBlbmNvZGVJc3Moa2V5UGFpci5wdWJsaWNLZXkpO1xuICAgIGNvbnN0IGV4cCA9IGlhdCArIHR0bDtcbiAgICBjb25zdCBwYXlsb2FkID0geyBpc3MsIHN1YiwgYXVkLCBpYXQsIGV4cCB9O1xuICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVEYXRhKHsgaGVhZGVyLCBwYXlsb2FkIH0pO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGVkMjU1MTkuc2lnbihrZXlQYWlyLnNlY3JldEtleSwgZGF0YSk7XG4gICAgcmV0dXJuIGVuY29kZUpXVCh7IGhlYWRlciwgcGF5bG9hZCwgc2lnbmF0dXJlIH0pO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZlcmlmeUpXVChqd3QpIHtcbiAgICBjb25zdCB7IGhlYWRlciwgcGF5bG9hZCwgZGF0YSwgc2lnbmF0dXJlIH0gPSBkZWNvZGVKV1Qoand0KTtcbiAgICBpZiAoaGVhZGVyLmFsZyAhPT0gSldUX0lSSURJVU1fQUxHIHx8IGhlYWRlci50eXAgIT09IEpXVF9JUklESVVNX1RZUCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJKV1QgbXVzdCB1c2UgRWREU0EgYWxnb3JpdGhtXCIpO1xuICAgIH1cbiAgICBjb25zdCBwdWJsaWNLZXkgPSBkZWNvZGVJc3MocGF5bG9hZC5pc3MpO1xuICAgIHJldHVybiBlZDI1NTE5LnZlcmlmeShwdWJsaWNLZXksIGRhdGEsIHNpZ25hdHVyZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkuanMubWFwIiwidmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xudmFyIEJyb3dzZXJJbmZvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJyb3dzZXJJbmZvKG5hbWUsIHZlcnNpb24sIG9zKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIHRoaXMub3MgPSBvcztcbiAgICAgICAgdGhpcy50eXBlID0gJ2Jyb3dzZXInO1xuICAgIH1cbiAgICByZXR1cm4gQnJvd3NlckluZm87XG59KCkpO1xuZXhwb3J0IHsgQnJvd3NlckluZm8gfTtcbnZhciBOb2RlSW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb2RlSW5mbyh2ZXJzaW9uKSB7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIHRoaXMudHlwZSA9ICdub2RlJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ25vZGUnO1xuICAgICAgICB0aGlzLm9zID0gcHJvY2Vzcy5wbGF0Zm9ybTtcbiAgICB9XG4gICAgcmV0dXJuIE5vZGVJbmZvO1xufSgpKTtcbmV4cG9ydCB7IE5vZGVJbmZvIH07XG52YXIgU2VhcmNoQm90RGV2aWNlSW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZWFyY2hCb3REZXZpY2VJbmZvKG5hbWUsIHZlcnNpb24sIG9zLCBib3QpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5vcyA9IG9zO1xuICAgICAgICB0aGlzLmJvdCA9IGJvdDtcbiAgICAgICAgdGhpcy50eXBlID0gJ2JvdC1kZXZpY2UnO1xuICAgIH1cbiAgICByZXR1cm4gU2VhcmNoQm90RGV2aWNlSW5mbztcbn0oKSk7XG5leHBvcnQgeyBTZWFyY2hCb3REZXZpY2VJbmZvIH07XG52YXIgQm90SW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCb3RJbmZvKCkge1xuICAgICAgICB0aGlzLnR5cGUgPSAnYm90JztcbiAgICAgICAgdGhpcy5ib3QgPSB0cnVlOyAvLyBOT1RFOiBkZXByZWNhdGVkIHRlc3QgbmFtZSBpbnN0ZWFkXG4gICAgICAgIHRoaXMubmFtZSA9ICdib3QnO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm9zID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIEJvdEluZm87XG59KCkpO1xuZXhwb3J0IHsgQm90SW5mbyB9O1xudmFyIFJlYWN0TmF0aXZlSW5mbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZWFjdE5hdGl2ZUluZm8oKSB7XG4gICAgICAgIHRoaXMudHlwZSA9ICdyZWFjdC1uYXRpdmUnO1xuICAgICAgICB0aGlzLm5hbWUgPSAncmVhY3QtbmF0aXZlJztcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5vcyA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBSZWFjdE5hdGl2ZUluZm87XG59KCkpO1xuZXhwb3J0IHsgUmVhY3ROYXRpdmVJbmZvIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG52YXIgU0VBUkNIQk9YX1VBX1JFR0VYID0gL2FsZXhhfGJvdHxjcmF3bChlcnxpbmcpfGZhY2Vib29rZXh0ZXJuYWxoaXR8ZmVlZGJ1cm5lcnxnb29nbGUgd2ViIHByZXZpZXd8bmFnaW9zfHBvc3RyYW5rfHBpbmdkb218c2x1cnB8c3BpZGVyfHlhaG9vIXx5YW5kZXgvO1xudmFyIFNFQVJDSEJPVF9PU19SRUdFWCA9IC8obnVoa3xjdXJsfEdvb2dsZWJvdHxZYW1teWJvdHxPcGVuYm90fFNsdXJwfE1TTkJvdHxBc2tcXCBKZWV2ZXNcXC9UZW9tYXxpYV9hcmNoaXZlcikvO1xudmFyIFJFUVVJUkVEX1ZFUlNJT05fUEFSVFMgPSAzO1xudmFyIHVzZXJBZ2VudFJ1bGVzID0gW1xuICAgIFsnYW9sJywgL0FPTFNoaWVsZFxcLyhbMC05XFwuX10rKS9dLFxuICAgIFsnZWRnZScsIC9FZGdlXFwvKFswLTlcXC5fXSspL10sXG4gICAgWydlZGdlLWlvcycsIC9FZGdpT1NcXC8oWzAtOVxcLl9dKykvXSxcbiAgICBbJ3lhbmRleGJyb3dzZXInLCAvWWFCcm93c2VyXFwvKFswLTlcXC5fXSspL10sXG4gICAgWydrYWthb3RhbGsnLCAvS0FLQU9UQUxLXFxzKFswLTlcXC5dKykvXSxcbiAgICBbJ3NhbXN1bmcnLCAvU2Ftc3VuZ0Jyb3dzZXJcXC8oWzAtOVxcLl0rKS9dLFxuICAgIFsnc2lsaycsIC9cXGJTaWxrXFwvKFswLTkuXy1dKylcXGIvXSxcbiAgICBbJ21pdWknLCAvTWl1aUJyb3dzZXJcXC8oWzAtOVxcLl0rKSQvXSxcbiAgICBbJ2JlYWtlcicsIC9CZWFrZXJCcm93c2VyXFwvKFswLTlcXC5dKykvXSxcbiAgICBbJ2VkZ2UtY2hyb21pdW0nLCAvRWRnQT9cXC8oWzAtOVxcLl0rKS9dLFxuICAgIFtcbiAgICAgICAgJ2Nocm9taXVtLXdlYnZpZXcnLFxuICAgICAgICAvKD8hQ2hyb20uKk9QUil3dlxcKS4qQ2hyb20oPzplfGl1bSlcXC8oWzAtOVxcLl0rKSg6P1xcc3wkKS8sXG4gICAgXSxcbiAgICBbJ2Nocm9tZScsIC8oPyFDaHJvbS4qT1BSKUNocm9tKD86ZXxpdW0pXFwvKFswLTlcXC5dKykoOj9cXHN8JCkvXSxcbiAgICBbJ3BoYW50b21qcycsIC9QaGFudG9tSlNcXC8oWzAtOVxcLl0rKSg6P1xcc3wkKS9dLFxuICAgIFsnY3Jpb3MnLCAvQ3JpT1NcXC8oWzAtOVxcLl0rKSg6P1xcc3wkKS9dLFxuICAgIFsnZmlyZWZveCcsIC9GaXJlZm94XFwvKFswLTlcXC5dKykoPzpcXHN8JCkvXSxcbiAgICBbJ2Z4aW9zJywgL0Z4aU9TXFwvKFswLTlcXC5dKykvXSxcbiAgICBbJ29wZXJhLW1pbmknLCAvT3BlcmEgTWluaS4qVmVyc2lvblxcLyhbMC05XFwuXSspL10sXG4gICAgWydvcGVyYScsIC9PcGVyYVxcLyhbMC05XFwuXSspKD86XFxzfCQpL10sXG4gICAgWydvcGVyYScsIC9PUFJcXC8oWzAtOVxcLl0rKSg6P1xcc3wkKS9dLFxuICAgIFsncGllJywgL15NaWNyb3NvZnQgUG9ja2V0IEludGVybmV0IEV4cGxvcmVyXFwvKFxcZCtcXC5cXGQrKSQvXSxcbiAgICBbJ3BpZScsIC9eTW96aWxsYVxcL1xcZFxcLlxcZCtcXHNcXChjb21wYXRpYmxlO1xccyg/Ok1TUD9JRXxNU0ludGVybmV0IEV4cGxvcmVyKSAoXFxkK1xcLlxcZCspOy4qV2luZG93cyBDRS4qXFwpJC9dLFxuICAgIFsnbmV0ZnJvbnQnLCAvXk1vemlsbGFcXC9cXGRcXC5cXGQrLipOZXRGcm9udFxcLyhcXGQuXFxkKS9dLFxuICAgIFsnaWUnLCAvVHJpZGVudFxcLzdcXC4wLipydlxcOihbMC05XFwuXSspLipcXCkuKkdlY2tvJC9dLFxuICAgIFsnaWUnLCAvTVNJRVxccyhbMC05XFwuXSspOy4qVHJpZGVudFxcL1s0LTddLjAvXSxcbiAgICBbJ2llJywgL01TSUVcXHMoN1xcLjApL10sXG4gICAgWydiYjEwJywgL0JCMTA7XFxzVG91Y2guKlZlcnNpb25cXC8oWzAtOVxcLl0rKS9dLFxuICAgIFsnYW5kcm9pZCcsIC9BbmRyb2lkXFxzKFswLTlcXC5dKykvXSxcbiAgICBbJ2lvcycsIC9WZXJzaW9uXFwvKFswLTlcXC5fXSspLipNb2JpbGUuKlNhZmFyaS4qL10sXG4gICAgWydzYWZhcmknLCAvVmVyc2lvblxcLyhbMC05XFwuX10rKS4qU2FmYXJpL10sXG4gICAgWydmYWNlYm9vaycsIC9GQltBU11WXFwvKFswLTlcXC5dKykvXSxcbiAgICBbJ2luc3RhZ3JhbScsIC9JbnN0YWdyYW1cXHMoWzAtOVxcLl0rKS9dLFxuICAgIFsnaW9zLXdlYnZpZXcnLCAvQXBwbGVXZWJLaXRcXC8oWzAtOVxcLl0rKS4qTW9iaWxlL10sXG4gICAgWydpb3Mtd2VidmlldycsIC9BcHBsZVdlYktpdFxcLyhbMC05XFwuXSspLipHZWNrb1xcKSQvXSxcbiAgICBbJ2N1cmwnLCAvXmN1cmxcXC8oWzAtOVxcLl0rKSQvXSxcbiAgICBbJ3NlYXJjaGJvdCcsIFNFQVJDSEJPWF9VQV9SRUdFWF0sXG5dO1xudmFyIG9wZXJhdGluZ1N5c3RlbVJ1bGVzID0gW1xuICAgIFsnaU9TJywgL2lQKGhvbmV8b2R8YWQpL10sXG4gICAgWydBbmRyb2lkIE9TJywgL0FuZHJvaWQvXSxcbiAgICBbJ0JsYWNrQmVycnkgT1MnLCAvQmxhY2tCZXJyeXxCQjEwL10sXG4gICAgWydXaW5kb3dzIE1vYmlsZScsIC9JRU1vYmlsZS9dLFxuICAgIFsnQW1hem9uIE9TJywgL0tpbmRsZS9dLFxuICAgIFsnV2luZG93cyAzLjExJywgL1dpbjE2L10sXG4gICAgWydXaW5kb3dzIDk1JywgLyhXaW5kb3dzIDk1KXwoV2luOTUpfChXaW5kb3dzXzk1KS9dLFxuICAgIFsnV2luZG93cyA5OCcsIC8oV2luZG93cyA5OCl8KFdpbjk4KS9dLFxuICAgIFsnV2luZG93cyAyMDAwJywgLyhXaW5kb3dzIE5UIDUuMCl8KFdpbmRvd3MgMjAwMCkvXSxcbiAgICBbJ1dpbmRvd3MgWFAnLCAvKFdpbmRvd3MgTlQgNS4xKXwoV2luZG93cyBYUCkvXSxcbiAgICBbJ1dpbmRvd3MgU2VydmVyIDIwMDMnLCAvKFdpbmRvd3MgTlQgNS4yKS9dLFxuICAgIFsnV2luZG93cyBWaXN0YScsIC8oV2luZG93cyBOVCA2LjApL10sXG4gICAgWydXaW5kb3dzIDcnLCAvKFdpbmRvd3MgTlQgNi4xKS9dLFxuICAgIFsnV2luZG93cyA4JywgLyhXaW5kb3dzIE5UIDYuMikvXSxcbiAgICBbJ1dpbmRvd3MgOC4xJywgLyhXaW5kb3dzIE5UIDYuMykvXSxcbiAgICBbJ1dpbmRvd3MgMTAnLCAvKFdpbmRvd3MgTlQgMTAuMCkvXSxcbiAgICBbJ1dpbmRvd3MgTUUnLCAvV2luZG93cyBNRS9dLFxuICAgIFsnV2luZG93cyBDRScsIC9XaW5kb3dzIENFfFdpbkNFfE1pY3Jvc29mdCBQb2NrZXQgSW50ZXJuZXQgRXhwbG9yZXIvXSxcbiAgICBbJ09wZW4gQlNEJywgL09wZW5CU0QvXSxcbiAgICBbJ1N1biBPUycsIC9TdW5PUy9dLFxuICAgIFsnQ2hyb21lIE9TJywgL0NyT1MvXSxcbiAgICBbJ0xpbnV4JywgLyhMaW51eCl8KFgxMSkvXSxcbiAgICBbJ01hYyBPUycsIC8oTWFjX1Bvd2VyUEMpfChNYWNpbnRvc2gpL10sXG4gICAgWydRTlgnLCAvUU5YL10sXG4gICAgWydCZU9TJywgL0JlT1MvXSxcbiAgICBbJ09TLzInLCAvT1NcXC8yL10sXG5dO1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdCh1c2VyQWdlbnQpIHtcbiAgICBpZiAoISF1c2VyQWdlbnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlVXNlckFnZW50KHVzZXJBZ2VudCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVhY3ROYXRpdmVJbmZvKCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gcGFyc2VVc2VyQWdlbnQobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgfVxuICAgIHJldHVybiBnZXROb2RlVmVyc2lvbigpO1xufVxuZnVuY3Rpb24gbWF0Y2hVc2VyQWdlbnQodWEpIHtcbiAgICAvLyBvcHRlZCBmb3IgdXNpbmcgcmVkdWNlIGhlcmUgcmF0aGVyIHRoYW4gQXJyYXkjZmlyc3Qgd2l0aCBhIHJlZ2V4LnRlc3QgY2FsbFxuICAgIC8vIHRoaXMgaXMgcHJpbWFyaWx5IGJlY2F1c2UgdXNpbmcgdGhlIHJlZHVjZSB3ZSBvbmx5IHBlcmZvcm0gdGhlIHJlZ2V4XG4gICAgLy8gZXhlY3V0aW9uIG9uY2UgcmF0aGVyIHRoYW4gb25jZSBmb3IgdGhlIHRlc3QgYW5kIGZvciB0aGUgZXhlYyBhZ2FpbiBiZWxvd1xuICAgIC8vIHByb2JhYmx5IHNvbWV0aGluZyB0aGF0IG5lZWRzIHRvIGJlIGJlbmNobWFya2VkIHRob3VnaFxuICAgIHJldHVybiAodWEgIT09ICcnICYmXG4gICAgICAgIHVzZXJBZ2VudFJ1bGVzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgX2EpIHtcbiAgICAgICAgICAgIHZhciBicm93c2VyID0gX2FbMF0sIHJlZ2V4ID0gX2FbMV07XG4gICAgICAgICAgICBpZiAobWF0Y2hlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHVhTWF0Y2ggPSByZWdleC5leGVjKHVhKTtcbiAgICAgICAgICAgIHJldHVybiAhIXVhTWF0Y2ggJiYgW2Jyb3dzZXIsIHVhTWF0Y2hdO1xuICAgICAgICB9LCBmYWxzZSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJyb3dzZXJOYW1lKHVhKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaFVzZXJBZ2VudCh1YSk7XG4gICAgcmV0dXJuIGRhdGEgPyBkYXRhWzBdIDogbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVzZXJBZ2VudCh1YSkge1xuICAgIHZhciBtYXRjaGVkUnVsZSA9IG1hdGNoVXNlckFnZW50KHVhKTtcbiAgICBpZiAoIW1hdGNoZWRSdWxlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgbmFtZSA9IG1hdGNoZWRSdWxlWzBdLCBtYXRjaCA9IG1hdGNoZWRSdWxlWzFdO1xuICAgIGlmIChuYW1lID09PSAnc2VhcmNoYm90Jykge1xuICAgICAgICByZXR1cm4gbmV3IEJvdEluZm8oKTtcbiAgICB9XG4gICAgLy8gRG8gbm90IHVzZSBSZWdFeHAgZm9yIHNwbGl0IG9wZXJhdGlvbiBhcyBzb21lIGJyb3dzZXIgZG8gbm90IHN1cHBvcnQgaXQgKFNlZTogaHR0cDovL2Jsb2cuc3RldmVubGV2aXRoYW4uY29tL2FyY2hpdmVzL2Nyb3NzLWJyb3dzZXItc3BsaXQpXG4gICAgdmFyIHZlcnNpb25QYXJ0cyA9IG1hdGNoWzFdICYmIG1hdGNoWzFdLnNwbGl0KCcuJykuam9pbignXycpLnNwbGl0KCdfJykuc2xpY2UoMCwgMyk7XG4gICAgaWYgKHZlcnNpb25QYXJ0cykge1xuICAgICAgICBpZiAodmVyc2lvblBhcnRzLmxlbmd0aCA8IFJFUVVJUkVEX1ZFUlNJT05fUEFSVFMpIHtcbiAgICAgICAgICAgIHZlcnNpb25QYXJ0cyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgdmVyc2lvblBhcnRzLCB0cnVlKSwgY3JlYXRlVmVyc2lvblBhcnRzKFJFUVVJUkVEX1ZFUlNJT05fUEFSVFMgLSB2ZXJzaW9uUGFydHMubGVuZ3RoKSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZlcnNpb25QYXJ0cyA9IFtdO1xuICAgIH1cbiAgICB2YXIgdmVyc2lvbiA9IHZlcnNpb25QYXJ0cy5qb2luKCcuJyk7XG4gICAgdmFyIG9zID0gZGV0ZWN0T1ModWEpO1xuICAgIHZhciBzZWFyY2hCb3RNYXRjaCA9IFNFQVJDSEJPVF9PU19SRUdFWC5leGVjKHVhKTtcbiAgICBpZiAoc2VhcmNoQm90TWF0Y2ggJiYgc2VhcmNoQm90TWF0Y2hbMV0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZWFyY2hCb3REZXZpY2VJbmZvKG5hbWUsIHZlcnNpb24sIG9zLCBzZWFyY2hCb3RNYXRjaFsxXSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQnJvd3NlckluZm8obmFtZSwgdmVyc2lvbiwgb3MpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdE9TKHVhKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwLCBjb3VudCA9IG9wZXJhdGluZ1N5c3RlbVJ1bGVzLmxlbmd0aDsgaWkgPCBjb3VudDsgaWkrKykge1xuICAgICAgICB2YXIgX2EgPSBvcGVyYXRpbmdTeXN0ZW1SdWxlc1tpaV0sIG9zID0gX2FbMF0sIHJlZ2V4ID0gX2FbMV07XG4gICAgICAgIHZhciBtYXRjaCA9IHJlZ2V4LmV4ZWModWEpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBvcztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROb2RlVmVyc2lvbigpIHtcbiAgICB2YXIgaXNOb2RlID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudmVyc2lvbjtcbiAgICByZXR1cm4gaXNOb2RlID8gbmV3IE5vZGVJbmZvKHByb2Nlc3MudmVyc2lvbi5zbGljZSgxKSkgOiBudWxsO1xufVxuZnVuY3Rpb24gY3JlYXRlVmVyc2lvblBhcnRzKGNvdW50KSB7XG4gICAgdmFyIG91dHB1dCA9IFtdO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBjb3VudDsgaWkrKykge1xuICAgICAgICBvdXRwdXQucHVzaCgnMCcpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuIiwiZXhwb3J0IGNvbnN0IFJFTEFZX0pTT05SUEMgPSB7XG4gICAgd2FrdToge1xuICAgICAgICBwdWJsaXNoOiBcIndha3VfcHVibGlzaFwiLFxuICAgICAgICBzdWJzY3JpYmU6IFwid2FrdV9zdWJzY3JpYmVcIixcbiAgICAgICAgc3Vic2NyaXB0aW9uOiBcIndha3Vfc3Vic2NyaXB0aW9uXCIsXG4gICAgICAgIHVuc3Vic2NyaWJlOiBcIndha3VfdW5zdWJzY3JpYmVcIixcbiAgICB9LFxuICAgIGlybjoge1xuICAgICAgICBwdWJsaXNoOiBcImlybl9wdWJsaXNoXCIsXG4gICAgICAgIHN1YnNjcmliZTogXCJpcm5fc3Vic2NyaWJlXCIsXG4gICAgICAgIHN1YnNjcmlwdGlvbjogXCJpcm5fc3Vic2NyaXB0aW9uXCIsXG4gICAgICAgIHVuc3Vic2NyaWJlOiBcImlybl91bnN1YnNjcmliZVwiLFxuICAgIH0sXG4gICAgaXJpZGl1bToge1xuICAgICAgICBwdWJsaXNoOiBcImlyaWRpdW1fcHVibGlzaFwiLFxuICAgICAgICBzdWJzY3JpYmU6IFwiaXJpZGl1bV9zdWJzY3JpYmVcIixcbiAgICAgICAgc3Vic2NyaXB0aW9uOiBcImlyaWRpdW1fc3Vic2NyaXB0aW9uXCIsXG4gICAgICAgIHVuc3Vic2NyaWJlOiBcImlyaWRpdW1fdW5zdWJzY3JpYmVcIixcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzb25ycGMuanMubWFwIiwiaW1wb3J0e0NoYUNoYTIwUG9seTEzMDUgYXMgdGV9ZnJvbVwiQHN0YWJsZWxpYi9jaGFjaGEyMHBvbHkxMzA1XCI7aW1wb3J0e0hLREYgYXMgSmV9ZnJvbVwiQHN0YWJsZWxpYi9oa2RmXCI7aW1wb3J0e3JhbmRvbUJ5dGVzIGFzIHJlfWZyb21cIkBzdGFibGVsaWIvcmFuZG9tXCI7aW1wb3J0e1NIQTI1NiBhcyBRZSxoYXNoIGFzIG9lfWZyb21cIkBzdGFibGVsaWIvc2hhMjU2XCI7aW1wb3J0KmFzIHNlIGZyb21cIkBzdGFibGVsaWIveDI1NTE5XCI7aW1wb3J0e3RvU3RyaW5nIGFzIGYsZnJvbVN0cmluZyBhcyBwLGNvbmNhdCBhcyBpZX1mcm9tXCJ1aW50OGFycmF5c1wiO2ltcG9ydHtkZXRlY3QgYXMgWmV9ZnJvbVwiZGV0ZWN0LWJyb3dzZXJcIjtpbXBvcnR7ZnJvbU1pbGlzZWNvbmRzIGFzIGNlLHRvTWlsaXNlY29uZHMgYXMgVixGSVZFX01JTlVURVMgYXMgWGV9ZnJvbVwiQHdhbGxldGNvbm5lY3QvdGltZVwiO2ltcG9ydHtnZXREb2N1bWVudCBhcyBlbixnZXROYXZpZ2F0b3IgYXMgYWUsZ2V0TG9jYXRpb24gYXMgdWV9ZnJvbVwiQHdhbGxldGNvbm5lY3Qvd2luZG93LWdldHRlcnNcIjtpbXBvcnR7Z2V0V2luZG93TWV0YWRhdGEgYXMgbm59ZnJvbVwiQHdhbGxldGNvbm5lY3Qvd2luZG93LW1ldGFkYXRhXCI7aW1wb3J0KmFzIFUgZnJvbVwicXVlcnktc3RyaW5nXCI7aW1wb3J0e1JFTEFZX0pTT05SUEMgYXMgdG59ZnJvbVwiQHdhbGxldGNvbm5lY3QvcmVsYXktYXBpXCI7Y29uc3QgQT1cIjpcIjtmdW5jdGlvbiBkZShlKXtjb25zdFtuLHRdPWUuc3BsaXQoQSk7cmV0dXJue25hbWVzcGFjZTpuLHJlZmVyZW5jZTp0fX1mdW5jdGlvbiBsZShlKXtjb25zdHtuYW1lc3BhY2U6bixyZWZlcmVuY2U6dH09ZTtyZXR1cm5bbix0XS5qb2luKEEpfWZ1bmN0aW9uIE0oZSl7Y29uc3Rbbix0LHJdPWUuc3BsaXQoQSk7cmV0dXJue25hbWVzcGFjZTpuLHJlZmVyZW5jZTp0LGFkZHJlc3M6cn19ZnVuY3Rpb24gZmUoZSl7Y29uc3R7bmFtZXNwYWNlOm4scmVmZXJlbmNlOnQsYWRkcmVzczpyfT1lO3JldHVybltuLHQscl0uam9pbihBKX1mdW5jdGlvbiBLKGUsbil7Y29uc3QgdD1bXTtyZXR1cm4gZS5mb3JFYWNoKHI9Pntjb25zdCBvPW4ocik7dC5pbmNsdWRlcyhvKXx8dC5wdXNoKG8pfSksdH1mdW5jdGlvbiBwZShlKXtjb25zdHthZGRyZXNzOm59PU0oZSk7cmV0dXJuIG59ZnVuY3Rpb24gbWUoZSl7Y29uc3R7bmFtZXNwYWNlOm4scmVmZXJlbmNlOnR9PU0oZSk7cmV0dXJuIGxlKHtuYW1lc3BhY2U6bixyZWZlcmVuY2U6dH0pfWZ1bmN0aW9uIHJuKGUsbil7Y29uc3R7bmFtZXNwYWNlOnQscmVmZXJlbmNlOnJ9PWRlKG4pO3JldHVybiBmZSh7bmFtZXNwYWNlOnQscmVmZXJlbmNlOnIsYWRkcmVzczplfSl9ZnVuY3Rpb24gb24oZSl7cmV0dXJuIEsoZSxwZSl9ZnVuY3Rpb24geWUoZSl7cmV0dXJuIEsoZSxtZSl9ZnVuY3Rpb24gc24oZSxuPVtdKXtjb25zdCB0PVtdO3JldHVybiBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKHI9PntpZihuLmxlbmd0aCYmIW4uaW5jbHVkZXMocikpcmV0dXJuO2NvbnN0IG89ZVtyXTt0LnB1c2goLi4uby5hY2NvdW50cyl9KSx0fWZ1bmN0aW9uIGNuKGUsbj1bXSl7Y29uc3QgdD1bXTtyZXR1cm4gT2JqZWN0LmtleXMoZSkuZm9yRWFjaChyPT57aWYobi5sZW5ndGgmJiFuLmluY2x1ZGVzKHIpKXJldHVybjtjb25zdCBvPWVbcl07dC5wdXNoKC4uLnllKG8uYWNjb3VudHMpKX0pLHR9ZnVuY3Rpb24gYW4oZSxuPVtdKXtjb25zdCB0PVtdO3JldHVybiBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKHI9PntpZihuLmxlbmd0aCYmIW4uaW5jbHVkZXMocikpcmV0dXJuO2NvbnN0IG89ZVtyXTt0LnB1c2goLi4uby5jaGFpbnMpfSksdH1jb25zdCBrPVwiYmFzZTEwXCIsYT1cImJhc2UxNlwiLFI9XCJiYXNlNjRwYWRcIixDPVwidXRmOFwiLEw9MCxiPTEsdW49MCxFZT0xLEY9MTIsSD0zMjtmdW5jdGlvbiBkbigpe2NvbnN0IGU9c2UuZ2VuZXJhdGVLZXlQYWlyKCk7cmV0dXJue3ByaXZhdGVLZXk6ZihlLnNlY3JldEtleSxhKSxwdWJsaWNLZXk6ZihlLnB1YmxpY0tleSxhKX19ZnVuY3Rpb24gbG4oKXtjb25zdCBlPXJlKEgpO3JldHVybiBmKGUsYSl9ZnVuY3Rpb24gZm4oZSxuKXtjb25zdCB0PXNlLnNoYXJlZEtleShwKGUsYSkscChuLGEpKSxyPW5ldyBKZShRZSx0KS5leHBhbmQoSCk7cmV0dXJuIGYocixhKX1mdW5jdGlvbiBwbihlKXtjb25zdCBuPW9lKHAoZSxhKSk7cmV0dXJuIGYobixhKX1mdW5jdGlvbiBtbihlKXtjb25zdCBuPW9lKHAoZSxDKSk7cmV0dXJuIGYobixhKX1mdW5jdGlvbiBoZShlKXtyZXR1cm4gcChgJHtlfWAsayl9ZnVuY3Rpb24gVChlKXtyZXR1cm4gTnVtYmVyKGYoZSxrKSl9ZnVuY3Rpb24geW4oZSl7Y29uc3Qgbj1oZSh0eXBlb2YgZS50eXBlPFwidVwiP2UudHlwZTpMKTtpZihUKG4pPT09YiYmdHlwZW9mIGUuc2VuZGVyUHVibGljS2V5PlwidVwiKXRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcgc2VuZGVyIHB1YmxpYyBrZXkgZm9yIHR5cGUgMSBlbnZlbG9wZVwiKTtjb25zdCB0PXR5cGVvZiBlLnNlbmRlclB1YmxpY0tleTxcInVcIj9wKGUuc2VuZGVyUHVibGljS2V5LGEpOnZvaWQgMCxyPXR5cGVvZiBlLml2PFwidVwiP3AoZS5pdixhKTpyZShGKSxvPW5ldyB0ZShwKGUuc3ltS2V5LGEpKS5zZWFsKHIscChlLm1lc3NhZ2UsQykpO3JldHVybiBOZSh7dHlwZTpuLHNlYWxlZDpvLGl2OnIsc2VuZGVyUHVibGljS2V5OnR9KX1mdW5jdGlvbiBFbihlKXtjb25zdCBuPW5ldyB0ZShwKGUuc3ltS2V5LGEpKSx7c2VhbGVkOnQsaXY6cn09cShlLmVuY29kZWQpLG89bi5vcGVuKHIsdCk7aWYobz09PW51bGwpdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGRlY3J5cHRcIik7cmV0dXJuIGYobyxDKX1mdW5jdGlvbiBOZShlKXtpZihUKGUudHlwZSk9PT1iKXtpZih0eXBlb2YgZS5zZW5kZXJQdWJsaWNLZXk+XCJ1XCIpdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBzZW5kZXIgcHVibGljIGtleSBmb3IgdHlwZSAxIGVudmVsb3BlXCIpO3JldHVybiBmKGllKFtlLnR5cGUsZS5zZW5kZXJQdWJsaWNLZXksZS5pdixlLnNlYWxlZF0pLFIpfXJldHVybiBmKGllKFtlLnR5cGUsZS5pdixlLnNlYWxlZF0pLFIpfWZ1bmN0aW9uIHEoZSl7Y29uc3Qgbj1wKGUsUiksdD1uLnNsaWNlKHVuLEVlKSxyPUVlO2lmKFQodCk9PT1iKXtjb25zdCBjPXIrSCxsPWMrRixoPW4uc2xpY2UocixjKSxnPW4uc2xpY2UoYyxsKSxQPW4uc2xpY2UobCk7cmV0dXJue3R5cGU6dCxzZWFsZWQ6UCxpdjpnLHNlbmRlclB1YmxpY0tleTpofX1jb25zdCBvPXIrRixpPW4uc2xpY2UocixvKSxzPW4uc2xpY2Uobyk7cmV0dXJue3R5cGU6dCxzZWFsZWQ6cyxpdjppfX1mdW5jdGlvbiBobihlLG4pe2NvbnN0IHQ9cShlKTtyZXR1cm4gZ2Uoe3R5cGU6VCh0LnR5cGUpLHNlbmRlclB1YmxpY0tleTp0eXBlb2YgdC5zZW5kZXJQdWJsaWNLZXk8XCJ1XCI/Zih0LnNlbmRlclB1YmxpY0tleSxhKTp2b2lkIDAscmVjZWl2ZXJQdWJsaWNLZXk6bj8ucmVjZWl2ZXJQdWJsaWNLZXl9KX1mdW5jdGlvbiBnZShlKXtjb25zdCBuPWU/LnR5cGV8fEw7aWYobj09PWIpe2lmKHR5cGVvZiBlPy5zZW5kZXJQdWJsaWNLZXk+XCJ1XCIpdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyBzZW5kZXIgcHVibGljIGtleVwiKTtpZih0eXBlb2YgZT8ucmVjZWl2ZXJQdWJsaWNLZXk+XCJ1XCIpdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZyByZWNlaXZlciBwdWJsaWMga2V5XCIpfXJldHVybnt0eXBlOm4sc2VuZGVyUHVibGljS2V5OmU/LnNlbmRlclB1YmxpY0tleSxyZWNlaXZlclB1YmxpY0tleTplPy5yZWNlaXZlclB1YmxpY0tleX19ZnVuY3Rpb24gTm4oZSl7cmV0dXJuIGUudHlwZT09PWImJnR5cGVvZiBlLnNlbmRlclB1YmxpY0tleT09XCJzdHJpbmdcIiYmdHlwZW9mIGUucmVjZWl2ZXJQdWJsaWNLZXk9PVwic3RyaW5nXCJ9dmFyIGduPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSx2ZT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLHZuPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksT249T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxPZT0oZSxuLHQpPT5uIGluIGU/Z24oZSxuLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTp0fSk6ZVtuXT10LGJlPShlLG4pPT57Zm9yKHZhciB0IGluIG58fChuPXt9KSl2bi5jYWxsKG4sdCkmJk9lKGUsdCxuW3RdKTtpZih2ZSlmb3IodmFyIHQgb2YgdmUobikpT24uY2FsbChuLHQpJiZPZShlLHQsblt0XSk7cmV0dXJuIGV9O2NvbnN0IFNlPVwiUmVhY3ROYXRpdmVcIixTPXtyZWFjdE5hdGl2ZTpcInJlYWN0LW5hdGl2ZVwiLG5vZGU6XCJub2RlXCIsYnJvd3NlcjpcImJyb3dzZXJcIix1bmtub3duOlwidW5rbm93blwifSx3PVwiIFwiLGJuPVwiOlwiLEllPVwiL1wiLEc9MixTbj0xZTMsUGU9XCJqc1wiO2Z1bmN0aW9uIEIoKXtyZXR1cm4gdHlwZW9mIHByb2Nlc3M8XCJ1XCImJnR5cGVvZiBwcm9jZXNzLnZlcnNpb25zPFwidVwiJiZ0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlPFwidVwifWZ1bmN0aW9uIFRlKCl7cmV0dXJuIWVuKCkmJiEhYWUoKSYmbmF2aWdhdG9yLnByb2R1Y3Q9PT1TZX1mdW5jdGlvbiBfZSgpe3JldHVybiFCKCkmJiEhYWUoKX1mdW5jdGlvbiB6KCl7cmV0dXJuIFRlKCk/Uy5yZWFjdE5hdGl2ZTpCKCk/Uy5ub2RlOl9lKCk/Uy5icm93c2VyOlMudW5rbm93bn1mdW5jdGlvbiBVZShlLG4pe2xldCB0PVUucGFyc2UoZSk7cmV0dXJuIHQ9YmUoYmUoe30sdCksbiksZT1VLnN0cmluZ2lmeSh0KSxlfWZ1bmN0aW9uIEluKCl7cmV0dXJuIG5uKCl8fHtuYW1lOlwiXCIsZGVzY3JpcHRpb246XCJcIix1cmw6XCJcIixpY29uczpbXCJcIl19fWZ1bmN0aW9uIFBuKGUsbil7dmFyIHQ7Y29uc3Qgcj16KCksbz17cHJvdG9jb2w6ZSx2ZXJzaW9uOm4sZW52OnJ9O3JldHVybiByPT09XCJicm93c2VyXCImJihvLmhvc3Q9KCh0PXVlKCkpPT1udWxsP3ZvaWQgMDp0Lmhvc3QpfHxcInVua25vd25cIiksb31mdW5jdGlvbiBBZSgpe2NvbnN0IGU9WmUoKTtpZihlPT09bnVsbClyZXR1cm5cInVua25vd25cIjtjb25zdCBuPWUub3M/ZS5vcy5yZXBsYWNlKFwiIFwiLFwiXCIpLnRvTG93ZXJDYXNlKCk6XCJ1bmtub3duXCI7cmV0dXJuIGUudHlwZT09PVwiYnJvd3NlclwiP1tuLGUubmFtZSxlLnZlcnNpb25dLmpvaW4oXCItXCIpOltuLGUudmVyc2lvbl0uam9pbihcIi1cIil9ZnVuY3Rpb24gUmUoKXt2YXIgZTtjb25zdCBuPXooKTtyZXR1cm4gbj09PVMuYnJvd3Nlcj9bbiwoKGU9dWUoKSk9PW51bGw/dm9pZCAwOmUuaG9zdCl8fFwidW5rbm93blwiXS5qb2luKFwiOlwiKTpufWZ1bmN0aW9uIENlKGUsbix0KXtjb25zdCByPUFlKCksbz1SZSgpO3JldHVybltbZSxuXS5qb2luKFwiLVwiKSxbUGUsdF0uam9pbihcIi1cIikscixvXS5qb2luKFwiL1wiKX1mdW5jdGlvbiBUbih7cHJvdG9jb2w6ZSx2ZXJzaW9uOm4scmVsYXlVcmw6dCxzZGtWZXJzaW9uOnIsYXV0aDpvLHByb2plY3RJZDppfSl7Y29uc3Qgcz10LnNwbGl0KFwiP1wiKSxjPUNlKGUsbixyKSxsPXthdXRoOm8sdWE6Yyxwcm9qZWN0SWQ6aX0saD1VZShzWzFdfHxcIlwiLGwpO3JldHVybiBzWzBdK1wiP1wiK2h9ZnVuY3Rpb24gX24oZSl7bGV0IG49KGUubWF0Y2goL15bXjpdKyg/PTpcXC9cXC8pL2dpKXx8W10pWzBdO2NvbnN0IHQ9dHlwZW9mIG48XCJ1XCI/ZS5zcGxpdChcIjovL1wiKVsxXTplO3JldHVybiBuPW49PT1cIndzc1wiP1wiaHR0cHNcIjpcImh0dHBcIixbbix0XS5qb2luKFwiOi8vXCIpfWZ1bmN0aW9uIFVuKGUsbix0KXtpZighZVtuXXx8dHlwZW9mIGVbbl0hPT10KXRocm93IG5ldyBFcnJvcihgTWlzc2luZyBvciBpbnZhbGlkIFwiJHtufVwiIHBhcmFtYCl9ZnVuY3Rpb24gd2UoZSxuPUcpe3JldHVybiBEZShlLnNwbGl0KEllKSxuKX1mdW5jdGlvbiBBbihlKXtyZXR1cm4gd2UoZSkuam9pbih3KX1mdW5jdGlvbiB1KGUsbil7cmV0dXJuIGUuZmlsdGVyKHQ9Pm4uaW5jbHVkZXModCkpLmxlbmd0aD09PWUubGVuZ3RofWZ1bmN0aW9uIERlKGUsbj1HKXtyZXR1cm4gZS5zbGljZShNYXRoLm1heChlLmxlbmd0aC1uLDApKX1mdW5jdGlvbiBSbihlKXtyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGUuZW50cmllcygpKX1mdW5jdGlvbiBDbihlKXtyZXR1cm4gbmV3IE1hcChPYmplY3QuZW50cmllcyhlKSl9ZnVuY3Rpb24gd24oZSxuKXtjb25zdCB0PXt9O3JldHVybiBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKHI9Pnt0W3JdPW4oZVtyXSl9KSx0fWNvbnN0IERuPWU9PmU7ZnVuY3Rpb24gJGUoZSl7cmV0dXJuIGUudHJpbSgpLnJlcGxhY2UoL15cXHcvLG49Pm4udG9VcHBlckNhc2UoKSl9ZnVuY3Rpb24gJG4oZSl7cmV0dXJuIGUuc3BsaXQodykubWFwKG49PiRlKG4pKS5qb2luKHcpfWZ1bmN0aW9uIHhuKGUsbil7cmV0dXJuIGNlKChufHxEYXRlLm5vdygpKStWKGUpKX1mdW5jdGlvbiBqbihlKXtyZXR1cm4gY2UoRGF0ZS5ub3coKSk+PVYoZSl9ZnVuY3Rpb24gVm4oKXtjb25zdCBlPVYoWGUpO2xldCBuLHQscjtyZXR1cm57cmVzb2x2ZTpvPT57ciYmbiYmKGNsZWFyVGltZW91dChyKSxuKG8pKX0scmVqZWN0Om89PntyJiZ0JiYoY2xlYXJUaW1lb3V0KHIpLHQobykpfSxkb25lOigpPT5uZXcgUHJvbWlzZSgobyxpKT0+e3I9c2V0VGltZW91dChpLGUpLG49byx0PWl9KX19ZnVuY3Rpb24gTW4oZSxuKXtyZXR1cm4gbmV3IFByb21pc2UoYXN5bmModCxyKT0+e2NvbnN0IG89c2V0VGltZW91dCgoKT0+cigpLG4pLGk9YXdhaXQgZTtjbGVhclRpbWVvdXQobyksdChpKX0pfWZ1bmN0aW9uIFkoZSxuKXtpZih0eXBlb2Ygbj09XCJzdHJpbmdcIiYmbi5zdGFydHNXaXRoKGAke2V9OmApKXJldHVybiBuO2lmKGUudG9Mb3dlckNhc2UoKT09PVwidG9waWNcIil7aWYodHlwZW9mIG4hPVwic3RyaW5nXCIpdGhyb3cgbmV3IEVycm9yKCdWYWx1ZSBtdXN0IGJlIFwic3RyaW5nXCIgZm9yIGV4cGlyZXIgdGFyZ2V0IHR5cGU6IHRvcGljJyk7cmV0dXJuYHRvcGljOiR7bn1gfWVsc2UgaWYoZS50b0xvd2VyQ2FzZSgpPT09XCJpZFwiKXtpZih0eXBlb2YgbiE9XCJudW1iZXJcIil0aHJvdyBuZXcgRXJyb3IoJ1ZhbHVlIG11c3QgYmUgXCJudW1iZXJcIiBmb3IgZXhwaXJlciB0YXJnZXQgdHlwZTogaWQnKTtyZXR1cm5gaWQ6JHtufWB9dGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGV4cGlyZXIgdGFyZ2V0IHR5cGU6ICR7ZX1gKX1mdW5jdGlvbiBLbihlKXtyZXR1cm4gWShcInRvcGljXCIsZSl9ZnVuY3Rpb24ga24oZSl7cmV0dXJuIFkoXCJpZFwiLGUpfWZ1bmN0aW9uIExuKGUpe2NvbnN0W24sdF09ZS5zcGxpdChcIjpcIikscj17aWQ6dm9pZCAwLHRvcGljOnZvaWQgMH07aWYobj09PVwidG9waWNcIiYmdHlwZW9mIHQ9PVwic3RyaW5nXCIpci50b3BpYz10O2Vsc2UgaWYobj09PVwiaWRcIiYmTnVtYmVyLmlzSW50ZWdlcihOdW1iZXIodCkpKXIuaWQ9TnVtYmVyKHQpO2Vsc2UgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHRhcmdldCwgZXhwZWN0ZWQgaWQ6bnVtYmVyIG9yIHRvcGljOnN0cmluZywgZ290ICR7bn06JHt0fWApO3JldHVybiByfWZ1bmN0aW9uIEZuKGUsbil7cmV0dXJuYCR7ZX0ke24/YDoke259YDpcIlwifWB9Y29uc3QgeGU9XCJpcm5cIjtmdW5jdGlvbiBIbihlKXtyZXR1cm4gZT8ucmVsYXl8fHtwcm90b2NvbDp4ZX19ZnVuY3Rpb24gcW4oZSl7Y29uc3Qgbj10bltlXTtpZih0eXBlb2Ygbj5cInVcIil0aHJvdyBuZXcgRXJyb3IoYFJlbGF5IFByb3RvY29sIG5vdCBzdXBwb3J0ZWQ6ICR7ZX1gKTtyZXR1cm4gbn12YXIgR249T2JqZWN0LmRlZmluZVByb3BlcnR5LGplPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsQm49T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSx6bj1PYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLFZlPShlLG4sdCk9Pm4gaW4gZT9HbihlLG4se2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOnR9KTplW25dPXQsWW49KGUsbik9Pntmb3IodmFyIHQgaW4gbnx8KG49e30pKUJuLmNhbGwobix0KSYmVmUoZSx0LG5bdF0pO2lmKGplKWZvcih2YXIgdCBvZiBqZShuKSl6bi5jYWxsKG4sdCkmJlZlKGUsdCxuW3RdKTtyZXR1cm4gZX07ZnVuY3Rpb24gTWUoZSxuPVwiLVwiKXtjb25zdCB0PXt9LHI9XCJyZWxheVwiK247cmV0dXJuIE9iamVjdC5rZXlzKGUpLmZvckVhY2gobz0+e2lmKG8uc3RhcnRzV2l0aChyKSl7Y29uc3QgaT1vLnJlcGxhY2UocixcIlwiKSxzPWVbb107dFtpXT1zfX0pLHR9ZnVuY3Rpb24gV24oZSl7Y29uc3Qgbj1lLmluZGV4T2YoXCI6XCIpLHQ9ZS5pbmRleE9mKFwiP1wiKSE9PS0xP2UuaW5kZXhPZihcIj9cIik6dm9pZCAwLHI9ZS5zdWJzdHJpbmcoMCxuKSxvPWUuc3Vic3RyaW5nKG4rMSx0KS5zcGxpdChcIkBcIiksaT10eXBlb2YgdDxcInVcIj9lLnN1YnN0cmluZyh0KTpcIlwiLHM9VS5wYXJzZShpKTtyZXR1cm57cHJvdG9jb2w6cix0b3BpYzpvWzBdLHZlcnNpb246cGFyc2VJbnQob1sxXSwxMCksc3ltS2V5OnMuc3ltS2V5LHJlbGF5Ok1lKHMpfX1mdW5jdGlvbiBLZShlLG49XCItXCIpe2NvbnN0IHQ9XCJyZWxheVwiLHI9e307cmV0dXJuIE9iamVjdC5rZXlzKGUpLmZvckVhY2gobz0+e2NvbnN0IGk9dCtuK287ZVtvXSYmKHJbaV09ZVtvXSl9KSxyfWZ1bmN0aW9uIEpuKGUpe3JldHVybmAke2UucHJvdG9jb2x9OiR7ZS50b3BpY31AJHtlLnZlcnNpb259P2ArVS5zdHJpbmdpZnkoWW4oe3N5bUtleTplLnN5bUtleX0sS2UoZS5yZWxheSkpKX1mdW5jdGlvbiBtKGUpe2NvbnN0IG49W107cmV0dXJuIGUuZm9yRWFjaCh0PT57Y29uc3RbcixvXT10LnNwbGl0KFwiOlwiKTtuLnB1c2goYCR7cn06JHtvfWApfSksbn1mdW5jdGlvbiBrZShlKXtjb25zdCBuPVtdO3JldHVybiBPYmplY3QudmFsdWVzKGUpLmZvckVhY2godD0+e24ucHVzaCguLi5tKHQuYWNjb3VudHMpKSx0LmV4dGVuc2lvbiYmdC5leHRlbnNpb24uZm9yRWFjaChyPT57bi5wdXNoKC4uLm0oci5hY2NvdW50cykpfSl9KSxufWZ1bmN0aW9uIExlKGUsbil7Y29uc3QgdD1bXTtyZXR1cm4gT2JqZWN0LnZhbHVlcyhlKS5mb3JFYWNoKHI9PnttKHIuYWNjb3VudHMpLmluY2x1ZGVzKG4pJiZ0LnB1c2goLi4uci5tZXRob2RzKSxyLmV4dGVuc2lvbiYmci5leHRlbnNpb24uZm9yRWFjaChvPT57bShvLmFjY291bnRzKS5pbmNsdWRlcyhuKSYmdC5wdXNoKC4uLm8ubWV0aG9kcyl9KX0pLHR9ZnVuY3Rpb24gRmUoZSxuKXtjb25zdCB0PVtdO3JldHVybiBPYmplY3QudmFsdWVzKGUpLmZvckVhY2gocj0+e20oci5hY2NvdW50cykuaW5jbHVkZXMobikmJnQucHVzaCguLi5yLmV2ZW50cyksci5leHRlbnNpb24mJnIuZXh0ZW5zaW9uLmZvckVhY2gobz0+e20oby5hY2NvdW50cykuaW5jbHVkZXMobikmJnQucHVzaCguLi5vLmV2ZW50cyl9KX0pLHR9Y29uc3QgUW49e0lOVkFMSURfTUVUSE9EOnttZXNzYWdlOlwiSW52YWxpZCBtZXRob2QuXCIsY29kZToxMDAxfSxJTlZBTElEX0VWRU5UOnttZXNzYWdlOlwiSW52YWxpZCBldmVudC5cIixjb2RlOjEwMDJ9LElOVkFMSURfVVBEQVRFX1JFUVVFU1Q6e21lc3NhZ2U6XCJJbnZhbGlkIHVwZGF0ZSByZXF1ZXN0LlwiLGNvZGU6MTAwM30sSU5WQUxJRF9FWFRFTkRfUkVRVUVTVDp7bWVzc2FnZTpcIkludmFsaWQgZXh0ZW5kIHJlcXVlc3QuXCIsY29kZToxMDA0fSxJTlZBTElEX1NFU1NJT05fU0VUVExFX1JFUVVFU1Q6e21lc3NhZ2U6XCJJbnZhbGlkIHNlc3Npb24gc2V0dGxlIHJlcXVlc3QuXCIsY29kZToxMDA1fSxVTkFVVEhPUklaRURfTUVUSE9EOnttZXNzYWdlOlwiVW5hdXRob3JpemVkIG1ldGhvZC5cIixjb2RlOjMwMDF9LFVOQVVUSE9SSVpFRF9FVkVOVDp7bWVzc2FnZTpcIlVuYXV0aG9yaXplZCBldmVudC5cIixjb2RlOjMwMDJ9LFVOQVVUSE9SSVpFRF9VUERBVEVfUkVRVUVTVDp7bWVzc2FnZTpcIlVuYXV0aG9yaXplZCB1cGRhdGUgcmVxdWVzdC5cIixjb2RlOjMwMDN9LFVOQVVUSE9SSVpFRF9FWFRFTkRfUkVRVUVTVDp7bWVzc2FnZTpcIlVuYXV0aG9yaXplZCBleHRlbmQgcmVxdWVzdC5cIixjb2RlOjMwMDR9LFVTRVJfUkVKRUNURUQ6e21lc3NhZ2U6XCJVc2VyIHJlamVjdGVkLlwiLGNvZGU6NWUzfSxVU0VSX1JFSkVDVEVEX0NIQUlOUzp7bWVzc2FnZTpcIlVzZXIgcmVqZWN0ZWQgY2hhaW5zLlwiLGNvZGU6NTAwMX0sVVNFUl9SRUpFQ1RFRF9NRVRIT0RTOnttZXNzYWdlOlwiVXNlciByZWplY3RlZCBtZXRob2RzLlwiLGNvZGU6NTAwMn0sVVNFUl9SRUpFQ1RFRF9FVkVOVFM6e21lc3NhZ2U6XCJVc2VyIHJlamVjdGVkIGV2ZW50cy5cIixjb2RlOjUwMDN9LFVOU1VQUE9SVEVEX0NIQUlOUzp7bWVzc2FnZTpcIlVuc3VwcG9ydGVkIGNoYWlucy5cIixjb2RlOjUxMDB9LFVOU1VQUE9SVEVEX01FVEhPRFM6e21lc3NhZ2U6XCJVbnN1cHBvcnRlZCBtZXRob2RzLlwiLGNvZGU6NTEwMX0sVU5TVVBQT1JURURfRVZFTlRTOnttZXNzYWdlOlwiVW5zdXBwb3J0ZWQgZXZlbnRzLlwiLGNvZGU6NTEwMn0sVU5TVVBQT1JURURfQUNDT1VOVFM6e21lc3NhZ2U6XCJVbnN1cHBvcnRlZCBhY2NvdW50cy5cIixjb2RlOjUxMDN9LFVOU1VQUE9SVEVEX05BTUVTUEFDRV9LRVk6e21lc3NhZ2U6XCJVbnN1cHBvcnRlZCBuYW1lc3BhY2Uga2V5LlwiLGNvZGU6NTEwNH0sVVNFUl9ESVNDT05ORUNURUQ6e21lc3NhZ2U6XCJVc2VyIGRpc2Nvbm5lY3RlZC5cIixjb2RlOjZlM30sU0VTU0lPTl9TRVRUTEVNRU5UX0ZBSUxFRDp7bWVzc2FnZTpcIlNlc3Npb24gc2V0dGxlbWVudCBmYWlsZWQuXCIsY29kZTo3ZTN9LFdDX01FVEhPRF9VTlNVUFBPUlRFRDp7bWVzc2FnZTpcIlVuc3VwcG9ydGVkIHdjXyBtZXRob2QuXCIsY29kZToxMDAwMX19LFpuPXtOT1RfSU5JVElBTElaRUQ6e21lc3NhZ2U6XCJOb3QgaW5pdGlhbGl6ZWQuXCIsY29kZToxfSxOT19NQVRDSElOR19LRVk6e21lc3NhZ2U6XCJObyBtYXRjaGluZyBrZXkuXCIsY29kZToyfSxSRVNUT1JFX1dJTExfT1ZFUlJJREU6e21lc3NhZ2U6XCJSZXN0b3JlIHdpbGwgb3ZlcnJpZGUuXCIsY29kZTozfSxSRVNVQlNDUklCRUQ6e21lc3NhZ2U6XCJSZXN1YnNjcmliZWQuXCIsY29kZTo0fSxNSVNTSU5HX09SX0lOVkFMSUQ6e21lc3NhZ2U6XCJNaXNzaW5nIG9yIGludmFsaWQuXCIsY29kZTo1fSxFWFBJUkVEOnttZXNzYWdlOlwiRXhwaXJlZC5cIixjb2RlOjZ9LFVOS05PV05fVFlQRTp7bWVzc2FnZTpcIlVua25vd24gdHlwZS5cIixjb2RlOjd9LE1JU01BVENIRURfVE9QSUM6e21lc3NhZ2U6XCJNaXNtYXRjaGVkIHRvcGljLlwiLGNvZGU6OH0sTk9OX0NPTkZPUk1JTkdfTkFNRVNQQUNFUzp7bWVzc2FnZTpcIk5vbiBjb25mb3JtaW5nIG5hbWVzcGFjZXMuXCIsY29kZTo5fX07ZnVuY3Rpb24geShlLG4pe2NvbnN0e21lc3NhZ2U6dCxjb2RlOnJ9PVpuW2VdO3JldHVybnttZXNzYWdlOm4/YCR7dH0gJHtufWA6dCxjb2RlOnJ9fWZ1bmN0aW9uIE4oZSxuKXtjb25zdHttZXNzYWdlOnQsY29kZTpyfT1RbltlXTtyZXR1cm57bWVzc2FnZTpuP2Ake3R9ICR7bn1gOnQsY29kZTpyfX1mdW5jdGlvbiBJKGUsbil7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/dHlwZW9mIG48XCJ1XCImJmUubGVuZ3RoP2UuZXZlcnkobik6ITA6ITF9ZnVuY3Rpb24gVyhlKXtyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKGUpPT09T2JqZWN0LnByb3RvdHlwZSYmT2JqZWN0LmtleXMoZSkubGVuZ3RofWZ1bmN0aW9uIEUoZSl7cmV0dXJuIHR5cGVvZiBlPlwidVwifWZ1bmN0aW9uIGQoZSxuKXtyZXR1cm4gbiYmRShlKT8hMDp0eXBlb2YgZT09XCJzdHJpbmdcIiYmQm9vbGVhbihlLnRyaW0oKS5sZW5ndGgpfWZ1bmN0aW9uIEooZSxuKXtyZXR1cm4gbiYmRShlKT8hMDp0eXBlb2YgZT09XCJudW1iZXJcIiYmIWlzTmFOKGUpfWZ1bmN0aW9uIFhuKGUsbil7Y29uc3R7cmVxdWlyZWROYW1lc3BhY2VzOnR9PW4scj1PYmplY3Qua2V5cyhlLm5hbWVzcGFjZXMpLG89T2JqZWN0LmtleXModCk7bGV0IGk9ITA7cmV0dXJuIHUobyxyKT8oci5mb3JFYWNoKHM9Pntjb25zdHthY2NvdW50czpjLG1ldGhvZHM6bCxldmVudHM6aCxleHRlbnNpb246Z309ZS5uYW1lc3BhY2VzW3NdLFA9bShjKSx2PXRbc107KCF1KHYuY2hhaW5zLFApfHwhdSh2Lm1ldGhvZHMsbCl8fCF1KHYuZXZlbnRzLGgpKSYmKGk9ITEpLGkmJmcmJmcuZm9yRWFjaChfPT57dmFyIE87Y29uc3R7YWNjb3VudHM6eCxtZXRob2RzOnplLGV2ZW50czpZZX09XyxXZT1tKHgpOyhPPXYuZXh0ZW5zaW9uKSE9bnVsbCYmTy5maW5kKGo9PnUoai5jaGFpbnMsV2UpJiZ1KGoubWV0aG9kcyx6ZSkmJnUoai5ldmVudHMsWWUpKXx8KGk9ITEpfSl9KSxpKTohMX1mdW5jdGlvbiBEKGUpe3JldHVybiBkKGUsITEpJiZlLmluY2x1ZGVzKFwiOlwiKT9lLnNwbGl0KFwiOlwiKS5sZW5ndGg9PT0yOiExfWZ1bmN0aW9uIEhlKGUpe2lmKGQoZSwhMSkmJmUuaW5jbHVkZXMoXCI6XCIpKXtjb25zdCBuPWUuc3BsaXQoXCI6XCIpO2lmKG4ubGVuZ3RoPT09Myl7Y29uc3QgdD1uWzBdK1wiOlwiK25bMV07cmV0dXJuISFuWzJdJiZEKHQpfX1yZXR1cm4hMX1mdW5jdGlvbiBldChlKXtpZihkKGUsITEpKXRyeXtyZXR1cm4gdHlwZW9mIG5ldyBVUkwoZSk8XCJ1XCJ9Y2F0Y2h7cmV0dXJuITF9cmV0dXJuITF9ZnVuY3Rpb24gbnQoZSl7dmFyIG47cmV0dXJuKG49ZT8ucHJvcG9zZXIpPT1udWxsP3ZvaWQgMDpuLnB1YmxpY0tleX1mdW5jdGlvbiB0dChlKXtyZXR1cm4gZT8udG9waWN9ZnVuY3Rpb24gcnQoZSxuKXtsZXQgdD1udWxsO3JldHVybiBkKGU/LnB1YmxpY0tleSwhMSl8fCh0PXkoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgJHtufSBjb250cm9sbGVyIHB1YmxpYyBrZXkgc2hvdWxkIGJlIGEgc3RyaW5nYCkpLHR9ZnVuY3Rpb24gJChlLG4pe2xldCB0PW51bGw7cmV0dXJuIEUoZT8uZXh0ZW5zaW9uKXx8KCFJKGUuZXh0ZW5zaW9uKXx8IWUuZXh0ZW5zaW9uLmxlbmd0aCkmJih0PXkoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgJHtufSBleHRlbnNpb24gc2hvdWxkIGJlIGFuIGFycmF5IG9mIG5hbWVzcGFjZXMsIG9yIG9taXR0ZWRgKSksdH1mdW5jdGlvbiBRKGUpe2xldCBuPSEwO3JldHVybiBJKGUpP2UubGVuZ3RoJiYobj1lLmV2ZXJ5KHQ9PmQodCwhMSkpKTpuPSExLG59ZnVuY3Rpb24gWihlLG4sdCl7bGV0IHI9bnVsbDtyZXR1cm4gSShuKT9uLmZvckVhY2gobz0+e3J8fCghRChvKXx8IW8uaW5jbHVkZXMoZSkpJiYocj1OKFwiVU5TVVBQT1JURURfQ0hBSU5TXCIsYCR7dH0sIGNoYWluICR7b30gc2hvdWxkIGJlIGEgc3RyaW5nIGFuZCBjb25mb3JtIHRvIFwibmFtZXNwYWNlOmNoYWluSWRcIiBmb3JtYXRgKSl9KTpyPU4oXCJVTlNVUFBPUlRFRF9DSEFJTlNcIixgJHt0fSwgY2hhaW5zICR7bn0gc2hvdWxkIGJlIGFuIGFycmF5IG9mIHN0cmluZ3MgY29uZm9ybWluZyB0byBcIm5hbWVzcGFjZTpjaGFpbklkXCIgZm9ybWF0YCkscn1mdW5jdGlvbiBxZShlLG4pe2xldCB0PW51bGw7cmV0dXJuIE9iamVjdC5lbnRyaWVzKGUpLmZvckVhY2goKFtyLG9dKT0+e2lmKHQpcmV0dXJuO2NvbnN0IGk9WihyLG8/LmNoYWlucyxgJHtufSByZXF1aXJlZE5hbWVzcGFjZWApLHM9JChvLG4pO2k/dD1pOnM/dD1zOm8uZXh0ZW5zaW9uJiZvLmV4dGVuc2lvbi5mb3JFYWNoKGM9PntpZih0KXJldHVybjtjb25zdCBsPVoocixjLmNoYWlucyxgJHtufSBleHRlbnNpb25gKTtsJiYodD1sKX0pfSksdH1mdW5jdGlvbiBYKGUsbil7bGV0IHQ9bnVsbDtyZXR1cm4gSShlKT9lLmZvckVhY2gocj0+e3R8fEhlKHIpfHwodD1OKFwiVU5TVVBQT1JURURfQUNDT1VOVFNcIixgJHtufSwgYWNjb3VudCAke3J9IHNob3VsZCBiZSBhIHN0cmluZyBhbmQgY29uZm9ybSB0byBcIm5hbWVzcGFjZTpjaGFpbklkOmFkZHJlc3NcIiBmb3JtYXRgKSl9KTp0PU4oXCJVTlNVUFBPUlRFRF9BQ0NPVU5UU1wiLGAke259LCBhY2NvdW50cyBzaG91bGQgYmUgYW4gYXJyYXkgb2Ygc3RyaW5ncyBjb25mb3JtaW5nIHRvIFwibmFtZXNwYWNlOmNoYWluSWQ6YWRkcmVzc1wiIGZvcm1hdGApLHR9ZnVuY3Rpb24gR2UoZSxuKXtsZXQgdD1udWxsO3JldHVybiBPYmplY3QudmFsdWVzKGUpLmZvckVhY2gocj0+e2lmKHQpcmV0dXJuO2NvbnN0IG89WChyPy5hY2NvdW50cyxgJHtufSBuYW1lc3BhY2VgKSxpPSQocixuKTtvP3Q9bzppP3Q9aTpyLmV4dGVuc2lvbiYmci5leHRlbnNpb24uZm9yRWFjaChzPT57aWYodClyZXR1cm47Y29uc3QgYz1YKHMuYWNjb3VudHMsYCR7bn0gZXh0ZW5zaW9uYCk7YyYmKHQ9Yyl9KX0pLHR9ZnVuY3Rpb24gZWUoZSxuKXtsZXQgdD1udWxsO3JldHVybiBRKGU/Lm1ldGhvZHMpP1EoZT8uZXZlbnRzKXx8KHQ9TihcIlVOU1VQUE9SVEVEX0VWRU5UU1wiLGAke259LCBldmVudHMgc2hvdWxkIGJlIGFuIGFycmF5IG9mIHN0cmluZ3Mgb3IgZW1wdHkgYXJyYXkgZm9yIG5vIGV2ZW50c2ApKTp0PU4oXCJVTlNVUFBPUlRFRF9NRVRIT0RTXCIsYCR7bn0sIG1ldGhvZHMgc2hvdWxkIGJlIGFuIGFycmF5IG9mIHN0cmluZ3Mgb3IgZW1wdHkgYXJyYXkgZm9yIG5vIG1ldGhvZHNgKSx0fWZ1bmN0aW9uIG5lKGUsbil7bGV0IHQ9bnVsbDtyZXR1cm4gT2JqZWN0LnZhbHVlcyhlKS5mb3JFYWNoKHI9PntpZih0KXJldHVybjtjb25zdCBvPWVlKHIsYCR7bn0sIG5hbWVzcGFjZWApLGk9JChyLG4pO28/dD1vOmk/dD1pOnIuZXh0ZW5zaW9uJiZyLmV4dGVuc2lvbi5mb3JFYWNoKHM9PntpZih0KXJldHVybjtjb25zdCBjPWVlKHMsYCR7bn0sIGV4dGVuc2lvbmApO2MmJih0PWMpfSl9KSx0fWZ1bmN0aW9uIG90KGUsbil7bGV0IHQ9bnVsbDtpZihlJiZXKGUpKXtjb25zdCByPW5lKGUsbik7ciYmKHQ9cik7Y29uc3Qgbz1xZShlLG4pO28mJih0PW8pfWVsc2UgdD15KFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYCR7bn0sIHJlcXVpcmVkTmFtZXNwYWNlcyBzaG91bGQgYmUgYW4gb2JqZWN0IHdpdGggZGF0YWApO3JldHVybiB0fWZ1bmN0aW9uIHN0KGUsbil7bGV0IHQ9bnVsbDtpZihlJiZXKGUpKXtjb25zdCByPW5lKGUsbik7ciYmKHQ9cik7Y29uc3Qgbz1HZShlLG4pO28mJih0PW8pfWVsc2UgdD15KFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYCR7bn0sIG5hbWVzcGFjZXMgc2hvdWxkIGJlIGFuIG9iamVjdCB3aXRoIGRhdGFgKTtyZXR1cm4gdH1mdW5jdGlvbiBCZShlKXtyZXR1cm4gZChlLnByb3RvY29sLCEwKX1mdW5jdGlvbiBpdChlLG4pe2xldCB0PSExO3JldHVybiBuJiYhZT90PSEwOmUmJkkoZSkmJmUubGVuZ3RoJiZlLmZvckVhY2gocj0+e3Q9QmUocil9KSx0fWZ1bmN0aW9uIGN0KGUpe3JldHVybiB0eXBlb2YgZT09XCJudW1iZXJcIn1mdW5jdGlvbiBhdChlKXtyZXR1cm4gdHlwZW9mIGU8XCJ1XCImJnR5cGVvZiBlIT09bnVsbH1mdW5jdGlvbiB1dChlKXtyZXR1cm4hKCFlfHx0eXBlb2YgZSE9XCJvYmplY3RcInx8IWUuY29kZXx8IUooZS5jb2RlLCExKXx8IWUubWVzc2FnZXx8IWQoZS5tZXNzYWdlLCExKSl9ZnVuY3Rpb24gZHQoZSl7cmV0dXJuIShFKGUpfHwhZChlLm1ldGhvZCwhMSkpfWZ1bmN0aW9uIGx0KGUpe3JldHVybiEoRShlKXx8RShlLnJlc3VsdCkmJkUoZS5lcnJvcil8fCFKKGUuaWQsITEpfHwhZChlLmpzb25ycGMsITEpKX1mdW5jdGlvbiBmdChlKXtyZXR1cm4hKEUoZSl8fCFkKGUubmFtZSwhMSkpfWZ1bmN0aW9uIHB0KGUsbil7cmV0dXJuISghRChuKXx8IWtlKGUpLmluY2x1ZGVzKG4pKX1mdW5jdGlvbiBtdChlLG4sdCl7cmV0dXJuIGQodCwhMSk/TGUoZSxuKS5pbmNsdWRlcyh0KTohMX1mdW5jdGlvbiB5dChlLG4sdCl7cmV0dXJuIGQodCwhMSk/RmUoZSxuKS5pbmNsdWRlcyh0KTohMX1mdW5jdGlvbiBFdChlLG4sdCl7bGV0IHI9bnVsbDtjb25zdCBvPU9iamVjdC5rZXlzKGUpLGk9T2JqZWN0LmtleXMobik7cmV0dXJuIHUobyxpKT9vLmZvckVhY2gocz0+e3ZhciBjO2lmKHIpcmV0dXJuO2NvbnN0IGw9ZVtzXS5jaGFpbnMsaD1tKG5bc10uYWNjb3VudHMpO3UobCxoKT91KGVbc10ubWV0aG9kcyxuW3NdLm1ldGhvZHMpP3UoZVtzXS5ldmVudHMsbltzXS5ldmVudHMpP2Vbc10uZXh0ZW5zaW9uJiYhbltzXS5leHRlbnNpb24/cj15KFwiTk9OX0NPTkZPUk1JTkdfTkFNRVNQQUNFU1wiLGAke3R9IG5hbWVzcGFjZXMgZXh0ZW5zaW9uIGRvZXNuJ3Qgc2F0aXNmeSByZXF1aXJlZE5hbWVzcGFjZXMgZXh0ZW5zaW9uIGZvciAke3N9YCk6ZVtzXS5leHRlbnNpb24mJm5bc10uZXh0ZW5zaW9uJiYoKGM9ZVtzXS5leHRlbnNpb24pPT1udWxsfHxjLmZvckVhY2goKHttZXRob2RzOmcsZXZlbnRzOlAsY2hhaW5zOnZ9KT0+e3ZhciBfO3J8fChfPW5bc10uZXh0ZW5zaW9uKSE9bnVsbCYmXy5maW5kKE89Pntjb25zdCB4PW0oTy5hY2NvdW50cyk7cmV0dXJuIHUodix4KSYmdShQLE8uZXZlbnRzKSYmdShnLE8ubWV0aG9kcyl9KXx8KHI9eShcIk5PTl9DT05GT1JNSU5HX05BTUVTUEFDRVNcIixgJHt0fSBuYW1lc3BhY2VzIGV4dGVuc2lvbiBkb2Vzbid0IHNhdGlzZnkgcmVxdWlyZWROYW1lc3BhY2VzIGV4dGVuc2lvbiBmb3IgJHtzfWApKX0pKTpyPXkoXCJOT05fQ09ORk9STUlOR19OQU1FU1BBQ0VTXCIsYCR7dH0gbmFtZXNwYWNlcyBldmVudHMgZG9uJ3Qgc2F0aXNmeSByZXF1aXJlZE5hbWVzcGFjZXMgZXZlbnRzIGZvciAke3N9YCk6cj15KFwiTk9OX0NPTkZPUk1JTkdfTkFNRVNQQUNFU1wiLGAke3R9IG5hbWVzcGFjZXMgbWV0aG9kcyBkb24ndCBzYXRpc2Z5IHJlcXVpcmVkTmFtZXNwYWNlcyBtZXRob2RzIGZvciAke3N9YCk6cj15KFwiTk9OX0NPTkZPUk1JTkdfTkFNRVNQQUNFU1wiLGAke3R9IG5hbWVzcGFjZXMgYWNjb3VudHMgZG9uJ3Qgc2F0aXNmeSByZXF1aXJlZE5hbWVzcGFjZXMgY2hhaW5zIGZvciAke3N9YCl9KTpyPXkoXCJOT05fQ09ORk9STUlOR19OQU1FU1BBQ0VTXCIsYCR7dH0gbmFtZXNwYWNlcyBrZXlzIGRvbid0IHNhdGlzZnkgcmVxdWlyZWROYW1lc3BhY2VzYCkscn1leHBvcnR7ayBhcyBCQVNFMTAsYSBhcyBCQVNFMTYsUiBhcyBCQVNFNjQsYm4gYXMgQ09MT04sRyBhcyBERUZBVUxUX0RFUFRILHcgYXMgRU1QVFlfU1BBQ0UsUyBhcyBFTlZfTUFQLFNuIGFzIE9ORV9USE9VU0FORCxTZSBhcyBSRUFDVF9OQVRJVkVfUFJPRFVDVCx4ZSBhcyBSRUxBWUVSX0RFRkFVTFRfUFJPVE9DT0wsUGUgYXMgU0RLX1RZUEUsSWUgYXMgU0xBU0gsTCBhcyBUWVBFXzAsYiBhcyBUWVBFXzEsQyBhcyBVVEY4LFVlIGFzIGFwcGVuZFRvUXVlcnlTdHJpbmcsVW4gYXMgYXNzZXJ0VHlwZSx4biBhcyBjYWxjRXhwaXJ5LCRuIGFzIGNhcGl0YWxpemUsJGUgYXMgY2FwaXRhbGl6ZVdvcmQsVm4gYXMgY3JlYXRlRGVsYXllZFByb21pc2UsTW4gYXMgY3JlYXRlRXhwaXJpbmdQcm9taXNlLFQgYXMgZGVjb2RlVHlwZUJ5dGUsRW4gYXMgZGVjcnlwdCxmbiBhcyBkZXJpdmVTeW1LZXkscSBhcyBkZXNlcmlhbGl6ZSxoZSBhcyBlbmNvZGVUeXBlQnl0ZSx5biBhcyBlbmNyeXB0LEZuIGFzIGVuZ2luZUV2ZW50LERuIGFzIGVudW1pZnksZmUgYXMgZm9ybWF0QWNjb3VudElkLHJuIGFzIGZvcm1hdEFjY291bnRXaXRoQ2hhaW4sbGUgYXMgZm9ybWF0Q2hhaW5JZCxZIGFzIGZvcm1hdEV4cGlyZXJUYXJnZXQsa24gYXMgZm9ybWF0SWRUYXJnZXQsQW4gYXMgZm9ybWF0TWVzc2FnZUNvbnRleHQsS2UgYXMgZm9ybWF0UmVsYXlQYXJhbXMsVG4gYXMgZm9ybWF0UmVsYXlScGNVcmwsS24gYXMgZm9ybWF0VG9waWNUYXJnZXQsQ2UgYXMgZm9ybWF0VUEsSm4gYXMgZm9ybWF0VXJpLGRuIGFzIGdlbmVyYXRlS2V5UGFpcixsbiBhcyBnZW5lcmF0ZVJhbmRvbUJ5dGVzMzIsbSBhcyBnZXRBY2NvdW50c0NoYWlucyxzbiBhcyBnZXRBY2NvdW50c0Zyb21OYW1lc3BhY2VzLHBlIGFzIGdldEFkZHJlc3NGcm9tQWNjb3VudCxvbiBhcyBnZXRBZGRyZXNzZXNGcm9tQWNjb3VudHMsSW4gYXMgZ2V0QXBwTWV0YWRhdGEsbWUgYXMgZ2V0Q2hhaW5Gcm9tQWNjb3VudCx5ZSBhcyBnZXRDaGFpbnNGcm9tQWNjb3VudHMsY24gYXMgZ2V0Q2hhaW5zRnJvbU5hbWVzcGFjZXMsYW4gYXMgZ2V0Q2hhaW5zRnJvbVJlcXVpcmVkTmFtZXNwYWNlcyx6IGFzIGdldEVudmlyb25tZW50LF9uIGFzIGdldEh0dHBVcmwseSBhcyBnZXRJbnRlcm5hbEVycm9yLFJlIGFzIGdldEphdmFzY3JpcHRJRCxBZSBhcyBnZXRKYXZhc2NyaXB0T1MsRGUgYXMgZ2V0TGFzdEl0ZW1zLGtlIGFzIGdldE5hbWVzcGFjZXNDaGFpbnMsRmUgYXMgZ2V0TmFtZXNwYWNlc0V2ZW50c0ZvckNoYWluSWQsTGUgYXMgZ2V0TmFtZXNwYWNlc01ldGhvZHNGb3JDaGFpbklkLFBuIGFzIGdldFJlbGF5Q2xpZW50TWV0YWRhdGEscW4gYXMgZ2V0UmVsYXlQcm90b2NvbEFwaSxIbiBhcyBnZXRSZWxheVByb3RvY29sTmFtZSxOIGFzIGdldFNka0Vycm9yLEsgYXMgZ2V0VW5pcXVlVmFsdWVzLHUgYXMgaGFzT3ZlcmxhcCxwbiBhcyBoYXNoS2V5LG1uIGFzIGhhc2hNZXNzYWdlLF9lIGFzIGlzQnJvd3NlcixFdCBhcyBpc0NvbmZvcm1pbmdOYW1lc3BhY2VzLGpuIGFzIGlzRXhwaXJlZCxCIGFzIGlzTm9kZSxudCBhcyBpc1Byb3Bvc2FsU3RydWN0LFRlIGFzIGlzUmVhY3ROYXRpdmUsWG4gYXMgaXNTZXNzaW9uQ29tcGF0aWJsZSx0dCBhcyBpc1Nlc3Npb25TdHJ1Y3QsTm4gYXMgaXNUeXBlT25lRW52ZWxvcGUsRSBhcyBpc1VuZGVmaW5lZCxIZSBhcyBpc1ZhbGlkQWNjb3VudElkLFggYXMgaXNWYWxpZEFjY291bnRzLGVlIGFzIGlzVmFsaWRBY3Rpb25zLEkgYXMgaXNWYWxpZEFycmF5LEQgYXMgaXNWYWxpZENoYWluSWQsWiBhcyBpc1ZhbGlkQ2hhaW5zLHJ0IGFzIGlzVmFsaWRDb250cm9sbGVyLHV0IGFzIGlzVmFsaWRFcnJvclJlYXNvbixmdCBhcyBpc1ZhbGlkRXZlbnQsJCBhcyBpc1ZhbGlkRXh0ZW5zaW9uLGN0IGFzIGlzVmFsaWRJZCxHZSBhcyBpc1ZhbGlkTmFtZXNwYWNlQWNjb3VudHMsbmUgYXMgaXNWYWxpZE5hbWVzcGFjZUFjdGlvbnMscWUgYXMgaXNWYWxpZE5hbWVzcGFjZUNoYWlucyxRIGFzIGlzVmFsaWROYW1lc3BhY2VNZXRob2RzT3JFdmVudHMsc3QgYXMgaXNWYWxpZE5hbWVzcGFjZXMscHQgYXMgaXNWYWxpZE5hbWVzcGFjZXNDaGFpbklkLHl0IGFzIGlzVmFsaWROYW1lc3BhY2VzRXZlbnQsbXQgYXMgaXNWYWxpZE5hbWVzcGFjZXNSZXF1ZXN0LEogYXMgaXNWYWxpZE51bWJlcixXIGFzIGlzVmFsaWRPYmplY3QsYXQgYXMgaXNWYWxpZFBhcmFtcyxCZSBhcyBpc1ZhbGlkUmVsYXksaXQgYXMgaXNWYWxpZFJlbGF5cyxkdCBhcyBpc1ZhbGlkUmVxdWVzdCxvdCBhcyBpc1ZhbGlkUmVxdWlyZWROYW1lc3BhY2VzLGx0IGFzIGlzVmFsaWRSZXNwb25zZSxkIGFzIGlzVmFsaWRTdHJpbmcsZXQgYXMgaXNWYWxpZFVybCx3biBhcyBtYXBFbnRyaWVzLFJuIGFzIG1hcFRvT2JqLENuIGFzIG9ialRvTWFwLE0gYXMgcGFyc2VBY2NvdW50SWQsZGUgYXMgcGFyc2VDaGFpbklkLHdlIGFzIHBhcnNlQ29udGV4dE5hbWVzLExuIGFzIHBhcnNlRXhwaXJlclRhcmdldCxNZSBhcyBwYXJzZVJlbGF5UGFyYW1zLFduIGFzIHBhcnNlVXJpLE5lIGFzIHNlcmlhbGl6ZSxobiBhcyB2YWxpZGF0ZURlY29kaW5nLGdlIGFzIHZhbGlkYXRlRW5jb2Rpbmd9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iLCJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiZXZlbnRzXCI7XG5pbXBvcnQgeyBJSnNvblJwY1Byb3ZpZGVyLCBpc0pzb25ScGNSZXNwb25zZSwgZm9ybWF0SnNvblJwY1JlcXVlc3QsIGlzSnNvblJwY0Vycm9yLCB9IGZyb20gXCJAd2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzXCI7XG5leHBvcnQgY2xhc3MgSnNvblJwY1Byb3ZpZGVyIGV4dGVuZHMgSUpzb25ScGNQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbikge1xuICAgICAgICBzdXBlcihjb25uZWN0aW9uKTtcbiAgICAgICAgdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuaGFzUmVnaXN0ZXJlZEV2ZW50TGlzdGVuZXJzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IHRoaXMuc2V0Q29ubmVjdGlvbihjb25uZWN0aW9uKTtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbi5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudExpc3RlbmVycygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGNvbm5lY3QoY29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbikge1xuICAgICAgICBhd2FpdCB0aGlzLm9wZW4oY29ubmVjdGlvbik7XG4gICAgfVxuICAgIGFzeW5jIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gICAgb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIG9uY2UoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uY2UoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgb2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmV2ZW50cy5vZmYoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIGFzeW5jIHJlcXVlc3QocmVxdWVzdCwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0U3RyaWN0KGZvcm1hdEpzb25ScGNSZXF1ZXN0KHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnBhcmFtcyB8fCBbXSksIGNvbnRleHQpO1xuICAgIH1cbiAgICBhc3luYyByZXF1ZXN0U3RyaWN0KHJlcXVlc3QsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jb25uZWN0aW9uLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMub3BlbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ldmVudHMub24oYCR7cmVxdWVzdC5pZH1gLCByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGlzSnNvblJwY0Vycm9yKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNvbm5lY3Rpb24uc2VuZChyZXF1ZXN0LCBjb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0Q29ubmVjdGlvbihjb25uZWN0aW9uID0gdGhpcy5jb25uZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uO1xuICAgIH1cbiAgICBvblBheWxvYWQocGF5bG9hZCkge1xuICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KFwicGF5bG9hZFwiLCBwYXlsb2FkKTtcbiAgICAgICAgaWYgKGlzSnNvblJwY1Jlc3BvbnNlKHBheWxvYWQpKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KGAke3BheWxvYWQuaWR9YCwgcGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KFwibWVzc2FnZVwiLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogcGF5bG9hZC5tZXRob2QsXG4gICAgICAgICAgICAgICAgZGF0YTogcGF5bG9hZC5wYXJhbXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBvcGVuKGNvbm5lY3Rpb24gPSB0aGlzLmNvbm5lY3Rpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbiA9PT0gY29ubmVjdGlvbiAmJiB0aGlzLmNvbm5lY3Rpb24uY29ubmVjdGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uLmNvbm5lY3RlZClcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25uZWN0aW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNvbm5lY3Rpb24ub3Blbihjb25uZWN0aW9uKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24gPSB0aGlzLmNvbm5lY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gdGhpcy5zZXRDb25uZWN0aW9uKGNvbm5lY3Rpb24pO1xuICAgICAgICBhd2FpdCB0aGlzLmNvbm5lY3Rpb24ub3BlbigpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5ldmVudHMuZW1pdChcImNvbm5lY3RcIik7XG4gICAgfVxuICAgIGFzeW5jIGNsb3NlKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICB9XG4gICAgcmVnaXN0ZXJFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzUmVnaXN0ZXJlZEV2ZW50TGlzdGVuZXJzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24ub24oXCJwYXlsb2FkXCIsIChwYXlsb2FkKSA9PiB0aGlzLm9uUGF5bG9hZChwYXlsb2FkKSk7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5vbihcImNsb3NlXCIsICgpID0+IHRoaXMuZXZlbnRzLmVtaXQoXCJkaXNjb25uZWN0XCIpKTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLm9uKFwiZXJyb3JcIiwgKGVycm9yKSA9PiB0aGlzLmV2ZW50cy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpKTtcbiAgICAgICAgdGhpcy5oYXNSZWdpc3RlcmVkRXZlbnRMaXN0ZW5lcnMgPSB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEpzb25ScGNQcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudHNcIjtcbmltcG9ydCB7IHNhZmVKc29uUGFyc2UsIHNhZmVKc29uU3RyaW5naWZ5IH0gZnJvbSBcIkB3YWxsZXRjb25uZWN0L3NhZmUtanNvblwiO1xuaW1wb3J0IHsgZm9ybWF0SnNvblJwY0Vycm9yLCBpc1JlYWN0TmF0aXZlLCBpc1dzVXJsLCBpc0xvY2FsaG9zdFVybCwgcGFyc2VDb25uZWN0aW9uRXJyb3IsIH0gZnJvbSBcIkB3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHNcIjtcbmNvbnN0IEVWRU5UX0VNSVRURVJfTUFYX0xJU1RFTkVSU19ERUZBVUxUID0gMTA7XG5jb25zdCByZXNvbHZlV2ViU29ja2V0SW1wbGVtZW50YXRpb24gPSAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGdsb2JhbC5XZWJTb2NrZXQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbC5XZWJTb2NrZXQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuV2ViU29ja2V0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuV2ViU29ja2V0O1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWlyZShcIndzXCIpO1xufTtcbmNvbnN0IGlzQnJvd3NlciA9ICgpID0+IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCBXUyA9IHJlc29sdmVXZWJTb2NrZXRJbXBsZW1lbnRhdGlvbigpO1xuZXhwb3J0IGNsYXNzIFdzQ29ubmVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IodXJsKSB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcmluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoIWlzV3NVcmwodXJsKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm92aWRlZCBVUkwgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBXZWJTb2NrZXQgY29ubmVjdGlvbjogJHt1cmx9YCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgfVxuICAgIGdldCBjb25uZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5zb2NrZXQgIT09IFwidW5kZWZpbmVkXCI7XG4gICAgfVxuICAgIGdldCBjb25uZWN0aW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlcmluZztcbiAgICB9XG4gICAgb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIG9uY2UoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uY2UoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgb2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmV2ZW50cy5vZmYoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIGFzeW5jIG9wZW4odXJsID0gdGhpcy51cmwpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5yZWdpc3Rlcih1cmwpO1xuICAgIH1cbiAgICBhc3luYyBjbG9zZSgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNvY2tldCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29ubmVjdGlvbiBhbHJlYWR5IGNsb3NlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNvY2tldC5jbG9zZSgpO1xuICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICB9XG4gICAgYXN5bmMgc2VuZChwYXlsb2FkLCBjb250ZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5zb2NrZXQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0ID0gYXdhaXQgdGhpcy5yZWdpc3RlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5zZW5kKHNhZmVKc29uU3RyaW5naWZ5KHBheWxvYWQpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5vbkVycm9yKHBheWxvYWQuaWQsIGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlZ2lzdGVyKHVybCA9IHRoaXMudXJsKSB7XG4gICAgICAgIGlmICghaXNXc1VybCh1cmwpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb3ZpZGVkIFVSTCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIFdlYlNvY2tldCBjb25uZWN0aW9uOiAke3VybH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZWdpc3RlcmluZykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudE1heExpc3RlbmVycyA9IHRoaXMuZXZlbnRzLmdldE1heExpc3RlbmVycygpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzLmxpc3RlbmVyQ291bnQoXCJyZWdpc3Rlcl9lcnJvclwiKSA+PSBjdXJyZW50TWF4TGlzdGVuZXJzIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudHMubGlzdGVuZXJDb3VudChcIm9wZW5cIikgPj0gY3VycmVudE1heExpc3RlbmVycykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLnNldE1heExpc3RlbmVycyhjdXJyZW50TWF4TGlzdGVuZXJzICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLm9uY2UoXCJyZWdpc3Rlcl9lcnJvclwiLCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRNYXhMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5vbmNlKFwib3BlblwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRNYXhMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNvY2tldCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJXZWJTb2NrZXQgY29ubmVjdGlvbiBpcyBtaXNzaW5nIG9yIGludmFsaWRcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5zb2NrZXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJpbmcgPSB0cnVlO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb3B0cyA9ICFpc1JlYWN0TmF0aXZlKCkgPyB7IHJlamVjdFVuYXV0aG9yaXplZDogIWlzTG9jYWxob3N0VXJsKHVybCkgfSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IHNvY2tldCA9IG5ldyBXUyh1cmwsIFtdLCBvcHRzKTtcbiAgICAgICAgICAgIGlmIChpc0Jyb3dzZXIoKSkge1xuICAgICAgICAgICAgICAgIHNvY2tldC5vbmVycm9yID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yRXZlbnQgPSBldmVudDtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHRoaXMuZW1pdEVycm9yKGVycm9yRXZlbnQuZXJyb3IpKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc29ja2V0Lm9uKFwiZXJyb3JcIiwgKGVycm9yRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHRoaXMuZW1pdEVycm9yKGVycm9yRXZlbnQpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvY2tldC5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbk9wZW4oc29ja2V0KTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHNvY2tldCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25PcGVuKHNvY2tldCkge1xuICAgICAgICBzb2NrZXQub25tZXNzYWdlID0gKGV2ZW50KSA9PiB0aGlzLm9uUGF5bG9hZChldmVudCk7XG4gICAgICAgIHNvY2tldC5vbmNsb3NlID0gKCkgPT4gdGhpcy5vbkNsb3NlKCk7XG4gICAgICAgIHRoaXMuc29ja2V0ID0gc29ja2V0O1xuICAgICAgICB0aGlzLnJlZ2lzdGVyaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZXZlbnRzLmVtaXQoXCJvcGVuXCIpO1xuICAgIH1cbiAgICBvbkNsb3NlKCkge1xuICAgICAgICB0aGlzLnNvY2tldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yZWdpc3RlcmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KFwiY2xvc2VcIik7XG4gICAgfVxuICAgIG9uUGF5bG9hZChlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZS5kYXRhID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gdHlwZW9mIGUuZGF0YSA9PT0gXCJzdHJpbmdcIiA/IHNhZmVKc29uUGFyc2UoZS5kYXRhKSA6IGUuZGF0YTtcbiAgICAgICAgdGhpcy5ldmVudHMuZW1pdChcInBheWxvYWRcIiwgcGF5bG9hZCk7XG4gICAgfVxuICAgIG9uRXJyb3IoaWQsIGUpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSB0aGlzLnBhcnNlRXJyb3IoZSk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlIHx8IGVycm9yLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBmb3JtYXRKc29uUnBjRXJyb3IoaWQsIG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KFwicGF5bG9hZFwiLCBwYXlsb2FkKTtcbiAgICB9XG4gICAgcGFyc2VFcnJvcihlLCB1cmwgPSB0aGlzLnVybCkge1xuICAgICAgICByZXR1cm4gcGFyc2VDb25uZWN0aW9uRXJyb3IoZSwgdXJsLCBcIldTXCIpO1xuICAgIH1cbiAgICByZXNldE1heExpc3RlbmVycygpIHtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRzLmdldE1heExpc3RlbmVycygpID4gRVZFTlRfRU1JVFRFUl9NQVhfTElTVEVORVJTX0RFRkFVTFQpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLnNldE1heExpc3RlbmVycyhFVkVOVF9FTUlUVEVSX01BWF9MSVNURU5FUlNfREVGQVVMVCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW1pdEVycm9yKGVycm9yRXZlbnQpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSB0aGlzLnBhcnNlRXJyb3IobmV3IEVycm9yKChlcnJvckV2ZW50ID09PSBudWxsIHx8IGVycm9yRXZlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yRXZlbnQubWVzc2FnZSkgfHwgYFdlYlNvY2tldCBjb25uZWN0aW9uIGZhaWxlZCBmb3IgVVJMOiAke3RoaXMudXJsfWApKTtcbiAgICAgICAgdGhpcy5ldmVudHMuZW1pdChcInJlZ2lzdGVyX2Vycm9yXCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IFdzQ29ubmVjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdzLmpzLm1hcCIsImltcG9ydCBPdCx7RXZlbnRFbWl0dGVyIGFzIEF9ZnJvbVwiZXZlbnRzXCI7aW1wb3J0IGNlIGZyb21cInBpbm9cIjtpbXBvcnQgQXQgZnJvbVwiQHdhbGxldGNvbm5lY3Qva2V5dmFsdWVzdG9yYWdlXCI7aW1wb3J0e0hFQVJUQkVBVF9FVkVOVFMgYXMgRyxIZWFydEJlYXQgYXMgenR9ZnJvbVwiQHdhbGxldGNvbm5lY3QvaGVhcnRiZWF0XCI7aW1wb3J0e2dlbmVyYXRlQ2hpbGRMb2dnZXIgYXMgdyxnZXRMb2dnZXJDb250ZXh0IGFzIHYsZ2V0RGVmYXVsdExvZ2dlck9wdGlvbnMgYXMgdWV9ZnJvbVwiQHdhbGxldGNvbm5lY3QvbG9nZ2VyXCI7aW1wb3J0e0lNZXNzYWdlVHJhY2tlciBhcyBOdCxJUHVibGlzaGVyIGFzIFV0LElTdWJzY3JpYmVyIGFzIEx0LElSZWxheWVyIGFzIEZ0LElTdG9yZSBhcyBNdCxJSnNvblJwY0hpc3RvcnkgYXMgS3QsSUV4cGlyZXIgYXMgJHQsSUNvcmUgYXMga3R9ZnJvbVwiQHdhbGxldGNvbm5lY3QvdHlwZXNcIjtpbXBvcnR7c2FmZUpzb25TdHJpbmdpZnkgYXMgQnQsc2FmZUpzb25QYXJzZSBhcyBqdH1mcm9tXCJAd2FsbGV0Y29ubmVjdC9zYWZlLWpzb25cIjtpbXBvcnQqYXMgJCBmcm9tXCJAd2FsbGV0Y29ubmVjdC9yZWxheS1hdXRoXCI7aW1wb3J0e2dldEludGVybmFsRXJyb3IgYXMgYyxtYXBUb09iaiBhcyBsZSxvYmpUb01hcCBhcyBkZSxnZW5lcmF0ZUtleVBhaXIgYXMgVnQsZ2VuZXJhdGVSYW5kb21CeXRlczMyIGFzIFksZGVyaXZlU3ltS2V5IGFzIHF0LGhhc2hLZXkgYXMgR3QsdmFsaWRhdGVFbmNvZGluZyBhcyBZdCxpc1R5cGVPbmVFbnZlbG9wZSBhcyBnZSxlbmNyeXB0IGFzIEp0LHZhbGlkYXRlRGVjb2RpbmcgYXMgSHQsZGVjcnlwdCBhcyBYdCxkZXNlcmlhbGl6ZSBhcyBXdCxkZWNvZGVUeXBlQnl0ZSBhcyBadCxoYXNoTWVzc2FnZSBhcyBKLGdldFJlbGF5UHJvdG9jb2xOYW1lIGFzIEgsY3JlYXRlRXhwaXJpbmdQcm9taXNlIGFzIHBlLGdldFJlbGF5UHJvdG9jb2xBcGkgYXMgWCxpc1VuZGVmaW5lZCBhcyBXLGdldFNka0Vycm9yIGFzIEwsZm9ybWF0UmVsYXlScGNVcmwgYXMgUXQsaXNQcm9wb3NhbFN0cnVjdCBhcyBlaSxpc1Nlc3Npb25TdHJ1Y3QgYXMgdGksVFlQRV8xIGFzIGlpLGNhbGNFeHBpcnkgYXMgWixmb3JtYXRVcmkgYXMgc2kscGFyc2VVcmkgYXMgcmksY3JlYXRlRGVsYXllZFByb21pc2UgYXMgbmksZW5naW5lRXZlbnQgYXMgUSxpc0V4cGlyZWQgYXMgRGUsaXNWYWxpZFBhcmFtcyBhcyBlZSxpc1ZhbGlkVXJsIGFzIGFpLGlzVmFsaWRTdHJpbmcgYXMgb2kscGFyc2VFeHBpcmVyVGFyZ2V0IGFzIGhpLGZvcm1hdFRvcGljVGFyZ2V0IGFzIGNpLGZvcm1hdElkVGFyZ2V0IGFzIHVpfWZyb21cIkB3YWxsZXRjb25uZWN0L3V0aWxzXCI7aW1wb3J0e09ORV9EQVkgYXMgeixTSVhfSE9VUlMgYXMgbGksT05FX1NFQ09ORCBhcyBkaSxUSElSVFlfREFZUyBhcyB0ZSxGSVZFX1NFQ09ORFMgYXMgZ2ksVEhJUlRZX1NFQ09ORFMgYXMgeWUsV2F0Y2ggYXMgcGksdG9NaWxpc2Vjb25kcyBhcyBiZSxGSVZFX01JTlVURVMgYXMgbWV9ZnJvbVwiQHdhbGxldGNvbm5lY3QvdGltZVwiO2ltcG9ydHtKc29uUnBjUHJvdmlkZXIgYXMgRGl9ZnJvbVwiQHdhbGxldGNvbm5lY3QvanNvbnJwYy1wcm92aWRlclwiO2ltcG9ydHtpc0pzb25ScGNSZXF1ZXN0IGFzIEVlLGZvcm1hdEpzb25ScGNSZXN1bHQgYXMgZmUsZm9ybWF0SnNvblJwY1JlcXVlc3QgYXMgd2UsZm9ybWF0SnNvblJwY0Vycm9yIGFzIHlpLGlzSnNvblJwY1Jlc3VsdCBhcyBiaSxpc0pzb25ScGNFcnJvciBhcyB2ZSxpc0pzb25ScGNSZXNwb25zZSBhcyBtaX1mcm9tXCJAd2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzXCI7aW1wb3J0IEVpIGZyb21cIkB3YWxsZXRjb25uZWN0L2pzb25ycGMtd3MtY29ubmVjdGlvblwiO2ltcG9ydCBmaSBmcm9tXCJsb2Rhc2guaXNlcXVhbFwiO2Z1bmN0aW9uIHdpKHIsZSl7aWYoci5sZW5ndGg+PTI1NSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQWxwaGFiZXQgdG9vIGxvbmdcIik7Zm9yKHZhciB0PW5ldyBVaW50OEFycmF5KDI1NiksaT0wO2k8dC5sZW5ndGg7aSsrKXRbaV09MjU1O2Zvcih2YXIgcz0wO3M8ci5sZW5ndGg7cysrKXt2YXIgbj1yLmNoYXJBdChzKSxhPW4uY2hhckNvZGVBdCgwKTtpZih0W2FdIT09MjU1KXRocm93IG5ldyBUeXBlRXJyb3IobitcIiBpcyBhbWJpZ3VvdXNcIik7dFthXT1zfXZhciBvPXIubGVuZ3RoLGg9ci5jaGFyQXQoMCksbD1NYXRoLmxvZyhvKS9NYXRoLmxvZygyNTYpLGQ9TWF0aC5sb2coMjU2KS9NYXRoLmxvZyhvKTtmdW5jdGlvbiBnKHUpe2lmKHUgaW5zdGFuY2VvZiBVaW50OEFycmF5fHwoQXJyYXlCdWZmZXIuaXNWaWV3KHUpP3U9bmV3IFVpbnQ4QXJyYXkodS5idWZmZXIsdS5ieXRlT2Zmc2V0LHUuYnl0ZUxlbmd0aCk6QXJyYXkuaXNBcnJheSh1KSYmKHU9VWludDhBcnJheS5mcm9tKHUpKSksISh1IGluc3RhbmNlb2YgVWludDhBcnJheSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIFVpbnQ4QXJyYXlcIik7aWYodS5sZW5ndGg9PT0wKXJldHVyblwiXCI7Zm9yKHZhciBEPTAsTz0wLEU9MCxfPXUubGVuZ3RoO0UhPT1fJiZ1W0VdPT09MDspRSsrLEQrKztmb3IodmFyIFI9KF8tRSkqZCsxPj4+MCxiPW5ldyBVaW50OEFycmF5KFIpO0UhPT1fOyl7Zm9yKHZhciBTPXVbRV0seD0wLGY9Ui0xOyhTIT09MHx8eDxPKSYmZiE9PS0xO2YtLSx4KyspUys9MjU2KmJbZl0+Pj4wLGJbZl09UyVvPj4+MCxTPVMvbz4+PjA7aWYoUyE9PTApdGhyb3cgbmV3IEVycm9yKFwiTm9uLXplcm8gY2FycnlcIik7Tz14LEUrK31mb3IodmFyIFQ9Ui1PO1QhPT1SJiZiW1RdPT09MDspVCsrO2Zvcih2YXIgSz1oLnJlcGVhdChEKTtUPFI7KytUKUsrPXIuY2hhckF0KGJbVF0pO3JldHVybiBLfWZ1bmN0aW9uIFUodSl7aWYodHlwZW9mIHUhPVwic3RyaW5nXCIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIFN0cmluZ1wiKTtpZih1Lmxlbmd0aD09PTApcmV0dXJuIG5ldyBVaW50OEFycmF5O3ZhciBEPTA7aWYodVtEXSE9PVwiIFwiKXtmb3IodmFyIE89MCxFPTA7dVtEXT09PWg7KU8rKyxEKys7Zm9yKHZhciBfPSh1Lmxlbmd0aC1EKSpsKzE+Pj4wLFI9bmV3IFVpbnQ4QXJyYXkoXyk7dVtEXTspe3ZhciBiPXRbdS5jaGFyQ29kZUF0KEQpXTtpZihiPT09MjU1KXJldHVybjtmb3IodmFyIFM9MCx4PV8tMTsoYiE9PTB8fFM8RSkmJnghPT0tMTt4LS0sUysrKWIrPW8qUlt4XT4+PjAsUlt4XT1iJTI1Nj4+PjAsYj1iLzI1Nj4+PjA7aWYoYiE9PTApdGhyb3cgbmV3IEVycm9yKFwiTm9uLXplcm8gY2FycnlcIik7RT1TLEQrK31pZih1W0RdIT09XCIgXCIpe2Zvcih2YXIgZj1fLUU7ZiE9PV8mJlJbZl09PT0wOylmKys7Zm9yKHZhciBUPW5ldyBVaW50OEFycmF5KE8rKF8tZikpLEs9TztmIT09XzspVFtLKytdPVJbZisrXTtyZXR1cm4gVH19fWZ1bmN0aW9uIHEodSl7dmFyIEQ9VSh1KTtpZihEKXJldHVybiBEO3Rocm93IG5ldyBFcnJvcihgTm9uLSR7ZX0gY2hhcmFjdGVyYCl9cmV0dXJue2VuY29kZTpnLGRlY29kZVVuc2FmZTpVLGRlY29kZTpxfX12YXIgdmk9d2ksSWk9dmk7Y29uc3QgSWU9cj0+e2lmKHIgaW5zdGFuY2VvZiBVaW50OEFycmF5JiZyLmNvbnN0cnVjdG9yLm5hbWU9PT1cIlVpbnQ4QXJyYXlcIilyZXR1cm4gcjtpZihyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpcmV0dXJuIG5ldyBVaW50OEFycmF5KHIpO2lmKEFycmF5QnVmZmVyLmlzVmlldyhyKSlyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoci5idWZmZXIsci5ieXRlT2Zmc2V0LHIuYnl0ZUxlbmd0aCk7dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biB0eXBlLCBtdXN0IGJlIGJpbmFyeSB0eXBlXCIpfSxDaT1yPT5uZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUociksX2k9cj0+bmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKHIpO2NsYXNzIFJpe2NvbnN0cnVjdG9yKGUsdCxpKXt0aGlzLm5hbWU9ZSx0aGlzLnByZWZpeD10LHRoaXMuYmFzZUVuY29kZT1pfWVuY29kZShlKXtpZihlIGluc3RhbmNlb2YgVWludDhBcnJheSlyZXR1cm5gJHt0aGlzLnByZWZpeH0ke3RoaXMuYmFzZUVuY29kZShlKX1gO3Rocm93IEVycm9yKFwiVW5rbm93biB0eXBlLCBtdXN0IGJlIGJpbmFyeSB0eXBlXCIpfX1jbGFzcyBTaXtjb25zdHJ1Y3RvcihlLHQsaSl7aWYodGhpcy5uYW1lPWUsdGhpcy5wcmVmaXg9dCx0LmNvZGVQb2ludEF0KDApPT09dm9pZCAwKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcHJlZml4IGNoYXJhY3RlclwiKTt0aGlzLnByZWZpeENvZGVQb2ludD10LmNvZGVQb2ludEF0KDApLHRoaXMuYmFzZURlY29kZT1pfWRlY29kZShlKXtpZih0eXBlb2YgZT09XCJzdHJpbmdcIil7aWYoZS5jb2RlUG9pbnRBdCgwKSE9PXRoaXMucHJlZml4Q29kZVBvaW50KXRocm93IEVycm9yKGBVbmFibGUgdG8gZGVjb2RlIG11bHRpYmFzZSBzdHJpbmcgJHtKU09OLnN0cmluZ2lmeShlKX0sICR7dGhpcy5uYW1lfSBkZWNvZGVyIG9ubHkgc3VwcG9ydHMgaW5wdXRzIHByZWZpeGVkIHdpdGggJHt0aGlzLnByZWZpeH1gKTtyZXR1cm4gdGhpcy5iYXNlRGVjb2RlKGUuc2xpY2UodGhpcy5wcmVmaXgubGVuZ3RoKSl9ZWxzZSB0aHJvdyBFcnJvcihcIkNhbiBvbmx5IG11bHRpYmFzZSBkZWNvZGUgc3RyaW5nc1wiKX1vcihlKXtyZXR1cm4gQ2UodGhpcyxlKX19Y2xhc3MgVGl7Y29uc3RydWN0b3IoZSl7dGhpcy5kZWNvZGVycz1lfW9yKGUpe3JldHVybiBDZSh0aGlzLGUpfWRlY29kZShlKXtjb25zdCB0PWVbMF0saT10aGlzLmRlY29kZXJzW3RdO2lmKGkpcmV0dXJuIGkuZGVjb2RlKGUpO3Rocm93IFJhbmdlRXJyb3IoYFVuYWJsZSB0byBkZWNvZGUgbXVsdGliYXNlIHN0cmluZyAke0pTT04uc3RyaW5naWZ5KGUpfSwgb25seSBpbnB1dHMgcHJlZml4ZWQgd2l0aCAke09iamVjdC5rZXlzKHRoaXMuZGVjb2RlcnMpfSBhcmUgc3VwcG9ydGVkYCl9fWNvbnN0IENlPShyLGUpPT5uZXcgVGkoey4uLnIuZGVjb2RlcnN8fHtbci5wcmVmaXhdOnJ9LC4uLmUuZGVjb2RlcnN8fHtbZS5wcmVmaXhdOmV9fSk7Y2xhc3MgUGl7Y29uc3RydWN0b3IoZSx0LGkscyl7dGhpcy5uYW1lPWUsdGhpcy5wcmVmaXg9dCx0aGlzLmJhc2VFbmNvZGU9aSx0aGlzLmJhc2VEZWNvZGU9cyx0aGlzLmVuY29kZXI9bmV3IFJpKGUsdCxpKSx0aGlzLmRlY29kZXI9bmV3IFNpKGUsdCxzKX1lbmNvZGUoZSl7cmV0dXJuIHRoaXMuZW5jb2Rlci5lbmNvZGUoZSl9ZGVjb2RlKGUpe3JldHVybiB0aGlzLmRlY29kZXIuZGVjb2RlKGUpfX1jb25zdCBrPSh7bmFtZTpyLHByZWZpeDplLGVuY29kZTp0LGRlY29kZTppfSk9Pm5ldyBQaShyLGUsdCxpKSxGPSh7cHJlZml4OnIsbmFtZTplLGFscGhhYmV0OnR9KT0+e2NvbnN0e2VuY29kZTppLGRlY29kZTpzfT1JaSh0LGUpO3JldHVybiBrKHtwcmVmaXg6cixuYW1lOmUsZW5jb2RlOmksZGVjb2RlOm49PkllKHMobikpfSl9LHhpPShyLGUsdCxpKT0+e2NvbnN0IHM9e307Zm9yKGxldCBkPTA7ZDxlLmxlbmd0aDsrK2Qpc1tlW2RdXT1kO2xldCBuPXIubGVuZ3RoO2Zvcig7cltuLTFdPT09XCI9XCI7KS0tbjtjb25zdCBhPW5ldyBVaW50OEFycmF5KG4qdC84fDApO2xldCBvPTAsaD0wLGw9MDtmb3IobGV0IGQ9MDtkPG47KytkKXtjb25zdCBnPXNbcltkXV07aWYoZz09PXZvaWQgMCl0aHJvdyBuZXcgU3ludGF4RXJyb3IoYE5vbi0ke2l9IGNoYXJhY3RlcmApO2g9aDw8dHxnLG8rPXQsbz49OCYmKG8tPTgsYVtsKytdPTI1NSZoPj5vKX1pZihvPj10fHwyNTUmaDw8OC1vKXRocm93IG5ldyBTeW50YXhFcnJvcihcIlVuZXhwZWN0ZWQgZW5kIG9mIGRhdGFcIik7cmV0dXJuIGF9LE9pPShyLGUsdCk9Pntjb25zdCBpPWVbZS5sZW5ndGgtMV09PT1cIj1cIixzPSgxPDx0KS0xO2xldCBuPVwiXCIsYT0wLG89MDtmb3IobGV0IGg9MDtoPHIubGVuZ3RoOysraClmb3Iobz1vPDw4fHJbaF0sYSs9ODthPnQ7KWEtPXQsbis9ZVtzJm8+PmFdO2lmKGEmJihuKz1lW3Mmbzw8dC1hXSksaSlmb3IoO24ubGVuZ3RoKnQmNzspbis9XCI9XCI7cmV0dXJuIG59LHA9KHtuYW1lOnIscHJlZml4OmUsYml0c1BlckNoYXI6dCxhbHBoYWJldDppfSk9Pmsoe3ByZWZpeDplLG5hbWU6cixlbmNvZGUocyl7cmV0dXJuIE9pKHMsaSx0KX0sZGVjb2RlKHMpe3JldHVybiB4aShzLGksdCxyKX19KSxBaT1rKHtwcmVmaXg6XCJcXDBcIixuYW1lOlwiaWRlbnRpdHlcIixlbmNvZGU6cj0+X2kociksZGVjb2RlOnI9PkNpKHIpfSk7dmFyIHppPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGlkZW50aXR5OkFpfSk7Y29uc3QgTmk9cCh7cHJlZml4OlwiMFwiLG5hbWU6XCJiYXNlMlwiLGFscGhhYmV0OlwiMDFcIixiaXRzUGVyQ2hhcjoxfSk7dmFyIFVpPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGJhc2UyOk5pfSk7Y29uc3QgTGk9cCh7cHJlZml4OlwiN1wiLG5hbWU6XCJiYXNlOFwiLGFscGhhYmV0OlwiMDEyMzQ1NjdcIixiaXRzUGVyQ2hhcjozfSk7dmFyIEZpPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGJhc2U4OkxpfSk7Y29uc3QgTWk9Rih7cHJlZml4OlwiOVwiLG5hbWU6XCJiYXNlMTBcIixhbHBoYWJldDpcIjAxMjM0NTY3ODlcIn0pO3ZhciBLaT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxiYXNlMTA6TWl9KTtjb25zdCAkaT1wKHtwcmVmaXg6XCJmXCIsbmFtZTpcImJhc2UxNlwiLGFscGhhYmV0OlwiMDEyMzQ1Njc4OWFiY2RlZlwiLGJpdHNQZXJDaGFyOjR9KSxraT1wKHtwcmVmaXg6XCJGXCIsbmFtZTpcImJhc2UxNnVwcGVyXCIsYWxwaGFiZXQ6XCIwMTIzNDU2Nzg5QUJDREVGXCIsYml0c1BlckNoYXI6NH0pO3ZhciBCaT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxiYXNlMTY6JGksYmFzZTE2dXBwZXI6a2l9KTtjb25zdCBqaT1wKHtwcmVmaXg6XCJiXCIsbmFtZTpcImJhc2UzMlwiLGFscGhhYmV0OlwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoyMzQ1NjdcIixiaXRzUGVyQ2hhcjo1fSksVmk9cCh7cHJlZml4OlwiQlwiLG5hbWU6XCJiYXNlMzJ1cHBlclwiLGFscGhhYmV0OlwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoyMzQ1NjdcIixiaXRzUGVyQ2hhcjo1fSkscWk9cCh7cHJlZml4OlwiY1wiLG5hbWU6XCJiYXNlMzJwYWRcIixhbHBoYWJldDpcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MjM0NTY3PVwiLGJpdHNQZXJDaGFyOjV9KSxHaT1wKHtwcmVmaXg6XCJDXCIsbmFtZTpcImJhc2UzMnBhZHVwcGVyXCIsYWxwaGFiZXQ6XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2Nz1cIixiaXRzUGVyQ2hhcjo1fSksWWk9cCh7cHJlZml4OlwidlwiLG5hbWU6XCJiYXNlMzJoZXhcIixhbHBoYWJldDpcIjAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2XCIsYml0c1BlckNoYXI6NX0pLEppPXAoe3ByZWZpeDpcIlZcIixuYW1lOlwiYmFzZTMyaGV4dXBwZXJcIixhbHBoYWJldDpcIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWXCIsYml0c1BlckNoYXI6NX0pLEhpPXAoe3ByZWZpeDpcInRcIixuYW1lOlwiYmFzZTMyaGV4cGFkXCIsYWxwaGFiZXQ6XCIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dj1cIixiaXRzUGVyQ2hhcjo1fSksWGk9cCh7cHJlZml4OlwiVFwiLG5hbWU6XCJiYXNlMzJoZXhwYWR1cHBlclwiLGFscGhhYmV0OlwiMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVY9XCIsYml0c1BlckNoYXI6NX0pLFdpPXAoe3ByZWZpeDpcImhcIixuYW1lOlwiYmFzZTMyelwiLGFscGhhYmV0OlwieWJuZHJmZzhlamttY3BxeG90MXV3aXN6YTM0NWg3NjlcIixiaXRzUGVyQ2hhcjo1fSk7dmFyIFppPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGJhc2UzMjpqaSxiYXNlMzJ1cHBlcjpWaSxiYXNlMzJwYWQ6cWksYmFzZTMycGFkdXBwZXI6R2ksYmFzZTMyaGV4OllpLGJhc2UzMmhleHVwcGVyOkppLGJhc2UzMmhleHBhZDpIaSxiYXNlMzJoZXhwYWR1cHBlcjpYaSxiYXNlMzJ6OldpfSk7Y29uc3QgUWk9Rih7cHJlZml4Olwia1wiLG5hbWU6XCJiYXNlMzZcIixhbHBoYWJldDpcIjAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwifSksZXM9Rih7cHJlZml4OlwiS1wiLG5hbWU6XCJiYXNlMzZ1cHBlclwiLGFscGhhYmV0OlwiMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXCJ9KTt2YXIgdHM9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsYmFzZTM2OlFpLGJhc2UzNnVwcGVyOmVzfSk7Y29uc3QgaXM9Rih7bmFtZTpcImJhc2U1OGJ0Y1wiLHByZWZpeDpcInpcIixhbHBoYWJldDpcIjEyMzQ1Njc4OUFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWmFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpcIn0pLHNzPUYoe25hbWU6XCJiYXNlNThmbGlja3JcIixwcmVmaXg6XCJaXCIsYWxwaGFiZXQ6XCIxMjM0NTY3ODlhYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaXCJ9KTt2YXIgcnM9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsYmFzZTU4YnRjOmlzLGJhc2U1OGZsaWNrcjpzc30pO2NvbnN0IG5zPXAoe3ByZWZpeDpcIm1cIixuYW1lOlwiYmFzZTY0XCIsYWxwaGFiZXQ6XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCIsYml0c1BlckNoYXI6Nn0pLGFzPXAoe3ByZWZpeDpcIk1cIixuYW1lOlwiYmFzZTY0cGFkXCIsYWxwaGFiZXQ6XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiLGJpdHNQZXJDaGFyOjZ9KSxvcz1wKHtwcmVmaXg6XCJ1XCIsbmFtZTpcImJhc2U2NHVybFwiLGFscGhhYmV0OlwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktX1wiLGJpdHNQZXJDaGFyOjZ9KSxocz1wKHtwcmVmaXg6XCJVXCIsbmFtZTpcImJhc2U2NHVybHBhZFwiLGFscGhhYmV0OlwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODktXz1cIixiaXRzUGVyQ2hhcjo2fSk7dmFyIGNzPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGJhc2U2NDpucyxiYXNlNjRwYWQ6YXMsYmFzZTY0dXJsOm9zLGJhc2U2NHVybHBhZDpoc30pO2NvbnN0IF9lPUFycmF5LmZyb20oXCJcXHV7MUY2ODB9XFx1ezFGQTkwfVxcdTI2MDRcXHV7MUY2RjB9XFx1ezFGMzBDfVxcdXsxRjMxMX1cXHV7MUYzMTJ9XFx1ezFGMzEzfVxcdXsxRjMxNH1cXHV7MUYzMTV9XFx1ezFGMzE2fVxcdXsxRjMxN31cXHV7MUYzMTh9XFx1ezFGMzBEfVxcdXsxRjMwRn1cXHV7MUYzMEV9XFx1ezFGNDA5fVxcdTI2MDBcXHV7MUY0QkJ9XFx1ezFGNUE1fVxcdXsxRjRCRX1cXHV7MUY0QkZ9XFx1ezFGNjAyfVxcdTI3NjRcXHV7MUY2MER9XFx1ezFGOTIzfVxcdXsxRjYwQX1cXHV7MUY2NEZ9XFx1ezFGNDk1fVxcdXsxRjYyRH1cXHV7MUY2MTh9XFx1ezFGNDREfVxcdXsxRjYwNX1cXHV7MUY0NEZ9XFx1ezFGNjAxfVxcdXsxRjUyNX1cXHV7MUY5NzB9XFx1ezFGNDk0fVxcdXsxRjQ5Nn1cXHV7MUY0OTl9XFx1ezFGNjIyfVxcdXsxRjkxNH1cXHV7MUY2MDZ9XFx1ezFGNjQ0fVxcdXsxRjRBQX1cXHV7MUY2MDl9XFx1MjYzQVxcdXsxRjQ0Q31cXHV7MUY5MTd9XFx1ezFGNDlDfVxcdXsxRjYxNH1cXHV7MUY2MEV9XFx1ezFGNjA3fVxcdXsxRjMzOX1cXHV7MUY5MjZ9XFx1ezFGMzg5fVxcdXsxRjQ5RX1cXHUyNzBDXFx1MjcyOFxcdXsxRjkzN31cXHV7MUY2MzF9XFx1ezFGNjBDfVxcdXsxRjMzOH1cXHV7MUY2NEN9XFx1ezFGNjBCfVxcdXsxRjQ5N31cXHV7MUY0OUF9XFx1ezFGNjBGfVxcdXsxRjQ5Qn1cXHV7MUY2NDJ9XFx1ezFGNDkzfVxcdXsxRjkyOX1cXHV7MUY2MDR9XFx1ezFGNjAwfVxcdXsxRjVBNH1cXHV7MUY2MDN9XFx1ezFGNEFGfVxcdXsxRjY0OH1cXHV7MUY0NDd9XFx1ezFGM0I2fVxcdXsxRjYxMn1cXHV7MUY5MkR9XFx1Mjc2M1xcdXsxRjYxQ31cXHV7MUY0OEJ9XFx1ezFGNDQwfVxcdXsxRjYyQX1cXHV7MUY2MTF9XFx1ezFGNEE1fVxcdXsxRjY0Qn1cXHV7MUY2MUV9XFx1ezFGNjI5fVxcdXsxRjYyMX1cXHV7MUY5MkF9XFx1ezFGNDRBfVxcdXsxRjk3M31cXHV7MUY2MjV9XFx1ezFGOTI0fVxcdXsxRjQ0OX1cXHV7MUY0ODN9XFx1ezFGNjMzfVxcdTI3MEJcXHV7MUY2MUF9XFx1ezFGNjFEfVxcdXsxRjYzNH1cXHV7MUYzMUZ9XFx1ezFGNjJDfVxcdXsxRjY0M31cXHV7MUYzNDB9XFx1ezFGMzM3fVxcdXsxRjYzQn1cXHV7MUY2MTN9XFx1MkI1MFxcdTI3MDVcXHV7MUY5N0F9XFx1ezFGMzA4fVxcdXsxRjYwOH1cXHV7MUY5MTh9XFx1ezFGNEE2fVxcdTI3MTRcXHV7MUY2MjN9XFx1ezFGM0MzfVxcdXsxRjQ5MH1cXHUyNjM5XFx1ezFGMzhBfVxcdXsxRjQ5OH1cXHV7MUY2MjB9XFx1MjYxRFxcdXsxRjYxNX1cXHV7MUYzM0F9XFx1ezFGMzgyfVxcdXsxRjMzQn1cXHV7MUY2MTB9XFx1ezFGNTk1fVxcdXsxRjQ5RH1cXHV7MUY2NEF9XFx1ezFGNjM5fVxcdXsxRjVFM31cXHV7MUY0QUJ9XFx1ezFGNDgwfVxcdXsxRjQ1MX1cXHV7MUYzQjV9XFx1ezFGOTFFfVxcdXsxRjYxQn1cXHV7MUY1MzR9XFx1ezFGNjI0fVxcdXsxRjMzQ31cXHV7MUY2MkJ9XFx1MjZCRFxcdXsxRjkxOX1cXHUyNjE1XFx1ezFGM0M2fVxcdXsxRjkyQn1cXHV7MUY0NDh9XFx1ezFGNjJFfVxcdXsxRjY0Nn1cXHV7MUYzN0J9XFx1ezFGMzQzfVxcdXsxRjQzNn1cXHV7MUY0ODF9XFx1ezFGNjMyfVxcdXsxRjMzRn1cXHV7MUY5RTF9XFx1ezFGMzgxfVxcdTI2QTFcXHV7MUYzMUV9XFx1ezFGMzg4fVxcdTI3NENcXHUyNzBBXFx1ezFGNDRCfVxcdXsxRjYzMH1cXHV7MUY5Mjh9XFx1ezFGNjM2fVxcdXsxRjkxRH1cXHV7MUY2QjZ9XFx1ezFGNEIwfVxcdXsxRjM1M31cXHV7MUY0QTJ9XFx1ezFGOTFGfVxcdXsxRjY0MX1cXHV7MUY2QTh9XFx1ezFGNEE4fVxcdXsxRjkyQ31cXHUyNzA4XFx1ezFGMzgwfVxcdXsxRjM3QX1cXHV7MUY5MTN9XFx1ezFGNjE5fVxcdXsxRjQ5Rn1cXHV7MUYzMzF9XFx1ezFGNjE2fVxcdXsxRjQ3Nn1cXHV7MUY5NzR9XFx1MjVCNlxcdTI3QTFcXHUyNzUzXFx1ezFGNDhFfVxcdXsxRjRCOH1cXHUyQjA3XFx1ezFGNjI4fVxcdXsxRjMxQX1cXHV7MUY5OEJ9XFx1ezFGNjM3fVxcdXsxRjU3QX1cXHUyNkEwXFx1ezFGNjQ1fVxcdXsxRjYxRn1cXHV7MUY2MzV9XFx1ezFGNDRFfVxcdXsxRjkzMn1cXHV7MUY5MjB9XFx1ezFGOTI3fVxcdXsxRjRDQ31cXHV7MUY1MzV9XFx1ezFGNDg1fVxcdXsxRjlEMH1cXHV7MUY0M0V9XFx1ezFGMzUyfVxcdXsxRjYxN31cXHV7MUY5MTF9XFx1ezFGMzBBfVxcdXsxRjkyRn1cXHV7MUY0Mzd9XFx1MjYwRVxcdXsxRjRBN31cXHV7MUY2MkZ9XFx1ezFGNDg2fVxcdXsxRjQ0Nn1cXHV7MUYzQTR9XFx1ezFGNjQ3fVxcdXsxRjM1MX1cXHUyNzQ0XFx1ezFGMzM0fVxcdXsxRjRBM31cXHV7MUY0Mzh9XFx1ezFGNDhDfVxcdXsxRjRDRH1cXHV7MUY5NDB9XFx1ezFGOTIyfVxcdXsxRjQ0NX1cXHV7MUY0QTF9XFx1ezFGNEE5fVxcdXsxRjQ1MH1cXHV7MUY0Rjh9XFx1ezFGNDdCfVxcdXsxRjkxMH1cXHV7MUY5MkV9XFx1ezFGM0JDfVxcdXsxRjk3NX1cXHV7MUY2QTl9XFx1ezFGMzRFfVxcdXsxRjM0QX1cXHV7MUY0N0N9XFx1ezFGNDhEfVxcdXsxRjRFM31cXHV7MUY5NDJ9XCIpLHVzPV9lLnJlZHVjZSgocixlLHQpPT4oclt0XT1lLHIpLFtdKSxscz1fZS5yZWR1Y2UoKHIsZSx0KT0+KHJbZS5jb2RlUG9pbnRBdCgwKV09dCxyKSxbXSk7ZnVuY3Rpb24gZHMocil7cmV0dXJuIHIucmVkdWNlKChlLHQpPT4oZSs9dXNbdF0sZSksXCJcIil9ZnVuY3Rpb24gZ3Mocil7Y29uc3QgZT1bXTtmb3IoY29uc3QgdCBvZiByKXtjb25zdCBpPWxzW3QuY29kZVBvaW50QXQoMCldO2lmKGk9PT12b2lkIDApdGhyb3cgbmV3IEVycm9yKGBOb24tYmFzZTI1NmVtb2ppIGNoYXJhY3RlcjogJHt0fWApO2UucHVzaChpKX1yZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZSl9Y29uc3QgcHM9ayh7cHJlZml4OlwiXFx1ezFGNjgwfVwiLG5hbWU6XCJiYXNlMjU2ZW1vamlcIixlbmNvZGU6ZHMsZGVjb2RlOmdzfSk7dmFyIERzPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGJhc2UyNTZlbW9qaTpwc30pLHlzPVNlLFJlPTEyOCxicz0xMjcsbXM9fmJzLEVzPU1hdGgucG93KDIsMzEpO2Z1bmN0aW9uIFNlKHIsZSx0KXtlPWV8fFtdLHQ9dHx8MDtmb3IodmFyIGk9dDtyPj1FczspZVt0KytdPXImMjU1fFJlLHIvPTEyODtmb3IoO3ImbXM7KWVbdCsrXT1yJjI1NXxSZSxyPj4+PTc7cmV0dXJuIGVbdF09cnwwLFNlLmJ5dGVzPXQtaSsxLGV9dmFyIGZzPWllLHdzPTEyOCxUZT0xMjc7ZnVuY3Rpb24gaWUocixpKXt2YXIgdD0wLGk9aXx8MCxzPTAsbj1pLGEsbz1yLmxlbmd0aDtkb3tpZihuPj1vKXRocm93IGllLmJ5dGVzPTAsbmV3IFJhbmdlRXJyb3IoXCJDb3VsZCBub3QgZGVjb2RlIHZhcmludFwiKTthPXJbbisrXSx0Kz1zPDI4PyhhJlRlKTw8czooYSZUZSkqTWF0aC5wb3coMixzKSxzKz03fXdoaWxlKGE+PXdzKTtyZXR1cm4gaWUuYnl0ZXM9bi1pLHR9dmFyIHZzPU1hdGgucG93KDIsNyksSXM9TWF0aC5wb3coMiwxNCksQ3M9TWF0aC5wb3coMiwyMSksX3M9TWF0aC5wb3coMiwyOCksUnM9TWF0aC5wb3coMiwzNSksU3M9TWF0aC5wb3coMiw0MiksVHM9TWF0aC5wb3coMiw0OSksUHM9TWF0aC5wb3coMiw1NikseHM9TWF0aC5wb3coMiw2MyksT3M9ZnVuY3Rpb24ocil7cmV0dXJuIHI8dnM/MTpyPElzPzI6cjxDcz8zOnI8X3M/NDpyPFJzPzU6cjxTcz82OnI8VHM/NzpyPFBzPzg6cjx4cz85OjEwfSxBcz17ZW5jb2RlOnlzLGRlY29kZTpmcyxlbmNvZGluZ0xlbmd0aDpPc30sUGU9QXM7Y29uc3QgeGU9KHIsZSx0PTApPT4oUGUuZW5jb2RlKHIsZSx0KSxlKSxPZT1yPT5QZS5lbmNvZGluZ0xlbmd0aChyKSxzZT0ocixlKT0+e2NvbnN0IHQ9ZS5ieXRlTGVuZ3RoLGk9T2Uocikscz1pK09lKHQpLG49bmV3IFVpbnQ4QXJyYXkocyt0KTtyZXR1cm4geGUocixuLDApLHhlKHQsbixpKSxuLnNldChlLHMpLG5ldyB6cyhyLHQsZSxuKX07Y2xhc3MgenN7Y29uc3RydWN0b3IoZSx0LGkscyl7dGhpcy5jb2RlPWUsdGhpcy5zaXplPXQsdGhpcy5kaWdlc3Q9aSx0aGlzLmJ5dGVzPXN9fWNvbnN0IEFlPSh7bmFtZTpyLGNvZGU6ZSxlbmNvZGU6dH0pPT5uZXcgTnMocixlLHQpO2NsYXNzIE5ze2NvbnN0cnVjdG9yKGUsdCxpKXt0aGlzLm5hbWU9ZSx0aGlzLmNvZGU9dCx0aGlzLmVuY29kZT1pfWRpZ2VzdChlKXtpZihlIGluc3RhbmNlb2YgVWludDhBcnJheSl7Y29uc3QgdD10aGlzLmVuY29kZShlKTtyZXR1cm4gdCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk/c2UodGhpcy5jb2RlLHQpOnQudGhlbihpPT5zZSh0aGlzLmNvZGUsaSkpfWVsc2UgdGhyb3cgRXJyb3IoXCJVbmtub3duIHR5cGUsIG11c3QgYmUgYmluYXJ5IHR5cGVcIil9fWNvbnN0IHplPXI9PmFzeW5jIGU9Pm5ldyBVaW50OEFycmF5KGF3YWl0IGNyeXB0by5zdWJ0bGUuZGlnZXN0KHIsZSkpLFVzPUFlKHtuYW1lOlwic2hhMi0yNTZcIixjb2RlOjE4LGVuY29kZTp6ZShcIlNIQS0yNTZcIil9KSxMcz1BZSh7bmFtZTpcInNoYTItNTEyXCIsY29kZToxOSxlbmNvZGU6emUoXCJTSEEtNTEyXCIpfSk7dmFyIEZzPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLHNoYTI1NjpVcyxzaGE1MTI6THN9KTtjb25zdCBOZT0wLE1zPVwiaWRlbnRpdHlcIixVZT1JZSxLcz1yPT5zZShOZSxVZShyKSksJHM9e2NvZGU6TmUsbmFtZTpNcyxlbmNvZGU6VWUsZGlnZXN0OktzfTt2YXIga3M9T2JqZWN0LmZyZWV6ZSh7X19wcm90b19fOm51bGwsaWRlbnRpdHk6JHN9KTtuZXcgVGV4dEVuY29kZXIsbmV3IFRleHREZWNvZGVyO2NvbnN0IExlPXsuLi56aSwuLi5VaSwuLi5GaSwuLi5LaSwuLi5CaSwuLi5aaSwuLi50cywuLi5ycywuLi5jcywuLi5Ec307KHsuLi5GcywuLi5rc30pO2Z1bmN0aW9uIEJzKHI9MCl7cmV0dXJuIGdsb2JhbFRoaXMuQnVmZmVyIT1udWxsJiZnbG9iYWxUaGlzLkJ1ZmZlci5hbGxvY1Vuc2FmZSE9bnVsbD9nbG9iYWxUaGlzLkJ1ZmZlci5hbGxvY1Vuc2FmZShyKTpuZXcgVWludDhBcnJheShyKX1mdW5jdGlvbiBGZShyLGUsdCxpKXtyZXR1cm57bmFtZTpyLHByZWZpeDplLGVuY29kZXI6e25hbWU6cixwcmVmaXg6ZSxlbmNvZGU6dH0sZGVjb2Rlcjp7ZGVjb2RlOml9fX1jb25zdCBNZT1GZShcInV0ZjhcIixcInVcIixyPT5cInVcIituZXcgVGV4dERlY29kZXIoXCJ1dGY4XCIpLmRlY29kZShyKSxyPT5uZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoci5zdWJzdHJpbmcoMSkpKSxyZT1GZShcImFzY2lpXCIsXCJhXCIscj0+e2xldCBlPVwiYVwiO2ZvcihsZXQgdD0wO3Q8ci5sZW5ndGg7dCsrKWUrPVN0cmluZy5mcm9tQ2hhckNvZGUoclt0XSk7cmV0dXJuIGV9LHI9PntyPXIuc3Vic3RyaW5nKDEpO2NvbnN0IGU9QnMoci5sZW5ndGgpO2ZvcihsZXQgdD0wO3Q8ci5sZW5ndGg7dCsrKWVbdF09ci5jaGFyQ29kZUF0KHQpO3JldHVybiBlfSksanM9e3V0Zjg6TWUsXCJ1dGYtOFwiOk1lLGhleDpMZS5iYXNlMTYsbGF0aW4xOnJlLGFzY2lpOnJlLGJpbmFyeTpyZSwuLi5MZX07ZnVuY3Rpb24gVnMocixlPVwidXRmOFwiKXtjb25zdCB0PWpzW2VdO2lmKCF0KXRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZW5jb2RpbmcgXCIke2V9XCJgKTtyZXR1cm4oZT09PVwidXRmOFwifHxlPT09XCJ1dGYtOFwiKSYmZ2xvYmFsVGhpcy5CdWZmZXIhPW51bGwmJmdsb2JhbFRoaXMuQnVmZmVyLmZyb20hPW51bGw/Z2xvYmFsVGhpcy5CdWZmZXIuZnJvbShyLFwidXRmOFwiKTp0LmRlY29kZXIuZGVjb2RlKGAke3QucHJlZml4fSR7cn1gKX1jb25zdCBuZT1cIndjXCIsS2U9MixCPVwiY29yZVwiLFA9YCR7bmV9QCR7Mn06JHtCfTpgLCRlPXtuYW1lOkIsbG9nZ2VyOlwiZXJyb3JcIn0sa2U9e2RhdGFiYXNlOlwiOm1lbW9yeTpcIn0sQmU9XCJjcnlwdG9cIixhZT1cImNsaWVudF9lZDI1NTE5X3NlZWRcIixqZT16LFZlPVwia2V5Y2hhaW5cIixxZT1cIjAuM1wiLEdlPVwibWVzc2FnZXNcIixZZT1cIjAuM1wiLEplPWxpLEhlPVwicHVibGlzaGVyXCIsWGU9XCJpcm5cIixXZT1cImVycm9yXCIsWmU9XCJ3c3M6Ly9yZWxheS53YWxsZXRjb25uZWN0LmNvbVwiLFFlPVwicmVsYXllclwiLHk9e21lc3NhZ2U6XCJyZWxheWVyX21lc3NhZ2VcIixjb25uZWN0OlwicmVsYXllcl9jb25uZWN0XCIsZGlzY29ubmVjdDpcInJlbGF5ZXJfZGlzY29ubmVjdFwiLGVycm9yOlwicmVsYXllcl9lcnJvclwiLGNvbm5lY3Rpb25fc3RhbGxlZDpcInJlbGF5ZXJfY29ubmVjdGlvbl9zdGFsbGVkXCIsdHJhbnNwb3J0X2Nsb3NlZDpcInJlbGF5ZXJfdHJhbnNwb3J0X2Nsb3NlZFwifSxldD1cIl9zdWJzY3JpcHRpb25cIixNPXtwYXlsb2FkOlwicGF5bG9hZFwiLGNvbm5lY3Q6XCJjb25uZWN0XCIsZGlzY29ubmVjdDpcImRpc2Nvbm5lY3RcIixlcnJvcjpcImVycm9yXCJ9LG9lPWRpLHFzPXtkYXRhYmFzZTpcIjptZW1vcnk6XCJ9LHR0PVwiMi4xLjNcIixpdD1cIjAuM1wiLEk9e2NyZWF0ZWQ6XCJzdWJzY3JpcHRpb25fY3JlYXRlZFwiLGRlbGV0ZWQ6XCJzdWJzY3JpcHRpb25fZGVsZXRlZFwiLGV4cGlyZWQ6XCJzdWJzY3JpcHRpb25fZXhwaXJlZFwiLGRpc2FibGVkOlwic3Vic2NyaXB0aW9uX2Rpc2FibGVkXCIsc3luYzpcInN1YnNjcmlwdGlvbl9zeW5jXCIscmVzdWJzY3JpYmVkOlwic3Vic2NyaXB0aW9uX3Jlc3Vic2NyaWJlZFwifSxHcz10ZSxzdD1cInN1YnNjcmlwdGlvblwiLHJ0PVwiMC4zXCIsbnQ9Z2kqMWUzLGF0PVwicGFpcmluZ1wiLG90PVwiMC4zXCIsWXM9dGUsTj17d2NfcGFpcmluZ0RlbGV0ZTp7cmVxOnt0dGw6eixwcm9tcHQ6ITEsdGFnOjFlM30scmVzOnt0dGw6eixwcm9tcHQ6ITEsdGFnOjEwMDF9fSx3Y19wYWlyaW5nUGluZzp7cmVxOnt0dGw6eWUscHJvbXB0OiExLHRhZzoxMDAyfSxyZXM6e3R0bDp5ZSxwcm9tcHQ6ITEsdGFnOjEwMDN9fSx1bnJlZ2lzdGVyZWRfbWV0aG9kOntyZXE6e3R0bDp6LHByb21wdDohMSx0YWc6MH0scmVzOnt0dGw6eixwcm9tcHQ6ITEsdGFnOjB9fX0sQz17Y3JlYXRlZDpcImhpc3RvcnlfY3JlYXRlZFwiLHVwZGF0ZWQ6XCJoaXN0b3J5X3VwZGF0ZWRcIixkZWxldGVkOlwiaGlzdG9yeV9kZWxldGVkXCIsc3luYzpcImhpc3Rvcnlfc3luY1wifSxodD1cImhpc3RvcnlcIixjdD1cIjAuM1wiLHV0PVwiZXhwaXJlclwiLG09e2NyZWF0ZWQ6XCJleHBpcmVyX2NyZWF0ZWRcIixkZWxldGVkOlwiZXhwaXJlcl9kZWxldGVkXCIsZXhwaXJlZDpcImV4cGlyZXJfZXhwaXJlZFwiLHN5bmM6XCJleHBpcmVyX3N5bmNcIn0sbHQ9XCIwLjNcIixKcz16O2NsYXNzIGR0e2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5jb3JlPWUsdGhpcy5sb2dnZXI9dCx0aGlzLmtleWNoYWluPW5ldyBNYXAsdGhpcy5uYW1lPVZlLHRoaXMudmVyc2lvbj1xZSx0aGlzLmluaXRpYWxpemVkPSExLHRoaXMuc3RvcmFnZVByZWZpeD1QLHRoaXMuaW5pdD1hc3luYygpPT57aWYoIXRoaXMuaW5pdGlhbGl6ZWQpe2NvbnN0IGk9YXdhaXQgdGhpcy5nZXRLZXlDaGFpbigpO3R5cGVvZiBpPFwidVwiJiYodGhpcy5rZXljaGFpbj1pKSx0aGlzLmluaXRpYWxpemVkPSEwfX0sdGhpcy5oYXM9aT0+KHRoaXMuaXNJbml0aWFsaXplZCgpLHRoaXMua2V5Y2hhaW4uaGFzKGkpKSx0aGlzLnNldD1hc3luYyhpLHMpPT57dGhpcy5pc0luaXRpYWxpemVkKCksdGhpcy5rZXljaGFpbi5zZXQoaSxzKSxhd2FpdCB0aGlzLnBlcnNpc3QoKX0sdGhpcy5nZXQ9aT0+e3RoaXMuaXNJbml0aWFsaXplZCgpO2NvbnN0IHM9dGhpcy5rZXljaGFpbi5nZXQoaSk7aWYodHlwZW9mIHM+XCJ1XCIpe2NvbnN0e21lc3NhZ2U6bn09YyhcIk5PX01BVENISU5HX0tFWVwiLGAke3RoaXMubmFtZX06ICR7aX1gKTt0aHJvdyBuZXcgRXJyb3Iobil9cmV0dXJuIHN9LHRoaXMuZGVsPWFzeW5jIGk9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKSx0aGlzLmtleWNoYWluLmRlbGV0ZShpKSxhd2FpdCB0aGlzLnBlcnNpc3QoKX0sdGhpcy5jb3JlPWUsdGhpcy5sb2dnZXI9dyh0LHRoaXMubmFtZSl9Z2V0IGNvbnRleHQoKXtyZXR1cm4gdih0aGlzLmxvZ2dlcil9Z2V0IHN0b3JhZ2VLZXkoKXtyZXR1cm4gdGhpcy5zdG9yYWdlUHJlZml4K3RoaXMudmVyc2lvbitcIi8vXCIrdGhpcy5uYW1lfWFzeW5jIHNldEtleUNoYWluKGUpe2F3YWl0IHRoaXMuY29yZS5zdG9yYWdlLnNldEl0ZW0odGhpcy5zdG9yYWdlS2V5LGxlKGUpKX1hc3luYyBnZXRLZXlDaGFpbigpe2NvbnN0IGU9YXdhaXQgdGhpcy5jb3JlLnN0b3JhZ2UuZ2V0SXRlbSh0aGlzLnN0b3JhZ2VLZXkpO3JldHVybiB0eXBlb2YgZTxcInVcIj9kZShlKTp2b2lkIDB9YXN5bmMgcGVyc2lzdCgpe2F3YWl0IHRoaXMuc2V0S2V5Q2hhaW4odGhpcy5rZXljaGFpbil9aXNJbml0aWFsaXplZCgpe2lmKCF0aGlzLmluaXRpYWxpemVkKXtjb25zdHttZXNzYWdlOmV9PWMoXCJOT1RfSU5JVElBTElaRURcIix0aGlzLm5hbWUpO3Rocm93IG5ldyBFcnJvcihlKX19fWNsYXNzIGd0e2NvbnN0cnVjdG9yKGUsdCxpKXt0aGlzLmNvcmU9ZSx0aGlzLmxvZ2dlcj10LHRoaXMubmFtZT1CZSx0aGlzLmluaXRpYWxpemVkPSExLHRoaXMuaW5pdD1hc3luYygpPT57dGhpcy5pbml0aWFsaXplZHx8KGF3YWl0IHRoaXMua2V5Y2hhaW4uaW5pdCgpLHRoaXMuaW5pdGlhbGl6ZWQ9ITApfSx0aGlzLmhhc0tleXM9cz0+KHRoaXMuaXNJbml0aWFsaXplZCgpLHRoaXMua2V5Y2hhaW4uaGFzKHMpKSx0aGlzLmdldENsaWVudElkPWFzeW5jKCk9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKTtjb25zdCBzPWF3YWl0IHRoaXMuZ2V0Q2xpZW50U2VlZCgpLG49JC5nZW5lcmF0ZUtleVBhaXIocyk7cmV0dXJuICQuZW5jb2RlSXNzKG4ucHVibGljS2V5KX0sdGhpcy5nZW5lcmF0ZUtleVBhaXI9KCk9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKTtjb25zdCBzPVZ0KCk7cmV0dXJuIHRoaXMuc2V0UHJpdmF0ZUtleShzLnB1YmxpY0tleSxzLnByaXZhdGVLZXkpfSx0aGlzLnNpZ25KV1Q9YXN5bmMgcz0+e3RoaXMuaXNJbml0aWFsaXplZCgpO2NvbnN0IG49YXdhaXQgdGhpcy5nZXRDbGllbnRTZWVkKCksYT0kLmdlbmVyYXRlS2V5UGFpcihuKSxvPVkoKSxoPWplO3JldHVybiBhd2FpdCAkLnNpZ25KV1QobyxzLGgsYSl9LHRoaXMuZ2VuZXJhdGVTaGFyZWRLZXk9KHMsbixhKT0+e3RoaXMuaXNJbml0aWFsaXplZCgpO2NvbnN0IG89dGhpcy5nZXRQcml2YXRlS2V5KHMpLGg9cXQobyxuKTtyZXR1cm4gdGhpcy5zZXRTeW1LZXkoaCxhKX0sdGhpcy5zZXRTeW1LZXk9YXN5bmMocyxuKT0+e3RoaXMuaXNJbml0aWFsaXplZCgpO2NvbnN0IGE9bnx8R3Qocyk7cmV0dXJuIGF3YWl0IHRoaXMua2V5Y2hhaW4uc2V0KGEscyksYX0sdGhpcy5kZWxldGVLZXlQYWlyPWFzeW5jIHM9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKSxhd2FpdCB0aGlzLmtleWNoYWluLmRlbChzKX0sdGhpcy5kZWxldGVTeW1LZXk9YXN5bmMgcz0+e3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMua2V5Y2hhaW4uZGVsKHMpfSx0aGlzLmVuY29kZT1hc3luYyhzLG4sYSk9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKTtjb25zdCBvPVl0KGEpLGg9QnQobik7aWYoZ2Uobykpe2NvbnN0IFU9by5zZW5kZXJQdWJsaWNLZXkscT1vLnJlY2VpdmVyUHVibGljS2V5O3M9YXdhaXQgdGhpcy5nZW5lcmF0ZVNoYXJlZEtleShVLHEpfWNvbnN0IGw9dGhpcy5nZXRTeW1LZXkocykse3R5cGU6ZCxzZW5kZXJQdWJsaWNLZXk6Z309bztyZXR1cm4gSnQoe3R5cGU6ZCxzeW1LZXk6bCxtZXNzYWdlOmgsc2VuZGVyUHVibGljS2V5Omd9KX0sdGhpcy5kZWNvZGU9YXN5bmMocyxuLGEpPT57dGhpcy5pc0luaXRpYWxpemVkKCk7Y29uc3Qgbz1IdChuLGEpO2lmKGdlKG8pKXtjb25zdCBkPW8ucmVjZWl2ZXJQdWJsaWNLZXksZz1vLnNlbmRlclB1YmxpY0tleTtzPWF3YWl0IHRoaXMuZ2VuZXJhdGVTaGFyZWRLZXkoZCxnKX1jb25zdCBoPXRoaXMuZ2V0U3ltS2V5KHMpLGw9WHQoe3N5bUtleTpoLGVuY29kZWQ6bn0pO3JldHVybiBqdChsKX0sdGhpcy5jb3JlPWUsdGhpcy5sb2dnZXI9dyh0LHRoaXMubmFtZSksdGhpcy5rZXljaGFpbj1pfHxuZXcgZHQodGhpcy5jb3JlLHRoaXMubG9nZ2VyKX1nZXQgY29udGV4dCgpe3JldHVybiB2KHRoaXMubG9nZ2VyKX1nZXRQYXlsb2FkVHlwZShlKXtjb25zdCB0PVd0KGUpO3JldHVybiBadCh0LnR5cGUpfWFzeW5jIHNldFByaXZhdGVLZXkoZSx0KXtyZXR1cm4gYXdhaXQgdGhpcy5rZXljaGFpbi5zZXQoZSx0KSxlfWdldFByaXZhdGVLZXkoZSl7cmV0dXJuIHRoaXMua2V5Y2hhaW4uZ2V0KGUpfWFzeW5jIGdldENsaWVudFNlZWQoKXtsZXQgZT1cIlwiO3RyeXtlPXRoaXMua2V5Y2hhaW4uZ2V0KGFlKX1jYXRjaHtlPVkoKSxhd2FpdCB0aGlzLmtleWNoYWluLnNldChhZSxlKX1yZXR1cm4gVnMoZSxcImJhc2UxNlwiKX1nZXRTeW1LZXkoZSl7cmV0dXJuIHRoaXMua2V5Y2hhaW4uZ2V0KGUpfWlzSW5pdGlhbGl6ZWQoKXtpZighdGhpcy5pbml0aWFsaXplZCl7Y29uc3R7bWVzc2FnZTplfT1jKFwiTk9UX0lOSVRJQUxJWkVEXCIsdGhpcy5uYW1lKTt0aHJvdyBuZXcgRXJyb3IoZSl9fX1jbGFzcyBwdCBleHRlbmRzIE50e2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoZSx0KSx0aGlzLmxvZ2dlcj1lLHRoaXMuY29yZT10LHRoaXMubWVzc2FnZXM9bmV3IE1hcCx0aGlzLm5hbWU9R2UsdGhpcy52ZXJzaW9uPVllLHRoaXMuaW5pdGlhbGl6ZWQ9ITEsdGhpcy5zdG9yYWdlUHJlZml4PVAsdGhpcy5pbml0PWFzeW5jKCk9PntpZighdGhpcy5pbml0aWFsaXplZCl7dGhpcy5sb2dnZXIudHJhY2UoXCJJbml0aWFsaXplZFwiKTt0cnl7Y29uc3QgaT1hd2FpdCB0aGlzLmdldFJlbGF5ZXJNZXNzYWdlcygpO3R5cGVvZiBpPFwidVwiJiYodGhpcy5tZXNzYWdlcz1pKSx0aGlzLmxvZ2dlci5kZWJ1ZyhgU3VjY2Vzc2Z1bGx5IFJlc3RvcmVkIHJlY29yZHMgZm9yICR7dGhpcy5uYW1lfWApLHRoaXMubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwicmVzdG9yZVwiLHNpemU6dGhpcy5tZXNzYWdlcy5zaXplfSl9Y2F0Y2goaSl7dGhpcy5sb2dnZXIuZGVidWcoYEZhaWxlZCB0byBSZXN0b3JlIHJlY29yZHMgZm9yICR7dGhpcy5uYW1lfWApLHRoaXMubG9nZ2VyLmVycm9yKGkpfWZpbmFsbHl7dGhpcy5pbml0aWFsaXplZD0hMH19fSx0aGlzLnNldD1hc3luYyhpLHMpPT57dGhpcy5pc0luaXRpYWxpemVkKCk7Y29uc3Qgbj1KKHMpO2xldCBhPXRoaXMubWVzc2FnZXMuZ2V0KGkpO3JldHVybiB0eXBlb2YgYT5cInVcIiYmKGE9e30pLHR5cGVvZiBhW25dPFwidVwifHwoYVtuXT1zLHRoaXMubWVzc2FnZXMuc2V0KGksYSksYXdhaXQgdGhpcy5wZXJzaXN0KCkpLG59LHRoaXMuZ2V0PWk9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKTtsZXQgcz10aGlzLm1lc3NhZ2VzLmdldChpKTtyZXR1cm4gdHlwZW9mIHM+XCJ1XCImJihzPXt9KSxzfSx0aGlzLmhhcz0oaSxzKT0+e3RoaXMuaXNJbml0aWFsaXplZCgpO2NvbnN0IG49dGhpcy5nZXQoaSksYT1KKHMpO3JldHVybiB0eXBlb2YgblthXTxcInVcIn0sdGhpcy5kZWw9YXN5bmMgaT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLHRoaXMubWVzc2FnZXMuZGVsZXRlKGkpLGF3YWl0IHRoaXMucGVyc2lzdCgpfSx0aGlzLmxvZ2dlcj13KGUsdGhpcy5uYW1lKSx0aGlzLmNvcmU9dH1nZXQgY29udGV4dCgpe3JldHVybiB2KHRoaXMubG9nZ2VyKX1nZXQgc3RvcmFnZUtleSgpe3JldHVybiB0aGlzLnN0b3JhZ2VQcmVmaXgrdGhpcy52ZXJzaW9uK1wiLy9cIit0aGlzLm5hbWV9YXN5bmMgc2V0UmVsYXllck1lc3NhZ2VzKGUpe2F3YWl0IHRoaXMuY29yZS5zdG9yYWdlLnNldEl0ZW0odGhpcy5zdG9yYWdlS2V5LGxlKGUpKX1hc3luYyBnZXRSZWxheWVyTWVzc2FnZXMoKXtjb25zdCBlPWF3YWl0IHRoaXMuY29yZS5zdG9yYWdlLmdldEl0ZW0odGhpcy5zdG9yYWdlS2V5KTtyZXR1cm4gdHlwZW9mIGU8XCJ1XCI/ZGUoZSk6dm9pZCAwfWFzeW5jIHBlcnNpc3QoKXthd2FpdCB0aGlzLnNldFJlbGF5ZXJNZXNzYWdlcyh0aGlzLm1lc3NhZ2VzKX1pc0luaXRpYWxpemVkKCl7aWYoIXRoaXMuaW5pdGlhbGl6ZWQpe2NvbnN0e21lc3NhZ2U6ZX09YyhcIk5PVF9JTklUSUFMSVpFRFwiLHRoaXMubmFtZSk7dGhyb3cgbmV3IEVycm9yKGUpfX19Y2xhc3MgSHMgZXh0ZW5kcyBVdHtjb25zdHJ1Y3RvcihlLHQpe3N1cGVyKGUsdCksdGhpcy5yZWxheWVyPWUsdGhpcy5sb2dnZXI9dCx0aGlzLmV2ZW50cz1uZXcgQSx0aGlzLm5hbWU9SGUsdGhpcy5xdWV1ZT1uZXcgTWFwLHRoaXMucHVibGlzaFRpbWVvdXQ9MWU0LHRoaXMucHVibGlzaD1hc3luYyhpLHMsbik9Pnt0aGlzLmxvZ2dlci5kZWJ1ZyhcIlB1Ymxpc2hpbmcgUGF5bG9hZFwiKSx0aGlzLmxvZ2dlci50cmFjZSh7dHlwZTpcIm1ldGhvZFwiLG1ldGhvZDpcInB1Ymxpc2hcIixwYXJhbXM6e3RvcGljOmksbWVzc2FnZTpzLG9wdHM6bn19KTt0cnl7Y29uc3QgYT1uPy50dGx8fEplLG89SChuKSxoPW4/LnByb21wdHx8ITEsbD1uPy50YWd8fDAsZD17dG9waWM6aSxtZXNzYWdlOnMsb3B0czp7dHRsOmEscmVsYXk6byxwcm9tcHQ6aCx0YWc6bH19LGc9SihzKTt0aGlzLnF1ZXVlLnNldChnLGQpO3RyeXthd2FpdCBhd2FpdCBwZSh0aGlzLnJwY1B1Ymxpc2goaSxzLGEsbyxoLGwpLHRoaXMucHVibGlzaFRpbWVvdXQpfWNhdGNoe3RoaXMubG9nZ2VyLmRlYnVnKFwiUHVibGlzaGluZyBQYXlsb2FkIHN0YWxsZWRcIiksdGhpcy5yZWxheWVyLmV2ZW50cy5lbWl0KHkuY29ubmVjdGlvbl9zdGFsbGVkKTtyZXR1cm59dGhpcy5vblB1Ymxpc2goZyxkKSx0aGlzLmxvZ2dlci5kZWJ1ZyhcIlN1Y2Nlc3NmdWxseSBQdWJsaXNoZWQgUGF5bG9hZFwiKSx0aGlzLmxvZ2dlci50cmFjZSh7dHlwZTpcIm1ldGhvZFwiLG1ldGhvZDpcInB1Ymxpc2hcIixwYXJhbXM6e3RvcGljOmksbWVzc2FnZTpzLG9wdHM6bn19KX1jYXRjaChhKXt0aHJvdyB0aGlzLmxvZ2dlci5kZWJ1ZyhcIkZhaWxlZCB0byBQdWJsaXNoIFBheWxvYWRcIiksdGhpcy5sb2dnZXIuZXJyb3IoYSksYX19LHRoaXMub249KGkscyk9Pnt0aGlzLmV2ZW50cy5vbihpLHMpfSx0aGlzLm9uY2U9KGkscyk9Pnt0aGlzLmV2ZW50cy5vbmNlKGkscyl9LHRoaXMub2ZmPShpLHMpPT57dGhpcy5ldmVudHMub2ZmKGkscyl9LHRoaXMucmVtb3ZlTGlzdGVuZXI9KGkscyk9Pnt0aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihpLHMpfSx0aGlzLnJlbGF5ZXI9ZSx0aGlzLmxvZ2dlcj13KHQsdGhpcy5uYW1lKSx0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKX1nZXQgY29udGV4dCgpe3JldHVybiB2KHRoaXMubG9nZ2VyKX1ycGNQdWJsaXNoKGUsdCxpLHMsbixhKXt2YXIgbyxoLGwsZDtjb25zdCBnPXttZXRob2Q6WChzLnByb3RvY29sKS5wdWJsaXNoLHBhcmFtczp7dG9waWM6ZSxtZXNzYWdlOnQsdHRsOmkscHJvbXB0Om4sdGFnOmF9fTtyZXR1cm4gVygobz1nLnBhcmFtcyk9PW51bGw/dm9pZCAwOm8ucHJvbXB0KSYmKChoPWcucGFyYW1zKT09bnVsbHx8ZGVsZXRlIGgucHJvbXB0KSxXKChsPWcucGFyYW1zKT09bnVsbD92b2lkIDA6bC50YWcpJiYoKGQ9Zy5wYXJhbXMpPT1udWxsfHxkZWxldGUgZC50YWcpLHRoaXMubG9nZ2VyLmRlYnVnKFwiT3V0Z29pbmcgUmVsYXkgUGF5bG9hZFwiKSx0aGlzLmxvZ2dlci50cmFjZSh7dHlwZTpcIm1lc3NhZ2VcIixkaXJlY3Rpb246XCJvdXRnb2luZ1wiLHJlcXVlc3Q6Z30pLHRoaXMucmVsYXllci5wcm92aWRlci5yZXF1ZXN0KGcpfW9uUHVibGlzaChlLHQpe3RoaXMucXVldWUuZGVsZXRlKGUpfWNoZWNrUXVldWUoKXt0aGlzLnF1ZXVlLmZvckVhY2goYXN5bmMgZT0+e2NvbnN0e3RvcGljOnQsbWVzc2FnZTppLG9wdHM6c309ZTthd2FpdCB0aGlzLnB1Ymxpc2godCxpLHMpfSl9cmVnaXN0ZXJFdmVudExpc3RlbmVycygpe3RoaXMucmVsYXllci5jb3JlLmhlYXJ0YmVhdC5vbihHLnB1bHNlLCgpPT57dGhpcy5jaGVja1F1ZXVlKCl9KX19Y2xhc3MgWHN7Y29uc3RydWN0b3IoKXt0aGlzLm1hcD1uZXcgTWFwLHRoaXMuc2V0PShlLHQpPT57Y29uc3QgaT10aGlzLmdldChlKTt0aGlzLmV4aXN0cyhlLHQpfHx0aGlzLm1hcC5zZXQoZSxbLi4uaSx0XSl9LHRoaXMuZ2V0PWU9PnRoaXMubWFwLmdldChlKXx8W10sdGhpcy5leGlzdHM9KGUsdCk9PnRoaXMuZ2V0KGUpLmluY2x1ZGVzKHQpLHRoaXMuZGVsZXRlPShlLHQpPT57aWYodHlwZW9mIHQ+XCJ1XCIpe3RoaXMubWFwLmRlbGV0ZShlKTtyZXR1cm59aWYoIXRoaXMubWFwLmhhcyhlKSlyZXR1cm47Y29uc3QgaT10aGlzLmdldChlKTtpZighdGhpcy5leGlzdHMoZSx0KSlyZXR1cm47Y29uc3Qgcz1pLmZpbHRlcihuPT5uIT09dCk7aWYoIXMubGVuZ3RoKXt0aGlzLm1hcC5kZWxldGUoZSk7cmV0dXJufXRoaXMubWFwLnNldChlLHMpfSx0aGlzLmNsZWFyPSgpPT57dGhpcy5tYXAuY2xlYXIoKX19Z2V0IHRvcGljcygpe3JldHVybiBBcnJheS5mcm9tKHRoaXMubWFwLmtleXMoKSl9fXZhciBXcz1PYmplY3QuZGVmaW5lUHJvcGVydHksWnM9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMsUXM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMsRHQ9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxlcj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHRyPU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUseXQ9KHIsZSx0KT0+ZSBpbiByP1dzKHIsZSx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6dH0pOnJbZV09dCxqPShyLGUpPT57Zm9yKHZhciB0IGluIGV8fChlPXt9KSllci5jYWxsKGUsdCkmJnl0KHIsdCxlW3RdKTtpZihEdClmb3IodmFyIHQgb2YgRHQoZSkpdHIuY2FsbChlLHQpJiZ5dChyLHQsZVt0XSk7cmV0dXJuIHJ9LGhlPShyLGUpPT5acyhyLFFzKGUpKTtjbGFzcyBidCBleHRlbmRzIEx0e2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoZSx0KSx0aGlzLnJlbGF5ZXI9ZSx0aGlzLmxvZ2dlcj10LHRoaXMuc3Vic2NyaXB0aW9ucz1uZXcgTWFwLHRoaXMudG9waWNNYXA9bmV3IFhzLHRoaXMuZXZlbnRzPW5ldyBBLHRoaXMubmFtZT1zdCx0aGlzLnZlcnNpb249cnQsdGhpcy5wZW5kaW5nPW5ldyBNYXAsdGhpcy5jYWNoZWQ9W10sdGhpcy5pbml0aWFsaXplZD0hMSx0aGlzLnBlbmRpbmdTdWJzY3JpcHRpb25XYXRjaExhYmVsPVwicGVuZGluZ19zdWJfd2F0Y2hfbGFiZWxcIix0aGlzLnBlbmRpbmdTdWJJbnRlcnZhbD0yMCx0aGlzLnN0b3JhZ2VQcmVmaXg9UCx0aGlzLnN1YnNjcmliZVRpbWVvdXQ9MWU0LHRoaXMuaW5pdD1hc3luYygpPT57dGhpcy5pbml0aWFsaXplZHx8KHRoaXMubG9nZ2VyLnRyYWNlKFwiSW5pdGlhbGl6ZWRcIiksYXdhaXQgdGhpcy5yZXN0YXJ0KCksdGhpcy5yZWdpc3RlckV2ZW50TGlzdGVuZXJzKCksdGhpcy5vbkVuYWJsZSgpKX0sdGhpcy5zdWJzY3JpYmU9YXN5bmMoaSxzKT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLHRoaXMubG9nZ2VyLmRlYnVnKFwiU3Vic2NyaWJpbmcgVG9waWNcIiksdGhpcy5sb2dnZXIudHJhY2Uoe3R5cGU6XCJtZXRob2RcIixtZXRob2Q6XCJzdWJzY3JpYmVcIixwYXJhbXM6e3RvcGljOmksb3B0czpzfX0pO3RyeXtjb25zdCBuPUgocyksYT17dG9waWM6aSxyZWxheTpufTt0aGlzLnBlbmRpbmcuc2V0KGksYSk7Y29uc3Qgbz1hd2FpdCB0aGlzLnJwY1N1YnNjcmliZShpLG4pO3JldHVybiB0aGlzLm9uU3Vic2NyaWJlKG8sYSksdGhpcy5sb2dnZXIuZGVidWcoXCJTdWNjZXNzZnVsbHkgU3Vic2NyaWJlZCBUb3BpY1wiKSx0aGlzLmxvZ2dlci50cmFjZSh7dHlwZTpcIm1ldGhvZFwiLG1ldGhvZDpcInN1YnNjcmliZVwiLHBhcmFtczp7dG9waWM6aSxvcHRzOnN9fSksb31jYXRjaChuKXt0aHJvdyB0aGlzLmxvZ2dlci5kZWJ1ZyhcIkZhaWxlZCB0byBTdWJzY3JpYmUgVG9waWNcIiksdGhpcy5sb2dnZXIuZXJyb3Iobiksbn19LHRoaXMudW5zdWJzY3JpYmU9YXN5bmMoaSxzKT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLHR5cGVvZiBzPy5pZDxcInVcIj9hd2FpdCB0aGlzLnVuc3Vic2NyaWJlQnlJZChpLHMuaWQscyk6YXdhaXQgdGhpcy51bnN1YnNjcmliZUJ5VG9waWMoaSxzKX0sdGhpcy5pc1N1YnNjcmliZWQ9YXN5bmMgaT0+dGhpcy50b3BpY3MuaW5jbHVkZXMoaSk/ITA6YXdhaXQgbmV3IFByb21pc2UoKHMsbik9Pntjb25zdCBhPW5ldyBwaTthLnN0YXJ0KHRoaXMucGVuZGluZ1N1YnNjcmlwdGlvbldhdGNoTGFiZWwpO2NvbnN0IG89c2V0SW50ZXJ2YWwoKCk9PnshdGhpcy5wZW5kaW5nLmhhcyhpKSYmdGhpcy50b3BpY3MuaW5jbHVkZXMoaSkmJihjbGVhckludGVydmFsKG8pLGEuc3RvcCh0aGlzLnBlbmRpbmdTdWJzY3JpcHRpb25XYXRjaExhYmVsKSxzKCEwKSksYS5lbGFwc2VkKHRoaXMucGVuZGluZ1N1YnNjcmlwdGlvbldhdGNoTGFiZWwpPj1udCYmKGNsZWFySW50ZXJ2YWwobyksYS5zdG9wKHRoaXMucGVuZGluZ1N1YnNjcmlwdGlvbldhdGNoTGFiZWwpLG4oITEpKX0sdGhpcy5wZW5kaW5nU3ViSW50ZXJ2YWwpfSksdGhpcy5vbj0oaSxzKT0+e3RoaXMuZXZlbnRzLm9uKGkscyl9LHRoaXMub25jZT0oaSxzKT0+e3RoaXMuZXZlbnRzLm9uY2UoaSxzKX0sdGhpcy5vZmY9KGkscyk9Pnt0aGlzLmV2ZW50cy5vZmYoaSxzKX0sdGhpcy5yZW1vdmVMaXN0ZW5lcj0oaSxzKT0+e3RoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKGkscyl9LHRoaXMucmVzdGFydD1hc3luYygpPT57YXdhaXQgdGhpcy5yZXN0b3JlKCksYXdhaXQgdGhpcy5yZXNldCgpfSx0aGlzLnJlbGF5ZXI9ZSx0aGlzLmxvZ2dlcj13KHQsdGhpcy5uYW1lKX1nZXQgY29udGV4dCgpe3JldHVybiB2KHRoaXMubG9nZ2VyKX1nZXQgc3RvcmFnZUtleSgpe3JldHVybiB0aGlzLnN0b3JhZ2VQcmVmaXgrdGhpcy52ZXJzaW9uK1wiLy9cIit0aGlzLm5hbWV9Z2V0IGxlbmd0aCgpe3JldHVybiB0aGlzLnN1YnNjcmlwdGlvbnMuc2l6ZX1nZXQgaWRzKCl7cmV0dXJuIEFycmF5LmZyb20odGhpcy5zdWJzY3JpcHRpb25zLmtleXMoKSl9Z2V0IHZhbHVlcygpe3JldHVybiBBcnJheS5mcm9tKHRoaXMuc3Vic2NyaXB0aW9ucy52YWx1ZXMoKSl9Z2V0IHRvcGljcygpe3JldHVybiB0aGlzLnRvcGljTWFwLnRvcGljc31oYXNTdWJzY3JpcHRpb24oZSx0KXtsZXQgaT0hMTt0cnl7aT10aGlzLmdldFN1YnNjcmlwdGlvbihlKS50b3BpYz09PXR9Y2F0Y2h7fXJldHVybiBpfW9uRW5hYmxlKCl7dGhpcy5jYWNoZWQ9W10sdGhpcy5pbml0aWFsaXplZD0hMH1vbkRpc2FibGUoKXt0aGlzLmNhY2hlZD10aGlzLnZhbHVlcyx0aGlzLnN1YnNjcmlwdGlvbnMuY2xlYXIoKSx0aGlzLnRvcGljTWFwLmNsZWFyKCksdGhpcy5pbml0aWFsaXplZD0hMX1hc3luYyB1bnN1YnNjcmliZUJ5VG9waWMoZSx0KXtjb25zdCBpPXRoaXMudG9waWNNYXAuZ2V0KGUpO2F3YWl0IFByb21pc2UuYWxsKGkubWFwKGFzeW5jIHM9PmF3YWl0IHRoaXMudW5zdWJzY3JpYmVCeUlkKGUscyx0KSkpfWFzeW5jIHVuc3Vic2NyaWJlQnlJZChlLHQsaSl7dGhpcy5sb2dnZXIuZGVidWcoXCJVbnN1YnNjcmliaW5nIFRvcGljXCIpLHRoaXMubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwidW5zdWJzY3JpYmVcIixwYXJhbXM6e3RvcGljOmUsaWQ6dCxvcHRzOml9fSk7dHJ5e2NvbnN0IHM9SChpKTthd2FpdCB0aGlzLnJwY1Vuc3Vic2NyaWJlKGUsdCxzKTtjb25zdCBuPUwoXCJVU0VSX0RJU0NPTk5FQ1RFRFwiLGAke3RoaXMubmFtZX0sICR7ZX1gKTthd2FpdCB0aGlzLm9uVW5zdWJzY3JpYmUoZSx0LG4pLHRoaXMubG9nZ2VyLmRlYnVnKFwiU3VjY2Vzc2Z1bGx5IFVuc3Vic2NyaWJlZCBUb3BpY1wiKSx0aGlzLmxvZ2dlci50cmFjZSh7dHlwZTpcIm1ldGhvZFwiLG1ldGhvZDpcInVuc3Vic2NyaWJlXCIscGFyYW1zOnt0b3BpYzplLGlkOnQsb3B0czppfX0pfWNhdGNoKHMpe3Rocm93IHRoaXMubG9nZ2VyLmRlYnVnKFwiRmFpbGVkIHRvIFVuc3Vic2NyaWJlIFRvcGljXCIpLHRoaXMubG9nZ2VyLmVycm9yKHMpLHN9fWFzeW5jIHJwY1N1YnNjcmliZShlLHQpe2NvbnN0IGk9e21ldGhvZDpYKHQucHJvdG9jb2wpLnN1YnNjcmliZSxwYXJhbXM6e3RvcGljOmV9fTt0aGlzLmxvZ2dlci5kZWJ1ZyhcIk91dGdvaW5nIFJlbGF5IFBheWxvYWRcIiksdGhpcy5sb2dnZXIudHJhY2Uoe3R5cGU6XCJwYXlsb2FkXCIsZGlyZWN0aW9uOlwib3V0Z29pbmdcIixyZXF1ZXN0Oml9KTtsZXQgczt0cnl7cz1hd2FpdCBhd2FpdCBwZSh0aGlzLnJlbGF5ZXIucHJvdmlkZXIucmVxdWVzdChpKSx0aGlzLnN1YnNjcmliZVRpbWVvdXQpfWNhdGNoe3RoaXMubG9nZ2VyLmRlYnVnKFwiT3V0Z29pbmcgUmVsYXkgUGF5bG9hZCBzdGFsbGVkXCIpLHRoaXMucmVsYXllci5ldmVudHMuZW1pdCh5LmNvbm5lY3Rpb25fc3RhbGxlZCl9cmV0dXJuIHN9cnBjVW5zdWJzY3JpYmUoZSx0LGkpe2NvbnN0IHM9e21ldGhvZDpYKGkucHJvdG9jb2wpLnVuc3Vic2NyaWJlLHBhcmFtczp7dG9waWM6ZSxpZDp0fX07cmV0dXJuIHRoaXMubG9nZ2VyLmRlYnVnKFwiT3V0Z29pbmcgUmVsYXkgUGF5bG9hZFwiKSx0aGlzLmxvZ2dlci50cmFjZSh7dHlwZTpcInBheWxvYWRcIixkaXJlY3Rpb246XCJvdXRnb2luZ1wiLHJlcXVlc3Q6c30pLHRoaXMucmVsYXllci5wcm92aWRlci5yZXF1ZXN0KHMpfW9uU3Vic2NyaWJlKGUsdCl7dGhpcy5zZXRTdWJzY3JpcHRpb24oZSxoZShqKHt9LHQpLHtpZDplfSkpLHRoaXMucGVuZGluZy5kZWxldGUodC50b3BpYyl9b25SZXN1YnNjcmliZShlLHQpe3RoaXMuYWRkU3Vic2NyaXB0aW9uKGUsaGUoaih7fSx0KSx7aWQ6ZX0pKSx0aGlzLnBlbmRpbmcuZGVsZXRlKHQudG9waWMpfWFzeW5jIG9uVW5zdWJzY3JpYmUoZSx0LGkpe3RoaXMuZXZlbnRzLnJlbW92ZUFsbExpc3RlbmVycyh0KSx0aGlzLmhhc1N1YnNjcmlwdGlvbih0LGUpJiZ0aGlzLmRlbGV0ZVN1YnNjcmlwdGlvbih0LGkpLGF3YWl0IHRoaXMucmVsYXllci5tZXNzYWdlcy5kZWwoZSl9YXN5bmMgc2V0UmVsYXllclN1YnNjcmlwdGlvbnMoZSl7YXdhaXQgdGhpcy5yZWxheWVyLmNvcmUuc3RvcmFnZS5zZXRJdGVtKHRoaXMuc3RvcmFnZUtleSxlKX1hc3luYyBnZXRSZWxheWVyU3Vic2NyaXB0aW9ucygpe3JldHVybiBhd2FpdCB0aGlzLnJlbGF5ZXIuY29yZS5zdG9yYWdlLmdldEl0ZW0odGhpcy5zdG9yYWdlS2V5KX1zZXRTdWJzY3JpcHRpb24oZSx0KXt0aGlzLnN1YnNjcmlwdGlvbnMuaGFzKGUpfHwodGhpcy5sb2dnZXIuZGVidWcoXCJTZXR0aW5nIHN1YnNjcmlwdGlvblwiKSx0aGlzLmxvZ2dlci50cmFjZSh7dHlwZTpcIm1ldGhvZFwiLG1ldGhvZDpcInNldFN1YnNjcmlwdGlvblwiLGlkOmUsc3Vic2NyaXB0aW9uOnR9KSx0aGlzLmFkZFN1YnNjcmlwdGlvbihlLHQpKX1hZGRTdWJzY3JpcHRpb24oZSx0KXt0aGlzLnN1YnNjcmlwdGlvbnMuc2V0KGUsaih7fSx0KSksdGhpcy50b3BpY01hcC5zZXQodC50b3BpYyxlKSx0aGlzLmV2ZW50cy5lbWl0KEkuY3JlYXRlZCx0KX1nZXRTdWJzY3JpcHRpb24oZSl7dGhpcy5sb2dnZXIuZGVidWcoXCJHZXR0aW5nIHN1YnNjcmlwdGlvblwiKSx0aGlzLmxvZ2dlci50cmFjZSh7dHlwZTpcIm1ldGhvZFwiLG1ldGhvZDpcImdldFN1YnNjcmlwdGlvblwiLGlkOmV9KTtjb25zdCB0PXRoaXMuc3Vic2NyaXB0aW9ucy5nZXQoZSk7aWYoIXQpe2NvbnN0e21lc3NhZ2U6aX09YyhcIk5PX01BVENISU5HX0tFWVwiLGAke3RoaXMubmFtZX06ICR7ZX1gKTt0aHJvdyBuZXcgRXJyb3IoaSl9cmV0dXJuIHR9ZGVsZXRlU3Vic2NyaXB0aW9uKGUsdCl7dGhpcy5sb2dnZXIuZGVidWcoXCJEZWxldGluZyBzdWJzY3JpcHRpb25cIiksdGhpcy5sb2dnZXIudHJhY2Uoe3R5cGU6XCJtZXRob2RcIixtZXRob2Q6XCJkZWxldGVTdWJzY3JpcHRpb25cIixpZDplLHJlYXNvbjp0fSk7Y29uc3QgaT10aGlzLmdldFN1YnNjcmlwdGlvbihlKTt0aGlzLnN1YnNjcmlwdGlvbnMuZGVsZXRlKGUpLHRoaXMudG9waWNNYXAuZGVsZXRlKGkudG9waWMsZSksdGhpcy5ldmVudHMuZW1pdChJLmRlbGV0ZWQsaGUoaih7fSxpKSx7cmVhc29uOnR9KSl9YXN5bmMgcGVyc2lzdCgpe2F3YWl0IHRoaXMuc2V0UmVsYXllclN1YnNjcmlwdGlvbnModGhpcy52YWx1ZXMpLHRoaXMuZXZlbnRzLmVtaXQoSS5zeW5jKX1hc3luYyByZXNldCgpe3RoaXMuY2FjaGVkLmxlbmd0aCYmYXdhaXQgUHJvbWlzZS5hbGwodGhpcy5jYWNoZWQubWFwKGFzeW5jIGU9PmF3YWl0IHRoaXMucmVzdWJzY3JpYmUoZSkpKSx0aGlzLmV2ZW50cy5lbWl0KEkucmVzdWJzY3JpYmVkKX1hc3luYyByZXN0b3JlKCl7dHJ5e2NvbnN0IGU9YXdhaXQgdGhpcy5nZXRSZWxheWVyU3Vic2NyaXB0aW9ucygpO2lmKHR5cGVvZiBlPlwidVwifHwhZS5sZW5ndGgpcmV0dXJuO2lmKHRoaXMuc3Vic2NyaXB0aW9ucy5zaXplKXtjb25zdHttZXNzYWdlOnR9PWMoXCJSRVNUT1JFX1dJTExfT1ZFUlJJREVcIix0aGlzLm5hbWUpO3Rocm93IHRoaXMubG9nZ2VyLmVycm9yKHQpLG5ldyBFcnJvcih0KX10aGlzLmNhY2hlZD1lLHRoaXMubG9nZ2VyLmRlYnVnKGBTdWNjZXNzZnVsbHkgUmVzdG9yZWQgc3Vic2NyaXB0aW9ucyBmb3IgJHt0aGlzLm5hbWV9YCksdGhpcy5sb2dnZXIudHJhY2Uoe3R5cGU6XCJtZXRob2RcIixtZXRob2Q6XCJyZXN0b3JlXCIsc3Vic2NyaXB0aW9uczp0aGlzLnZhbHVlc30pfWNhdGNoKGUpe3RoaXMubG9nZ2VyLmRlYnVnKGBGYWlsZWQgdG8gUmVzdG9yZSBzdWJzY3JpcHRpb25zIGZvciAke3RoaXMubmFtZX1gKSx0aGlzLmxvZ2dlci5lcnJvcihlKX19YXN5bmMgcmVzdWJzY3JpYmUoZSl7aWYoIXRoaXMuaWRzLmluY2x1ZGVzKGUuaWQpKXtjb25zdHt0b3BpYzp0LHJlbGF5Oml9PWUscz17dG9waWM6dCxyZWxheTppfTt0aGlzLnBlbmRpbmcuc2V0KHMudG9waWMscyk7Y29uc3Qgbj1hd2FpdCB0aGlzLnJwY1N1YnNjcmliZShzLnRvcGljLHMucmVsYXkpO3RoaXMub25SZXN1YnNjcmliZShuLHMpfX1hc3luYyBvbkNvbm5lY3QoKXthd2FpdCB0aGlzLnJlc3RhcnQoKSx0aGlzLm9uRW5hYmxlKCl9b25EaXNjb25uZWN0KCl7dGhpcy5vbkRpc2FibGUoKX1jaGVja1BlbmRpbmcoKXt0aGlzLnJlbGF5ZXIudHJhbnNwb3J0RXhwbGljaXRseUNsb3NlZHx8dGhpcy5wZW5kaW5nLmZvckVhY2goYXN5bmMgZT0+e2NvbnN0IHQ9YXdhaXQgdGhpcy5ycGNTdWJzY3JpYmUoZS50b3BpYyxlLnJlbGF5KTt0aGlzLm9uU3Vic2NyaWJlKHQsZSl9KX1yZWdpc3RlckV2ZW50TGlzdGVuZXJzKCl7dGhpcy5yZWxheWVyLmNvcmUuaGVhcnRiZWF0Lm9uKEcucHVsc2UsKCk9Pnt0aGlzLmNoZWNrUGVuZGluZygpfSksdGhpcy5yZWxheWVyLm9uKHkuY29ubmVjdCxhc3luYygpPT57YXdhaXQgdGhpcy5vbkNvbm5lY3QoKX0pLHRoaXMucmVsYXllci5vbih5LmRpc2Nvbm5lY3QsKCk9Pnt0aGlzLm9uRGlzY29ubmVjdCgpfSksdGhpcy5ldmVudHMub24oSS5jcmVhdGVkLGFzeW5jIGU9Pntjb25zdCB0PUkuY3JlYXRlZDt0aGlzLmxvZ2dlci5pbmZvKGBFbWl0dGluZyAke3R9YCksdGhpcy5sb2dnZXIuZGVidWcoe3R5cGU6XCJldmVudFwiLGV2ZW50OnQsZGF0YTplfSksYXdhaXQgdGhpcy5wZXJzaXN0KCl9KSx0aGlzLmV2ZW50cy5vbihJLmRlbGV0ZWQsYXN5bmMgZT0+e2NvbnN0IHQ9SS5kZWxldGVkO3RoaXMubG9nZ2VyLmluZm8oYEVtaXR0aW5nICR7dH1gKSx0aGlzLmxvZ2dlci5kZWJ1Zyh7dHlwZTpcImV2ZW50XCIsZXZlbnQ6dCxkYXRhOmV9KSxhd2FpdCB0aGlzLnBlcnNpc3QoKX0pfWlzSW5pdGlhbGl6ZWQoKXtpZighdGhpcy5pbml0aWFsaXplZCl7Y29uc3R7bWVzc2FnZTplfT1jKFwiTk9UX0lOSVRJQUxJWkVEXCIsdGhpcy5uYW1lKTt0aHJvdyBuZXcgRXJyb3IoZSl9fX12YXIgaXI9T2JqZWN0LmRlZmluZVByb3BlcnR5LG10PU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsc3I9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxycj1PYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLEV0PShyLGUsdCk9PmUgaW4gcj9pcihyLGUse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOnR9KTpyW2VdPXQsbnI9KHIsZSk9Pntmb3IodmFyIHQgaW4gZXx8KGU9e30pKXNyLmNhbGwoZSx0KSYmRXQocix0LGVbdF0pO2lmKG10KWZvcih2YXIgdCBvZiBtdChlKSlyci5jYWxsKGUsdCkmJkV0KHIsdCxlW3RdKTtyZXR1cm4gcn07Y2xhc3MgZnQgZXh0ZW5kcyBGdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihlKSx0aGlzLnByb3RvY29sPVwid2NcIix0aGlzLnZlcnNpb249Mix0aGlzLmV2ZW50cz1uZXcgQSx0aGlzLm5hbWU9UWUsdGhpcy50cmFuc3BvcnRFeHBsaWNpdGx5Q2xvc2VkPSExLHRoaXMuaW5pdGlhbGl6ZWQ9ITEsdGhpcy5jb3JlPWUuY29yZSx0aGlzLmxvZ2dlcj10eXBlb2YgZS5sb2dnZXI8XCJ1XCImJnR5cGVvZiBlLmxvZ2dlciE9XCJzdHJpbmdcIj93KGUubG9nZ2VyLHRoaXMubmFtZSk6Y2UodWUoe2xldmVsOmUubG9nZ2VyfHxXZX0pKSx0aGlzLm1lc3NhZ2VzPW5ldyBwdCh0aGlzLmxvZ2dlcixlLmNvcmUpLHRoaXMuc3Vic2NyaWJlcj1uZXcgYnQodGhpcyx0aGlzLmxvZ2dlciksdGhpcy5wdWJsaXNoZXI9bmV3IEhzKHRoaXMsdGhpcy5sb2dnZXIpLHRoaXMucmVsYXlVcmw9ZT8ucmVsYXlVcmx8fFplLHRoaXMucHJvamVjdElkPWUucHJvamVjdElkLHRoaXMucHJvdmlkZXI9e319YXN5bmMgaW5pdCgpe3RoaXMubG9nZ2VyLnRyYWNlKFwiSW5pdGlhbGl6ZWRcIiksdGhpcy5wcm92aWRlcj1hd2FpdCB0aGlzLmNyZWF0ZVByb3ZpZGVyKCksYXdhaXQgUHJvbWlzZS5hbGwoW3RoaXMubWVzc2FnZXMuaW5pdCgpLHRoaXMudHJhbnNwb3J0T3BlbigpLHRoaXMuc3Vic2NyaWJlci5pbml0KCldKSx0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKSx0aGlzLmluaXRpYWxpemVkPSEwfWdldCBjb250ZXh0KCl7cmV0dXJuIHYodGhpcy5sb2dnZXIpfWdldCBjb25uZWN0ZWQoKXtyZXR1cm4gdGhpcy5wcm92aWRlci5jb25uZWN0aW9uLmNvbm5lY3RlZH1nZXQgY29ubmVjdGluZygpe3JldHVybiB0aGlzLnByb3ZpZGVyLmNvbm5lY3Rpb24uY29ubmVjdGluZ31hc3luYyBwdWJsaXNoKGUsdCxpKXt0aGlzLmlzSW5pdGlhbGl6ZWQoKSxhd2FpdCB0aGlzLnB1Ymxpc2hlci5wdWJsaXNoKGUsdCxpKSxhd2FpdCB0aGlzLnJlY29yZE1lc3NhZ2VFdmVudCh7dG9waWM6ZSxtZXNzYWdlOnR9KX1hc3luYyBzdWJzY3JpYmUoZSx0KXt0aGlzLmlzSW5pdGlhbGl6ZWQoKTtsZXQgaT1cIlwiO3JldHVybiBhd2FpdCBQcm9taXNlLmFsbChbbmV3IFByb21pc2Uocz0+e3RoaXMuc3Vic2NyaWJlci5vbmNlKEkuY3JlYXRlZCxuPT57bi50b3BpYz09PWUmJnMoKX0pfSksbmV3IFByb21pc2UoYXN5bmMgcz0+e2k9YXdhaXQgdGhpcy5zdWJzY3JpYmVyLnN1YnNjcmliZShlLHQpLHMoKX0pXSksaX1hc3luYyB1bnN1YnNjcmliZShlLHQpe3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuc3Vic2NyaWJlci51bnN1YnNjcmliZShlLHQpfW9uKGUsdCl7dGhpcy5ldmVudHMub24oZSx0KX1vbmNlKGUsdCl7dGhpcy5ldmVudHMub25jZShlLHQpfW9mZihlLHQpe3RoaXMuZXZlbnRzLm9mZihlLHQpfXJlbW92ZUxpc3RlbmVyKGUsdCl7dGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIoZSx0KX1hc3luYyB0cmFuc3BvcnRDbG9zZSgpe3RoaXMudHJhbnNwb3J0RXhwbGljaXRseUNsb3NlZD0hMCx0aGlzLmNvbm5lY3RlZCYmYXdhaXQgdGhpcy5wcm92aWRlci5kaXNjb25uZWN0KCksdGhpcy5ldmVudHMuZW1pdCh5LnRyYW5zcG9ydF9jbG9zZWQpfWFzeW5jIHRyYW5zcG9ydE9wZW4oZSl7dGhpcy5yZWxheVVybD1lfHx0aGlzLnJlbGF5VXJsLHRoaXMudHJhbnNwb3J0RXhwbGljaXRseUNsb3NlZD0hMTt0cnl7YXdhaXQgUHJvbWlzZS5hbGwoW25ldyBQcm9taXNlKHQ9Pnt0aGlzLmluaXRpYWxpemVkfHx0KCksdGhpcy5zdWJzY3JpYmVyLm9uY2UoSS5yZXN1YnNjcmliZWQsKCk9Pnt0KCl9KX0pLGF3YWl0IFByb21pc2UucmFjZShbdGhpcy5wcm92aWRlci5jb25uZWN0KCksbmV3IFByb21pc2UoKHQsaSk9PnRoaXMub25jZSh5LnRyYW5zcG9ydF9jbG9zZWQsKCk9PntpKCl9KSldKV0pfWNhdGNoKHQpe2NvbnN0IGk9dDtpZighL3NvY2tldCBoYW5nIHVwL2kudGVzdChpLm1lc3NhZ2UpKXRocm93IG5ldyBFcnJvcihpLm1lc3NhZ2UpO3RoaXMubG9nZ2VyLmVycm9yKGkpLHRoaXMuZXZlbnRzLmVtaXQoeS50cmFuc3BvcnRfY2xvc2VkKX19YXN5bmMgcmVzdGFydFRyYW5zcG9ydChlKXthd2FpdCB0aGlzLnRyYW5zcG9ydENsb3NlKCksYXdhaXQgbmV3IFByb21pc2UodD0+c2V0VGltZW91dCh0LG9lKSksYXdhaXQgdGhpcy50cmFuc3BvcnRPcGVuKGUpfWFzeW5jIGNyZWF0ZVByb3ZpZGVyKCl7Y29uc3QgZT1hd2FpdCB0aGlzLmNvcmUuY3J5cHRvLnNpZ25KV1QodGhpcy5yZWxheVVybCk7cmV0dXJuIG5ldyBEaShuZXcgRWkoUXQoe3Nka1ZlcnNpb246dHQscHJvdG9jb2w6dGhpcy5wcm90b2NvbCx2ZXJzaW9uOnRoaXMudmVyc2lvbixyZWxheVVybDp0aGlzLnJlbGF5VXJsLHByb2plY3RJZDp0aGlzLnByb2plY3RJZCxhdXRoOmV9KSkpfWFzeW5jIHJlY29yZE1lc3NhZ2VFdmVudChlKXtjb25zdHt0b3BpYzp0LG1lc3NhZ2U6aX09ZTthd2FpdCB0aGlzLm1lc3NhZ2VzLnNldCh0LGkpfWFzeW5jIHNob3VsZElnbm9yZU1lc3NhZ2VFdmVudChlKXtjb25zdHt0b3BpYzp0LG1lc3NhZ2U6aX09ZTtyZXR1cm4gYXdhaXQgdGhpcy5zdWJzY3JpYmVyLmlzU3Vic2NyaWJlZCh0KT90aGlzLm1lc3NhZ2VzLmhhcyh0LGkpOiEwfWFzeW5jIG9uUHJvdmlkZXJQYXlsb2FkKGUpe2lmKHRoaXMubG9nZ2VyLmRlYnVnKFwiSW5jb21pbmcgUmVsYXkgUGF5bG9hZFwiKSx0aGlzLmxvZ2dlci50cmFjZSh7dHlwZTpcInBheWxvYWRcIixkaXJlY3Rpb246XCJpbmNvbWluZ1wiLHBheWxvYWQ6ZX0pLEVlKGUpKXtpZighZS5tZXRob2QuZW5kc1dpdGgoZXQpKXJldHVybjtjb25zdCB0PWUucGFyYW1zLHt0b3BpYzppLG1lc3NhZ2U6c309dC5kYXRhLG49e3RvcGljOmksbWVzc2FnZTpzfTt0aGlzLmxvZ2dlci5kZWJ1ZyhcIkVtaXR0aW5nIFJlbGF5ZXIgUGF5bG9hZFwiKSx0aGlzLmxvZ2dlci50cmFjZShucih7dHlwZTpcImV2ZW50XCIsZXZlbnQ6dC5pZH0sbikpLHRoaXMuZXZlbnRzLmVtaXQodC5pZCxuKSxhd2FpdCB0aGlzLmFja25vd2xlZGdlUGF5bG9hZChlKSxhd2FpdCB0aGlzLm9uTWVzc2FnZUV2ZW50KG4pfX1hc3luYyBvbk1lc3NhZ2VFdmVudChlKXthd2FpdCB0aGlzLnNob3VsZElnbm9yZU1lc3NhZ2VFdmVudChlKXx8KHRoaXMuZXZlbnRzLmVtaXQoeS5tZXNzYWdlLGUpLGF3YWl0IHRoaXMucmVjb3JkTWVzc2FnZUV2ZW50KGUpKX1hc3luYyBhY2tub3dsZWRnZVBheWxvYWQoZSl7Y29uc3QgdD1mZShlLmlkLCEwKTthd2FpdCB0aGlzLnByb3ZpZGVyLmNvbm5lY3Rpb24uc2VuZCh0KX1yZWdpc3RlckV2ZW50TGlzdGVuZXJzKCl7dGhpcy5wcm92aWRlci5vbihNLnBheWxvYWQsZT0+dGhpcy5vblByb3ZpZGVyUGF5bG9hZChlKSksdGhpcy5wcm92aWRlci5vbihNLmNvbm5lY3QsKCk9Pnt0aGlzLmV2ZW50cy5lbWl0KHkuY29ubmVjdCl9KSx0aGlzLnByb3ZpZGVyLm9uKE0uZGlzY29ubmVjdCwoKT0+e3RoaXMuZXZlbnRzLmVtaXQoeS5kaXNjb25uZWN0KSx0aGlzLmF0dGVtcHRUb1JlY29ubmVjdCgpfSksdGhpcy5wcm92aWRlci5vbihNLmVycm9yLGU9PnRoaXMuZXZlbnRzLmVtaXQoeS5lcnJvcixlKSksdGhpcy5ldmVudHMub24oeS5jb25uZWN0aW9uX3N0YWxsZWQsYXN5bmMoKT0+e2F3YWl0IHRoaXMucmVzdGFydFRyYW5zcG9ydCgpfSl9YXR0ZW1wdFRvUmVjb25uZWN0KCl7dGhpcy50cmFuc3BvcnRFeHBsaWNpdGx5Q2xvc2VkfHxzZXRUaW1lb3V0KGFzeW5jKCk9Pnthd2FpdCB0aGlzLnRyYW5zcG9ydE9wZW4oKX0sYmUob2UpKX1pc0luaXRpYWxpemVkKCl7aWYoIXRoaXMuaW5pdGlhbGl6ZWQpe2NvbnN0e21lc3NhZ2U6ZX09YyhcIk5PVF9JTklUSUFMSVpFRFwiLHRoaXMubmFtZSk7dGhyb3cgbmV3IEVycm9yKGUpfX19dmFyIGFyPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSx3dD1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLG9yPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksaHI9T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSx2dD0ocixlLHQpPT5lIGluIHI/YXIocixlLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTp0fSk6cltlXT10LEl0PShyLGUpPT57Zm9yKHZhciB0IGluIGV8fChlPXt9KSlvci5jYWxsKGUsdCkmJnZ0KHIsdCxlW3RdKTtpZih3dClmb3IodmFyIHQgb2Ygd3QoZSkpaHIuY2FsbChlLHQpJiZ2dChyLHQsZVt0XSk7cmV0dXJuIHJ9O2NsYXNzIEN0IGV4dGVuZHMgTXR7Y29uc3RydWN0b3IoZSx0LGkscz1QLG49dm9pZCAwKXtzdXBlcihlLHQsaSxzKSx0aGlzLmNvcmU9ZSx0aGlzLmxvZ2dlcj10LHRoaXMubmFtZT1pLHRoaXMubWFwPW5ldyBNYXAsdGhpcy52ZXJzaW9uPWl0LHRoaXMuY2FjaGVkPVtdLHRoaXMuaW5pdGlhbGl6ZWQ9ITEsdGhpcy5zdG9yYWdlUHJlZml4PVAsdGhpcy5pbml0PWFzeW5jKCk9Pnt0aGlzLmluaXRpYWxpemVkfHwodGhpcy5sb2dnZXIudHJhY2UoXCJJbml0aWFsaXplZFwiKSxhd2FpdCB0aGlzLnJlc3RvcmUoKSx0aGlzLmNhY2hlZC5mb3JFYWNoKGE9PntlaShhKT90aGlzLm1hcC5zZXQoYS5pZCxhKTp0aShhKT90aGlzLm1hcC5zZXQoYS50b3BpYyxhKTp0aGlzLmdldEtleSYmYSE9PW51bGwmJiFXKGEpJiZ0aGlzLm1hcC5zZXQodGhpcy5nZXRLZXkoYSksYSl9KSx0aGlzLmNhY2hlZD1bXSx0aGlzLmluaXRpYWxpemVkPSEwKX0sdGhpcy5zZXQ9YXN5bmMoYSxvKT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLHRoaXMubWFwLmhhcyhhKT9hd2FpdCB0aGlzLnVwZGF0ZShhLG8pOih0aGlzLmxvZ2dlci5kZWJ1ZyhcIlNldHRpbmcgdmFsdWVcIiksdGhpcy5sb2dnZXIudHJhY2Uoe3R5cGU6XCJtZXRob2RcIixtZXRob2Q6XCJzZXRcIixrZXk6YSx2YWx1ZTpvfSksdGhpcy5tYXAuc2V0KGEsbyksYXdhaXQgdGhpcy5wZXJzaXN0KCkpfSx0aGlzLmdldD1hPT4odGhpcy5pc0luaXRpYWxpemVkKCksdGhpcy5sb2dnZXIuZGVidWcoXCJHZXR0aW5nIHZhbHVlXCIpLHRoaXMubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwiZ2V0XCIsa2V5OmF9KSx0aGlzLmdldERhdGEoYSkpLHRoaXMuZ2V0QWxsPWE9Pih0aGlzLmlzSW5pdGlhbGl6ZWQoKSxhP3RoaXMudmFsdWVzLmZpbHRlcihvPT5PYmplY3Qua2V5cyhhKS5ldmVyeShoPT5maShvW2hdLGFbaF0pKSk6dGhpcy52YWx1ZXMpLHRoaXMudXBkYXRlPWFzeW5jKGEsbyk9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKSx0aGlzLmxvZ2dlci5kZWJ1ZyhcIlVwZGF0aW5nIHZhbHVlXCIpLHRoaXMubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwidXBkYXRlXCIsa2V5OmEsdXBkYXRlOm99KTtjb25zdCBoPUl0KEl0KHt9LHRoaXMuZ2V0RGF0YShhKSksbyk7dGhpcy5tYXAuc2V0KGEsaCksYXdhaXQgdGhpcy5wZXJzaXN0KCl9LHRoaXMuZGVsZXRlPWFzeW5jKGEsbyk9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKSx0aGlzLm1hcC5oYXMoYSkmJih0aGlzLmxvZ2dlci5kZWJ1ZyhcIkRlbGV0aW5nIHZhbHVlXCIpLHRoaXMubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwiZGVsZXRlXCIsa2V5OmEscmVhc29uOm99KSx0aGlzLm1hcC5kZWxldGUoYSksYXdhaXQgdGhpcy5wZXJzaXN0KCkpfSx0aGlzLmxvZ2dlcj13KHQsdGhpcy5uYW1lKSx0aGlzLnN0b3JhZ2VQcmVmaXg9cyx0aGlzLmdldEtleT1ufWdldCBjb250ZXh0KCl7cmV0dXJuIHYodGhpcy5sb2dnZXIpfWdldCBzdG9yYWdlS2V5KCl7cmV0dXJuIHRoaXMuc3RvcmFnZVByZWZpeCt0aGlzLnZlcnNpb24rXCIvL1wiK3RoaXMubmFtZX1nZXQgbGVuZ3RoKCl7cmV0dXJuIHRoaXMubWFwLnNpemV9Z2V0IGtleXMoKXtyZXR1cm4gQXJyYXkuZnJvbSh0aGlzLm1hcC5rZXlzKCkpfWdldCB2YWx1ZXMoKXtyZXR1cm4gQXJyYXkuZnJvbSh0aGlzLm1hcC52YWx1ZXMoKSl9YXN5bmMgc2V0RGF0YVN0b3JlKGUpe2F3YWl0IHRoaXMuY29yZS5zdG9yYWdlLnNldEl0ZW0odGhpcy5zdG9yYWdlS2V5LGUpfWFzeW5jIGdldERhdGFTdG9yZSgpe3JldHVybiBhd2FpdCB0aGlzLmNvcmUuc3RvcmFnZS5nZXRJdGVtKHRoaXMuc3RvcmFnZUtleSl9Z2V0RGF0YShlKXtjb25zdCB0PXRoaXMubWFwLmdldChlKTtpZighdCl7Y29uc3R7bWVzc2FnZTppfT1jKFwiTk9fTUFUQ0hJTkdfS0VZXCIsYCR7dGhpcy5uYW1lfTogJHtlfWApO3Rocm93IHRoaXMubG9nZ2VyLmVycm9yKGkpLG5ldyBFcnJvcihpKX1yZXR1cm4gdH1hc3luYyBwZXJzaXN0KCl7YXdhaXQgdGhpcy5zZXREYXRhU3RvcmUodGhpcy52YWx1ZXMpfWFzeW5jIHJlc3RvcmUoKXt0cnl7Y29uc3QgZT1hd2FpdCB0aGlzLmdldERhdGFTdG9yZSgpO2lmKHR5cGVvZiBlPlwidVwifHwhZS5sZW5ndGgpcmV0dXJuO2lmKHRoaXMubWFwLnNpemUpe2NvbnN0e21lc3NhZ2U6dH09YyhcIlJFU1RPUkVfV0lMTF9PVkVSUklERVwiLHRoaXMubmFtZSk7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IodCksbmV3IEVycm9yKHQpfXRoaXMuY2FjaGVkPWUsdGhpcy5sb2dnZXIuZGVidWcoYFN1Y2Nlc3NmdWxseSBSZXN0b3JlZCB2YWx1ZSBmb3IgJHt0aGlzLm5hbWV9YCksdGhpcy5sb2dnZXIudHJhY2Uoe3R5cGU6XCJtZXRob2RcIixtZXRob2Q6XCJyZXN0b3JlXCIsdmFsdWU6dGhpcy52YWx1ZXN9KX1jYXRjaChlKXt0aGlzLmxvZ2dlci5kZWJ1ZyhgRmFpbGVkIHRvIFJlc3RvcmUgdmFsdWUgZm9yICR7dGhpcy5uYW1lfWApLHRoaXMubG9nZ2VyLmVycm9yKGUpfX1pc0luaXRpYWxpemVkKCl7aWYoIXRoaXMuaW5pdGlhbGl6ZWQpe2NvbnN0e21lc3NhZ2U6ZX09YyhcIk5PVF9JTklUSUFMSVpFRFwiLHRoaXMubmFtZSk7dGhyb3cgbmV3IEVycm9yKGUpfX19Y2xhc3MgX3R7Y29uc3RydWN0b3IoZSx0KXt0aGlzLmNvcmU9ZSx0aGlzLmxvZ2dlcj10LHRoaXMubmFtZT1hdCx0aGlzLnZlcnNpb249b3QsdGhpcy5ldmVudHM9bmV3IE90LHRoaXMuaW5pdGlhbGl6ZWQ9ITEsdGhpcy5zdG9yYWdlUHJlZml4PVAsdGhpcy5pZ25vcmVkUGF5bG9hZFR5cGVzPVtpaV0sdGhpcy5yZWdpc3RlcmVkTWV0aG9kcz1bXSx0aGlzLmluaXQ9YXN5bmMoKT0+e3RoaXMuaW5pdGlhbGl6ZWR8fChhd2FpdCB0aGlzLnBhaXJpbmdzLmluaXQoKSxhd2FpdCB0aGlzLmNsZWFudXAoKSx0aGlzLnJlZ2lzdGVyUmVsYXllckV2ZW50cygpLHRoaXMucmVnaXN0ZXJFeHBpcmVyRXZlbnRzKCksdGhpcy5pbml0aWFsaXplZD0hMCx0aGlzLmxvZ2dlci50cmFjZShcIkluaXRpYWxpemVkXCIpKX0sdGhpcy5yZWdpc3Rlcj0oe21ldGhvZHM6aX0pPT57dGhpcy5pc0luaXRpYWxpemVkKCksdGhpcy5yZWdpc3RlcmVkTWV0aG9kcz1bLi4ubmV3IFNldChbLi4udGhpcy5yZWdpc3RlcmVkTWV0aG9kcywuLi5pXSldfSx0aGlzLmNyZWF0ZT1hc3luYygpPT57dGhpcy5pc0luaXRpYWxpemVkKCk7Y29uc3QgaT1ZKCkscz1hd2FpdCB0aGlzLmNvcmUuY3J5cHRvLnNldFN5bUtleShpKSxuPVoobWUpLGE9e3Byb3RvY29sOlhlfSxvPXt0b3BpYzpzLGV4cGlyeTpuLHJlbGF5OmEsYWN0aXZlOiExfSxoPXNpKHtwcm90b2NvbDp0aGlzLmNvcmUucHJvdG9jb2wsdmVyc2lvbjp0aGlzLmNvcmUudmVyc2lvbix0b3BpYzpzLHN5bUtleTppLHJlbGF5OmF9KTtyZXR1cm4gYXdhaXQgdGhpcy5wYWlyaW5ncy5zZXQocyxvKSxhd2FpdCB0aGlzLmNvcmUucmVsYXllci5zdWJzY3JpYmUocyksdGhpcy5jb3JlLmV4cGlyZXIuc2V0KHMsbikse3RvcGljOnMsdXJpOmh9fSx0aGlzLnBhaXI9YXN5bmMgaT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLHRoaXMuaXNWYWxpZFBhaXIoaSk7Y29uc3R7dG9waWM6cyxzeW1LZXk6bixyZWxheTphfT1yaShpLnVyaSksbz1aKG1lKSxoPXt0b3BpYzpzLHJlbGF5OmEsZXhwaXJ5Om8sYWN0aXZlOiExfTtyZXR1cm4gYXdhaXQgdGhpcy5wYWlyaW5ncy5zZXQocyxoKSxhd2FpdCB0aGlzLmNvcmUuY3J5cHRvLnNldFN5bUtleShuLHMpLGF3YWl0IHRoaXMuY29yZS5yZWxheWVyLnN1YnNjcmliZShzLHtyZWxheTphfSksdGhpcy5jb3JlLmV4cGlyZXIuc2V0KHMsbyksaS5hY3RpdmF0ZVBhaXJpbmcmJmF3YWl0IHRoaXMuYWN0aXZhdGUoe3RvcGljOnN9KSxofSx0aGlzLmFjdGl2YXRlPWFzeW5jKHt0b3BpYzppfSk9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKTtjb25zdCBzPVoodGUpO2F3YWl0IHRoaXMucGFpcmluZ3MudXBkYXRlKGkse2FjdGl2ZTohMCxleHBpcnk6c30pLHRoaXMuY29yZS5leHBpcmVyLnNldChpLHMpfSx0aGlzLnBpbmc9YXN5bmMgaT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuaXNWYWxpZFBpbmcoaSk7Y29uc3R7dG9waWM6c309aTtpZih0aGlzLnBhaXJpbmdzLmtleXMuaW5jbHVkZXMocykpe2NvbnN0IG49YXdhaXQgdGhpcy5zZW5kUmVxdWVzdChzLFwid2NfcGFpcmluZ1BpbmdcIix7fSkse2RvbmU6YSxyZXNvbHZlOm8scmVqZWN0Omh9PW5pKCk7dGhpcy5ldmVudHMub25jZShRKFwicGFpcmluZ19waW5nXCIsbiksKHtlcnJvcjpsfSk9PntsP2gobCk6bygpfSksYXdhaXQgYSgpfX0sdGhpcy51cGRhdGVFeHBpcnk9YXN5bmMoe3RvcGljOmksZXhwaXJ5OnN9KT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMucGFpcmluZ3MudXBkYXRlKGkse2V4cGlyeTpzfSl9LHRoaXMudXBkYXRlTWV0YWRhdGE9YXN5bmMoe3RvcGljOmksbWV0YWRhdGE6c30pPT57dGhpcy5pc0luaXRpYWxpemVkKCksYXdhaXQgdGhpcy5wYWlyaW5ncy51cGRhdGUoaSx7cGVlck1ldGFkYXRhOnN9KX0sdGhpcy5nZXRQYWlyaW5ncz0oKT0+KHRoaXMuaXNJbml0aWFsaXplZCgpLHRoaXMucGFpcmluZ3MudmFsdWVzKSx0aGlzLmRpc2Nvbm5lY3Q9YXN5bmMgaT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuaXNWYWxpZERpc2Nvbm5lY3QoaSk7Y29uc3R7dG9waWM6c309aTt0aGlzLnBhaXJpbmdzLmtleXMuaW5jbHVkZXMocykmJihhd2FpdCB0aGlzLnNlbmRSZXF1ZXN0KHMsXCJ3Y19wYWlyaW5nRGVsZXRlXCIsTChcIlVTRVJfRElTQ09OTkVDVEVEXCIpKSxhd2FpdCB0aGlzLmRlbGV0ZVBhaXJpbmcocykpfSx0aGlzLnNlbmRSZXF1ZXN0PWFzeW5jKGkscyxuKT0+e2NvbnN0IGE9d2UocyxuKSxvPWF3YWl0IHRoaXMuY29yZS5jcnlwdG8uZW5jb2RlKGksYSksaD1OW3NdLnJlcTtyZXR1cm4gdGhpcy5jb3JlLmhpc3Rvcnkuc2V0KGksYSksYXdhaXQgdGhpcy5jb3JlLnJlbGF5ZXIucHVibGlzaChpLG8saCksYS5pZH0sdGhpcy5zZW5kUmVzdWx0PWFzeW5jKGkscyxuKT0+e2NvbnN0IGE9ZmUoaSxuKSxvPWF3YWl0IHRoaXMuY29yZS5jcnlwdG8uZW5jb2RlKHMsYSksaD1hd2FpdCB0aGlzLmNvcmUuaGlzdG9yeS5nZXQocyxpKSxsPU5baC5yZXF1ZXN0Lm1ldGhvZF0ucmVzO2F3YWl0IHRoaXMuY29yZS5yZWxheWVyLnB1Ymxpc2gocyxvLGwpLGF3YWl0IHRoaXMuY29yZS5oaXN0b3J5LnJlc29sdmUoYSl9LHRoaXMuc2VuZEVycm9yPWFzeW5jKGkscyxuKT0+e2NvbnN0IGE9eWkoaSxuKSxvPWF3YWl0IHRoaXMuY29yZS5jcnlwdG8uZW5jb2RlKHMsYSksaD1hd2FpdCB0aGlzLmNvcmUuaGlzdG9yeS5nZXQocyxpKSxsPU5baC5yZXF1ZXN0Lm1ldGhvZF0/TltoLnJlcXVlc3QubWV0aG9kXS5yZXM6Ti51bnJlZ2lzdGVyZWRfbWV0aG9kLnJlczthd2FpdCB0aGlzLmNvcmUucmVsYXllci5wdWJsaXNoKHMsbyxsKSxhd2FpdCB0aGlzLmNvcmUuaGlzdG9yeS5yZXNvbHZlKGEpfSx0aGlzLmRlbGV0ZVBhaXJpbmc9YXN5bmMoaSxzKT0+e2F3YWl0IHRoaXMuY29yZS5yZWxheWVyLnVuc3Vic2NyaWJlKGkpLGF3YWl0IFByb21pc2UuYWxsKFt0aGlzLnBhaXJpbmdzLmRlbGV0ZShpLEwoXCJVU0VSX0RJU0NPTk5FQ1RFRFwiKSksdGhpcy5jb3JlLmNyeXB0by5kZWxldGVTeW1LZXkoaSkscz9Qcm9taXNlLnJlc29sdmUoKTp0aGlzLmNvcmUuZXhwaXJlci5kZWwoaSldKX0sdGhpcy5jbGVhbnVwPWFzeW5jKCk9Pntjb25zdCBpPXRoaXMucGFpcmluZ3MuZ2V0QWxsKCkuZmlsdGVyKHM9PkRlKHMuZXhwaXJ5KSk7YXdhaXQgUHJvbWlzZS5hbGwoaS5tYXAocz0+dGhpcy5kZWxldGVQYWlyaW5nKHMudG9waWMpKSl9LHRoaXMub25SZWxheUV2ZW50UmVxdWVzdD1pPT57Y29uc3R7dG9waWM6cyxwYXlsb2FkOm59PWk7c3dpdGNoKG4ubWV0aG9kKXtjYXNlXCJ3Y19wYWlyaW5nUGluZ1wiOnJldHVybiB0aGlzLm9uUGFpcmluZ1BpbmdSZXF1ZXN0KHMsbik7Y2FzZVwid2NfcGFpcmluZ0RlbGV0ZVwiOnJldHVybiB0aGlzLm9uUGFpcmluZ0RlbGV0ZVJlcXVlc3QocyxuKTtkZWZhdWx0OnJldHVybiB0aGlzLm9uVW5rbm93blJwY01ldGhvZFJlcXVlc3QocyxuKX19LHRoaXMub25SZWxheUV2ZW50UmVzcG9uc2U9YXN5bmMgaT0+e2NvbnN0e3RvcGljOnMscGF5bG9hZDpufT1pLGE9KGF3YWl0IHRoaXMuY29yZS5oaXN0b3J5LmdldChzLG4uaWQpKS5yZXF1ZXN0Lm1ldGhvZDtzd2l0Y2goYSl7Y2FzZVwid2NfcGFpcmluZ1BpbmdcIjpyZXR1cm4gdGhpcy5vblBhaXJpbmdQaW5nUmVzcG9uc2UocyxuKTtkZWZhdWx0OnJldHVybiB0aGlzLm9uVW5rbm93blJwY01ldGhvZFJlc3BvbnNlKGEpfX0sdGhpcy5vblBhaXJpbmdQaW5nUmVxdWVzdD1hc3luYyhpLHMpPT57Y29uc3R7aWQ6bn09czt0cnl7dGhpcy5pc1ZhbGlkUGluZyh7dG9waWM6aX0pLGF3YWl0IHRoaXMuc2VuZFJlc3VsdChuLGksITApLHRoaXMuZXZlbnRzLmVtaXQoXCJwYWlyaW5nX3BpbmdcIix7aWQ6bix0b3BpYzppfSl9Y2F0Y2goYSl7YXdhaXQgdGhpcy5zZW5kRXJyb3IobixpLGEpLHRoaXMubG9nZ2VyLmVycm9yKGEpfX0sdGhpcy5vblBhaXJpbmdQaW5nUmVzcG9uc2U9KGkscyk9Pntjb25zdHtpZDpufT1zO3NldFRpbWVvdXQoKCk9PntiaShzKT90aGlzLmV2ZW50cy5lbWl0KFEoXCJwYWlyaW5nX3BpbmdcIixuKSx7fSk6dmUocykmJnRoaXMuZXZlbnRzLmVtaXQoUShcInBhaXJpbmdfcGluZ1wiLG4pLHtlcnJvcjpzLmVycm9yfSl9LDUwMCl9LHRoaXMub25QYWlyaW5nRGVsZXRlUmVxdWVzdD1hc3luYyhpLHMpPT57Y29uc3R7aWQ6bn09czt0cnl7dGhpcy5pc1ZhbGlkRGlzY29ubmVjdCh7dG9waWM6aX0pLGF3YWl0IHRoaXMuc2VuZFJlc3VsdChuLGksITApLGF3YWl0IHRoaXMuZGVsZXRlUGFpcmluZyhpKSx0aGlzLmV2ZW50cy5lbWl0KFwicGFpcmluZ19kZWxldGVcIix7aWQ6bix0b3BpYzppfSl9Y2F0Y2goYSl7YXdhaXQgdGhpcy5zZW5kRXJyb3IobixpLGEpLHRoaXMubG9nZ2VyLmVycm9yKGEpfX0sdGhpcy5vblVua25vd25ScGNNZXRob2RSZXF1ZXN0PWFzeW5jKGkscyk9Pntjb25zdHtpZDpuLG1ldGhvZDphfT1zO3RyeXtpZih0aGlzLnJlZ2lzdGVyZWRNZXRob2RzLmluY2x1ZGVzKGEpKXJldHVybjtjb25zdCBvPUwoXCJXQ19NRVRIT0RfVU5TVVBQT1JURURcIixhKTthd2FpdCB0aGlzLnNlbmRFcnJvcihuLGksbyksdGhpcy5sb2dnZXIuZXJyb3Iobyl9Y2F0Y2gobyl7YXdhaXQgdGhpcy5zZW5kRXJyb3IobixpLG8pLHRoaXMubG9nZ2VyLmVycm9yKG8pfX0sdGhpcy5vblVua25vd25ScGNNZXRob2RSZXNwb25zZT1pPT57dGhpcy5yZWdpc3RlcmVkTWV0aG9kcy5pbmNsdWRlcyhpKXx8dGhpcy5sb2dnZXIuZXJyb3IoTChcIldDX01FVEhPRF9VTlNVUFBPUlRFRFwiLGkpKX0sdGhpcy5pc1ZhbGlkUGFpcj1pPT57aWYoIWVlKGkpKXtjb25zdHttZXNzYWdlOnN9PWMoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgcGFpcigpIHBhcmFtczogJHtpfWApO3Rocm93IG5ldyBFcnJvcihzKX1pZighYWkoaS51cmkpKXtjb25zdHttZXNzYWdlOnN9PWMoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgcGFpcigpIHVyaTogJHtpLnVyaX1gKTt0aHJvdyBuZXcgRXJyb3Iocyl9fSx0aGlzLmlzVmFsaWRQaW5nPWFzeW5jIGk9PntpZighZWUoaSkpe2NvbnN0e21lc3NhZ2U6bn09YyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBwaW5nKCkgcGFyYW1zOiAke2l9YCk7dGhyb3cgbmV3IEVycm9yKG4pfWNvbnN0e3RvcGljOnN9PWk7YXdhaXQgdGhpcy5pc1ZhbGlkUGFpcmluZ1RvcGljKHMpfSx0aGlzLmlzVmFsaWREaXNjb25uZWN0PWFzeW5jIGk9PntpZighZWUoaSkpe2NvbnN0e21lc3NhZ2U6bn09YyhcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBkaXNjb25uZWN0KCkgcGFyYW1zOiAke2l9YCk7dGhyb3cgbmV3IEVycm9yKG4pfWNvbnN0e3RvcGljOnN9PWk7YXdhaXQgdGhpcy5pc1ZhbGlkUGFpcmluZ1RvcGljKHMpfSx0aGlzLmlzVmFsaWRQYWlyaW5nVG9waWM9YXN5bmMgaT0+e2lmKCFvaShpLCExKSl7Y29uc3R7bWVzc2FnZTpzfT1jKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHBhaXJpbmcgdG9waWMgc2hvdWxkIGJlIGEgc3RyaW5nOiAke2l9YCk7dGhyb3cgbmV3IEVycm9yKHMpfWlmKCF0aGlzLnBhaXJpbmdzLmtleXMuaW5jbHVkZXMoaSkpe2NvbnN0e21lc3NhZ2U6c309YyhcIk5PX01BVENISU5HX0tFWVwiLGBwYWlyaW5nIHRvcGljIGRvZXNuJ3QgZXhpc3Q6ICR7aX1gKTt0aHJvdyBuZXcgRXJyb3Iocyl9aWYoRGUodGhpcy5wYWlyaW5ncy5nZXQoaSkuZXhwaXJ5KSl7YXdhaXQgdGhpcy5kZWxldGVQYWlyaW5nKGkpO2NvbnN0e21lc3NhZ2U6c309YyhcIkVYUElSRURcIixgcGFpcmluZyB0b3BpYzogJHtpfWApO3Rocm93IG5ldyBFcnJvcihzKX19LHRoaXMuY29yZT1lLHRoaXMubG9nZ2VyPXcodCx0aGlzLm5hbWUpLHRoaXMucGFpcmluZ3M9bmV3IEN0KHRoaXMuY29yZSx0aGlzLmxvZ2dlcix0aGlzLm5hbWUsdGhpcy5zdG9yYWdlUHJlZml4KX1nZXQgY29udGV4dCgpe3JldHVybiB2KHRoaXMubG9nZ2VyKX1pc0luaXRpYWxpemVkKCl7aWYoIXRoaXMuaW5pdGlhbGl6ZWQpe2NvbnN0e21lc3NhZ2U6ZX09YyhcIk5PVF9JTklUSUFMSVpFRFwiLHRoaXMubmFtZSk7dGhyb3cgbmV3IEVycm9yKGUpfX1yZWdpc3RlclJlbGF5ZXJFdmVudHMoKXt0aGlzLmNvcmUucmVsYXllci5vbih5Lm1lc3NhZ2UsYXN5bmMgZT0+e2NvbnN0e3RvcGljOnQsbWVzc2FnZTppfT1lO2lmKHRoaXMuaWdub3JlZFBheWxvYWRUeXBlcy5pbmNsdWRlcyh0aGlzLmNvcmUuY3J5cHRvLmdldFBheWxvYWRUeXBlKGkpKSlyZXR1cm47Y29uc3Qgcz1hd2FpdCB0aGlzLmNvcmUuY3J5cHRvLmRlY29kZSh0LGkpO0VlKHMpPyh0aGlzLmNvcmUuaGlzdG9yeS5zZXQodCxzKSx0aGlzLm9uUmVsYXlFdmVudFJlcXVlc3Qoe3RvcGljOnQscGF5bG9hZDpzfSkpOm1pKHMpJiYoYXdhaXQgdGhpcy5jb3JlLmhpc3RvcnkucmVzb2x2ZShzKSx0aGlzLm9uUmVsYXlFdmVudFJlc3BvbnNlKHt0b3BpYzp0LHBheWxvYWQ6c30pKX0pfXJlZ2lzdGVyRXhwaXJlckV2ZW50cygpe3RoaXMuY29yZS5leHBpcmVyLm9uKG0uZXhwaXJlZCxhc3luYyBlPT57Y29uc3R7dG9waWM6dH09aGkoZS50YXJnZXQpO3QmJnRoaXMucGFpcmluZ3Mua2V5cy5pbmNsdWRlcyh0KSYmKGF3YWl0IHRoaXMuZGVsZXRlUGFpcmluZyh0LCEwKSx0aGlzLmV2ZW50cy5lbWl0KFwicGFpcmluZ19leHBpcmVcIix7dG9waWM6dH0pKX0pfX1jbGFzcyBSdCBleHRlbmRzIEt0e2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoZSx0KSx0aGlzLmNvcmU9ZSx0aGlzLmxvZ2dlcj10LHRoaXMucmVjb3Jkcz1uZXcgTWFwLHRoaXMuZXZlbnRzPW5ldyBBLHRoaXMubmFtZT1odCx0aGlzLnZlcnNpb249Y3QsdGhpcy5jYWNoZWQ9W10sdGhpcy5pbml0aWFsaXplZD0hMSx0aGlzLnN0b3JhZ2VQcmVmaXg9UCx0aGlzLmluaXQ9YXN5bmMoKT0+e3RoaXMuaW5pdGlhbGl6ZWR8fCh0aGlzLmxvZ2dlci50cmFjZShcIkluaXRpYWxpemVkXCIpLGF3YWl0IHRoaXMucmVzdG9yZSgpLHRoaXMuY2FjaGVkLmZvckVhY2goaT0+dGhpcy5yZWNvcmRzLnNldChpLmlkLGkpKSx0aGlzLmNhY2hlZD1bXSx0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKSx0aGlzLmluaXRpYWxpemVkPSEwKX0sdGhpcy5zZXQ9KGkscyxuKT0+e2lmKHRoaXMuaXNJbml0aWFsaXplZCgpLHRoaXMubG9nZ2VyLmRlYnVnKFwiU2V0dGluZyBKU09OLVJQQyByZXF1ZXN0IGhpc3RvcnkgcmVjb3JkXCIpLHRoaXMubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwic2V0XCIsdG9waWM6aSxyZXF1ZXN0OnMsY2hhaW5JZDpufSksdGhpcy5yZWNvcmRzLmhhcyhzLmlkKSlyZXR1cm47Y29uc3QgYT17aWQ6cy5pZCx0b3BpYzppLHJlcXVlc3Q6e21ldGhvZDpzLm1ldGhvZCxwYXJhbXM6cy5wYXJhbXN8fG51bGx9LGNoYWluSWQ6bn07dGhpcy5yZWNvcmRzLnNldChhLmlkLGEpLHRoaXMuZXZlbnRzLmVtaXQoQy5jcmVhdGVkLGEpfSx0aGlzLnJlc29sdmU9YXN5bmMgaT0+e2lmKHRoaXMuaXNJbml0aWFsaXplZCgpLHRoaXMubG9nZ2VyLmRlYnVnKFwiVXBkYXRpbmcgSlNPTi1SUEMgcmVzcG9uc2UgaGlzdG9yeSByZWNvcmRcIiksdGhpcy5sb2dnZXIudHJhY2Uoe3R5cGU6XCJtZXRob2RcIixtZXRob2Q6XCJ1cGRhdGVcIixyZXNwb25zZTppfSksIXRoaXMucmVjb3Jkcy5oYXMoaS5pZCkpcmV0dXJuO2NvbnN0IHM9YXdhaXQgdGhpcy5nZXRSZWNvcmQoaS5pZCk7dHlwZW9mIHMucmVzcG9uc2U+XCJ1XCImJihzLnJlc3BvbnNlPXZlKGkpP3tlcnJvcjppLmVycm9yfTp7cmVzdWx0OmkucmVzdWx0fSx0aGlzLnJlY29yZHMuc2V0KHMuaWQscyksdGhpcy5ldmVudHMuZW1pdChDLnVwZGF0ZWQscykpfSx0aGlzLmdldD1hc3luYyhpLHMpPT4odGhpcy5pc0luaXRpYWxpemVkKCksdGhpcy5sb2dnZXIuZGVidWcoXCJHZXR0aW5nIHJlY29yZFwiKSx0aGlzLmxvZ2dlci50cmFjZSh7dHlwZTpcIm1ldGhvZFwiLG1ldGhvZDpcImdldFwiLHRvcGljOmksaWQ6c30pLGF3YWl0IHRoaXMuZ2V0UmVjb3JkKHMpKSx0aGlzLmRlbGV0ZT0oaSxzKT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLHRoaXMubG9nZ2VyLmRlYnVnKFwiRGVsZXRpbmcgcmVjb3JkXCIpLHRoaXMubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwiZGVsZXRlXCIsaWQ6c30pLHRoaXMudmFsdWVzLmZvckVhY2gobj0+e2lmKG4udG9waWM9PT1pKXtpZih0eXBlb2YgczxcInVcIiYmbi5pZCE9PXMpcmV0dXJuO3RoaXMucmVjb3Jkcy5kZWxldGUobi5pZCksdGhpcy5ldmVudHMuZW1pdChDLmRlbGV0ZWQsbil9fSl9LHRoaXMuZXhpc3RzPWFzeW5jKGkscyk9Pih0aGlzLmlzSW5pdGlhbGl6ZWQoKSx0aGlzLnJlY29yZHMuaGFzKHMpPyhhd2FpdCB0aGlzLmdldFJlY29yZChzKSkudG9waWM9PT1pOiExKSx0aGlzLm9uPShpLHMpPT57dGhpcy5ldmVudHMub24oaSxzKX0sdGhpcy5vbmNlPShpLHMpPT57dGhpcy5ldmVudHMub25jZShpLHMpfSx0aGlzLm9mZj0oaSxzKT0+e3RoaXMuZXZlbnRzLm9mZihpLHMpfSx0aGlzLnJlbW92ZUxpc3RlbmVyPShpLHMpPT57dGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIoaSxzKX0sdGhpcy5sb2dnZXI9dyh0LHRoaXMubmFtZSl9Z2V0IGNvbnRleHQoKXtyZXR1cm4gdih0aGlzLmxvZ2dlcil9Z2V0IHN0b3JhZ2VLZXkoKXtyZXR1cm4gdGhpcy5zdG9yYWdlUHJlZml4K3RoaXMudmVyc2lvbitcIi8vXCIrdGhpcy5uYW1lfWdldCBzaXplKCl7cmV0dXJuIHRoaXMucmVjb3Jkcy5zaXplfWdldCBrZXlzKCl7cmV0dXJuIEFycmF5LmZyb20odGhpcy5yZWNvcmRzLmtleXMoKSl9Z2V0IHZhbHVlcygpe3JldHVybiBBcnJheS5mcm9tKHRoaXMucmVjb3Jkcy52YWx1ZXMoKSl9Z2V0IHBlbmRpbmcoKXtjb25zdCBlPVtdO3JldHVybiB0aGlzLnZhbHVlcy5mb3JFYWNoKHQ9PntpZih0eXBlb2YgdC5yZXNwb25zZTxcInVcIilyZXR1cm47Y29uc3QgaT17dG9waWM6dC50b3BpYyxyZXF1ZXN0OndlKHQucmVxdWVzdC5tZXRob2QsdC5yZXF1ZXN0LnBhcmFtcyx0LmlkKSxjaGFpbklkOnQuY2hhaW5JZH07cmV0dXJuIGUucHVzaChpKX0pLGV9YXN5bmMgc2V0SnNvblJwY1JlY29yZHMoZSl7YXdhaXQgdGhpcy5jb3JlLnN0b3JhZ2Uuc2V0SXRlbSh0aGlzLnN0b3JhZ2VLZXksZSl9YXN5bmMgZ2V0SnNvblJwY1JlY29yZHMoKXtyZXR1cm4gYXdhaXQgdGhpcy5jb3JlLnN0b3JhZ2UuZ2V0SXRlbSh0aGlzLnN0b3JhZ2VLZXkpfWdldFJlY29yZChlKXt0aGlzLmlzSW5pdGlhbGl6ZWQoKTtjb25zdCB0PXRoaXMucmVjb3Jkcy5nZXQoZSk7aWYoIXQpe2NvbnN0e21lc3NhZ2U6aX09YyhcIk5PX01BVENISU5HX0tFWVwiLGAke3RoaXMubmFtZX06ICR7ZX1gKTt0aHJvdyBuZXcgRXJyb3IoaSl9cmV0dXJuIHR9YXN5bmMgcGVyc2lzdCgpe2F3YWl0IHRoaXMuc2V0SnNvblJwY1JlY29yZHModGhpcy52YWx1ZXMpLHRoaXMuZXZlbnRzLmVtaXQoQy5zeW5jKX1hc3luYyByZXN0b3JlKCl7dHJ5e2NvbnN0IGU9YXdhaXQgdGhpcy5nZXRKc29uUnBjUmVjb3JkcygpO2lmKHR5cGVvZiBlPlwidVwifHwhZS5sZW5ndGgpcmV0dXJuO2lmKHRoaXMucmVjb3Jkcy5zaXplKXtjb25zdHttZXNzYWdlOnR9PWMoXCJSRVNUT1JFX1dJTExfT1ZFUlJJREVcIix0aGlzLm5hbWUpO3Rocm93IHRoaXMubG9nZ2VyLmVycm9yKHQpLG5ldyBFcnJvcih0KX10aGlzLmNhY2hlZD1lLHRoaXMubG9nZ2VyLmRlYnVnKGBTdWNjZXNzZnVsbHkgUmVzdG9yZWQgcmVjb3JkcyBmb3IgJHt0aGlzLm5hbWV9YCksdGhpcy5sb2dnZXIudHJhY2Uoe3R5cGU6XCJtZXRob2RcIixtZXRob2Q6XCJyZXN0b3JlXCIscmVjb3Jkczp0aGlzLnZhbHVlc30pfWNhdGNoKGUpe3RoaXMubG9nZ2VyLmRlYnVnKGBGYWlsZWQgdG8gUmVzdG9yZSByZWNvcmRzIGZvciAke3RoaXMubmFtZX1gKSx0aGlzLmxvZ2dlci5lcnJvcihlKX19cmVnaXN0ZXJFdmVudExpc3RlbmVycygpe3RoaXMuZXZlbnRzLm9uKEMuY3JlYXRlZCxlPT57Y29uc3QgdD1DLmNyZWF0ZWQ7dGhpcy5sb2dnZXIuaW5mbyhgRW1pdHRpbmcgJHt0fWApLHRoaXMubG9nZ2VyLmRlYnVnKHt0eXBlOlwiZXZlbnRcIixldmVudDp0LHJlY29yZDplfSksdGhpcy5wZXJzaXN0KCl9KSx0aGlzLmV2ZW50cy5vbihDLnVwZGF0ZWQsZT0+e2NvbnN0IHQ9Qy51cGRhdGVkO3RoaXMubG9nZ2VyLmluZm8oYEVtaXR0aW5nICR7dH1gKSx0aGlzLmxvZ2dlci5kZWJ1Zyh7dHlwZTpcImV2ZW50XCIsZXZlbnQ6dCxyZWNvcmQ6ZX0pLHRoaXMucGVyc2lzdCgpfSksdGhpcy5ldmVudHMub24oQy5kZWxldGVkLGU9Pntjb25zdCB0PUMuZGVsZXRlZDt0aGlzLmxvZ2dlci5pbmZvKGBFbWl0dGluZyAke3R9YCksdGhpcy5sb2dnZXIuZGVidWcoe3R5cGU6XCJldmVudFwiLGV2ZW50OnQscmVjb3JkOmV9KSx0aGlzLnBlcnNpc3QoKX0pfWlzSW5pdGlhbGl6ZWQoKXtpZighdGhpcy5pbml0aWFsaXplZCl7Y29uc3R7bWVzc2FnZTplfT1jKFwiTk9UX0lOSVRJQUxJWkVEXCIsdGhpcy5uYW1lKTt0aHJvdyBuZXcgRXJyb3IoZSl9fX1jbGFzcyBTdCBleHRlbmRzICR0e2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoZSx0KSx0aGlzLmNvcmU9ZSx0aGlzLmxvZ2dlcj10LHRoaXMuZXhwaXJhdGlvbnM9bmV3IE1hcCx0aGlzLmV2ZW50cz1uZXcgQSx0aGlzLm5hbWU9dXQsdGhpcy52ZXJzaW9uPWx0LHRoaXMuY2FjaGVkPVtdLHRoaXMuaW5pdGlhbGl6ZWQ9ITEsdGhpcy5zdG9yYWdlUHJlZml4PVAsdGhpcy5pbml0PWFzeW5jKCk9Pnt0aGlzLmluaXRpYWxpemVkfHwodGhpcy5sb2dnZXIudHJhY2UoXCJJbml0aWFsaXplZFwiKSxhd2FpdCB0aGlzLnJlc3RvcmUoKSx0aGlzLmNhY2hlZC5mb3JFYWNoKGk9PnRoaXMuZXhwaXJhdGlvbnMuc2V0KGkudGFyZ2V0LGkpKSx0aGlzLmNhY2hlZD1bXSx0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKSx0aGlzLmluaXRpYWxpemVkPSEwKX0sdGhpcy5oYXM9aT0+e3RyeXtjb25zdCBzPXRoaXMuZm9ybWF0VGFyZ2V0KGkpO3JldHVybiB0eXBlb2YgdGhpcy5nZXRFeHBpcmF0aW9uKHMpPFwidVwifWNhdGNoe3JldHVybiExfX0sdGhpcy5zZXQ9KGkscyk9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKTtjb25zdCBuPXRoaXMuZm9ybWF0VGFyZ2V0KGkpLGE9e3RhcmdldDpuLGV4cGlyeTpzfTt0aGlzLmV4cGlyYXRpb25zLnNldChuLGEpLHRoaXMuY2hlY2tFeHBpcnkobixhKSx0aGlzLmV2ZW50cy5lbWl0KG0uY3JlYXRlZCx7dGFyZ2V0Om4sZXhwaXJhdGlvbjphfSl9LHRoaXMuZ2V0PWk9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKTtjb25zdCBzPXRoaXMuZm9ybWF0VGFyZ2V0KGkpO3JldHVybiB0aGlzLmdldEV4cGlyYXRpb24ocyl9LHRoaXMuZGVsPWk9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKTtjb25zdCBzPXRoaXMuZm9ybWF0VGFyZ2V0KGkpO2lmKHRoaXMuaGFzKHMpKXtjb25zdCBuPXRoaXMuZ2V0RXhwaXJhdGlvbihzKTt0aGlzLmV4cGlyYXRpb25zLmRlbGV0ZShzKSx0aGlzLmV2ZW50cy5lbWl0KG0uZGVsZXRlZCx7dGFyZ2V0OnMsZXhwaXJhdGlvbjpufSl9fSx0aGlzLm9uPShpLHMpPT57dGhpcy5ldmVudHMub24oaSxzKX0sdGhpcy5vbmNlPShpLHMpPT57dGhpcy5ldmVudHMub25jZShpLHMpfSx0aGlzLm9mZj0oaSxzKT0+e3RoaXMuZXZlbnRzLm9mZihpLHMpfSx0aGlzLnJlbW92ZUxpc3RlbmVyPShpLHMpPT57dGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIoaSxzKX0sdGhpcy5sb2dnZXI9dyh0LHRoaXMubmFtZSl9Z2V0IGNvbnRleHQoKXtyZXR1cm4gdih0aGlzLmxvZ2dlcil9Z2V0IHN0b3JhZ2VLZXkoKXtyZXR1cm4gdGhpcy5zdG9yYWdlUHJlZml4K3RoaXMudmVyc2lvbitcIi8vXCIrdGhpcy5uYW1lfWdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy5leHBpcmF0aW9ucy5zaXplfWdldCBrZXlzKCl7cmV0dXJuIEFycmF5LmZyb20odGhpcy5leHBpcmF0aW9ucy5rZXlzKCkpfWdldCB2YWx1ZXMoKXtyZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmV4cGlyYXRpb25zLnZhbHVlcygpKX1mb3JtYXRUYXJnZXQoZSl7aWYodHlwZW9mIGU9PVwic3RyaW5nXCIpcmV0dXJuIGNpKGUpO2lmKHR5cGVvZiBlPT1cIm51bWJlclwiKXJldHVybiB1aShlKTtjb25zdHttZXNzYWdlOnR9PWMoXCJVTktOT1dOX1RZUEVcIixgVGFyZ2V0IHR5cGU6ICR7dHlwZW9mIGV9YCk7dGhyb3cgbmV3IEVycm9yKHQpfWFzeW5jIHNldEV4cGlyYXRpb25zKGUpe2F3YWl0IHRoaXMuY29yZS5zdG9yYWdlLnNldEl0ZW0odGhpcy5zdG9yYWdlS2V5LGUpfWFzeW5jIGdldEV4cGlyYXRpb25zKCl7cmV0dXJuIGF3YWl0IHRoaXMuY29yZS5zdG9yYWdlLmdldEl0ZW0odGhpcy5zdG9yYWdlS2V5KX1hc3luYyBwZXJzaXN0KCl7YXdhaXQgdGhpcy5zZXRFeHBpcmF0aW9ucyh0aGlzLnZhbHVlcyksdGhpcy5ldmVudHMuZW1pdChtLnN5bmMpfWFzeW5jIHJlc3RvcmUoKXt0cnl7Y29uc3QgZT1hd2FpdCB0aGlzLmdldEV4cGlyYXRpb25zKCk7aWYodHlwZW9mIGU+XCJ1XCJ8fCFlLmxlbmd0aClyZXR1cm47aWYodGhpcy5leHBpcmF0aW9ucy5zaXplKXtjb25zdHttZXNzYWdlOnR9PWMoXCJSRVNUT1JFX1dJTExfT1ZFUlJJREVcIix0aGlzLm5hbWUpO3Rocm93IHRoaXMubG9nZ2VyLmVycm9yKHQpLG5ldyBFcnJvcih0KX10aGlzLmNhY2hlZD1lLHRoaXMubG9nZ2VyLmRlYnVnKGBTdWNjZXNzZnVsbHkgUmVzdG9yZWQgZXhwaXJhdGlvbnMgZm9yICR7dGhpcy5uYW1lfWApLHRoaXMubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwicmVzdG9yZVwiLGV4cGlyYXRpb25zOnRoaXMudmFsdWVzfSl9Y2F0Y2goZSl7dGhpcy5sb2dnZXIuZGVidWcoYEZhaWxlZCB0byBSZXN0b3JlIGV4cGlyYXRpb25zIGZvciAke3RoaXMubmFtZX1gKSx0aGlzLmxvZ2dlci5lcnJvcihlKX19Z2V0RXhwaXJhdGlvbihlKXtjb25zdCB0PXRoaXMuZXhwaXJhdGlvbnMuZ2V0KGUpO2lmKCF0KXtjb25zdHttZXNzYWdlOml9PWMoXCJOT19NQVRDSElOR19LRVlcIixgJHt0aGlzLm5hbWV9OiAke2V9YCk7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IoaSksbmV3IEVycm9yKGkpfXJldHVybiB0fWNoZWNrRXhwaXJ5KGUsdCl7Y29uc3R7ZXhwaXJ5Oml9PXQ7YmUoaSktRGF0ZS5ub3coKTw9MCYmdGhpcy5leHBpcmUoZSx0KX1leHBpcmUoZSx0KXt0aGlzLmV4cGlyYXRpb25zLmRlbGV0ZShlKSx0aGlzLmV2ZW50cy5lbWl0KG0uZXhwaXJlZCx7dGFyZ2V0OmUsZXhwaXJhdGlvbjp0fSl9Y2hlY2tFeHBpcmF0aW9ucygpe3RoaXMuZXhwaXJhdGlvbnMuZm9yRWFjaCgoZSx0KT0+dGhpcy5jaGVja0V4cGlyeSh0LGUpKX1yZWdpc3RlckV2ZW50TGlzdGVuZXJzKCl7dGhpcy5jb3JlLmhlYXJ0YmVhdC5vbihHLnB1bHNlLCgpPT50aGlzLmNoZWNrRXhwaXJhdGlvbnMoKSksdGhpcy5ldmVudHMub24obS5jcmVhdGVkLGU9Pntjb25zdCB0PW0uY3JlYXRlZDt0aGlzLmxvZ2dlci5pbmZvKGBFbWl0dGluZyAke3R9YCksdGhpcy5sb2dnZXIuZGVidWcoe3R5cGU6XCJldmVudFwiLGV2ZW50OnQsZGF0YTplfSksdGhpcy5wZXJzaXN0KCl9KSx0aGlzLmV2ZW50cy5vbihtLmV4cGlyZWQsZT0+e2NvbnN0IHQ9bS5leHBpcmVkO3RoaXMubG9nZ2VyLmluZm8oYEVtaXR0aW5nICR7dH1gKSx0aGlzLmxvZ2dlci5kZWJ1Zyh7dHlwZTpcImV2ZW50XCIsZXZlbnQ6dCxkYXRhOmV9KSx0aGlzLnBlcnNpc3QoKX0pLHRoaXMuZXZlbnRzLm9uKG0uZGVsZXRlZCxlPT57Y29uc3QgdD1tLmRlbGV0ZWQ7dGhpcy5sb2dnZXIuaW5mbyhgRW1pdHRpbmcgJHt0fWApLHRoaXMubG9nZ2VyLmRlYnVnKHt0eXBlOlwiZXZlbnRcIixldmVudDp0LGRhdGE6ZX0pLHRoaXMucGVyc2lzdCgpfSl9aXNJbml0aWFsaXplZCgpe2lmKCF0aGlzLmluaXRpYWxpemVkKXtjb25zdHttZXNzYWdlOmV9PWMoXCJOT1RfSU5JVElBTElaRURcIix0aGlzLm5hbWUpO3Rocm93IG5ldyBFcnJvcihlKX19fXZhciBjcj1PYmplY3QuZGVmaW5lUHJvcGVydHksVHQ9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyx1cj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGxyPU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUsUHQ9KHIsZSx0KT0+ZSBpbiByP2NyKHIsZSx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6dH0pOnJbZV09dCx4dD0ocixlKT0+e2Zvcih2YXIgdCBpbiBlfHwoZT17fSkpdXIuY2FsbChlLHQpJiZQdChyLHQsZVt0XSk7aWYoVHQpZm9yKHZhciB0IG9mIFR0KGUpKWxyLmNhbGwoZSx0KSYmUHQocix0LGVbdF0pO3JldHVybiByfTtjbGFzcyBWIGV4dGVuZHMga3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZSksdGhpcy5wcm90b2NvbD1uZSx0aGlzLnZlcnNpb249S2UsdGhpcy5uYW1lPUIsdGhpcy5ldmVudHM9bmV3IEEsdGhpcy5pbml0aWFsaXplZD0hMSx0aGlzLm9uPShpLHMpPT50aGlzLmV2ZW50cy5vbihpLHMpLHRoaXMub25jZT0oaSxzKT0+dGhpcy5ldmVudHMub25jZShpLHMpLHRoaXMub2ZmPShpLHMpPT50aGlzLmV2ZW50cy5vZmYoaSxzKSx0aGlzLnJlbW92ZUxpc3RlbmVyPShpLHMpPT50aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihpLHMpLHRoaXMucHJvamVjdElkPWU/LnByb2plY3RJZDtjb25zdCB0PXR5cGVvZiBlPy5sb2dnZXI8XCJ1XCImJnR5cGVvZiBlPy5sb2dnZXIhPVwic3RyaW5nXCI/ZS5sb2dnZXI6Y2UodWUoe2xldmVsOmU/LmxvZ2dlcnx8JGUubG9nZ2VyfSkpO3RoaXMubG9nZ2VyPXcodCx0aGlzLm5hbWUpLHRoaXMuaGVhcnRiZWF0PW5ldyB6dCx0aGlzLmNyeXB0bz1uZXcgZ3QodGhpcyx0aGlzLmxvZ2dlcixlPy5rZXljaGFpbiksdGhpcy5oaXN0b3J5PW5ldyBSdCh0aGlzLHRoaXMubG9nZ2VyKSx0aGlzLmV4cGlyZXI9bmV3IFN0KHRoaXMsdGhpcy5sb2dnZXIpLHRoaXMuc3RvcmFnZT1lIT1udWxsJiZlLnN0b3JhZ2U/ZS5zdG9yYWdlOm5ldyBBdCh4dCh4dCh7fSxrZSksZT8uc3RvcmFnZU9wdGlvbnMpKSx0aGlzLnJlbGF5ZXI9bmV3IGZ0KHtjb3JlOnRoaXMsbG9nZ2VyOnRoaXMubG9nZ2VyLHJlbGF5VXJsOmU/LnJlbGF5VXJsLHByb2plY3RJZDp0aGlzLnByb2plY3RJZH0pLHRoaXMucGFpcmluZz1uZXcgX3QodGhpcyx0aGlzLmxvZ2dlcil9c3RhdGljIGFzeW5jIGluaXQoZSl7Y29uc3QgdD1uZXcgVihlKTtyZXR1cm4gYXdhaXQgdC5pbml0aWFsaXplKCksdH1nZXQgY29udGV4dCgpe3JldHVybiB2KHRoaXMubG9nZ2VyKX1hc3luYyBzdGFydCgpe3RoaXMuaW5pdGlhbGl6ZWR8fGF3YWl0IHRoaXMuaW5pdGlhbGl6ZSgpfWFzeW5jIGluaXRpYWxpemUoKXt0aGlzLmxvZ2dlci50cmFjZShcIkluaXRpYWxpemVkXCIpO3RyeXthd2FpdCB0aGlzLmNyeXB0by5pbml0KCksYXdhaXQgdGhpcy5oaXN0b3J5LmluaXQoKSxhd2FpdCB0aGlzLmV4cGlyZXIuaW5pdCgpLGF3YWl0IHRoaXMucmVsYXllci5pbml0KCksYXdhaXQgdGhpcy5oZWFydGJlYXQuaW5pdCgpLGF3YWl0IHRoaXMucGFpcmluZy5pbml0KCksdGhpcy5pbml0aWFsaXplZD0hMCx0aGlzLmxvZ2dlci5pbmZvKFwiQ29yZSBJbml0aWxpemF0aW9uIFN1Y2Nlc3NcIil9Y2F0Y2goZSl7dGhyb3cgdGhpcy5sb2dnZXIud2FybihgQ29yZSBJbml0aWxpemF0aW9uIEZhaWx1cmUgYXQgZXBvY2ggJHtEYXRlLm5vdygpfWAsZSksdGhpcy5sb2dnZXIuZXJyb3IoZS5tZXNzYWdlKSxlfX19Y29uc3QgZHI9VjtleHBvcnR7QiBhcyBDT1JFX0NPTlRFWFQsJGUgYXMgQ09SRV9ERUZBVUxULG5lIGFzIENPUkVfUFJPVE9DT0wsa2UgYXMgQ09SRV9TVE9SQUdFX09QVElPTlMsUCBhcyBDT1JFX1NUT1JBR0VfUFJFRklYLEtlIGFzIENPUkVfVkVSU0lPTixhZSBhcyBDUllQVE9fQ0xJRU5UX1NFRUQsQmUgYXMgQ1JZUFRPX0NPTlRFWFQsamUgYXMgQ1JZUFRPX0pXVF9UVEwsZHIgYXMgQ29yZSxndCBhcyBDcnlwdG8sdXQgYXMgRVhQSVJFUl9DT05URVhULEpzIGFzIEVYUElSRVJfREVGQVVMVF9UVEwsbSBhcyBFWFBJUkVSX0VWRU5UUyxsdCBhcyBFWFBJUkVSX1NUT1JBR0VfVkVSU0lPTixTdCBhcyBFeHBpcmVyLGh0IGFzIEhJU1RPUllfQ09OVEVYVCxDIGFzIEhJU1RPUllfRVZFTlRTLGN0IGFzIEhJU1RPUllfU1RPUkFHRV9WRVJTSU9OLFJ0IGFzIEpzb25ScGNIaXN0b3J5LFZlIGFzIEtFWUNIQUlOX0NPTlRFWFQscWUgYXMgS0VZQ0hBSU5fU1RPUkFHRV9WRVJTSU9OLGR0IGFzIEtleUNoYWluLEdlIGFzIE1FU1NBR0VTX0NPTlRFWFQsWWUgYXMgTUVTU0FHRVNfU1RPUkFHRV9WRVJTSU9OLHB0IGFzIE1lc3NhZ2VUcmFja2VyLGF0IGFzIFBBSVJJTkdfQ09OVEVYVCxZcyBhcyBQQUlSSU5HX0RFRkFVTFRfVFRMLE4gYXMgUEFJUklOR19SUENfT1BUUyxvdCBhcyBQQUlSSU5HX1NUT1JBR0VfVkVSU0lPTixudCBhcyBQRU5ESU5HX1NVQl9SRVNPTFVUSU9OX1RJTUVPVVQsSGUgYXMgUFVCTElTSEVSX0NPTlRFWFQsSmUgYXMgUFVCTElTSEVSX0RFRkFVTFRfVFRMLF90IGFzIFBhaXJpbmcsUWUgYXMgUkVMQVlFUl9DT05URVhULFdlIGFzIFJFTEFZRVJfREVGQVVMVF9MT0dHRVIsWGUgYXMgUkVMQVlFUl9ERUZBVUxUX1BST1RPQ09MLFplIGFzIFJFTEFZRVJfREVGQVVMVF9SRUxBWV9VUkwseSBhcyBSRUxBWUVSX0VWRU5UUyxNIGFzIFJFTEFZRVJfUFJPVklERVJfRVZFTlRTLG9lIGFzIFJFTEFZRVJfUkVDT05ORUNUX1RJTUVPVVQsdHQgYXMgUkVMQVlFUl9TREtfVkVSU0lPTixxcyBhcyBSRUxBWUVSX1NUT1JBR0VfT1BUSU9OUyxldCBhcyBSRUxBWUVSX1NVQlNDUklCRVJfU1VGRklYLGZ0IGFzIFJlbGF5ZXIsaXQgYXMgU1RPUkVfU1RPUkFHRV9WRVJTSU9OLHN0IGFzIFNVQlNDUklCRVJfQ09OVEVYVCxHcyBhcyBTVUJTQ1JJQkVSX0RFRkFVTFRfVFRMLEkgYXMgU1VCU0NSSUJFUl9FVkVOVFMscnQgYXMgU1VCU0NSSUJFUl9TVE9SQUdFX1ZFUlNJT04sQ3QgYXMgU3RvcmUsYnQgYXMgU3Vic2NyaWJlcixWIGFzIGRlZmF1bHR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iLCJpbXBvcnQgQiBmcm9tXCJwaW5vXCI7aW1wb3J0e1JFTEFZRVJfREVGQVVMVF9QUk9UT0NPTCBhcyBXLFJFTEFZRVJfRVZFTlRTIGFzIGVlLEVYUElSRVJfRVZFTlRTIGFzIHNlLFN0b3JlIGFzIEcsQ29yZSBhcyB0ZX1mcm9tXCJAd2FsbGV0Y29ubmVjdC9jb3JlXCI7aW1wb3J0e2dldERlZmF1bHRMb2dnZXJPcHRpb25zIGFzIGllLGdlbmVyYXRlQ2hpbGRMb2dnZXIgYXMgbmUsZ2V0TG9nZ2VyQ29udGV4dCBhcyByZX1mcm9tXCJAd2FsbGV0Y29ubmVjdC9sb2dnZXJcIjtpbXBvcnR7SUVuZ2luZSBhcyBvZSxJU2lnbkNsaWVudCBhcyBhZX1mcm9tXCJAd2FsbGV0Y29ubmVjdC90eXBlc1wiO2ltcG9ydHtUWVBFXzEgYXMgY2UsY3JlYXRlRGVsYXllZFByb21pc2UgYXMgUixlbmdpbmVFdmVudCBhcyBoLGdldEludGVybmFsRXJyb3IgYXMgYSxjYWxjRXhwaXJ5IGFzIE4sZ2V0U2RrRXJyb3IgYXMgSSxpc1Nlc3Npb25Db21wYXRpYmxlIGFzIGxlLGlzRXhwaXJlZCBhcyBmLGlzVmFsaWRQYXJhbXMgYXMgbSxpc1VuZGVmaW5lZCBhcyBoZSxpc1ZhbGlkUmVxdWlyZWROYW1lc3BhY2VzIGFzIHBlLGlzVmFsaWRSZWxheXMgYXMgZGUsaXNWYWxpZE5hbWVzcGFjZXMgYXMgJCxpc0NvbmZvcm1pbmdOYW1lc3BhY2VzIGFzIHosaXNWYWxpZFN0cmluZyBhcyB4LGlzVmFsaWRFcnJvclJlYXNvbiBhcyBnZSxpc1ZhbGlkUmVsYXkgYXMgd2UsaXNWYWxpZENvbnRyb2xsZXIgYXMgbWUsaXNWYWxpZE5hbWVzcGFjZXNDaGFpbklkIGFzIGosaXNWYWxpZFJlcXVlc3QgYXMgdWUsaXNWYWxpZE5hbWVzcGFjZXNSZXF1ZXN0IGFzIHllLGlzVmFsaWRSZXNwb25zZSBhcyBTZSxpc1ZhbGlkRXZlbnQgYXMgSWUsaXNWYWxpZE5hbWVzcGFjZXNFdmVudCBhcyBFZSxwYXJzZUV4cGlyZXJUYXJnZXQgYXMgX2UsaXNWYWxpZElkIGFzIFJlLGdldEFwcE1ldGFkYXRhIGFzIE5lfWZyb21cIkB3YWxsZXRjb25uZWN0L3V0aWxzXCI7aW1wb3J0IGZlLHtFdmVudEVtaXR0ZXIgYXMgcWV9ZnJvbVwiZXZlbnRzXCI7aW1wb3J0e1RISVJUWV9EQVlTIGFzIHZlLFNFVkVOX0RBWVMgYXMgUGUsRklWRV9NSU5VVEVTIGFzIHUsT05FX0RBWSBhcyBxLFRISVJUWV9TRUNPTkRTIGFzIGt9ZnJvbVwiQHdhbGxldGNvbm5lY3QvdGltZVwiO2ltcG9ydHtpc0pzb25ScGNSZXN1bHQgYXMgRSxpc0pzb25ScGNFcnJvciBhcyBfLGZvcm1hdEpzb25ScGNSZXF1ZXN0IGFzIFZlLGZvcm1hdEpzb25ScGNSZXN1bHQgYXMgT2UsZm9ybWF0SnNvblJwY0Vycm9yIGFzIFRlLGlzSnNvblJwY1JlcXVlc3QgYXMgeGUsaXNKc29uUnBjUmVzcG9uc2UgYXMgRGV9ZnJvbVwiQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlsc1wiO2NvbnN0IE09XCJ3Y1wiLEs9MixVPVwiY2xpZW50XCIsRD1gJHtNfUAke0t9OiR7VX06YCxBPXtuYW1lOlUsbG9nZ2VyOlwiZXJyb3JcIixjb250cm9sbGVyOiExLHJlbGF5VXJsOlwid3NzOi8vcmVsYXkud2FsbGV0Y29ubmVjdC5jb21cIn0sQWU9e3Nlc3Npb25fcHJvcG9zYWw6XCJzZXNzaW9uX3Byb3Bvc2FsXCIsc2Vzc2lvbl91cGRhdGU6XCJzZXNzaW9uX3VwZGF0ZVwiLHNlc3Npb25fZXh0ZW5kOlwic2Vzc2lvbl9leHRlbmRcIixzZXNzaW9uX3Bpbmc6XCJzZXNzaW9uX3BpbmdcIixzZXNzaW9uX2RlbGV0ZTpcInNlc3Npb25fZGVsZXRlXCIsc2Vzc2lvbl9leHBpcmU6XCJzZXNzaW9uX2V4cGlyZVwiLHNlc3Npb25fcmVxdWVzdDpcInNlc3Npb25fcmVxdWVzdFwiLHNlc3Npb25fZXZlbnQ6XCJzZXNzaW9uX2V2ZW50XCIscHJvcG9zYWxfZXhwaXJlOlwicHJvcG9zYWxfZXhwaXJlXCJ9LENlPXtkYXRhYmFzZTpcIjptZW1vcnk6XCJ9LExlPXtjcmVhdGVkOlwiaGlzdG9yeV9jcmVhdGVkXCIsdXBkYXRlZDpcImhpc3RvcnlfdXBkYXRlZFwiLGRlbGV0ZWQ6XCJoaXN0b3J5X2RlbGV0ZWRcIixzeW5jOlwiaGlzdG9yeV9zeW5jXCJ9LGJlPVwiaGlzdG9yeVwiLEdlPVwiMC4zXCIsWT1cInByb3Bvc2FsXCIsJGU9dmUsWD1cInNlc3Npb25cIixPPVBlLEo9XCJlbmdpbmVcIix2PXt3Y19zZXNzaW9uUHJvcG9zZTp7cmVxOnt0dGw6dSxwcm9tcHQ6ITAsdGFnOjExMDB9LHJlczp7dHRsOnUscHJvbXB0OiExLHRhZzoxMTAxfX0sd2Nfc2Vzc2lvblNldHRsZTp7cmVxOnt0dGw6dSxwcm9tcHQ6ITEsdGFnOjExMDJ9LHJlczp7dHRsOnUscHJvbXB0OiExLHRhZzoxMTAzfX0sd2Nfc2Vzc2lvblVwZGF0ZTp7cmVxOnt0dGw6cSxwcm9tcHQ6ITEsdGFnOjExMDR9LHJlczp7dHRsOnEscHJvbXB0OiExLHRhZzoxMTA1fX0sd2Nfc2Vzc2lvbkV4dGVuZDp7cmVxOnt0dGw6cSxwcm9tcHQ6ITEsdGFnOjExMDZ9LHJlczp7dHRsOnEscHJvbXB0OiExLHRhZzoxMTA3fX0sd2Nfc2Vzc2lvblJlcXVlc3Q6e3JlcTp7dHRsOnUscHJvbXB0OiEwLHRhZzoxMTA4fSxyZXM6e3R0bDp1LHByb21wdDohMSx0YWc6MTEwOX19LHdjX3Nlc3Npb25FdmVudDp7cmVxOnt0dGw6dSxwcm9tcHQ6ITAsdGFnOjExMTB9LHJlczp7dHRsOnUscHJvbXB0OiExLHRhZzoxMTExfX0sd2Nfc2Vzc2lvbkRlbGV0ZTp7cmVxOnt0dGw6cSxwcm9tcHQ6ITEsdGFnOjExMTJ9LHJlczp7dHRsOnEscHJvbXB0OiExLHRhZzoxMTEzfX0sd2Nfc2Vzc2lvblBpbmc6e3JlcTp7dHRsOmsscHJvbXB0OiExLHRhZzoxMTE0fSxyZXM6e3R0bDprLHByb21wdDohMSx0YWc6MTExNX19fSxIPVwicmVxdWVzdFwiO3ZhciBNZT1PYmplY3QuZGVmaW5lUHJvcGVydHksS2U9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMsVWU9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMsRj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLHplPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksamU9T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxRPShwLG4sZSk9Pm4gaW4gcD9NZShwLG4se2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmV9KTpwW25dPWUsUz0ocCxuKT0+e2Zvcih2YXIgZSBpbiBufHwobj17fSkpemUuY2FsbChuLGUpJiZRKHAsZSxuW2VdKTtpZihGKWZvcih2YXIgZSBvZiBGKG4pKWplLmNhbGwobixlKSYmUShwLGUsbltlXSk7cmV0dXJuIHB9LFo9KHAsbik9PktlKHAsVWUobikpO2NsYXNzIGtlIGV4dGVuZHMgb2V7Y29uc3RydWN0b3Iobil7c3VwZXIobiksdGhpcy5uYW1lPUosdGhpcy5ldmVudHM9bmV3IGZlLHRoaXMuaW5pdGlhbGl6ZWQ9ITEsdGhpcy5pZ25vcmVkUGF5bG9hZFR5cGVzPVtjZV0sdGhpcy5pbml0PWFzeW5jKCk9Pnt0aGlzLmluaXRpYWxpemVkfHwoYXdhaXQgdGhpcy5jbGVhbnVwKCksdGhpcy5yZWdpc3RlclJlbGF5ZXJFdmVudHMoKSx0aGlzLnJlZ2lzdGVyRXhwaXJlckV2ZW50cygpLHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5yZWdpc3Rlcih7bWV0aG9kczpPYmplY3Qua2V5cyh2KX0pLHRoaXMuaW5pdGlhbGl6ZWQ9ITApfSx0aGlzLmNvbm5lY3Q9YXN5bmMgZT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuaXNWYWxpZENvbm5lY3QoZSk7Y29uc3R7cGFpcmluZ1RvcGljOnMscmVxdWlyZWROYW1lc3BhY2VzOnQscmVsYXlzOml9PWU7bGV0IHI9cyxvLGM9ITE7aWYociYmKGM9dGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLnBhaXJpbmdzLmdldChyKS5hY3RpdmUpLCFyfHwhYyl7Y29uc3R7dG9waWM6eSx1cmk6ZH09YXdhaXQgdGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLmNyZWF0ZSgpO3I9eSxvPWR9Y29uc3QgbD1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLmNyeXB0by5nZW5lcmF0ZUtleVBhaXIoKSxnPXtyZXF1aXJlZE5hbWVzcGFjZXM6dCxyZWxheXM6aT8/W3twcm90b2NvbDpXfV0scHJvcG9zZXI6e3B1YmxpY0tleTpsLG1ldGFkYXRhOnRoaXMuY2xpZW50Lm1ldGFkYXRhfX0se3JlamVjdDp3LHJlc29sdmU6UCxkb25lOkx9PVIoKTtpZih0aGlzLmV2ZW50cy5vbmNlKGgoXCJzZXNzaW9uX2Nvbm5lY3RcIiksYXN5bmMoe2Vycm9yOnksc2Vzc2lvbjpkfSk9PntpZih5KXcoeSk7ZWxzZSBpZihkKXtkLnNlbGYucHVibGljS2V5PWw7Y29uc3QgVj1aKFMoe30sZCkse3JlcXVpcmVkTmFtZXNwYWNlczp0fSk7YXdhaXQgdGhpcy5jbGllbnQuc2Vzc2lvbi5zZXQoZC50b3BpYyxWKSxhd2FpdCB0aGlzLnNldEV4cGlyeShkLnRvcGljLGQuZXhwaXJ5KSxyJiZhd2FpdCB0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcudXBkYXRlTWV0YWRhdGEoe3RvcGljOnIsbWV0YWRhdGE6ZC5wZWVyLm1ldGFkYXRhfSksUChWKX19KSwhcil7Y29uc3R7bWVzc2FnZTp5fT1hKFwiTk9fTUFUQ0hJTkdfS0VZXCIsYGNvbm5lY3QoKSBwYWlyaW5nIHRvcGljOiAke3J9YCk7dGhyb3cgbmV3IEVycm9yKHkpfWNvbnN0IFQ9YXdhaXQgdGhpcy5zZW5kUmVxdWVzdChyLFwid2Nfc2Vzc2lvblByb3Bvc2VcIixnKSxiPU4odSk7cmV0dXJuIGF3YWl0IHRoaXMuc2V0UHJvcG9zYWwoVCxTKHtpZDpULGV4cGlyeTpifSxnKSkse3VyaTpvLGFwcHJvdmFsOkx9fSx0aGlzLnBhaXI9YXN5bmMgZT0+KHRoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5wYWlyKGUpKSx0aGlzLmFwcHJvdmU9YXN5bmMgZT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuaXNWYWxpZEFwcHJvdmUoZSk7Y29uc3R7aWQ6cyxyZWxheVByb3RvY29sOnQsbmFtZXNwYWNlczppfT1lLHtwYWlyaW5nVG9waWM6cixwcm9wb3NlcjpvLHJlcXVpcmVkTmFtZXNwYWNlczpjfT10aGlzLmNsaWVudC5wcm9wb3NhbC5nZXQocyksbD1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLmNyeXB0by5nZW5lcmF0ZUtleVBhaXIoKSxnPW8ucHVibGljS2V5LHc9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZ2VuZXJhdGVTaGFyZWRLZXkobCxnKSxQPXtyZWxheTp7cHJvdG9jb2w6dD8/XCJpcm5cIn0sbmFtZXNwYWNlczppLHJlcXVpcmVkTmFtZXNwYWNlczpjLGNvbnRyb2xsZXI6e3B1YmxpY0tleTpsLG1ldGFkYXRhOnRoaXMuY2xpZW50Lm1ldGFkYXRhfSxleHBpcnk6TihPKX07YXdhaXQgdGhpcy5jbGllbnQuY29yZS5yZWxheWVyLnN1YnNjcmliZSh3KTtjb25zdCBMPWF3YWl0IHRoaXMuc2VuZFJlcXVlc3QodyxcIndjX3Nlc3Npb25TZXR0bGVcIixQKSx7ZG9uZTpULHJlc29sdmU6YixyZWplY3Q6eX09UigpO3RoaXMuZXZlbnRzLm9uY2UoaChcInNlc3Npb25fYXBwcm92ZVwiLEwpLCh7ZXJyb3I6Vn0pPT57Vj95KFYpOmIodGhpcy5jbGllbnQuc2Vzc2lvbi5nZXQodykpfSk7Y29uc3QgZD1aKFMoe30sUCkse3RvcGljOncsYWNrbm93bGVkZ2VkOiExLHNlbGY6UC5jb250cm9sbGVyLHBlZXI6e3B1YmxpY0tleTpvLnB1YmxpY0tleSxtZXRhZGF0YTpvLm1ldGFkYXRhfSxjb250cm9sbGVyOmx9KTtyZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuc2Vzc2lvbi5zZXQodyxkKSxhd2FpdCB0aGlzLnNldEV4cGlyeSh3LE4oTykpLHImJmF3YWl0IHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy51cGRhdGVNZXRhZGF0YSh7dG9waWM6cixtZXRhZGF0YTpkLnBlZXIubWV0YWRhdGF9KSxyJiZzJiYoYXdhaXQgdGhpcy5zZW5kUmVzdWx0KHMscix7cmVsYXk6e3Byb3RvY29sOnQ/P1wiaXJuXCJ9LHJlc3BvbmRlclB1YmxpY0tleTpsfSksYXdhaXQgdGhpcy5jbGllbnQucHJvcG9zYWwuZGVsZXRlKHMsSShcIlVTRVJfRElTQ09OTkVDVEVEXCIpKSxhd2FpdCB0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcuYWN0aXZhdGUoe3RvcGljOnJ9KSkse3RvcGljOncsYWNrbm93bGVkZ2VkOlR9fSx0aGlzLnJlamVjdD1hc3luYyBlPT57dGhpcy5pc0luaXRpYWxpemVkKCksYXdhaXQgdGhpcy5pc1ZhbGlkUmVqZWN0KGUpO2NvbnN0e2lkOnMscmVhc29uOnR9PWUse3BhaXJpbmdUb3BpYzppfT10aGlzLmNsaWVudC5wcm9wb3NhbC5nZXQocyk7aSYmKGF3YWl0IHRoaXMuc2VuZEVycm9yKHMsaSx0KSxhd2FpdCB0aGlzLmNsaWVudC5wcm9wb3NhbC5kZWxldGUocyxJKFwiVVNFUl9ESVNDT05ORUNURURcIikpKX0sdGhpcy51cGRhdGU9YXN5bmMgZT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuaXNWYWxpZFVwZGF0ZShlKTtjb25zdHt0b3BpYzpzLG5hbWVzcGFjZXM6dH09ZSxpPWF3YWl0IHRoaXMuc2VuZFJlcXVlc3QocyxcIndjX3Nlc3Npb25VcGRhdGVcIix7bmFtZXNwYWNlczp0fSkse2RvbmU6cixyZXNvbHZlOm8scmVqZWN0OmN9PVIoKTtyZXR1cm4gdGhpcy5ldmVudHMub25jZShoKFwic2Vzc2lvbl91cGRhdGVcIixpKSwoe2Vycm9yOmx9KT0+e2w/YyhsKTpvKCl9KSxhd2FpdCB0aGlzLmNsaWVudC5zZXNzaW9uLnVwZGF0ZShzLHtuYW1lc3BhY2VzOnR9KSx7YWNrbm93bGVkZ2VkOnJ9fSx0aGlzLmV4dGVuZD1hc3luYyBlPT57dGhpcy5pc0luaXRpYWxpemVkKCksYXdhaXQgdGhpcy5pc1ZhbGlkRXh0ZW5kKGUpO2NvbnN0e3RvcGljOnN9PWUsdD1hd2FpdCB0aGlzLnNlbmRSZXF1ZXN0KHMsXCJ3Y19zZXNzaW9uRXh0ZW5kXCIse30pLHtkb25lOmkscmVzb2x2ZTpyLHJlamVjdDpvfT1SKCk7cmV0dXJuIHRoaXMuZXZlbnRzLm9uY2UoaChcInNlc3Npb25fZXh0ZW5kXCIsdCksKHtlcnJvcjpjfSk9PntjP28oYyk6cigpfSksYXdhaXQgdGhpcy5zZXRFeHBpcnkocyxOKE8pKSx7YWNrbm93bGVkZ2VkOml9fSx0aGlzLnJlcXVlc3Q9YXN5bmMgZT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuaXNWYWxpZFJlcXVlc3QoZSk7Y29uc3R7Y2hhaW5JZDpzLHJlcXVlc3Q6dCx0b3BpYzppfT1lLHI9YXdhaXQgdGhpcy5zZW5kUmVxdWVzdChpLFwid2Nfc2Vzc2lvblJlcXVlc3RcIix7cmVxdWVzdDp0LGNoYWluSWQ6c30pLHtkb25lOm8scmVzb2x2ZTpjLHJlamVjdDpsfT1SKCk7cmV0dXJuIHRoaXMuZXZlbnRzLm9uY2UoaChcInNlc3Npb25fcmVxdWVzdFwiLHIpLCh7ZXJyb3I6ZyxyZXN1bHQ6d30pPT57Zz9sKGcpOmModyl9KSxhd2FpdCBvKCl9LHRoaXMucmVzcG9uZD1hc3luYyBlPT57dGhpcy5pc0luaXRpYWxpemVkKCksYXdhaXQgdGhpcy5pc1ZhbGlkUmVzcG9uZChlKTtjb25zdHt0b3BpYzpzLHJlc3BvbnNlOnR9PWUse2lkOml9PXQ7RSh0KT9hd2FpdCB0aGlzLnNlbmRSZXN1bHQoaSxzLHQucmVzdWx0KTpfKHQpJiZhd2FpdCB0aGlzLnNlbmRFcnJvcihpLHMsdC5lcnJvciksdGhpcy5kZWxldGVQZW5kaW5nU2Vzc2lvblJlcXVlc3QoZS5yZXNwb25zZS5pZCx7bWVzc2FnZTpcImZ1bGZpbGxlZFwiLGNvZGU6MH0pfSx0aGlzLnBpbmc9YXN5bmMgZT0+e3RoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuaXNWYWxpZFBpbmcoZSk7Y29uc3R7dG9waWM6c309ZTtpZih0aGlzLmNsaWVudC5zZXNzaW9uLmtleXMuaW5jbHVkZXMocykpe2NvbnN0IHQ9YXdhaXQgdGhpcy5zZW5kUmVxdWVzdChzLFwid2Nfc2Vzc2lvblBpbmdcIix7fSkse2RvbmU6aSxyZXNvbHZlOnIscmVqZWN0Om99PVIoKTt0aGlzLmV2ZW50cy5vbmNlKGgoXCJzZXNzaW9uX3BpbmdcIix0KSwoe2Vycm9yOmN9KT0+e2M/byhjKTpyKCl9KSxhd2FpdCBpKCl9ZWxzZSB0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcucGFpcmluZ3Mua2V5cy5pbmNsdWRlcyhzKSYmYXdhaXQgdGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLnBpbmcoe3RvcGljOnN9KX0sdGhpcy5lbWl0PWFzeW5jIGU9Pnt0aGlzLmlzSW5pdGlhbGl6ZWQoKSxhd2FpdCB0aGlzLmlzVmFsaWRFbWl0KGUpO2NvbnN0e3RvcGljOnMsZXZlbnQ6dCxjaGFpbklkOml9PWU7YXdhaXQgdGhpcy5zZW5kUmVxdWVzdChzLFwid2Nfc2Vzc2lvbkV2ZW50XCIse2V2ZW50OnQsY2hhaW5JZDppfSl9LHRoaXMuZGlzY29ubmVjdD1hc3luYyBlPT57dGhpcy5pc0luaXRpYWxpemVkKCksYXdhaXQgdGhpcy5pc1ZhbGlkRGlzY29ubmVjdChlKTtjb25zdHt0b3BpYzpzfT1lO3RoaXMuY2xpZW50LnNlc3Npb24ua2V5cy5pbmNsdWRlcyhzKT8oYXdhaXQgdGhpcy5zZW5kUmVxdWVzdChzLFwid2Nfc2Vzc2lvbkRlbGV0ZVwiLEkoXCJVU0VSX0RJU0NPTk5FQ1RFRFwiKSksYXdhaXQgdGhpcy5kZWxldGVTZXNzaW9uKHMpKTphd2FpdCB0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcuZGlzY29ubmVjdCh7dG9waWM6c30pfSx0aGlzLmZpbmQ9ZT0+KHRoaXMuaXNJbml0aWFsaXplZCgpLHRoaXMuY2xpZW50LnNlc3Npb24uZ2V0QWxsKCkuZmlsdGVyKHM9PmxlKHMsZSkpKSx0aGlzLmdldFBlbmRpbmdTZXNzaW9uUmVxdWVzdHM9KCk9Pih0aGlzLmlzSW5pdGlhbGl6ZWQoKSx0aGlzLmNsaWVudC5wZW5kaW5nUmVxdWVzdC5nZXRBbGwoKSksdGhpcy5kZWxldGVTZXNzaW9uPWFzeW5jKGUscyk9Pntjb25zdHtzZWxmOnR9PXRoaXMuY2xpZW50LnNlc3Npb24uZ2V0KGUpO2F3YWl0IHRoaXMuY2xpZW50LmNvcmUucmVsYXllci51bnN1YnNjcmliZShlKSxhd2FpdCBQcm9taXNlLmFsbChbdGhpcy5jbGllbnQuc2Vzc2lvbi5kZWxldGUoZSxJKFwiVVNFUl9ESVNDT05ORUNURURcIikpLHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmRlbGV0ZUtleVBhaXIodC5wdWJsaWNLZXkpLHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmRlbGV0ZVN5bUtleShlKSxzP1Byb21pc2UucmVzb2x2ZSgpOnRoaXMuY2xpZW50LmNvcmUuZXhwaXJlci5kZWwoZSldKX0sdGhpcy5kZWxldGVQcm9wb3NhbD1hc3luYyhlLHMpPT57YXdhaXQgUHJvbWlzZS5hbGwoW3RoaXMuY2xpZW50LnByb3Bvc2FsLmRlbGV0ZShlLEkoXCJVU0VSX0RJU0NPTk5FQ1RFRFwiKSkscz9Qcm9taXNlLnJlc29sdmUoKTp0aGlzLmNsaWVudC5jb3JlLmV4cGlyZXIuZGVsKGUpXSl9LHRoaXMuZGVsZXRlUGVuZGluZ1Nlc3Npb25SZXF1ZXN0PWFzeW5jKGUscyx0PSExKT0+e2F3YWl0IFByb21pc2UuYWxsKFt0aGlzLmNsaWVudC5wZW5kaW5nUmVxdWVzdC5kZWxldGUoZSxzKSx0P1Byb21pc2UucmVzb2x2ZSgpOnRoaXMuY2xpZW50LmNvcmUuZXhwaXJlci5kZWwoZSldKX0sdGhpcy5zZXRFeHBpcnk9YXN5bmMoZSxzKT0+e3RoaXMuY2xpZW50LnNlc3Npb24ua2V5cy5pbmNsdWRlcyhlKSYmYXdhaXQgdGhpcy5jbGllbnQuc2Vzc2lvbi51cGRhdGUoZSx7ZXhwaXJ5OnN9KSx0aGlzLmNsaWVudC5jb3JlLmV4cGlyZXIuc2V0KGUscyl9LHRoaXMuc2V0UHJvcG9zYWw9YXN5bmMoZSxzKT0+e2F3YWl0IHRoaXMuY2xpZW50LnByb3Bvc2FsLnNldChlLHMpLHRoaXMuY2xpZW50LmNvcmUuZXhwaXJlci5zZXQoZSxzLmV4cGlyeSl9LHRoaXMuc2V0UGVuZGluZ1Nlc3Npb25SZXF1ZXN0PWFzeW5jIGU9Pntjb25zdCBzPXYud2Nfc2Vzc2lvblJlcXVlc3QucmVxLnR0bCx7aWQ6dCx0b3BpYzppLHBhcmFtczpyfT1lO2F3YWl0IHRoaXMuY2xpZW50LnBlbmRpbmdSZXF1ZXN0LnNldCh0LHtpZDp0LHRvcGljOmkscGFyYW1zOnJ9KSxzJiZ0aGlzLmNsaWVudC5jb3JlLmV4cGlyZXIuc2V0KHQscyl9LHRoaXMuc2VuZFJlcXVlc3Q9YXN5bmMoZSxzLHQpPT57Y29uc3QgaT1WZShzLHQpLHI9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZW5jb2RlKGUsaSksbz12W3NdLnJlcTtyZXR1cm4gdGhpcy5jbGllbnQuY29yZS5oaXN0b3J5LnNldChlLGkpLHRoaXMuY2xpZW50LmNvcmUucmVsYXllci5wdWJsaXNoKGUscixvKSxpLmlkfSx0aGlzLnNlbmRSZXN1bHQ9YXN5bmMoZSxzLHQpPT57Y29uc3QgaT1PZShlLHQpLHI9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZW5jb2RlKHMsaSksbz1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLmhpc3RvcnkuZ2V0KHMsZSksYz12W28ucmVxdWVzdC5tZXRob2RdLnJlczt0aGlzLmNsaWVudC5jb3JlLnJlbGF5ZXIucHVibGlzaChzLHIsYyksYXdhaXQgdGhpcy5jbGllbnQuY29yZS5oaXN0b3J5LnJlc29sdmUoaSl9LHRoaXMuc2VuZEVycm9yPWFzeW5jKGUscyx0KT0+e2NvbnN0IGk9VGUoZSx0KSxyPWF3YWl0IHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmVuY29kZShzLGkpLG89YXdhaXQgdGhpcy5jbGllbnQuY29yZS5oaXN0b3J5LmdldChzLGUpLGM9dltvLnJlcXVlc3QubWV0aG9kXS5yZXM7dGhpcy5jbGllbnQuY29yZS5yZWxheWVyLnB1Ymxpc2gocyxyLGMpLGF3YWl0IHRoaXMuY2xpZW50LmNvcmUuaGlzdG9yeS5yZXNvbHZlKGkpfSx0aGlzLmNsZWFudXA9YXN5bmMoKT0+e2NvbnN0IGU9W10scz1bXTt0aGlzLmNsaWVudC5zZXNzaW9uLmdldEFsbCgpLmZvckVhY2godD0+e2YodC5leHBpcnkpJiZlLnB1c2godC50b3BpYyl9KSx0aGlzLmNsaWVudC5wcm9wb3NhbC5nZXRBbGwoKS5mb3JFYWNoKHQ9PntmKHQuZXhwaXJ5KSYmcy5wdXNoKHQuaWQpfSksYXdhaXQgUHJvbWlzZS5hbGwoWy4uLmUubWFwKHQ9PnRoaXMuZGVsZXRlU2Vzc2lvbih0KSksLi4ucy5tYXAodD0+dGhpcy5kZWxldGVQcm9wb3NhbCh0KSldKX0sdGhpcy5vblJlbGF5RXZlbnRSZXF1ZXN0PWU9Pntjb25zdHt0b3BpYzpzLHBheWxvYWQ6dH09ZSxpPXQubWV0aG9kO3N3aXRjaChpKXtjYXNlXCJ3Y19zZXNzaW9uUHJvcG9zZVwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblByb3Bvc2VSZXF1ZXN0KHMsdCk7Y2FzZVwid2Nfc2Vzc2lvblNldHRsZVwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblNldHRsZVJlcXVlc3Qocyx0KTtjYXNlXCJ3Y19zZXNzaW9uVXBkYXRlXCI6cmV0dXJuIHRoaXMub25TZXNzaW9uVXBkYXRlUmVxdWVzdChzLHQpO2Nhc2VcIndjX3Nlc3Npb25FeHRlbmRcIjpyZXR1cm4gdGhpcy5vblNlc3Npb25FeHRlbmRSZXF1ZXN0KHMsdCk7Y2FzZVwid2Nfc2Vzc2lvblBpbmdcIjpyZXR1cm4gdGhpcy5vblNlc3Npb25QaW5nUmVxdWVzdChzLHQpO2Nhc2VcIndjX3Nlc3Npb25EZWxldGVcIjpyZXR1cm4gdGhpcy5vblNlc3Npb25EZWxldGVSZXF1ZXN0KHMsdCk7Y2FzZVwid2Nfc2Vzc2lvblJlcXVlc3RcIjpyZXR1cm4gdGhpcy5vblNlc3Npb25SZXF1ZXN0KHMsdCk7Y2FzZVwid2Nfc2Vzc2lvbkV2ZW50XCI6cmV0dXJuIHRoaXMub25TZXNzaW9uRXZlbnRSZXF1ZXN0KHMsdCk7ZGVmYXVsdDpyZXR1cm4gdGhpcy5jbGllbnQubG9nZ2VyLmluZm8oYFVuc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kICR7aX1gKX19LHRoaXMub25SZWxheUV2ZW50UmVzcG9uc2U9YXN5bmMgZT0+e2NvbnN0e3RvcGljOnMscGF5bG9hZDp0fT1lLGk9KGF3YWl0IHRoaXMuY2xpZW50LmNvcmUuaGlzdG9yeS5nZXQocyx0LmlkKSkucmVxdWVzdC5tZXRob2Q7c3dpdGNoKGkpe2Nhc2VcIndjX3Nlc3Npb25Qcm9wb3NlXCI6cmV0dXJuIHRoaXMub25TZXNzaW9uUHJvcG9zZVJlc3BvbnNlKHMsdCk7Y2FzZVwid2Nfc2Vzc2lvblNldHRsZVwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblNldHRsZVJlc3BvbnNlKHMsdCk7Y2FzZVwid2Nfc2Vzc2lvblVwZGF0ZVwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblVwZGF0ZVJlc3BvbnNlKHMsdCk7Y2FzZVwid2Nfc2Vzc2lvbkV4dGVuZFwiOnJldHVybiB0aGlzLm9uU2Vzc2lvbkV4dGVuZFJlc3BvbnNlKHMsdCk7Y2FzZVwid2Nfc2Vzc2lvblBpbmdcIjpyZXR1cm4gdGhpcy5vblNlc3Npb25QaW5nUmVzcG9uc2Uocyx0KTtjYXNlXCJ3Y19zZXNzaW9uUmVxdWVzdFwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblJlcXVlc3RSZXNwb25zZShzLHQpO2RlZmF1bHQ6cmV0dXJuIHRoaXMuY2xpZW50LmxvZ2dlci5pbmZvKGBVbnN1cHBvcnRlZCByZXNwb25zZSBtZXRob2QgJHtpfWApfX0sdGhpcy5vblNlc3Npb25Qcm9wb3NlUmVxdWVzdD1hc3luYyhlLHMpPT57Y29uc3R7cGFyYW1zOnQsaWQ6aX09czt0cnl7dGhpcy5pc1ZhbGlkQ29ubmVjdChTKHt9LHMucGFyYW1zKSk7Y29uc3Qgcj1OKHUpLG89Uyh7aWQ6aSxwYWlyaW5nVG9waWM6ZSxleHBpcnk6cn0sdCk7YXdhaXQgdGhpcy5zZXRQcm9wb3NhbChpLG8pLHRoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9wcm9wb3NhbFwiLHtpZDppLHBhcmFtczpvfSl9Y2F0Y2gocil7YXdhaXQgdGhpcy5zZW5kRXJyb3IoaSxlLHIpLHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihyKX19LHRoaXMub25TZXNzaW9uUHJvcG9zZVJlc3BvbnNlPWFzeW5jKGUscyk9Pntjb25zdHtpZDp0fT1zO2lmKEUocykpe2NvbnN0e3Jlc3VsdDppfT1zO3RoaXMuY2xpZW50LmxvZ2dlci50cmFjZSh7dHlwZTpcIm1ldGhvZFwiLG1ldGhvZDpcIm9uU2Vzc2lvblByb3Bvc2VSZXNwb25zZVwiLHJlc3VsdDppfSk7Y29uc3Qgcj10aGlzLmNsaWVudC5wcm9wb3NhbC5nZXQodCk7dGhpcy5jbGllbnQubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwib25TZXNzaW9uUHJvcG9zZVJlc3BvbnNlXCIscHJvcG9zYWw6cn0pO2NvbnN0IG89ci5wcm9wb3Nlci5wdWJsaWNLZXk7dGhpcy5jbGllbnQubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwib25TZXNzaW9uUHJvcG9zZVJlc3BvbnNlXCIsc2VsZlB1YmxpY0tleTpvfSk7Y29uc3QgYz1pLnJlc3BvbmRlclB1YmxpY0tleTt0aGlzLmNsaWVudC5sb2dnZXIudHJhY2Uoe3R5cGU6XCJtZXRob2RcIixtZXRob2Q6XCJvblNlc3Npb25Qcm9wb3NlUmVzcG9uc2VcIixwZWVyUHVibGljS2V5OmN9KTtjb25zdCBsPWF3YWl0IHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmdlbmVyYXRlU2hhcmVkS2V5KG8sYyk7dGhpcy5jbGllbnQubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwib25TZXNzaW9uUHJvcG9zZVJlc3BvbnNlXCIsc2Vzc2lvblRvcGljOmx9KTtjb25zdCBnPWF3YWl0IHRoaXMuY2xpZW50LmNvcmUucmVsYXllci5zdWJzY3JpYmUobCk7dGhpcy5jbGllbnQubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwib25TZXNzaW9uUHJvcG9zZVJlc3BvbnNlXCIsc3Vic2NyaXB0aW9uSWQ6Z30pLGF3YWl0IHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5hY3RpdmF0ZSh7dG9waWM6ZX0pfWVsc2UgXyhzKSYmKGF3YWl0IHRoaXMuY2xpZW50LnByb3Bvc2FsLmRlbGV0ZSh0LEkoXCJVU0VSX0RJU0NPTk5FQ1RFRFwiKSksdGhpcy5ldmVudHMuZW1pdChoKFwic2Vzc2lvbl9jb25uZWN0XCIpLHtlcnJvcjpzLmVycm9yfSkpfSx0aGlzLm9uU2Vzc2lvblNldHRsZVJlcXVlc3Q9YXN5bmMoZSxzKT0+e2NvbnN0e2lkOnQscGFyYW1zOml9PXM7dHJ5e3RoaXMuaXNWYWxpZFNlc3Npb25TZXR0bGVSZXF1ZXN0KGkpO2NvbnN0e3JlbGF5OnIsY29udHJvbGxlcjpvLGV4cGlyeTpjLG5hbWVzcGFjZXM6bH09cy5wYXJhbXMsZz17dG9waWM6ZSxyZWxheTpyLGV4cGlyeTpjLG5hbWVzcGFjZXM6bCxhY2tub3dsZWRnZWQ6ITAsY29udHJvbGxlcjpvLnB1YmxpY0tleSxzZWxmOntwdWJsaWNLZXk6XCJcIixtZXRhZGF0YTp0aGlzLmNsaWVudC5tZXRhZGF0YX0scGVlcjp7cHVibGljS2V5Om8ucHVibGljS2V5LG1ldGFkYXRhOm8ubWV0YWRhdGF9fTthd2FpdCB0aGlzLnNlbmRSZXN1bHQocy5pZCxlLCEwKSx0aGlzLmV2ZW50cy5lbWl0KGgoXCJzZXNzaW9uX2Nvbm5lY3RcIikse3Nlc3Npb246Z30pfWNhdGNoKHIpe2F3YWl0IHRoaXMuc2VuZEVycm9yKHQsZSxyKSx0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3Iocil9fSx0aGlzLm9uU2Vzc2lvblNldHRsZVJlc3BvbnNlPWFzeW5jKGUscyk9Pntjb25zdHtpZDp0fT1zO0Uocyk/KGF3YWl0IHRoaXMuY2xpZW50LnNlc3Npb24udXBkYXRlKGUse2Fja25vd2xlZGdlZDohMH0pLHRoaXMuZXZlbnRzLmVtaXQoaChcInNlc3Npb25fYXBwcm92ZVwiLHQpLHt9KSk6XyhzKSYmKGF3YWl0IHRoaXMuY2xpZW50LnNlc3Npb24uZGVsZXRlKGUsSShcIlVTRVJfRElTQ09OTkVDVEVEXCIpKSx0aGlzLmV2ZW50cy5lbWl0KGgoXCJzZXNzaW9uX2FwcHJvdmVcIix0KSx7ZXJyb3I6cy5lcnJvcn0pKX0sdGhpcy5vblNlc3Npb25VcGRhdGVSZXF1ZXN0PWFzeW5jKGUscyk9Pntjb25zdHtwYXJhbXM6dCxpZDppfT1zO3RyeXt0aGlzLmlzVmFsaWRVcGRhdGUoUyh7dG9waWM6ZX0sdCkpLGF3YWl0IHRoaXMuY2xpZW50LnNlc3Npb24udXBkYXRlKGUse25hbWVzcGFjZXM6dC5uYW1lc3BhY2VzfSksYXdhaXQgdGhpcy5zZW5kUmVzdWx0KGksZSwhMCksdGhpcy5jbGllbnQuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX3VwZGF0ZVwiLHtpZDppLHRvcGljOmUscGFyYW1zOnR9KX1jYXRjaChyKXthd2FpdCB0aGlzLnNlbmRFcnJvcihpLGUsciksdGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKHIpfX0sdGhpcy5vblNlc3Npb25VcGRhdGVSZXNwb25zZT0oZSxzKT0+e2NvbnN0e2lkOnR9PXM7RShzKT90aGlzLmV2ZW50cy5lbWl0KGgoXCJzZXNzaW9uX3VwZGF0ZVwiLHQpLHt9KTpfKHMpJiZ0aGlzLmV2ZW50cy5lbWl0KGgoXCJzZXNzaW9uX3VwZGF0ZVwiLHQpLHtlcnJvcjpzLmVycm9yfSl9LHRoaXMub25TZXNzaW9uRXh0ZW5kUmVxdWVzdD1hc3luYyhlLHMpPT57Y29uc3R7aWQ6dH09czt0cnl7dGhpcy5pc1ZhbGlkRXh0ZW5kKHt0b3BpYzplfSksYXdhaXQgdGhpcy5zZXRFeHBpcnkoZSxOKE8pKSxhd2FpdCB0aGlzLnNlbmRSZXN1bHQodCxlLCEwKSx0aGlzLmNsaWVudC5ldmVudHMuZW1pdChcInNlc3Npb25fZXh0ZW5kXCIse2lkOnQsdG9waWM6ZX0pfWNhdGNoKGkpe2F3YWl0IHRoaXMuc2VuZEVycm9yKHQsZSxpKSx0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3IoaSl9fSx0aGlzLm9uU2Vzc2lvbkV4dGVuZFJlc3BvbnNlPShlLHMpPT57Y29uc3R7aWQ6dH09cztFKHMpP3RoaXMuZXZlbnRzLmVtaXQoaChcInNlc3Npb25fZXh0ZW5kXCIsdCkse30pOl8ocykmJnRoaXMuZXZlbnRzLmVtaXQoaChcInNlc3Npb25fZXh0ZW5kXCIsdCkse2Vycm9yOnMuZXJyb3J9KX0sdGhpcy5vblNlc3Npb25QaW5nUmVxdWVzdD1hc3luYyhlLHMpPT57Y29uc3R7aWQ6dH09czt0cnl7dGhpcy5pc1ZhbGlkUGluZyh7dG9waWM6ZX0pLGF3YWl0IHRoaXMuc2VuZFJlc3VsdCh0LGUsITApLHRoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9waW5nXCIse2lkOnQsdG9waWM6ZX0pfWNhdGNoKGkpe2F3YWl0IHRoaXMuc2VuZEVycm9yKHQsZSxpKSx0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3IoaSl9fSx0aGlzLm9uU2Vzc2lvblBpbmdSZXNwb25zZT0oZSxzKT0+e2NvbnN0e2lkOnR9PXM7c2V0VGltZW91dCgoKT0+e0Uocyk/dGhpcy5ldmVudHMuZW1pdChoKFwic2Vzc2lvbl9waW5nXCIsdCkse30pOl8ocykmJnRoaXMuZXZlbnRzLmVtaXQoaChcInNlc3Npb25fcGluZ1wiLHQpLHtlcnJvcjpzLmVycm9yfSl9LDUwMCl9LHRoaXMub25TZXNzaW9uRGVsZXRlUmVxdWVzdD1hc3luYyhlLHMpPT57Y29uc3R7aWQ6dH09czt0cnl7dGhpcy5pc1ZhbGlkRGlzY29ubmVjdCh7dG9waWM6ZSxyZWFzb246cy5wYXJhbXN9KSxhd2FpdCB0aGlzLnNlbmRSZXN1bHQodCxlLCEwKSxhd2FpdCB0aGlzLmRlbGV0ZVNlc3Npb24oZSksdGhpcy5jbGllbnQuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX2RlbGV0ZVwiLHtpZDp0LHRvcGljOmV9KX1jYXRjaChpKXthd2FpdCB0aGlzLnNlbmRFcnJvcih0LGUsaSksdGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKGkpfX0sdGhpcy5vblNlc3Npb25SZXF1ZXN0PWFzeW5jKGUscyk9Pntjb25zdHtpZDp0LHBhcmFtczppfT1zO3RyeXt0aGlzLmlzVmFsaWRSZXF1ZXN0KFMoe3RvcGljOmV9LGkpKSxhd2FpdCB0aGlzLnNldFBlbmRpbmdTZXNzaW9uUmVxdWVzdCh7aWQ6dCx0b3BpYzplLHBhcmFtczppfSksdGhpcy5jbGllbnQuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX3JlcXVlc3RcIix7aWQ6dCx0b3BpYzplLHBhcmFtczppfSl9Y2F0Y2gocil7YXdhaXQgdGhpcy5zZW5kRXJyb3IodCxlLHIpLHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihyKX19LHRoaXMub25TZXNzaW9uUmVxdWVzdFJlc3BvbnNlPShlLHMpPT57Y29uc3R7aWQ6dH09cztFKHMpP3RoaXMuZXZlbnRzLmVtaXQoaChcInNlc3Npb25fcmVxdWVzdFwiLHQpLHtyZXN1bHQ6cy5yZXN1bHR9KTpfKHMpJiZ0aGlzLmV2ZW50cy5lbWl0KGgoXCJzZXNzaW9uX3JlcXVlc3RcIix0KSx7ZXJyb3I6cy5lcnJvcn0pfSx0aGlzLm9uU2Vzc2lvbkV2ZW50UmVxdWVzdD1hc3luYyhlLHMpPT57Y29uc3R7aWQ6dCxwYXJhbXM6aX09czt0cnl7dGhpcy5pc1ZhbGlkRW1pdChTKHt0b3BpYzplfSxpKSksdGhpcy5jbGllbnQuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX2V2ZW50XCIse2lkOnQsdG9waWM6ZSxwYXJhbXM6aX0pfWNhdGNoKHIpe2F3YWl0IHRoaXMuc2VuZEVycm9yKHQsZSxyKSx0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3Iocil9fSx0aGlzLmlzVmFsaWRDb25uZWN0PWFzeW5jIGU9PntpZighbShlKSl7Y29uc3R7bWVzc2FnZTpvfT1hKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYGNvbm5lY3QoKSBwYXJhbXM6ICR7SlNPTi5zdHJpbmdpZnkoZSl9YCk7dGhyb3cgbmV3IEVycm9yKG8pfWNvbnN0e3BhaXJpbmdUb3BpYzpzLHJlcXVpcmVkTmFtZXNwYWNlczp0LHJlbGF5czppfT1lO2hlKHMpfHxhd2FpdCB0aGlzLmlzVmFsaWRQYWlyaW5nVG9waWMocyk7Y29uc3Qgcj1wZSh0LFwiY29ubmVjdCgpXCIpO2lmKHIpdGhyb3cgbmV3IEVycm9yKHIubWVzc2FnZSk7aWYoIWRlKGksITApKXtjb25zdHttZXNzYWdlOm99PWEoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgY29ubmVjdCgpIHJlbGF5czogJHtpfWApO3Rocm93IG5ldyBFcnJvcihvKX19LHRoaXMuaXNWYWxpZEFwcHJvdmU9YXN5bmMgZT0+e2lmKCFtKGUpKXRocm93IG5ldyBFcnJvcihhKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYGFwcHJvdmUoKSBwYXJhbXM6ICR7ZX1gKS5tZXNzYWdlKTtjb25zdHtpZDpzLG5hbWVzcGFjZXM6dCxyZWxheVByb3RvY29sOml9PWU7YXdhaXQgdGhpcy5pc1ZhbGlkUHJvcG9zYWxJZChzKTtjb25zdCByPXRoaXMuY2xpZW50LnByb3Bvc2FsLmdldChzKSxvPSQodCxcImFwcHJvdmUoKVwiKTtpZihvKXRocm93IG5ldyBFcnJvcihvLm1lc3NhZ2UpO2NvbnN0IGM9eihyLnJlcXVpcmVkTmFtZXNwYWNlcyx0LFwidXBkYXRlKClcIik7aWYoYyl0aHJvdyBuZXcgRXJyb3IoYy5tZXNzYWdlKTtpZigheChpLCEwKSl7Y29uc3R7bWVzc2FnZTpsfT1hKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYGFwcHJvdmUoKSByZWxheVByb3RvY29sOiAke2l9YCk7dGhyb3cgbmV3IEVycm9yKGwpfX0sdGhpcy5pc1ZhbGlkUmVqZWN0PWFzeW5jIGU9PntpZighbShlKSl7Y29uc3R7bWVzc2FnZTppfT1hKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHJlamVjdCgpIHBhcmFtczogJHtlfWApO3Rocm93IG5ldyBFcnJvcihpKX1jb25zdHtpZDpzLHJlYXNvbjp0fT1lO2lmKGF3YWl0IHRoaXMuaXNWYWxpZFByb3Bvc2FsSWQocyksIWdlKHQpKXtjb25zdHttZXNzYWdlOml9PWEoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgcmVqZWN0KCkgcmVhc29uOiAke0pTT04uc3RyaW5naWZ5KHQpfWApO3Rocm93IG5ldyBFcnJvcihpKX19LHRoaXMuaXNWYWxpZFNlc3Npb25TZXR0bGVSZXF1ZXN0PWU9PntpZighbShlKSl7Y29uc3R7bWVzc2FnZTpsfT1hKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYG9uU2Vzc2lvblNldHRsZVJlcXVlc3QoKSBwYXJhbXM6ICR7ZX1gKTt0aHJvdyBuZXcgRXJyb3IobCl9Y29uc3R7cmVsYXk6cyxjb250cm9sbGVyOnQsbmFtZXNwYWNlczppLGV4cGlyeTpyfT1lO2lmKCF3ZShzKSl7Y29uc3R7bWVzc2FnZTpsfT1hKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsXCJvblNlc3Npb25TZXR0bGVSZXF1ZXN0KCkgcmVsYXkgcHJvdG9jb2wgc2hvdWxkIGJlIGEgc3RyaW5nXCIpO3Rocm93IG5ldyBFcnJvcihsKX1jb25zdCBvPW1lKHQsXCJvblNlc3Npb25TZXR0bGVSZXF1ZXN0KClcIik7aWYobyl0aHJvdyBuZXcgRXJyb3Ioby5tZXNzYWdlKTtjb25zdCBjPSQoaSxcIm9uU2Vzc2lvblNldHRsZVJlcXVlc3QoKVwiKTtpZihjKXRocm93IG5ldyBFcnJvcihjLm1lc3NhZ2UpO2lmKGYocikpe2NvbnN0e21lc3NhZ2U6bH09YShcIkVYUElSRURcIixcIm9uU2Vzc2lvblNldHRsZVJlcXVlc3QoKVwiKTt0aHJvdyBuZXcgRXJyb3IobCl9fSx0aGlzLmlzVmFsaWRVcGRhdGU9YXN5bmMgZT0+e2lmKCFtKGUpKXtjb25zdHttZXNzYWdlOmN9PWEoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgdXBkYXRlKCkgcGFyYW1zOiAke2V9YCk7dGhyb3cgbmV3IEVycm9yKGMpfWNvbnN0e3RvcGljOnMsbmFtZXNwYWNlczp0fT1lO2F3YWl0IHRoaXMuaXNWYWxpZFNlc3Npb25Ub3BpYyhzKTtjb25zdCBpPXRoaXMuY2xpZW50LnNlc3Npb24uZ2V0KHMpLHI9JCh0LFwidXBkYXRlKClcIik7aWYocil0aHJvdyBuZXcgRXJyb3Ioci5tZXNzYWdlKTtjb25zdCBvPXooaS5yZXF1aXJlZE5hbWVzcGFjZXMsdCxcInVwZGF0ZSgpXCIpO2lmKG8pdGhyb3cgbmV3IEVycm9yKG8ubWVzc2FnZSl9LHRoaXMuaXNWYWxpZEV4dGVuZD1hc3luYyBlPT57aWYoIW0oZSkpe2NvbnN0e21lc3NhZ2U6dH09YShcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBleHRlbmQoKSBwYXJhbXM6ICR7ZX1gKTt0aHJvdyBuZXcgRXJyb3IodCl9Y29uc3R7dG9waWM6c309ZTthd2FpdCB0aGlzLmlzVmFsaWRTZXNzaW9uVG9waWMocyl9LHRoaXMuaXNWYWxpZFJlcXVlc3Q9YXN5bmMgZT0+e2lmKCFtKGUpKXtjb25zdHttZXNzYWdlOm99PWEoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgcmVxdWVzdCgpIHBhcmFtczogJHtlfWApO3Rocm93IG5ldyBFcnJvcihvKX1jb25zdHt0b3BpYzpzLHJlcXVlc3Q6dCxjaGFpbklkOml9PWU7YXdhaXQgdGhpcy5pc1ZhbGlkU2Vzc2lvblRvcGljKHMpO2NvbnN0e25hbWVzcGFjZXM6cn09dGhpcy5jbGllbnQuc2Vzc2lvbi5nZXQocyk7aWYoIWoocixpKSl7Y29uc3R7bWVzc2FnZTpvfT1hKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHJlcXVlc3QoKSBjaGFpbklkOiAke2l9YCk7dGhyb3cgbmV3IEVycm9yKG8pfWlmKCF1ZSh0KSl7Y29uc3R7bWVzc2FnZTpvfT1hKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHJlcXVlc3QoKSAke0pTT04uc3RyaW5naWZ5KHQpfWApO3Rocm93IG5ldyBFcnJvcihvKX1pZigheWUocixpLHQubWV0aG9kKSl7Y29uc3R7bWVzc2FnZTpvfT1hKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHJlcXVlc3QoKSBtZXRob2Q6ICR7dC5tZXRob2R9YCk7dGhyb3cgbmV3IEVycm9yKG8pfX0sdGhpcy5pc1ZhbGlkUmVzcG9uZD1hc3luYyBlPT57aWYoIW0oZSkpe2NvbnN0e21lc3NhZ2U6aX09YShcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGByZXNwb25kKCkgcGFyYW1zOiAke2V9YCk7dGhyb3cgbmV3IEVycm9yKGkpfWNvbnN0e3RvcGljOnMscmVzcG9uc2U6dH09ZTtpZihhd2FpdCB0aGlzLmlzVmFsaWRTZXNzaW9uVG9waWMocyksIVNlKHQpKXtjb25zdHttZXNzYWdlOml9PWEoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgcmVzcG9uZCgpIHJlc3BvbnNlOiAke0pTT04uc3RyaW5naWZ5KHQpfWApO3Rocm93IG5ldyBFcnJvcihpKX19LHRoaXMuaXNWYWxpZFBpbmc9YXN5bmMgZT0+e2lmKCFtKGUpKXtjb25zdHttZXNzYWdlOnR9PWEoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgcGluZygpIHBhcmFtczogJHtlfWApO3Rocm93IG5ldyBFcnJvcih0KX1jb25zdHt0b3BpYzpzfT1lO2F3YWl0IHRoaXMuaXNWYWxpZFNlc3Npb25PclBhaXJpbmdUb3BpYyhzKX0sdGhpcy5pc1ZhbGlkRW1pdD1hc3luYyBlPT57aWYoIW0oZSkpe2NvbnN0e21lc3NhZ2U6b309YShcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBlbWl0KCkgcGFyYW1zOiAke2V9YCk7dGhyb3cgbmV3IEVycm9yKG8pfWNvbnN0e3RvcGljOnMsZXZlbnQ6dCxjaGFpbklkOml9PWU7YXdhaXQgdGhpcy5pc1ZhbGlkU2Vzc2lvblRvcGljKHMpO2NvbnN0e25hbWVzcGFjZXM6cn09dGhpcy5jbGllbnQuc2Vzc2lvbi5nZXQocyk7aWYoIWoocixpKSl7Y29uc3R7bWVzc2FnZTpvfT1hKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYGVtaXQoKSBjaGFpbklkOiAke2l9YCk7dGhyb3cgbmV3IEVycm9yKG8pfWlmKCFJZSh0KSl7Y29uc3R7bWVzc2FnZTpvfT1hKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYGVtaXQoKSBldmVudDogJHtKU09OLnN0cmluZ2lmeSh0KX1gKTt0aHJvdyBuZXcgRXJyb3Iobyl9aWYoIUVlKHIsaSx0Lm5hbWUpKXtjb25zdHttZXNzYWdlOm99PWEoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgZW1pdCgpIGV2ZW50OiAke0pTT04uc3RyaW5naWZ5KHQpfWApO3Rocm93IG5ldyBFcnJvcihvKX19LHRoaXMuaXNWYWxpZERpc2Nvbm5lY3Q9YXN5bmMgZT0+e2lmKCFtKGUpKXtjb25zdHttZXNzYWdlOnR9PWEoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgZGlzY29ubmVjdCgpIHBhcmFtczogJHtlfWApO3Rocm93IG5ldyBFcnJvcih0KX1jb25zdHt0b3BpYzpzfT1lO2F3YWl0IHRoaXMuaXNWYWxpZFNlc3Npb25PclBhaXJpbmdUb3BpYyhzKX19aXNJbml0aWFsaXplZCgpe2lmKCF0aGlzLmluaXRpYWxpemVkKXtjb25zdHttZXNzYWdlOm59PWEoXCJOT1RfSU5JVElBTElaRURcIix0aGlzLm5hbWUpO3Rocm93IG5ldyBFcnJvcihuKX19cmVnaXN0ZXJSZWxheWVyRXZlbnRzKCl7dGhpcy5jbGllbnQuY29yZS5yZWxheWVyLm9uKGVlLm1lc3NhZ2UsYXN5bmMgbj0+e2NvbnN0e3RvcGljOmUsbWVzc2FnZTpzfT1uO2lmKHRoaXMuaWdub3JlZFBheWxvYWRUeXBlcy5pbmNsdWRlcyh0aGlzLmNsaWVudC5jb3JlLmNyeXB0by5nZXRQYXlsb2FkVHlwZShzKSkpcmV0dXJuO2NvbnN0IHQ9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZGVjb2RlKGUscyk7eGUodCk/KHRoaXMuY2xpZW50LmNvcmUuaGlzdG9yeS5zZXQoZSx0KSx0aGlzLm9uUmVsYXlFdmVudFJlcXVlc3Qoe3RvcGljOmUscGF5bG9hZDp0fSkpOkRlKHQpJiYoYXdhaXQgdGhpcy5jbGllbnQuY29yZS5oaXN0b3J5LnJlc29sdmUodCksdGhpcy5vblJlbGF5RXZlbnRSZXNwb25zZSh7dG9waWM6ZSxwYXlsb2FkOnR9KSl9KX1yZWdpc3RlckV4cGlyZXJFdmVudHMoKXt0aGlzLmNsaWVudC5jb3JlLmV4cGlyZXIub24oc2UuZXhwaXJlZCxhc3luYyBuPT57Y29uc3R7dG9waWM6ZSxpZDpzfT1fZShuLnRhcmdldCk7aWYocyYmdGhpcy5nZXRQZW5kaW5nU2Vzc2lvblJlcXVlc3RzKClbc10pcmV0dXJuIGF3YWl0IHRoaXMuZGVsZXRlUGVuZGluZ1Nlc3Npb25SZXF1ZXN0KHMsYShcIkVYUElSRURcIiksITApO2U/dGhpcy5jbGllbnQuc2Vzc2lvbi5rZXlzLmluY2x1ZGVzKGUpJiYoYXdhaXQgdGhpcy5kZWxldGVTZXNzaW9uKGUsITApLHRoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9leHBpcmVcIix7dG9waWM6ZX0pKTpzJiZhd2FpdCB0aGlzLmRlbGV0ZVByb3Bvc2FsKHMsITApfSl9aXNWYWxpZFBhaXJpbmdUb3BpYyhuKXtpZigheChuLCExKSl7Y29uc3R7bWVzc2FnZTplfT1hKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHBhaXJpbmcgdG9waWMgc2hvdWxkIGJlIGEgc3RyaW5nOiAke259YCk7dGhyb3cgbmV3IEVycm9yKGUpfWlmKCF0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcucGFpcmluZ3Mua2V5cy5pbmNsdWRlcyhuKSl7Y29uc3R7bWVzc2FnZTplfT1hKFwiTk9fTUFUQ0hJTkdfS0VZXCIsYHBhaXJpbmcgdG9waWMgZG9lc24ndCBleGlzdDogJHtufWApO3Rocm93IG5ldyBFcnJvcihlKX1pZihmKHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5wYWlyaW5ncy5nZXQobikuZXhwaXJ5KSl7Y29uc3R7bWVzc2FnZTplfT1hKFwiRVhQSVJFRFwiLGBwYWlyaW5nIHRvcGljOiAke259YCk7dGhyb3cgbmV3IEVycm9yKGUpfX1hc3luYyBpc1ZhbGlkU2Vzc2lvblRvcGljKG4pe2lmKCF4KG4sITEpKXtjb25zdHttZXNzYWdlOmV9PWEoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgc2Vzc2lvbiB0b3BpYyBzaG91bGQgYmUgYSBzdHJpbmc6ICR7bn1gKTt0aHJvdyBuZXcgRXJyb3IoZSl9aWYoIXRoaXMuY2xpZW50LnNlc3Npb24ua2V5cy5pbmNsdWRlcyhuKSl7Y29uc3R7bWVzc2FnZTplfT1hKFwiTk9fTUFUQ0hJTkdfS0VZXCIsYHNlc3Npb24gdG9waWMgZG9lc24ndCBleGlzdDogJHtufWApO3Rocm93IG5ldyBFcnJvcihlKX1pZihmKHRoaXMuY2xpZW50LnNlc3Npb24uZ2V0KG4pLmV4cGlyeSkpe2F3YWl0IHRoaXMuZGVsZXRlU2Vzc2lvbihuKTtjb25zdHttZXNzYWdlOmV9PWEoXCJFWFBJUkVEXCIsYHNlc3Npb24gdG9waWM6ICR7bn1gKTt0aHJvdyBuZXcgRXJyb3IoZSl9fWFzeW5jIGlzVmFsaWRTZXNzaW9uT3JQYWlyaW5nVG9waWMobil7aWYodGhpcy5jbGllbnQuc2Vzc2lvbi5rZXlzLmluY2x1ZGVzKG4pKWF3YWl0IHRoaXMuaXNWYWxpZFNlc3Npb25Ub3BpYyhuKTtlbHNlIGlmKHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5wYWlyaW5ncy5rZXlzLmluY2x1ZGVzKG4pKXRoaXMuaXNWYWxpZFBhaXJpbmdUb3BpYyhuKTtlbHNlIGlmKHgobiwhMSkpe2NvbnN0e21lc3NhZ2U6ZX09YShcIk5PX01BVENISU5HX0tFWVwiLGBzZXNzaW9uIG9yIHBhaXJpbmcgdG9waWMgZG9lc24ndCBleGlzdDogJHtufWApO3Rocm93IG5ldyBFcnJvcihlKX1lbHNle2NvbnN0e21lc3NhZ2U6ZX09YShcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBzZXNzaW9uIG9yIHBhaXJpbmcgdG9waWMgc2hvdWxkIGJlIGEgc3RyaW5nOiAke259YCk7dGhyb3cgbmV3IEVycm9yKGUpfX1hc3luYyBpc1ZhbGlkUHJvcG9zYWxJZChuKXtpZighUmUobikpe2NvbnN0e21lc3NhZ2U6ZX09YShcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBwcm9wb3NhbCBpZCBzaG91bGQgYmUgYSBudW1iZXI6ICR7bn1gKTt0aHJvdyBuZXcgRXJyb3IoZSl9aWYoIXRoaXMuY2xpZW50LnByb3Bvc2FsLmtleXMuaW5jbHVkZXMobikpe2NvbnN0e21lc3NhZ2U6ZX09YShcIk5PX01BVENISU5HX0tFWVwiLGBwcm9wb3NhbCBpZCBkb2Vzbid0IGV4aXN0OiAke259YCk7dGhyb3cgbmV3IEVycm9yKGUpfWlmKGYodGhpcy5jbGllbnQucHJvcG9zYWwuZ2V0KG4pLmV4cGlyeSkpe2F3YWl0IHRoaXMuZGVsZXRlUHJvcG9zYWwobik7Y29uc3R7bWVzc2FnZTplfT1hKFwiRVhQSVJFRFwiLGBwcm9wb3NhbCBpZDogJHtufWApO3Rocm93IG5ldyBFcnJvcihlKX19fWNsYXNzIFllIGV4dGVuZHMgR3tjb25zdHJ1Y3RvcihuLGUpe3N1cGVyKG4sZSxZLEQpLHRoaXMuY29yZT1uLHRoaXMubG9nZ2VyPWV9fWNsYXNzIFhlIGV4dGVuZHMgR3tjb25zdHJ1Y3RvcihuLGUpe3N1cGVyKG4sZSxYLEQpLHRoaXMuY29yZT1uLHRoaXMubG9nZ2VyPWV9fWNsYXNzIEplIGV4dGVuZHMgR3tjb25zdHJ1Y3RvcihuLGUpe3N1cGVyKG4sZSxILEQpLHRoaXMuY29yZT1uLHRoaXMubG9nZ2VyPWV9fWNsYXNzIEMgZXh0ZW5kcyBhZXtjb25zdHJ1Y3RvcihuKXtzdXBlcihuKSx0aGlzLnByb3RvY29sPU0sdGhpcy52ZXJzaW9uPUssdGhpcy5uYW1lPUEubmFtZSx0aGlzLmV2ZW50cz1uZXcgcWUsdGhpcy5vbj0ocyx0KT0+dGhpcy5ldmVudHMub24ocyx0KSx0aGlzLm9uY2U9KHMsdCk9PnRoaXMuZXZlbnRzLm9uY2Uocyx0KSx0aGlzLm9mZj0ocyx0KT0+dGhpcy5ldmVudHMub2ZmKHMsdCksdGhpcy5yZW1vdmVMaXN0ZW5lcj0ocyx0KT0+dGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIocyx0KSx0aGlzLnJlbW92ZUFsbExpc3RlbmVycz1zPT50aGlzLmV2ZW50cy5yZW1vdmVBbGxMaXN0ZW5lcnMocyksdGhpcy5jb25uZWN0PWFzeW5jIHM9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLmNvbm5lY3Qocyl9Y2F0Y2godCl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IodC5tZXNzYWdlKSx0fX0sdGhpcy5wYWlyPWFzeW5jIHM9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLnBhaXIocyl9Y2F0Y2godCl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IodC5tZXNzYWdlKSx0fX0sdGhpcy5hcHByb3ZlPWFzeW5jIHM9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLmFwcHJvdmUocyl9Y2F0Y2godCl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IodC5tZXNzYWdlKSx0fX0sdGhpcy5yZWplY3Q9YXN5bmMgcz0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUucmVqZWN0KHMpfWNhdGNoKHQpe3Rocm93IHRoaXMubG9nZ2VyLmVycm9yKHQubWVzc2FnZSksdH19LHRoaXMudXBkYXRlPWFzeW5jIHM9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLnVwZGF0ZShzKX1jYXRjaCh0KXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcih0Lm1lc3NhZ2UpLHR9fSx0aGlzLmV4dGVuZD1hc3luYyBzPT57dHJ5e3JldHVybiBhd2FpdCB0aGlzLmVuZ2luZS5leHRlbmQocyl9Y2F0Y2godCl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IodC5tZXNzYWdlKSx0fX0sdGhpcy5yZXF1ZXN0PWFzeW5jIHM9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLnJlcXVlc3Qocyl9Y2F0Y2godCl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IodC5tZXNzYWdlKSx0fX0sdGhpcy5yZXNwb25kPWFzeW5jIHM9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLnJlc3BvbmQocyl9Y2F0Y2godCl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IodC5tZXNzYWdlKSx0fX0sdGhpcy5waW5nPWFzeW5jIHM9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLnBpbmcocyl9Y2F0Y2godCl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IodC5tZXNzYWdlKSx0fX0sdGhpcy5lbWl0PWFzeW5jIHM9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLmVtaXQocyl9Y2F0Y2godCl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IodC5tZXNzYWdlKSx0fX0sdGhpcy5kaXNjb25uZWN0PWFzeW5jIHM9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLmRpc2Nvbm5lY3Qocyl9Y2F0Y2godCl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IodC5tZXNzYWdlKSx0fX0sdGhpcy5maW5kPXM9Pnt0cnl7cmV0dXJuIHRoaXMuZW5naW5lLmZpbmQocyl9Y2F0Y2godCl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IodC5tZXNzYWdlKSx0fX0sdGhpcy5nZXRQZW5kaW5nU2Vzc2lvblJlcXVlc3RzPSgpPT57dHJ5e3JldHVybiB0aGlzLmVuZ2luZS5nZXRQZW5kaW5nU2Vzc2lvblJlcXVlc3RzKCl9Y2F0Y2gocyl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3Iocy5tZXNzYWdlKSxzfX0sdGhpcy5uYW1lPW4/Lm5hbWV8fEEubmFtZSx0aGlzLm1ldGFkYXRhPW4/Lm1ldGFkYXRhfHxOZSgpO2NvbnN0IGU9dHlwZW9mIG4/LmxvZ2dlcjxcInVcIiYmdHlwZW9mIG4/LmxvZ2dlciE9XCJzdHJpbmdcIj9uLmxvZ2dlcjpCKGllKHtsZXZlbDpuPy5sb2dnZXJ8fEEubG9nZ2VyfSkpO3RoaXMuY29yZT1uPy5jb3JlfHxuZXcgdGUobiksdGhpcy5sb2dnZXI9bmUoZSx0aGlzLm5hbWUpLHRoaXMuc2Vzc2lvbj1uZXcgWGUodGhpcy5jb3JlLHRoaXMubG9nZ2VyKSx0aGlzLnByb3Bvc2FsPW5ldyBZZSh0aGlzLmNvcmUsdGhpcy5sb2dnZXIpLHRoaXMucGVuZGluZ1JlcXVlc3Q9bmV3IEplKHRoaXMuY29yZSx0aGlzLmxvZ2dlciksdGhpcy5lbmdpbmU9bmV3IGtlKHRoaXMpfXN0YXRpYyBhc3luYyBpbml0KG4pe2NvbnN0IGU9bmV3IEMobik7cmV0dXJuIGF3YWl0IGUuaW5pdGlhbGl6ZSgpLGV9Z2V0IGNvbnRleHQoKXtyZXR1cm4gcmUodGhpcy5sb2dnZXIpfWdldCBwYWlyaW5nKCl7cmV0dXJuIHRoaXMuY29yZS5wYWlyaW5nLnBhaXJpbmdzfWFzeW5jIGluaXRpYWxpemUoKXt0aGlzLmxvZ2dlci50cmFjZShcIkluaXRpYWxpemVkXCIpO3RyeXthd2FpdCB0aGlzLmNvcmUuc3RhcnQoKSxhd2FpdCB0aGlzLnNlc3Npb24uaW5pdCgpLGF3YWl0IHRoaXMucHJvcG9zYWwuaW5pdCgpLGF3YWl0IHRoaXMucGVuZGluZ1JlcXVlc3QuaW5pdCgpLGF3YWl0IHRoaXMuZW5naW5lLmluaXQoKSx0aGlzLmxvZ2dlci5pbmZvKFwiU2lnbkNsaWVudCBJbml0aWxpemF0aW9uIFN1Y2Nlc3NcIil9Y2F0Y2gobil7dGhyb3cgdGhpcy5sb2dnZXIuaW5mbyhcIlNpZ25DbGllbnQgSW5pdGlsaXphdGlvbiBGYWlsdXJlXCIpLHRoaXMubG9nZ2VyLmVycm9yKG4ubWVzc2FnZSksbn19fWNvbnN0IEhlPUM7ZXhwb3J0e0ogYXMgRU5HSU5FX0NPTlRFWFQsdiBhcyBFTkdJTkVfUlBDX09QVFMsYmUgYXMgSElTVE9SWV9DT05URVhULExlIGFzIEhJU1RPUllfRVZFTlRTLEdlIGFzIEhJU1RPUllfU1RPUkFHRV9WRVJTSU9OLFkgYXMgUFJPUE9TQUxfQ09OVEVYVCwkZSBhcyBQUk9QT1NBTF9FWFBJUlksSCBhcyBSRVFVRVNUX0NPTlRFWFQsWCBhcyBTRVNTSU9OX0NPTlRFWFQsTyBhcyBTRVNTSU9OX0VYUElSWSxVIGFzIFNJR05fQ0xJRU5UX0NPTlRFWFQsQSBhcyBTSUdOX0NMSUVOVF9ERUZBVUxULEFlIGFzIFNJR05fQ0xJRU5UX0VWRU5UUyxNIGFzIFNJR05fQ0xJRU5UX1BST1RPQ09MLENlIGFzIFNJR05fQ0xJRU5UX1NUT1JBR0VfT1BUSU9OUyxEIGFzIFNJR05fQ0xJRU5UX1NUT1JBR0VfUFJFRklYLEsgYXMgU0lHTl9DTElFTlRfVkVSU0lPTixIZSBhcyBTaWduQ2xpZW50LEMgYXMgZGVmYXVsdH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiIsImltcG9ydHtNb2RhbEN0cmwgYXMgcixDb25maWdDdHJsIGFzIG59ZnJvbVwiQHdlYjNtb2RhbC9jb3JlXCI7dmFyIGw9T2JqZWN0LmRlZmluZVByb3BlcnR5LGE9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxzPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksYz1PYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLGk9KHQsZSxvKT0+ZSBpbiB0P2wodCxlLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpvfSk6dFtlXT1vLGI9KHQsZSk9Pntmb3IodmFyIG8gaW4gZXx8KGU9e30pKXMuY2FsbChlLG8pJiZpKHQsbyxlW29dKTtpZihhKWZvcih2YXIgbyBvZiBhKGUpKWMuY2FsbChlLG8pJiZpKHQsbyxlW29dKTtyZXR1cm4gdH07Y2xhc3MgcHtjb25zdHJ1Y3RvcihlKXt0aGlzLm9wZW5Nb2RhbD1yLm9wZW4sdGhpcy5jbG9zZU1vZGFsPXIuY2xvc2UsdGhpcy5zdWJzY3JpYmVNb2RhbD1yLnN1YnNjcmliZSx0aGlzLnNldFRoZW1lPW4uc2V0VGhlbWVDb25maWcsbi5zZXRDb25maWcoYih7ZW5hYmxlU3RhbmRhbG9uZU1vZGU6ITB9LGUpKSx0aGlzLmluaXRVaSgpfWFzeW5jIGluaXRVaSgpe2lmKHR5cGVvZiB3aW5kb3c8XCJ1XCIpe2F3YWl0IGltcG9ydChcIkB3ZWIzbW9kYWwvdWlcIik7Y29uc3QgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidzNtLW1vZGFsXCIpO2RvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYmVmb3JlZW5kXCIsZSl9fX1leHBvcnR7cCBhcyBXZWIzTW9kYWx9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJpbXBvcnQgeyBTaWduQ2xpZW50IH0gZnJvbSAnQHdhbGxldGNvbm5lY3Qvc2lnbi1jbGllbnQnXG5pbXBvcnQgeyBXZWIzTW9kYWwgfSBmcm9tICdAd2ViM21vZGFsL3N0YW5kYWxvbmUnXG5cbi8vIDAuIERlZmluZSB1aSBlbGVtZW50c1xuY29uc3QgY29ubmVjdEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb25uZWN0LWJ1dHRvbicpXG5cbi8vIDEuIERlZmluZSBjb25zdGFudHNcbmNvbnN0IHByb2plY3RJZCA9ICc4ZTZiNWZmZGNiYzk3OTRiZjlmNGExOTUyNTc4MzY1YidcbmNvbnN0IG5hbWVzcGFjZXMgPSB7XG4gIGVpcDE1NTogeyBtZXRob2RzOiBbJ2V0aF9zaWduJ10sIGNoYWluczogWydlaXAxNTU6MSddLCBldmVudHM6IFsnYWNjb3VudHNDaGFuZ2VkJ10gfVxufVxuXG4vLyAzLiBDcmVhdGUgbW9kYWwgY2xpZW50XG5leHBvcnQgY29uc3Qgd2ViM01vZGFsID0gbmV3IFdlYjNNb2RhbCh7IHByb2plY3RJZCwgc3RhbmRhbG9uZUNoYWluczogbmFtZXNwYWNlcy5laXAxNTUuY2hhaW5zIH0pXG5leHBvcnQgbGV0IHNpZ25DbGllbnQgPSB1bmRlZmluZWRcblxuLy8gNC4gSW5pdGlhbGlzZSBjbGllbnRzXG5hc3luYyBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICB0cnkge1xuICAgIGNvbm5lY3RCdXR0b24uZGlzYWJsZWQgPSB0cnVlXG4gICAgc2lnbkNsaWVudCA9IGF3YWl0IFNpZ25DbGllbnQuaW5pdCh7IHByb2plY3RJZCB9KVxuICAgIGNvbm5lY3RCdXR0b24uZGlzYWJsZWQgPSBmYWxzZVxuICAgIGNvbm5lY3RCdXR0b24uaW5uZXJUZXh0ID0gJ0Nvbm5lY3QgV2FsbGV0J1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycilcbiAgfVxufVxuXG5pbml0aWFsaXplKClcblxuLy8gNS4gQ3JlYXRlIGNvbm5lY3Rpb24gaGFuZGxlclxuY29ubmVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoc2lnbkNsaWVudCkge1xuICAgICAgY29uc3QgeyB1cmksIGFwcHJvdmFsIH0gPSBhd2FpdCBzaWduQ2xpZW50LmNvbm5lY3QoeyByZXF1aXJlZE5hbWVzcGFjZXM6IG5hbWVzcGFjZXMgfSlcbiAgICAgIGlmICh1cmkpIHtcbiAgICAgICAgd2ViM01vZGFsLm9wZW5Nb2RhbCh7IHVyaSB9KVxuICAgICAgICBhd2FpdCBhcHByb3ZhbCgpXG4gICAgICAgIHdlYjNNb2RhbC5jbG9zZU1vZGFsKClcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxuICB9XG59KVxuIl0sIm5hbWVzIjpbImluUHJvZ3Jlc3MiLCJkYXRhV2VicGFja1ByZWZpeCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaW50XzEiLCJ3cml0ZVVpbnQxNkJFIiwib3V0Iiwib2Zmc2V0IiwiVWludDhBcnJheSIsIndyaXRlVWludDE2TEUiLCJyZWFkSW50MzJCRSIsImFycmF5IiwicmVhZFVpbnQzMkJFIiwicmVhZEludDMyTEUiLCJyZWFkVWludDMyTEUiLCJ3cml0ZVVpbnQzMkJFIiwid3JpdGVVaW50MzJMRSIsIndyaXRlVWludDY0QkUiLCJ3cml0ZVVpbnQ2NExFIiwicmVhZEludDE2QkUiLCJyZWFkVWludDE2QkUiLCJyZWFkSW50MTZMRSIsInJlYWRVaW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlSW50MzJMRSIsInJlYWRJbnQ2NEJFIiwiaGkiLCJsbyIsInJlYWRVaW50NjRCRSIsInJlYWRJbnQ2NExFIiwicmVhZFVpbnQ2NExFIiwid3JpdGVJbnQ2NEJFIiwid3JpdGVJbnQ2NExFIiwicmVhZFVpbnRCRSIsImJpdExlbmd0aCIsIkVycm9yIiwibGVuZ3RoIiwicmVzdWx0IiwibXVsIiwiaSIsInJlYWRVaW50TEUiLCJ3cml0ZVVpbnRCRSIsImlzU2FmZUludGVnZXIiLCJkaXYiLCJ3cml0ZVVpbnRMRSIsInJlYWRGbG9hdDMyQkUiLCJEYXRhVmlldyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiZ2V0RmxvYXQzMiIsInJlYWRGbG9hdDMyTEUiLCJyZWFkRmxvYXQ2NEJFIiwiZ2V0RmxvYXQ2NCIsInJlYWRGbG9hdDY0TEUiLCJ3cml0ZUZsb2F0MzJCRSIsInNldEZsb2F0MzIiLCJ3cml0ZUZsb2F0MzJMRSIsIndyaXRlRmxvYXQ2NEJFIiwic2V0RmxvYXQ2NCIsIndyaXRlRmxvYXQ2NExFIiwiYmluYXJ5XzEiLCJ3aXBlXzEiLCJjb3JlIiwiaW5wdXQiLCJrZXkiLCJqMCIsImoxIiwiajIiLCJqMyIsImo0IiwiajUiLCJqNiIsImo3IiwiajgiLCJqOSIsImoxMCIsImoxMSIsImoxMiIsImoxMyIsImoxNCIsImoxNSIsIngwIiwieDEiLCJ4MiIsIngzIiwieDQiLCJ4NSIsIng2IiwieDciLCJ4OCIsIng5IiwieDEwIiwieDExIiwieDEyIiwieDEzIiwieDE0IiwieDE1Iiwic3RyZWFtWE9SIiwibm9uY2UiLCJzcmMiLCJkc3QiLCJub25jZUlucGxhY2VDb3VudGVyTGVuZ3RoIiwibmMiLCJjb3VudGVyTGVuZ3RoIiwic2V0IiwiYmxvY2siLCJqIiwiaW5jcmVtZW50Q291bnRlciIsIndpcGUiLCJjb3VudGVyIiwicG9zIiwibGVuIiwiY2FycnkiLCJzdHJlYW0iLCJjaGFjaGFfMSIsInBvbHkxMzA1XzEiLCJjb25zdGFudF90aW1lXzEiLCJaRVJPUyIsIkNoYUNoYTIwUG9seTEzMDUiLCJ0aGlzIiwibm9uY2VMZW5ndGgiLCJ0YWdMZW5ndGgiLCJfa2V5IiwicHJvdG90eXBlIiwic2VhbCIsInBsYWludGV4dCIsImFzc29jaWF0ZWREYXRhIiwiYXV0aEtleSIsInJlc3VsdExlbmd0aCIsIl9hdXRoZW50aWNhdGUiLCJzdWJhcnJheSIsIm9wZW4iLCJzZWFsZWQiLCJjYWxjdWxhdGVkVGFnIiwiZXF1YWwiLCJjbGVhbiIsInRhZ091dCIsImNpcGhlcnRleHQiLCJoIiwiUG9seTEzMDUiLCJ1cGRhdGUiLCJ0YWciLCJkaWdlc3QiLCJjb21wYXJlIiwiYSIsImIiLCJzZWxlY3QiLCJzdWJqZWN0IiwicmVzdWx0SWZPbmUiLCJyZXN1bHRJZlplcm8iLCJsZXNzT3JFcXVhbCIsInNoYTUxMl8xIiwiZ2YiLCJpbml0IiwiciIsIkZsb2F0NjRBcnJheSIsImdmMCIsImdmMSIsIkQyIiwiWCIsIlkiLCJzZXQyNTUxOSIsImNhcjI1NTE5IiwibyIsImMiLCJ2IiwiTWF0aCIsImZsb29yIiwic2VsMjU1MTkiLCJwIiwicSIsInQiLCJwYWNrMjU1MTkiLCJuIiwibSIsInBhcjI1NTE5IiwiZCIsImFkZCIsInN1YiIsInQwIiwidDEiLCJ0MiIsInQzIiwidDQiLCJ0NSIsInQ2IiwidDciLCJ0OCIsInQ5IiwidDEwIiwidDExIiwidDEyIiwidDEzIiwidDE0IiwidDE1IiwidDE2IiwidDE3IiwidDE4IiwidDE5IiwidDIwIiwidDIxIiwidDIyIiwidDIzIiwidDI0IiwidDI1IiwidDI2IiwidDI3IiwidDI4IiwidDI5IiwidDMwIiwiYjAiLCJiMSIsImIyIiwiYjMiLCJiNCIsImI1IiwiYjYiLCJiNyIsImI4IiwiYjkiLCJiMTAiLCJiMTEiLCJiMTIiLCJiMTMiLCJiMTQiLCJiMTUiLCJzcXVhcmUiLCJlZGFkZCIsImUiLCJmIiwiZyIsImNzd2FwIiwicGFjayIsInR4IiwidHkiLCJ6aSIsImludjI1NTE5Iiwic2NhbGFyYmFzZSIsInMiLCJzY2FsYXJtdWx0Iiwic2VlZCIsImhhc2giLCJwdWJsaWNLZXkiLCJzZWNyZXRLZXkiLCJMIiwibW9kTCIsIngiLCJrIiwicmVkdWNlIiwibWVzc2FnZSIsInNpZ25hdHVyZSIsImhzIiwiU0hBNTEyIiwicmVzZXQiLCJpc1NlcmlhbGl6YWJsZUhhc2giLCJzYXZlU3RhdGUiLCJyZXN0b3JlU3RhdGUiLCJjbGVhblNhdmVkU3RhdGUiLCJobWFjXzEiLCJIS0RGIiwic2FsdCIsImluZm8iLCJfY291bnRlciIsIl9oYXNoIiwiX2luZm8iLCJva20iLCJobWFjIiwiX2htYWMiLCJITUFDIiwiX2J1ZmZlciIsImRpZ2VzdExlbmd0aCIsIl9idWZwb3MiLCJfZmlsbEJ1ZmZlciIsImN0ciIsImZpbmlzaCIsImV4cGFuZCIsImhhc2hfMSIsIl9maW5pc2hlZCIsIl9pbm5lciIsIl9vdXRlciIsImJsb2NrU2l6ZSIsInBhZCIsIl9pbm5lcktleWVkU3RhdGUiLCJfb3V0ZXJLZXllZFN0YXRlIiwiZGF0YSIsInNhdmVkU3RhdGUiLCJpbXVsIiwiYWwiLCJibCIsInJvdGwiLCJyb3RyIiwiaXNJbnRlZ2VyIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJNQVhfU0FGRV9JTlRFR0VSIiwiRElHRVNUX0xFTkdUSCIsIl9yIiwiVWludDE2QXJyYXkiLCJfaCIsIl9wYWQiLCJfbGVmdG92ZXIiLCJfZmluIiwiX2Jsb2NrcyIsIm1wb3MiLCJieXRlcyIsImhpYml0IiwiaDAiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJoNyIsImg4IiwiaDkiLCJyMCIsInIxIiwicjIiLCJyMyIsInI0IiwicjUiLCJyNiIsInI3IiwicjgiLCJyOSIsImQwIiwiZDEiLCJkMiIsImQzIiwiZDQiLCJkNSIsImQ2IiwiZDciLCJkOCIsImQ5IiwibWFjIiwibWFjcG9zIiwibWFzayIsIndhbnQiLCJvbmVUaW1lQXV0aCIsInJhbmRvbVN0cmluZ0ZvckVudHJvcHkiLCJyYW5kb21TdHJpbmciLCJyYW5kb21VaW50MzIiLCJyYW5kb21CeXRlcyIsImRlZmF1bHRSYW5kb21Tb3VyY2UiLCJzeXN0ZW1fMSIsInBybmciLCJTeXN0ZW1SYW5kb21Tb3VyY2UiLCJidWYiLCJBTFBIQU5VTUVSSUMiLCJjaGFyc2V0IiwiY2hhcnNMZW4iLCJtYXhCeXRlIiwiY2VpbCIsInJhbmRvbUJ5dGUiLCJjaGFyQXQiLCJiaXRzIiwibG9nIiwiTE4yIiwiQnJvd3NlclJhbmRvbVNvdXJjZSIsImNvbnN0cnVjdG9yIiwiaXNBdmFpbGFibGUiLCJpc0luc3RhbnRpYXRlZCIsImJyb3dzZXJDcnlwdG8iLCJzZWxmIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJ1bmRlZmluZWQiLCJnZXRSYW5kb21WYWx1ZXMiLCJfY3J5cHRvIiwibWluIiwiTm9kZVJhbmRvbVNvdXJjZSIsIm5vZGVDcnlwdG8iLCJicm93c2VyXzEiLCJub2RlXzEiLCJuYW1lIiwiX3NvdXJjZSIsIlNIQTI1NiIsIl9zdGF0ZSIsIkludDMyQXJyYXkiLCJfdGVtcCIsIl9idWZmZXJMZW5ndGgiLCJfYnl0ZXNIYXNoZWQiLCJfaW5pdFN0YXRlIiwiZGF0YUxlbmd0aCIsImRhdGFQb3MiLCJoYXNoQmxvY2tzIiwiYnl0ZXNIYXNoZWQiLCJsZWZ0IiwiYml0TGVuSGkiLCJiaXRMZW5MbyIsInBhZExlbmd0aCIsInN0YXRlIiwiYnVmZmVyTGVuZ3RoIiwiSyIsInciLCJ1IiwiQkxPQ0tfU0laRSIsIl9zdGF0ZUhpIiwiX3N0YXRlTG8iLCJfdGVtcEhpIiwiX3RlbXBMbyIsInN0YXRlSGkiLCJzdGF0ZUxvIiwid2giLCJ3bCIsImhoIiwiaGwiLCJsIiwidGgiLCJ0bCIsImFoMCIsImFoMSIsImFoMiIsImFoMyIsImFoNCIsImFoNSIsImFoNiIsImFoNyIsImFsMCIsImFsMSIsImFsMiIsImFsMyIsImFsNCIsImFsNSIsImFsNiIsImFsNyIsImJoNyIsImJsNyIsImJoMCIsImJoMSIsImJoMiIsImJoMyIsImJoNCIsImJoNSIsImJoNiIsImJsMCIsImJsMSIsImJsMiIsImJsMyIsImJsNCIsImJsNSIsImJsNiIsInJhbmRvbV8xIiwiXzkiLCJfMTIxNjY1Iiwic2NhbGFyTXVsdCIsInoiLCJ1bnBhY2syNTUxOSIsIngzMiIsIngxNiIsImlucCIsImdlbmVyYXRlS2V5UGFpckZyb21TZWVkIiwibXlTZWNyZXRLZXkiLCJ0aGVpclB1YmxpY0tleSIsInJlamVjdFplcm8iLCJ6ZXJvcyIsImdldEJyb3dlckNyeXB0byIsImdldFN1YnRsZUNyeXB0byIsInN1YnRsZSIsIndlYmtpdFN1YnRsZSIsImlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSIsImlzUmVhY3ROYXRpdmUiLCJkb2N1bWVudCIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJpc05vZGUiLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJub2RlIiwiaXNCcm93c2VyIiwidHNsaWJfMSIsIl9fZXhwb3J0U3RhciIsIklFdmVudHMiLCJIRUFSVEJFQVRfRVZFTlRTIiwiSEVBUlRCRUFUX0lOVEVSVkFMIiwidGltZV8xIiwiRklWRV9TRUNPTkRTIiwicHVsc2UiLCJIZWFydEJlYXQiLCJldmVudHNfMSIsInR5cGVzXzEiLCJjb25zdGFudHNfMSIsIklIZWFydEJlYXQiLCJvcHRzIiwic3VwZXIiLCJldmVudHMiLCJFdmVudEVtaXR0ZXIiLCJpbnRlcnZhbCIsInN0YXRpYyIsIl9fYXdhaXRlciIsImhlYXJ0YmVhdCIsImluaXRpYWxpemUiLCJvbiIsImV2ZW50IiwibGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJzZXRJbnRlcnZhbCIsInRvTWlsaXNlY29uZHMiLCJlbWl0IiwiSUJhc2VKc29uUnBjUHJvdmlkZXIiLCJJSnNvblJwY1Byb3ZpZGVyIiwiY29ubmVjdGlvbiIsIklOVEVSTkFMX0VSUk9SIiwiU0VSVkVSX0VSUk9SIiwiUkVTRVJWRURfRVJST1JfQ09ERVMiLCJTVEFOREFSRF9FUlJPUl9NQVAiLCJjb2RlIiwiREVGQVVMVF9FUlJPUiIsImlzUmVzZXJ2ZWRFcnJvckNvZGUiLCJnZXRFcnJvciIsInR5cGUiLCJrZXlzIiwiaW5jbHVkZXMiLCJnZXRFcnJvckJ5Q29kZSIsInZhbHVlcyIsImZpbmQiLCJwYXJzZUNvbm5lY3Rpb25FcnJvciIsInVybCIsImZvcm1hdEpzb25ScGNSZXF1ZXN0IiwibWV0aG9kIiwicGFyYW1zIiwiaWQiLCJEYXRlIiwibm93IiwicG93IiwicmFuZG9tIiwianNvbnJwYyIsImZvcm1hdEpzb25ScGNSZXN1bHQiLCJmb3JtYXRKc29uUnBjRXJyb3IiLCJlcnJvciIsImZvcm1hdEVycm9yTWVzc2FnZSIsImFzc2lnbiIsImlzV3NVcmwiLCJyZWdleCIsInByb3RvY29sIiwibWF0Y2hlcyIsIm1hdGNoIiwiUmVnRXhwIiwiZ2V0VXJsUHJvdG9jb2wiLCJ0ZXN0IiwibWF0Y2hSZWdleFByb3RvY29sIiwiaXNMb2NhbGhvc3RVcmwiLCJpc0pzb25ScGNQYXlsb2FkIiwicGF5bG9hZCIsImlzSnNvblJwY1JlcXVlc3QiLCJpc0pzb25ScGNSZXNwb25zZSIsImlzSnNvblJwY1Jlc3VsdCIsImlzSnNvblJwY0Vycm9yIiwic2FmZV9qc29uX3V0aWxzXzEiLCJsb2NhbFN0b3JhZ2VfMSIsIl9faW1wb3J0RGVmYXVsdCIsInNoYXJlZF8xIiwibG9jYWxTdG9yYWdlIiwiZGVmYXVsdCIsImdldEtleXMiLCJnZXRFbnRyaWVzIiwiZW50cmllcyIsIm1hcCIsInBhcnNlRW50cnkiLCJnZXRJdGVtIiwiaXRlbSIsInNhZmVKc29uUGFyc2UiLCJzZXRJdGVtIiwic2FmZUpzb25TdHJpbmdpZnkiLCJyZW1vdmVJdGVtIiwiZGIiLCJMb2NhbFN0b3JhZ2UiLCJoYXNPd25Qcm9wZXJ0eSIsIlN0cmluZyIsInZhbCIsImNsZWFyIiwiZm9yRWFjaCIsIl9fZGVmaW5lR2V0dGVyX18iLCJtb2R1bGUiLCJ3aW5kb3ciLCJJS2V5VmFsdWVTdG9yYWdlIiwiZW50cnkiLCJfYSIsIlBJTk9fQ1VTVE9NX0NPTlRFWFRfS0VZIiwiUElOT19MT0dHRVJfREVGQVVMVFMiLCJsZXZlbCIsInBpbm8iLCJwaW5vXzEiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZ2VuZXJhdGVDaGlsZExvZ2dlciIsImZvcm1hdENoaWxkTG9nZ2VyQ29udGV4dCIsImdldExvZ2dlckNvbnRleHQiLCJzZXRCcm93c2VyTG9nZ2VyQ29udGV4dCIsImdldEJyb3dzZXJMb2dnZXJDb250ZXh0IiwiZ2V0RGVmYXVsdExvZ2dlck9wdGlvbnMiLCJsb2dnZXIiLCJjdXN0b21Db250ZXh0S2V5IiwiY29udGV4dCIsImJpbmRpbmdzIiwiY2hpbGRDb250ZXh0IiwicGFyZW50Q29udGV4dCIsInRyaW0iLCJjaGlsZCIsImdldEZyb21XaW5kb3ciLCJyZXMiLCJnZXRGcm9tV2luZG93T3JUaHJvdyIsImdldExvY2FsU3RvcmFnZSIsImdldExvY2FsU3RvcmFnZU9yVGhyb3ciLCJnZXRDcnlwdG8iLCJnZXRDcnlwdG9PclRocm93IiwiZ2V0TG9jYXRpb24iLCJnZXRMb2NhdGlvbk9yVGhyb3ciLCJnZXROYXZpZ2F0b3IiLCJnZXROYXZpZ2F0b3JPclRocm93IiwiZ2V0RG9jdW1lbnQiLCJnZXREb2N1bWVudE9yVGhyb3ciLCJ3aW5kb3dfZ2V0dGVyc18xIiwiZG9jIiwibG9jIiwiZ2V0V2luZG93TWV0YWRhdGFPZkFueSIsImFyZ3MiLCJtZXRhVGFncyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXR0cmlidXRlcyIsInRhcmdldCIsImdldEF0dHJpYnV0ZSIsImZpbHRlciIsImF0dHIiLCJjb250ZW50IiwidGl0bGUiLCJnZXROYW1lIiwiZGVzY3JpcHRpb24iLCJvcmlnaW4iLCJpY29ucyIsImxpbmtzIiwibGluayIsInJlbCIsInRvTG93ZXJDYXNlIiwiaW5kZXhPZiIsImhyZWYiLCJhYnNvbHV0ZUhyZWYiLCJob3N0IiwicGF0aCIsInBhdGhuYW1lIiwic3BsaXQiLCJwb3AiLCJqb2luIiwicHVzaCIsImFic29sdXRlVXJsIiwiZ2V0SWNvbnMiLCJzdHJpY3RVcmlFbmNvZGUiLCJkZWNvZGVDb21wb25lbnQiLCJzcGxpdE9uRmlyc3QiLCJmaWx0ZXJPYmplY3QiLCJlbmNvZGVGcmFnbWVudElkZW50aWZpZXIiLCJTeW1ib2wiLCJ2YWxpZGF0ZUFycmF5Rm9ybWF0U2VwYXJhdG9yIiwiVHlwZUVycm9yIiwiZW5jb2RlIiwib3B0aW9ucyIsInN0cmljdCIsImVuY29kZVVSSUNvbXBvbmVudCIsImRlY29kZSIsImtleXNTb3J0ZXIiLCJBcnJheSIsImlzQXJyYXkiLCJzb3J0IiwicmVtb3ZlSGFzaCIsImhhc2hTdGFydCIsInNsaWNlIiwiZXh0cmFjdCIsInF1ZXJ5U3RhcnQiLCJwYXJzZVZhbHVlIiwicGFyc2VOdW1iZXJzIiwiaXNOYU4iLCJwYXJzZUJvb2xlYW5zIiwicGFyc2UiLCJxdWVyeSIsImFycmF5Rm9ybWF0IiwiYXJyYXlGb3JtYXRTZXBhcmF0b3IiLCJmb3JtYXR0ZXIiLCJhY2N1bXVsYXRvciIsImV4ZWMiLCJyZXBsYWNlIiwiY29uY2F0IiwiaXNFbmNvZGVkQXJyYXkiLCJuZXdWYWx1ZSIsImFycmF5VmFsdWUiLCJwYXJzZXJGb3JBcnJheUZvcm1hdCIsInJldCIsImNyZWF0ZSIsInBhcmFtIiwiQm9vbGVhbiIsInN0cmluZ2lmeSIsIm9iamVjdCIsInNob3VsZEZpbHRlciIsInNraXBOdWxsIiwic2tpcEVtcHR5U3RyaW5nIiwiaW5kZXgiLCJrZXlWYWx1ZVNlcCIsImVuY29kZXJGb3JBcnJheUZvcm1hdCIsIm9iamVjdENvcHkiLCJwYXJzZVVybCIsInVybF8iLCJwYXJzZUZyYWdtZW50SWRlbnRpZmllciIsImZyYWdtZW50SWRlbnRpZmllciIsInN0cmluZ2lmeVVybCIsInF1ZXJ5RnJvbVVybCIsInBhcnNlZFF1ZXJ5RnJvbVVybCIsInF1ZXJ5U3RyaW5nIiwiZ2V0SGFzaCIsInBpY2siLCJleGNsdWRlIiwiZXhjbHVzaW9uRmlsdGVyIiwiT05FX1RIT1VTQU5EIiwiT05FX0hVTkRSRUQiLCJPTkVfWUVBUiIsIkZPVVJfV0VFS1MiLCJUSFJFRV9XRUVLUyIsIlRXT19XRUVLUyIsIk9ORV9XRUVLIiwiVEhJUlRZX0RBWVMiLCJTRVZFTl9EQVlTIiwiRklWRV9EQVlTIiwiVEhSRUVfREFZUyIsIk9ORV9EQVkiLCJUV0VOVFlfRk9VUl9IT1VSUyIsIlRXRUxWRV9IT1VSUyIsIlNJWF9IT1VSUyIsIlRIUkVFX0hPVVJTIiwiT05FX0hPVVIiLCJTSVhUWV9NSU5VVEVTIiwiVEhJUlRZX01JTlVURVMiLCJURU5fTUlOVVRFUyIsIkZJVkVfTUlOVVRFUyIsIk9ORV9NSU5VVEUiLCJTSVhUWV9TRUNPTkRTIiwiVEhJUlRZX1NFQ09ORFMiLCJURU5fU0VDT05EUyIsIk9ORV9TRUNPTkQiLCJJV2F0Y2giLCJmcm9tTWlsaXNlY29uZHMiLCJzZWNvbmRzIiwibWlsaXNlY29uZHMiLCJkZWxheSIsInRpbWVvdXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJXYXRjaCIsInRpbWVzdGFtcHMiLCJNYXAiLCJzdGFydCIsImxhYmVsIiwiaGFzIiwic3RhcnRlZCIsInN0b3AiLCJ0aW1lc3RhbXAiLCJlbGFwc2VkIiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRvQnl0ZUFycmF5IiwidG1wIiwiYXJyIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwiY2hhckNvZGVBdCIsImZyb21CeXRlQXJyYXkiLCJ1aW50OCIsImV4dHJhQnl0ZXMiLCJwYXJ0cyIsIm1heENodW5rTGVuZ3RoIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwiZW5kIiwibnVtIiwib3V0cHV0IiwiYmFzZTY0IiwiaWVlZTc1NCIsImN1c3RvbUluc3BlY3RTeW1ib2wiLCJCdWZmZXIiLCJLX01BWF9MRU5HVEgiLCJjcmVhdGVCdWZmZXIiLCJSYW5nZUVycm9yIiwic2V0UHJvdG90eXBlT2YiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJmcm9tU3RyaW5nIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJhcnJheVZpZXciLCJpc0luc3RhbmNlIiwiY29weSIsImZyb21BcnJheUJ1ZmZlciIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlWaWV3IiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJ2YWx1ZU9mIiwib2JqIiwiaXNCdWZmZXIiLCJjaGVja2VkIiwibnVtYmVySXNOYU4iLCJmcm9tT2JqZWN0IiwidG9QcmltaXRpdmUiLCJhc3NlcnRTaXplIiwic2l6ZSIsInRvU3RyaW5nIiwibXVzdE1hdGNoIiwiYXJndW1lbnRzIiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzbG93VG9TdHJpbmciLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiZGlyIiwiYXJyYXlJbmRleE9mIiwiY2FsbCIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImhleFdyaXRlIiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsInN0ciIsImJ5dGVBcnJheSIsImFzY2lpVG9CeXRlcyIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJ1dGYxNmxlVG9CeXRlcyIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJwcm90byIsImZvbyIsInR5cGVkQXJyYXlTdXBwb3J0IiwiY29uc29sZSIsInBvb2xTaXplIiwiYWxsb2MiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwieSIsImxpc3QiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJ0b0xvY2FsZVN0cmluZyIsImVxdWFscyIsImluc3BlY3QiLCJtYXgiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwidG9KU09OIiwiX2FyciIsImhleFNsaWNlTG9va3VwVGFibGUiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwid3J0QmlnVUludDY0TEUiLCJjaGVja0ludEJJIiwiQmlnSW50Iiwid3J0QmlnVUludDY0QkUiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0IiwibGl0dGxlRW5kaWFuIiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInJlYWRVSW50TEUiLCJyZWFkVUludEJFIiwicmVhZFVpbnQ4IiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEJpZ1VJbnQ2NExFIiwiZGVmaW5lQmlnSW50TWV0aG9kIiwidmFsaWRhdGVOdW1iZXIiLCJmaXJzdCIsImxhc3QiLCJib3VuZHNFcnJvciIsInJlYWRCaWdVSW50NjRCRSIsInJlYWRJbnRMRSIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEJpZ0ludDY0TEUiLCJyZWFkQmlnSW50NjRCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVaW50OCIsIndyaXRlVUludDgiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVCaWdVSW50NjRMRSIsIndyaXRlQmlnVUludDY0QkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVCaWdJbnQ2NExFIiwid3JpdGVCaWdJbnQ2NEJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsImNvcHlXaXRoaW4iLCJlcnJvcnMiLCJFIiwic3ltIiwiZ2V0TWVzc2FnZSIsIkJhc2UiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInN0YWNrIiwiYWRkTnVtZXJpY2FsU2VwYXJhdG9yIiwicmFuZ2UiLCJFUlJfT1VUX09GX1JBTkdFIiwiY2hlY2tCb3VuZHMiLCJFUlJfSU5WQUxJRF9BUkdfVFlQRSIsIkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUyIsIm1zZyIsInJlY2VpdmVkIiwiYWJzIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJiYXNlNjRjbGVhbiIsImFscGhhYmV0IiwidGFibGUiLCJpMTYiLCJmbiIsIkJ1ZmZlckJpZ0ludE5vdERlZmluZWQiLCJ0b2tlbiIsInNpbmdsZU1hdGNoZXIiLCJtdWx0aU1hdGNoZXIiLCJkZWNvZGVDb21wb25lbnRzIiwiY29tcG9uZW50cyIsImRlY29kZVVSSUNvbXBvbmVudCIsImVyciIsInJpZ2h0IiwidG9rZW5zIiwiZW5jb2RlZFVSSSIsInJlcGxhY2VNYXAiLCJjdXN0b21EZWNvZGVVUklDb21wb25lbnQiLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwicmVjZWl2ZXIiLCJGdW5jdGlvbiIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiTnVtYmVySXNOYU4iLCJlbWl0dGVyIiwicmVqZWN0IiwiZXJyb3JMaXN0ZW5lciIsInJlc29sdmVyIiwiZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyIiwiaGFuZGxlciIsImZsYWdzIiwiYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJjaGVja0xpc3RlbmVyIiwiX2dldE1heExpc3RlbmVycyIsInRoYXQiLCJfYWRkTGlzdGVuZXIiLCJwcmVwZW5kIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwibmV3TGlzdGVuZXIiLCJ1bnNoaWZ0Iiwid2FybmVkIiwiY291bnQiLCJ3YXJuIiwib25jZVdyYXBwZXIiLCJmaXJlZCIsIndyYXBGbiIsIl9vbmNlV3JhcCIsIndyYXBwZWQiLCJiaW5kIiwiX2xpc3RlbmVycyIsInVud3JhcCIsImV2bGlzdGVuZXIiLCJ1bndyYXBMaXN0ZW5lcnMiLCJhcnJheUNsb25lIiwibGlzdGVuZXJDb3VudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3cmFwTGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwiZXIiLCJsaXN0ZW5lcnMiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJwb3NpdGlvbiIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzaGlmdCIsInNwbGljZU9uZSIsInJlbW92ZUFsbExpc3RlbmVycyIsInJhd0xpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJwcmVkaWNhdGUiLCJpc0FyciIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJIQVNIX1VOREVGSU5FRCIsImFyZ3NUYWciLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicHJvbWlzZVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwicmVJc0hvc3RDdG9yIiwicmVJc1VpbnQiLCJ0eXBlZEFycmF5VGFncyIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsInJvb3QiLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsIm5vZGVVdGlsIiwiYmluZGluZyIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJhcnJheVNvbWUiLCJtYXBUb0FycmF5Iiwic2V0VG9BcnJheSIsInVpZCIsImZ1bmMiLCJ0cmFuc2Zvcm0iLCJhcnJheVByb3RvIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwibWFza1NyY0tleSIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJyZUlzTmF0aXZlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcGxpY2UiLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwibmF0aXZlR2V0U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwibmF0aXZlS2V5cyIsImdldE5hdGl2ZSIsIlNldCIsIldlYWtNYXAiLCJuYXRpdmVDcmVhdGUiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsIkhhc2giLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJTdGFjayIsImFzc29jSW5kZXhPZiIsImVxIiwiYmFzZUdldFRhZyIsImlzT3duIiwidW5tYXNrZWQiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VJc0FyZ3VtZW50cyIsImlzT2JqZWN0TGlrZSIsImJhc2VJc0VxdWFsIiwib3RoZXIiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJnZXRUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwic3RhY2tlZCIsImVxdWFsQnlUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJvYmpQcm9wcyIsImdldEFsbEtleXMiLCJvYmpMZW5ndGgiLCJza2lwQ3RvciIsIm9ialZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm9iakN0b3IiLCJvdGhDdG9yIiwiZXF1YWxPYmplY3RzIiwiYmFzZUlzRXF1YWxEZWVwIiwib3RoTGVuZ3RoIiwic2VlbiIsImFyclZhbHVlIiwib3RoSW5kZXgiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiYXJyYXlQdXNoIiwiYmFzZUdldEFsbEtleXMiLCJnZXRTeW1ib2xzIiwiZ2V0TWFwRGF0YSIsImdldFZhbHVlIiwiaXNPYmplY3QiLCJpc01hc2tlZCIsImlzRnVuY3Rpb24iLCJiYXNlSXNOYXRpdmUiLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJyZXNJbmRleCIsInN5bWJvbCIsImFycmF5RmlsdGVyIiwiaXNJbmRleCIsIkN0b3IiLCJjdG9yU3RyaW5nIiwiaXNBcmd1bWVudHMiLCJpc0xlbmd0aCIsImJhc2VVbmFyeSIsImluaGVyaXRlZCIsImlzQXJnIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpdGVyYXRlZSIsImJhc2VUaW1lcyIsImFycmF5TGlrZUtleXMiLCJiYXNlS2V5cyIsInRyeVN0cmluZ2lmeSIsIkpTT04iLCJzcyIsIm9iamVjdHMiLCJhcmdMZW4iLCJsYXN0UG9zIiwiZmxlbiIsInNlcGFyYXRvciIsInNlcGFyYXRvckluZGV4IiwidG9VcHBlckNhc2UiLCJleHRlbmRTdGF0aWNzIiwiX19wcm90b19fIiwiX19leHRlbmRzIiwiX18iLCJfX2Fzc2lnbiIsIl9fcmVzdCIsIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlY29yYXRlIiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJfX21ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwibWV0YWRhdGEiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsInJlamVjdGVkIiwiZG9uZSIsInRoZW4iLCJfX2dlbmVyYXRvciIsImJvZHkiLCJfIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiaXRlcmF0b3IiLCJvcCIsIl9fY3JlYXRlQmluZGluZyIsImsyIiwiX192YWx1ZXMiLCJfX3JlYWQiLCJhciIsIl9fc3ByZWFkIiwiX19zcHJlYWRBcnJheXMiLCJpbCIsImpsIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJhc3luY0l0ZXJhdG9yIiwicmVzdW1lIiwiZnVsZmlsbCIsInNldHRsZSIsIl9fYXN5bmNEZWxlZ2F0b3IiLCJfX2FzeW5jVmFsdWVzIiwiX19tYWtlVGVtcGxhdGVPYmplY3QiLCJjb29rZWQiLCJyYXciLCJfX2ltcG9ydFN0YXIiLCJtb2QiLCJfX2VzTW9kdWxlIiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsInByaXZhdGVNYXAiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwiZm9ybWF0IiwiX2NvbnNvbGUiLCJkZWZkIiwiZ2xvYmFsVGhpcyIsInBmR2xvYmFsVGhpc09yRmFsbGJhY2siLCJzdGRTZXJpYWxpemVycyIsIm1hcEh0dHBSZXF1ZXN0IiwibW9jayIsIm1hcEh0dHBSZXNwb25zZSIsIndyYXBSZXF1ZXN0U2VyaWFsaXplciIsInBhc3N0aHJvdWdoIiwid3JhcFJlc3BvbnNlU2VyaWFsaXplciIsIndyYXBFcnJvclNlcmlhbGl6ZXIiLCJyZXEiLCJicm93c2VyIiwidHJhbnNtaXQiLCJzZW5kIiwiYXNPYmplY3QiLCJzZXJpYWxpemVycyIsInNlcmlhbGl6ZSIsInNob3VsZFNlcmlhbGl6ZSIsInN0ZEVyclNlcmlhbGl6ZSIsImZhdGFsIiwiZGVidWciLCJ0cmFjZSIsImVuYWJsZWQiLCJub29wIiwibGV2ZWxzIiwiX2xldmVsIiwic2V0T3B0cyIsImdldFRpbWVGdW5jdGlvbiIsImZsdXNoIiwiX3NlcmlhbGl6ZSIsIl9zdGRFcnJTZXJpYWxpemUiLCJjaGlsZE9wdGlvbnMiLCJjaGlsZE9wdGlvbnNTZXJpYWxpemVycyIsImNoaWxkU2VyaWFsaXplcnMiLCJjaGlsZFNlcmlhbGl6ZSIsImFwcGx5U2VyaWFsaXplcnMiLCJDaGlsZCIsInBhcmVudCIsIl9jaGlsZExldmVsIiwiX2xvZ0V2ZW50IiwiY3JlYXRlTG9nRXZlbnRTaGFwZSIsImZhbGxiYWNrIiwibGV2ZWxWYWwiLCJ0cyIsInRyYW5zbWl0TGV2ZWwiLCJ0cmFuc21pdFZhbHVlIiwibWV0aG9kVmFsdWUiLCJtZXRob2RMZXZlbCIsIndyYXAiLCJhcmdzQ2xvbmVkIiwidGltZSIsImx2bCIsIm1lc3NhZ2VzIiwibnVsbFRpbWUiLCJlcG9jaFRpbWUiLCJsYWJlbHMiLCJzdGRUaW1lRnVuY3Rpb25zIiwidW5peFRpbWUiLCJyb3VuZCIsImlzb1RpbWUiLCJ0b0lTT1N0cmluZyIsIlBST1hZX1NUQVRFIiwicmVmU2V0IiwiV2Vha1NldCIsInByb3h5RnVuY3Rpb24iLCJvYmplY3RJcyIsImlzIiwibmV3UHJveHkiLCJQcm94eSIsImNhblByb3h5IiwiZGVmYXVsdEhhbmRsZVByb21pc2UiLCJwcm9taXNlIiwic3RhdHVzIiwicmVhc29uIiwic25hcENhY2hlIiwiY3JlYXRlU25hcHNob3QiLCJ2ZXJzaW9uIiwiaGFuZGxlUHJvbWlzZSIsImNhY2hlIiwic25hcCIsInByb3h5T2JqZWN0Iiwic25hcHNob3QiLCJmcmVlemUiLCJwcm94eUNhY2hlIiwidmVyc2lvbkhvbGRlciIsInByb3h5RnVuY3Rpb24yIiwiaW5pdGlhbE9iamVjdCIsIm5vdGlmeVVwZGF0ZSIsIm5leHRWZXJzaW9uIiwicHJvcExpc3RlbmVycyIsInBvcFByb3BMaXN0ZW5lciIsInByb3AiLCJwcm9wTGlzdGVuZXIiLCJkZWxldGUiLCJiYXNlT2JqZWN0IiwiZGVsZXRlUHJvcGVydHkiLCJwcmV2VmFsdWUiLCJjaGlsZExpc3RlbmVycyIsImRlbGV0ZWQiLCJfYiIsImhhc1ByZXZWYWx1ZSIsIm5leHRWYWx1ZSIsImNhdGNoIiwicHJveHkiLCJuZXdPcCIsImdldFByb3BMaXN0ZW5lciIsImJ1aWxkUHJveHlGdW5jdGlvbiIsInN1YnNjcmliZSIsImNhbGxiYWNrIiwibm90aWZ5SW5TeW5jIiwic2VsZWN0ZWRDaGFpbiIsImNoYWlucyIsInN0YW5kYWxvbmVDaGFpbnMiLCJzdGFuZGFsb25lVXJpIiwiYWRkcmVzcyIsInByb2ZpbGVOYW1lIiwicHJvZmlsZUF2YXRhciIsInByb2ZpbGVMb2FkaW5nIiwiYmFsYW5jZUxvYWRpbmciLCJiYWxhbmNlIiwiaXNDb25uZWN0ZWQiLCJpc1N0YW5kYWxvbmUiLCJpc0N1c3RvbURlc2t0b3AiLCJpc0N1c3RvbU1vYmlsZSIsImlzRXhwbG9yZXIiLCJzZXRDaGFpbnMiLCJzZXRTdGFuZGFsb25lQ2hhaW5zIiwic2V0U3RhbmRhbG9uZVVyaSIsImdldFNlbGVjdGVkQ2hhaW4iLCJjbGllbnQiLCJnZXROZXR3b3JrIiwiY2hhaW4iLCJzZXRTZWxlY3RlZENoYWluIiwic2V0SXNTdGFuZGFsb25lIiwic2V0SXNDdXN0b21EZXNrdG9wIiwic2V0SXNDdXN0b21Nb2JpbGUiLCJzZXRJc0V4cGxvcmVyIiwiZ2V0QWNjb3VudCIsInNldEFkZHJlc3MiLCJzZXRJc0Nvbm5lY3RlZCIsInNldFByb2ZpbGVOYW1lIiwic2V0UHJvZmlsZUF2YXRhciIsInNldFByb2ZpbGVMb2FkaW5nIiwic2V0QmFsYW5jZUxvYWRpbmciLCJzZXRCYWxhbmNlIiwicmVzZXRQcm9maWxlIiwicmVzZXRBY2NvdW50IiwiaW5pdGlhbGl6ZWQiLCJldGhlcmV1bUNsaWVudCIsInNldEV0aGVyZXVtQ2xpZW50IiwiV0FMTEVUQ09OTkVDVF9ERUVQTElOS19DSE9JQ0UiLCJpc01vYmlsZSIsIm1hdGNoTWVkaWEiLCJ1c2VyQWdlbnQiLCJpc0FuZHJvaWQiLCJpc0VtcHR5T2JqZWN0IiwiaXNIdHRwVXJsIiwic3RhcnRzV2l0aCIsImZvcm1hdE5hdGl2ZVVybCIsImZvcm1hdFVuaXZlcnNhbFVybCIsInJlcGxhY2VBbGwiLCJzZXRXYWxsZXRDb25uZWN0RGVlcExpbmsiLCJlbmRzV2l0aCIsImFzeW5jIiwib3BlbkhyZWYiLCJzZXRXYWxsZXRDb25uZWN0QW5kcm9pZERlZXBMaW5rIiwicmVtb3ZlV2FsbGV0Q29ubmVjdERlZXBMaW5rIiwiaXNOdWxsIiwicHJvamVjdElkIiwidGhlbWVNb2RlIiwidGhlbWVDb2xvciIsInRoZW1lQmFja2dyb3VuZCIsInRoZW1lWkluZGV4IiwibW9iaWxlV2FsbGV0cyIsImRlc2t0b3BXYWxsZXRzIiwid2FsbGV0SW1hZ2VzIiwiY2hhaW5JbWFnZXMiLCJ0b2tlbkltYWdlcyIsImVuYWJsZVN0YW5kYWxvbmVNb2RlIiwiZW5hYmxlTmV0d29ya1ZpZXciLCJkZWZhdWx0Q2hhaW4iLCJleHBsb3JlckFsbG93TGlzdCIsImV4cGxvcmVyRGVueUxpc3QiLCJ0ZXJtc09mU2VydmljZVVybCIsInByaXZhY3lQb2xpY3lVcmwiLCJXIiwic2V0Q29uZmlnIiwiZ2V0RGVmYXVsdENoYWluIiwic2V0VGhlbWVDb25maWciLCJJIiwiZnJvbUVudHJpZXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJmZXRjaCIsImpzb24iLCJmb3JtYXRJbWFnZVVybCIsIndhbGxldHMiLCJsaXN0aW5ncyIsInRvdGFsIiwicGFnZSIsInNlYXJjaCIsInByZXZpZXdXYWxsZXRzIiwicmVjb21lbmRlZFdhbGxldHMiLCJVIiwiZmV0Y2hXYWxsZXRzIiwiZ2V0SW1hZ2VVcmwiLCJyZXNldFNlYXJjaCIsImhpc3RvcnkiLCJ2aWV3IiwiZ29CYWNrIiwiQyIsIkEiLCJyb3V0ZSIsInVyaSIsImNsb3NlIiwidmFyaWFudCIsIm9wZW5Ub2FzdCIsImNsb3NlVG9hc3QiLCJnbG9iYWwiLCJlbnYiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiZGVmaW5pdGlvbiIsImNodW5rSWQiLCJhbGwiLCJwcm9taXNlcyIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsIm9uU2NyaXB0Q29tcGxldGUiLCJwcmV2Iiwib25lcnJvciIsIm9ubG9hZCIsImNsZWFyVGltZW91dCIsImRvbmVGbnMiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJubWQiLCJwYXRocyIsImNoaWxkcmVuIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsImluc3RhbGxlZENodW5rcyIsImluc3RhbGxlZENodW5rRGF0YSIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJyZXF1ZXN0Iiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwic29tZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInJlY29yZHMiLCJyZWxheWVyIiwiUyIsImFycmF5cyIsImFjYyIsImN1cnIiLCJBTFBIQUJFVCIsIkJBU0VfTUFQIiwieGMiLCJCQVNFIiwiTEVBREVSIiwiRkFDVE9SIiwiaUZBQ1RPUiIsImRlY29kZVVuc2FmZSIsInNvdXJjZSIsInBzeiIsInplcm9lcyIsImIyNTYiLCJpdDMiLCJpdDQiLCJ2Y2giLCJwYmVnaW4iLCJwZW5kIiwiYjU4IiwiaXQxIiwiaXQyIiwicmVwZWF0IiwiRW5jb2RlciIsInByZWZpeCIsImJhc2VFbmNvZGUiLCJEZWNvZGVyIiwiYmFzZURlY29kZSIsImNvZGVQb2ludEF0IiwicHJlZml4Q29kZVBvaW50IiwidGV4dCIsIm9yIiwiZGVjb2RlciIsIkNvbXBvc2VkRGVjb2RlciIsImRlY29kZXJzIiwiQ29kZWMiLCJlbmNvZGVyIiwiYmFzZVgiLCJyZmM0NjQ4IiwiYml0c1BlckNoYXIiLCJjb2RlcyIsIndyaXR0ZW4iLCJTeW50YXhFcnJvciIsImlkZW50aXR5IiwiVGV4dERlY29kZXIiLCJUZXh0RW5jb2RlciIsImJhc2UyIiwiYmFzZTgiLCJiYXNlMTAiLCJiYXNlMTYiLCJiYXNlMTZ1cHBlciIsImJhc2UzMnVwcGVyIiwiYmFzZTMycGFkIiwiYmFzZTMycGFkdXBwZXIiLCJiYXNlMzJoZXgiLCJiYXNlMzJoZXh1cHBlciIsImJhc2UzMmhleHBhZCIsImJhc2UzMmhleHBhZHVwcGVyIiwiYmFzZTMyeiIsImJhc2UzNiIsImJhc2UzNnVwcGVyIiwiYmFzZTU4ZmxpY2tyIiwiYmFzZTY0cGFkIiwiYmFzZTY0dXJsIiwiYmFzZTY0dXJscGFkIiwiYWxwaGFiZXRCeXRlc1RvQ2hhcnMiLCJhbHBoYWJldENoYXJzVG9CeXRlcyIsImJhc2UyNTZlbW9qaSIsImJ5dHMiLCJjaGFyIiwiYnl0IiwiSU5UIiwiTjEiLCJOMiIsIk4zIiwiTjQiLCJONSIsIk42IiwiTjciLCJOOCIsIk45Iiwib2xkT2Zmc2V0IiwiZW5jb2RlVG8iLCJpbnQiLCJlbmNvZGluZ0xlbmd0aCIsInNpemVPZmZzZXQiLCJkaWdlc3RPZmZzZXQiLCJIYXNoZXIiLCJzaGEiLCJzaGEyNTYiLCJzaGE1MTIiLCJ0ZXh0RW5jb2RlciIsInRleHREZWNvZGVyIiwiQ0lEIiwibXVsdGloYXNoIiwiYXNDSUQiLCJfYmFzZUNhY2hlIiwiZGVmaW5lUHJvcGVydGllcyIsInJlYWRvbmx5IiwidG9WMCIsIkRBR19QQl9DT0RFIiwiU0hBXzI1Nl9DT0RFIiwiY3JlYXRlVjAiLCJ0b1YxIiwiRGlnZXN0IiwiY3JlYXRlVjEiLCJiYXNlIiwidG9TdHJpbmdWMCIsImJhc2U1OGJ0YyIsInRvU3RyaW5nVjEiLCJiYXNlMzIiLCJmb3IiLCJkZXByZWNhdGUiLCJJU19DSURfREVQUkVDQVRJT04iLCJjaWRTeW1ib2wiLCJ0b0Jhc2VFbmNvZGVkU3RyaW5nIiwiY29kZWMiLCJtdWx0aWJhc2VOYW1lIiwiZW5jb2RlQ0lEIiwiY2lkIiwicmVtYWluZGVyIiwiZGVjb2RlRmlyc3QiLCJzcGVjcyIsImluc3BlY3RCeXRlcyIsInByZWZpeFNpemUiLCJtdWx0aWhhc2hTaXplIiwibXVsdGloYXNoQnl0ZXMiLCJjb2VyY2UiLCJkaWdlc3RCeXRlcyIsImRpZ2VzdFNpemUiLCJtdWx0aWhhc2hDb2RlIiwiaW5pdGlhbEJ5dGVzIiwidmFyaW50IiwicGFyc2VDSUR0b0J5dGVzIiwiYmFzZXMiLCJjcmVhdGVDb2RlYyIsInN1YnN0cmluZyIsImFzY2lpIiwidXRmOCIsImhleCIsImxhdGluMSIsImJpbmFyeSIsImVuY29kZUpTT04iLCJlbmNvZGVJc3MiLCJtdWx0aWNvZGVjIiwiZ2VuZXJhdGVLZXlQYWlyIiwiX19zcHJlYWRBcnJheSIsInRvIiwiQnJvd3NlckluZm8iLCJvcyIsIk5vZGVJbmZvIiwicGxhdGZvcm0iLCJTZWFyY2hCb3REZXZpY2VJbmZvIiwiYm90IiwiQm90SW5mbyIsIlJlYWN0TmF0aXZlSW5mbyIsIlNFQVJDSEJPVF9PU19SRUdFWCIsInVzZXJBZ2VudFJ1bGVzIiwib3BlcmF0aW5nU3lzdGVtUnVsZXMiLCJwYXJzZVVzZXJBZ2VudCIsInVhIiwibWF0Y2hlZFJ1bGUiLCJtYXRjaGVkIiwidWFNYXRjaCIsIm1hdGNoVXNlckFnZW50IiwidmVyc2lvblBhcnRzIiwiaWkiLCJjcmVhdGVWZXJzaW9uUGFydHMiLCJkZXRlY3RPUyIsInNlYXJjaEJvdE1hdGNoIiwiUkVMQVlfSlNPTlJQQyIsIndha3UiLCJwdWJsaXNoIiwic3Vic2NyaXB0aW9uIiwidW5zdWJzY3JpYmUiLCJpcm4iLCJpcmlkaXVtIiwibG4iLCJtbiIsIlQiLCJpdiIsInNlbmRlclB1YmxpY0tleSIsImdlIiwicmVjZWl2ZXJQdWJsaWNLZXkiLCJObiIsImduIiwidm4iLCJPbiIsIk9lIiwiYmUiLCJQZSIsIkIiLCJDZSIsIkFlIiwiUmUiLCJSbiIsIkNuIiwieG4iLCJqbiIsIlZuIiwiTW4iLCJMbiIsInRvcGljIiwiRm4iLCJIbiIsInJlbGF5IiwicW4iLCJHbiIsImplIiwiQm4iLCJ6biIsIlZlIiwiTWUiLCJRbiIsIklOVkFMSURfTUVUSE9EIiwiSU5WQUxJRF9FVkVOVCIsIklOVkFMSURfVVBEQVRFX1JFUVVFU1QiLCJJTlZBTElEX0VYVEVORF9SRVFVRVNUIiwiSU5WQUxJRF9TRVNTSU9OX1NFVFRMRV9SRVFVRVNUIiwiVU5BVVRIT1JJWkVEX01FVEhPRCIsIlVOQVVUSE9SSVpFRF9FVkVOVCIsIlVOQVVUSE9SSVpFRF9VUERBVEVfUkVRVUVTVCIsIlVOQVVUSE9SSVpFRF9FWFRFTkRfUkVRVUVTVCIsIlVTRVJfUkVKRUNURUQiLCJVU0VSX1JFSkVDVEVEX0NIQUlOUyIsIlVTRVJfUkVKRUNURURfTUVUSE9EUyIsIlVTRVJfUkVKRUNURURfRVZFTlRTIiwiVU5TVVBQT1JURURfQ0hBSU5TIiwiVU5TVVBQT1JURURfTUVUSE9EUyIsIlVOU1VQUE9SVEVEX0VWRU5UUyIsIlVOU1VQUE9SVEVEX0FDQ09VTlRTIiwiVU5TVVBQT1JURURfTkFNRVNQQUNFX0tFWSIsIlVTRVJfRElTQ09OTkVDVEVEIiwiU0VTU0lPTl9TRVRUTEVNRU5UX0ZBSUxFRCIsIldDX01FVEhPRF9VTlNVUFBPUlRFRCIsIlpuIiwiTk9UX0lOSVRJQUxJWkVEIiwiTk9fTUFUQ0hJTkdfS0VZIiwiUkVTVE9SRV9XSUxMX09WRVJSSURFIiwiUkVTVUJTQ1JJQkVEIiwiTUlTU0lOR19PUl9JTlZBTElEIiwiRVhQSVJFRCIsIlVOS05PV05fVFlQRSIsIk1JU01BVENIRURfVE9QSUMiLCJOT05fQ09ORk9STUlOR19OQU1FU1BBQ0VTIiwiTiIsImV2ZXJ5IiwiSiIsIkQiLCIkIiwiZXh0ZW5zaW9uIiwiUSIsIloiLCJIZSIsImVlIiwibWV0aG9kcyIsIm5lIiwic3QiLCJhY2NvdW50cyIsIkdlIiwiQmUiLCJhdCIsInB0Iiwia2UiLCJFdCIsIk8iLCJKc29uUnBjUHJvdmlkZXIiLCJoYXNSZWdpc3RlcmVkRXZlbnRMaXN0ZW5lcnMiLCJzZXRDb25uZWN0aW9uIiwiY29ubmVjdGVkIiwicmVnaXN0ZXJFdmVudExpc3RlbmVycyIsInJlcXVlc3RTdHJpY3QiLCJyZXNwb25zZSIsIm9uUGF5bG9hZCIsIldTIiwiV2ViU29ja2V0IiwiSWkiLCJSaSIsIlNpIiwiVGkiLCJQaSIsIk9pIiwieGkiLCJBaSIsIl9pIiwiQ2kiLCJOaSIsIlVpIiwiTGkiLCJGaSIsIk1pIiwiS2kiLCIkaSIsImtpIiwiQmkiLCJqaSIsIlZpIiwicWkiLCJHaSIsIllpIiwiSmkiLCJIaSIsIlhpIiwiV2kiLCJaaSIsIlFpIiwiZXMiLCJycyIsIm5zIiwiYXMiLCJjcyIsInVzIiwibHMiLCJwcyIsIkRzIiwiRXMiLCJ2cyIsIklzIiwiQ3MiLCJfcyIsIlJzIiwiU3MiLCJUcyIsIlBzIiwieHMiLCJzZSIsInpzIiwiTnMiLCJ6ZSIsIlVzIiwiTHMiLCIkcyIsInJlIiwiQnMiLCJqcyIsImRhdGFiYXNlIiwiYWUiLCJKZSIsIm9lIiwid2NfcGFpcmluZ0RlbGV0ZSIsInR0bCIsInByb21wdCIsIndjX3BhaXJpbmdQaW5nIiwidW5yZWdpc3RlcmVkX21ldGhvZCIsImtleWNoYWluIiwic3RvcmFnZVByZWZpeCIsImdldEtleUNoYWluIiwiaXNJbml0aWFsaXplZCIsInBlcnNpc3QiLCJkZWwiLCJzdG9yYWdlS2V5Iiwic3RvcmFnZSIsInNldEtleUNoYWluIiwiZ3QiLCJoYXNLZXlzIiwiZ2V0Q2xpZW50SWQiLCJnZXRDbGllbnRTZWVkIiwicHJpdmF0ZUtleSIsInNldFByaXZhdGVLZXkiLCJzaWduSldUIiwiYXVkIiwia2V5UGFpciIsImlhdCIsImhlYWRlciIsImFsZyIsInR5cCIsImlzcyIsImV4cCIsImVuY29kZUpXVCIsImdlbmVyYXRlU2hhcmVkS2V5IiwiZ2V0UHJpdmF0ZUtleSIsInNldFN5bUtleSIsImRlbGV0ZUtleVBhaXIiLCJkZWxldGVTeW1LZXkiLCJnZXRTeW1LZXkiLCJoZSIsIk5lIiwic3ltS2V5IiwiZW5jb2RlZCIsImdldFBheWxvYWRUeXBlIiwiVnMiLCJnZXRSZWxheWVyTWVzc2FnZXMiLCJzZXRSZWxheWVyTWVzc2FnZXMiLCJIcyIsInF1ZXVlIiwicHVibGlzaFRpbWVvdXQiLCJycGNQdWJsaXNoIiwib25QdWJsaXNoIiwiZGlyZWN0aW9uIiwicHJvdmlkZXIiLCJjaGVja1F1ZXVlIiwiWHMiLCJleGlzdHMiLCJ0b3BpY3MiLCJXcyIsIlpzIiwiUXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiRHQiLCJ0ciIsImJ0Iiwic3Vic2NyaXB0aW9ucyIsInRvcGljTWFwIiwicGVuZGluZyIsImNhY2hlZCIsInBlbmRpbmdTdWJzY3JpcHRpb25XYXRjaExhYmVsIiwicGVuZGluZ1N1YkludGVydmFsIiwic3Vic2NyaWJlVGltZW91dCIsInJlc3RhcnQiLCJvbkVuYWJsZSIsInJwY1N1YnNjcmliZSIsIm9uU3Vic2NyaWJlIiwidW5zdWJzY3JpYmVCeUlkIiwidW5zdWJzY3JpYmVCeVRvcGljIiwiaXNTdWJzY3JpYmVkIiwiY2xlYXJJbnRlcnZhbCIsInJlc3RvcmUiLCJpZHMiLCJoYXNTdWJzY3JpcHRpb24iLCJnZXRTdWJzY3JpcHRpb24iLCJvbkRpc2FibGUiLCJycGNVbnN1YnNjcmliZSIsIm9uVW5zdWJzY3JpYmUiLCJzZXRTdWJzY3JpcHRpb24iLCJvblJlc3Vic2NyaWJlIiwiYWRkU3Vic2NyaXB0aW9uIiwiZGVsZXRlU3Vic2NyaXB0aW9uIiwic2V0UmVsYXllclN1YnNjcmlwdGlvbnMiLCJyZXN1YnNjcmliZSIsImdldFJlbGF5ZXJTdWJzY3JpcHRpb25zIiwib25EaXNjb25uZWN0IiwiY2hlY2tQZW5kaW5nIiwidHJhbnNwb3J0RXhwbGljaXRseUNsb3NlZCIsIm9uQ29ubmVjdCIsImlyIiwic3IiLCJyciIsInN1YnNjcmliZXIiLCJwdWJsaXNoZXIiLCJyZWxheVVybCIsImNyZWF0ZVByb3ZpZGVyIiwidHJhbnNwb3J0T3BlbiIsImNvbm5lY3RpbmciLCJyZWNvcmRNZXNzYWdlRXZlbnQiLCJkaXNjb25uZWN0IiwicmFjZSIsImNvbm5lY3QiLCJ0cmFuc3BvcnRDbG9zZSIsInJlZ2lzdGVyaW5nIiwic29ja2V0IiwicmVnaXN0ZXIiLCJvbkNsb3NlIiwib25FcnJvciIsImN1cnJlbnRNYXhMaXN0ZW5lcnMiLCJyZXNldE1heExpc3RlbmVycyIsInJlamVjdFVuYXV0aG9yaXplZCIsImVycm9yRXZlbnQiLCJlbWl0RXJyb3IiLCJvbm9wZW4iLCJvbk9wZW4iLCJvbm1lc3NhZ2UiLCJvbmNsb3NlIiwicGFyc2VFcnJvciIsInNka1ZlcnNpb24iLCJhdXRoIiwiVWUiLCJuciIsImFja25vd2xlZGdlUGF5bG9hZCIsIm9uTWVzc2FnZUV2ZW50Iiwic2hvdWxkSWdub3JlTWVzc2FnZUV2ZW50Iiwib25Qcm92aWRlclBheWxvYWQiLCJhdHRlbXB0VG9SZWNvbm5lY3QiLCJyZXN0YXJ0VHJhbnNwb3J0Iiwid3QiLCJociIsInZ0IiwiSXQiLCJDdCIsInByb3Bvc2VyIiwiZ2V0S2V5IiwiZ2V0RGF0YSIsImdldEFsbCIsInNldERhdGFTdG9yZSIsImdldERhdGFTdG9yZSIsIl90IiwiaWdub3JlZFBheWxvYWRUeXBlcyIsInJlZ2lzdGVyZWRNZXRob2RzIiwicGFpcmluZ3MiLCJjbGVhbnVwIiwicmVnaXN0ZXJSZWxheWVyRXZlbnRzIiwicmVnaXN0ZXJFeHBpcmVyRXZlbnRzIiwiZXhwaXJ5IiwiYWN0aXZlIiwiWW4iLCJLZSIsImV4cGlyZXIiLCJwYWlyIiwiaXNWYWxpZFBhaXIiLCJhY3RpdmF0ZVBhaXJpbmciLCJhY3RpdmF0ZSIsInBpbmciLCJpc1ZhbGlkUGluZyIsInNlbmRSZXF1ZXN0IiwidXBkYXRlRXhwaXJ5IiwidXBkYXRlTWV0YWRhdGEiLCJwZWVyTWV0YWRhdGEiLCJnZXRQYWlyaW5ncyIsImlzVmFsaWREaXNjb25uZWN0IiwiZGVsZXRlUGFpcmluZyIsInNlbmRSZXN1bHQiLCJzZW5kRXJyb3IiLCJvblJlbGF5RXZlbnRSZXF1ZXN0Iiwib25QYWlyaW5nUGluZ1JlcXVlc3QiLCJvblBhaXJpbmdEZWxldGVSZXF1ZXN0Iiwib25Vbmtub3duUnBjTWV0aG9kUmVxdWVzdCIsIm9uUmVsYXlFdmVudFJlc3BvbnNlIiwib25QYWlyaW5nUGluZ1Jlc3BvbnNlIiwib25Vbmtub3duUnBjTWV0aG9kUmVzcG9uc2UiLCJVUkwiLCJpc1ZhbGlkUGFpcmluZ1RvcGljIiwiUnQiLCJjaGFpbklkIiwiZ2V0UmVjb3JkIiwic2V0SnNvblJwY1JlY29yZHMiLCJnZXRKc29uUnBjUmVjb3JkcyIsInJlY29yZCIsIlN0IiwiZXhwaXJhdGlvbnMiLCJmb3JtYXRUYXJnZXQiLCJnZXRFeHBpcmF0aW9uIiwiY2hlY2tFeHBpcnkiLCJleHBpcmF0aW9uIiwic2V0RXhwaXJhdGlvbnMiLCJnZXRFeHBpcmF0aW9ucyIsImV4cGlyZSIsImNoZWNrRXhwaXJhdGlvbnMiLCJjciIsIlR0IiwidXIiLCJsciIsIlB0IiwieHQiLCJWIiwic3RvcmFnZU9wdGlvbnMiLCJwYWlyaW5nIiwiZHIiLCJ3Y19zZXNzaW9uUHJvcG9zZSIsIndjX3Nlc3Npb25TZXR0bGUiLCJ3Y19zZXNzaW9uVXBkYXRlIiwid2Nfc2Vzc2lvbkV4dGVuZCIsIndjX3Nlc3Npb25SZXF1ZXN0Iiwid2Nfc2Vzc2lvbkV2ZW50Iiwid2Nfc2Vzc2lvbkRlbGV0ZSIsIndjX3Nlc3Npb25QaW5nIiwiaXNWYWxpZENvbm5lY3QiLCJwYWlyaW5nVG9waWMiLCJyZXF1aXJlZE5hbWVzcGFjZXMiLCJyZWxheXMiLCJzZXNzaW9uIiwic2V0RXhwaXJ5IiwicGVlciIsInNldFByb3Bvc2FsIiwiYXBwcm92YWwiLCJhcHByb3ZlIiwiaXNWYWxpZEFwcHJvdmUiLCJyZWxheVByb3RvY29sIiwibmFtZXNwYWNlcyIsInByb3Bvc2FsIiwiY29udHJvbGxlciIsImFja25vd2xlZGdlZCIsInJlc3BvbmRlclB1YmxpY0tleSIsImlzVmFsaWRSZWplY3QiLCJpc1ZhbGlkVXBkYXRlIiwiZXh0ZW5kIiwiaXNWYWxpZEV4dGVuZCIsImlzVmFsaWRSZXF1ZXN0IiwicmVzcG9uZCIsImlzVmFsaWRSZXNwb25kIiwiZGVsZXRlUGVuZGluZ1Nlc3Npb25SZXF1ZXN0IiwiaXNWYWxpZEVtaXQiLCJkZWxldGVTZXNzaW9uIiwiWWUiLCJXZSIsImdldFBlbmRpbmdTZXNzaW9uUmVxdWVzdHMiLCJwZW5kaW5nUmVxdWVzdCIsImRlbGV0ZVByb3Bvc2FsIiwic2V0UGVuZGluZ1Nlc3Npb25SZXF1ZXN0Iiwib25TZXNzaW9uUHJvcG9zZVJlcXVlc3QiLCJvblNlc3Npb25TZXR0bGVSZXF1ZXN0Iiwib25TZXNzaW9uVXBkYXRlUmVxdWVzdCIsIm9uU2Vzc2lvbkV4dGVuZFJlcXVlc3QiLCJvblNlc3Npb25QaW5nUmVxdWVzdCIsIm9uU2Vzc2lvbkRlbGV0ZVJlcXVlc3QiLCJvblNlc3Npb25SZXF1ZXN0Iiwib25TZXNzaW9uRXZlbnRSZXF1ZXN0Iiwib25TZXNzaW9uUHJvcG9zZVJlc3BvbnNlIiwib25TZXNzaW9uU2V0dGxlUmVzcG9uc2UiLCJvblNlc3Npb25VcGRhdGVSZXNwb25zZSIsIm9uU2Vzc2lvbkV4dGVuZFJlc3BvbnNlIiwib25TZXNzaW9uUGluZ1Jlc3BvbnNlIiwib25TZXNzaW9uUmVxdWVzdFJlc3BvbnNlIiwic2VsZlB1YmxpY0tleSIsInBlZXJQdWJsaWNLZXkiLCJzZXNzaW9uVG9waWMiLCJzdWJzY3JpcHRpb25JZCIsImlzVmFsaWRTZXNzaW9uU2V0dGxlUmVxdWVzdCIsInFlIiwiaXNWYWxpZFByb3Bvc2FsSWQiLCJpc1ZhbGlkU2Vzc2lvblRvcGljIiwiTGUiLCJpc1ZhbGlkU2Vzc2lvbk9yUGFpcmluZ1RvcGljIiwiRmUiLCJlbmdpbmUiLCJjb25uZWN0QnV0dG9uIiwiZ2V0RWxlbWVudEJ5SWQiLCJlaXAxNTUiLCJ3ZWIzTW9kYWwiLCJvcGVuTW9kYWwiLCJjbG9zZU1vZGFsIiwic3Vic2NyaWJlTW9kYWwiLCJzZXRUaGVtZSIsImluaXRVaSIsImluc2VydEFkamFjZW50RWxlbWVudCIsInNpZ25DbGllbnQiLCJkaXNhYmxlZCIsImlubmVyVGV4dCJdLCJzb3VyY2VSb290IjoiIn0=