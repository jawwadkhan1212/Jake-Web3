/*! For license information please see web3wallet.js.LICENSE.txt */
(()=>{var e={8099:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(7117);function n(e,t,r){return void 0===t&&(t=new Uint8Array(2)),void 0===r&&(r=0),t[r+0]=e>>>8,t[r+1]=e>>>0,t}function s(e,t,r){return void 0===t&&(t=new Uint8Array(2)),void 0===r&&(r=0),t[r+0]=e>>>0,t[r+1]=e>>>8,t}function o(e,t){return void 0===t&&(t=0),e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3]}function a(e,t){return void 0===t&&(t=0),(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0}function l(e,t){return void 0===t&&(t=0),e[t+3]<<24|e[t+2]<<16|e[t+1]<<8|e[t]}function c(e,t){return void 0===t&&(t=0),(e[t+3]<<24|e[t+2]<<16|e[t+1]<<8|e[t])>>>0}function h(e,t,r){return void 0===t&&(t=new Uint8Array(4)),void 0===r&&(r=0),t[r+0]=e>>>24,t[r+1]=e>>>16,t[r+2]=e>>>8,t[r+3]=e>>>0,t}function u(e,t,r){return void 0===t&&(t=new Uint8Array(4)),void 0===r&&(r=0),t[r+0]=e>>>0,t[r+1]=e>>>8,t[r+2]=e>>>16,t[r+3]=e>>>24,t}function d(e,t,r){return void 0===t&&(t=new Uint8Array(8)),void 0===r&&(r=0),h(e/4294967296>>>0,t,r),h(e>>>0,t,r+4),t}function p(e,t,r){return void 0===t&&(t=new Uint8Array(8)),void 0===r&&(r=0),u(e>>>0,t,r),u(e/4294967296>>>0,t,r+4),t}t.readInt16BE=function(e,t){return void 0===t&&(t=0),(e[t+0]<<8|e[t+1])<<16>>16},t.readUint16BE=function(e,t){return void 0===t&&(t=0),(e[t+0]<<8|e[t+1])>>>0},t.readInt16LE=function(e,t){return void 0===t&&(t=0),(e[t+1]<<8|e[t])<<16>>16},t.readUint16LE=function(e,t){return void 0===t&&(t=0),(e[t+1]<<8|e[t])>>>0},t.writeUint16BE=n,t.writeInt16BE=n,t.writeUint16LE=s,t.writeInt16LE=s,t.readInt32BE=o,t.readUint32BE=a,t.readInt32LE=l,t.readUint32LE=c,t.writeUint32BE=h,t.writeInt32BE=h,t.writeUint32LE=u,t.writeInt32LE=u,t.readInt64BE=function(e,t){void 0===t&&(t=0);var r=o(e,t),i=o(e,t+4);return 4294967296*r+i-4294967296*(i>>31)},t.readUint64BE=function(e,t){return void 0===t&&(t=0),4294967296*a(e,t)+a(e,t+4)},t.readInt64LE=function(e,t){void 0===t&&(t=0);var r=l(e,t);return 4294967296*l(e,t+4)+r-4294967296*(r>>31)},t.readUint64LE=function(e,t){void 0===t&&(t=0);var r=c(e,t);return 4294967296*c(e,t+4)+r},t.writeUint64BE=d,t.writeInt64BE=d,t.writeUint64LE=p,t.writeInt64LE=p,t.readUintBE=function(e,t,r){if(void 0===r&&(r=0),e%8!=0)throw new Error("readUintBE supports only bitLengths divisible by 8");if(e/8>t.length-r)throw new Error("readUintBE: array is too short for the given bitLength");for(var i=0,n=1,s=e/8+r-1;s>=r;s--)i+=t[s]*n,n*=256;return i},t.readUintLE=function(e,t,r){if(void 0===r&&(r=0),e%8!=0)throw new Error("readUintLE supports only bitLengths divisible by 8");if(e/8>t.length-r)throw new Error("readUintLE: array is too short for the given bitLength");for(var i=0,n=1,s=r;s<r+e/8;s++)i+=t[s]*n,n*=256;return i},t.writeUintBE=function(e,t,r,n){if(void 0===r&&(r=new Uint8Array(e/8)),void 0===n&&(n=0),e%8!=0)throw new Error("writeUintBE supports only bitLengths divisible by 8");if(!i.isSafeInteger(t))throw new Error("writeUintBE value must be an integer");for(var s=1,o=e/8+n-1;o>=n;o--)r[o]=t/s&255,s*=256;return r},t.writeUintLE=function(e,t,r,n){if(void 0===r&&(r=new Uint8Array(e/8)),void 0===n&&(n=0),e%8!=0)throw new Error("writeUintLE supports only bitLengths divisible by 8");if(!i.isSafeInteger(t))throw new Error("writeUintLE value must be an integer");for(var s=1,o=n;o<n+e/8;o++)r[o]=t/s&255,s*=256;return r},t.readFloat32BE=function(e,t){return void 0===t&&(t=0),new DataView(e.buffer,e.byteOffset,e.byteLength).getFloat32(t)},t.readFloat32LE=function(e,t){return void 0===t&&(t=0),new DataView(e.buffer,e.byteOffset,e.byteLength).getFloat32(t,!0)},t.readFloat64BE=function(e,t){return void 0===t&&(t=0),new DataView(e.buffer,e.byteOffset,e.byteLength).getFloat64(t)},t.readFloat64LE=function(e,t){return void 0===t&&(t=0),new DataView(e.buffer,e.byteOffset,e.byteLength).getFloat64(t,!0)},t.writeFloat32BE=function(e,t,r){return void 0===t&&(t=new Uint8Array(4)),void 0===r&&(r=0),new DataView(t.buffer,t.byteOffset,t.byteLength).setFloat32(r,e),t},t.writeFloat32LE=function(e,t,r){return void 0===t&&(t=new Uint8Array(4)),void 0===r&&(r=0),new DataView(t.buffer,t.byteOffset,t.byteLength).setFloat32(r,e,!0),t},t.writeFloat64BE=function(e,t,r){return void 0===t&&(t=new Uint8Array(8)),void 0===r&&(r=0),new DataView(t.buffer,t.byteOffset,t.byteLength).setFloat64(r,e),t},t.writeFloat64LE=function(e,t,r){return void 0===t&&(t=new Uint8Array(8)),void 0===r&&(r=0),new DataView(t.buffer,t.byteOffset,t.byteLength).setFloat64(r,e,!0),t}},5439:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(8099),n=r(7309);function s(e,t,r){for(var n=1634760805,s=857760878,o=2036477234,a=1797285236,l=r[3]<<24|r[2]<<16|r[1]<<8|r[0],c=r[7]<<24|r[6]<<16|r[5]<<8|r[4],h=r[11]<<24|r[10]<<16|r[9]<<8|r[8],u=r[15]<<24|r[14]<<16|r[13]<<8|r[12],d=r[19]<<24|r[18]<<16|r[17]<<8|r[16],p=r[23]<<24|r[22]<<16|r[21]<<8|r[20],f=r[27]<<24|r[26]<<16|r[25]<<8|r[24],g=r[31]<<24|r[30]<<16|r[29]<<8|r[28],m=t[3]<<24|t[2]<<16|t[1]<<8|t[0],v=t[7]<<24|t[6]<<16|t[5]<<8|t[4],b=t[11]<<24|t[10]<<16|t[9]<<8|t[8],w=t[15]<<24|t[14]<<16|t[13]<<8|t[12],y=n,_=s,E=o,x=a,C=l,S=c,I=h,O=u,A=d,R=p,P=f,k=g,N=m,M=v,T=b,L=w,$=0;$<20;$+=2)C=(C^=A=A+(N=(N^=y=y+C|0)>>>16|N<<16)|0)>>>20|C<<12,S=(S^=R=R+(M=(M^=_=_+S|0)>>>16|M<<16)|0)>>>20|S<<12,I=(I^=P=P+(T=(T^=E=E+I|0)>>>16|T<<16)|0)>>>20|I<<12,O=(O^=k=k+(L=(L^=x=x+O|0)>>>16|L<<16)|0)>>>20|O<<12,I=(I^=P=P+(T=(T^=E=E+I|0)>>>24|T<<8)|0)>>>25|I<<7,O=(O^=k=k+(L=(L^=x=x+O|0)>>>24|L<<8)|0)>>>25|O<<7,S=(S^=R=R+(M=(M^=_=_+S|0)>>>24|M<<8)|0)>>>25|S<<7,C=(C^=A=A+(N=(N^=y=y+C|0)>>>24|N<<8)|0)>>>25|C<<7,S=(S^=P=P+(L=(L^=y=y+S|0)>>>16|L<<16)|0)>>>20|S<<12,I=(I^=k=k+(N=(N^=_=_+I|0)>>>16|N<<16)|0)>>>20|I<<12,O=(O^=A=A+(M=(M^=E=E+O|0)>>>16|M<<16)|0)>>>20|O<<12,C=(C^=R=R+(T=(T^=x=x+C|0)>>>16|T<<16)|0)>>>20|C<<12,O=(O^=A=A+(M=(M^=E=E+O|0)>>>24|M<<8)|0)>>>25|O<<7,C=(C^=R=R+(T=(T^=x=x+C|0)>>>24|T<<8)|0)>>>25|C<<7,I=(I^=k=k+(N=(N^=_=_+I|0)>>>24|N<<8)|0)>>>25|I<<7,S=(S^=P=P+(L=(L^=y=y+S|0)>>>24|L<<8)|0)>>>25|S<<7;i.writeUint32LE(y+n|0,e,0),i.writeUint32LE(_+s|0,e,4),i.writeUint32LE(E+o|0,e,8),i.writeUint32LE(x+a|0,e,12),i.writeUint32LE(C+l|0,e,16),i.writeUint32LE(S+c|0,e,20),i.writeUint32LE(I+h|0,e,24),i.writeUint32LE(O+u|0,e,28),i.writeUint32LE(A+d|0,e,32),i.writeUint32LE(R+p|0,e,36),i.writeUint32LE(P+f|0,e,40),i.writeUint32LE(k+g|0,e,44),i.writeUint32LE(N+m|0,e,48),i.writeUint32LE(M+v|0,e,52),i.writeUint32LE(T+b|0,e,56),i.writeUint32LE(L+w|0,e,60)}function o(e,t,r,i,o){if(void 0===o&&(o=0),32!==e.length)throw new Error("ChaCha: key size must be 32 bytes");if(i.length<r.length)throw new Error("ChaCha: destination is shorter than source");var l,c;if(0===o){if(8!==t.length&&12!==t.length)throw new Error("ChaCha nonce must be 8 or 12 bytes");c=(l=new Uint8Array(16)).length-t.length,l.set(t,c)}else{if(16!==t.length)throw new Error("ChaCha nonce with counter must be 16 bytes");l=t,c=o}for(var h=new Uint8Array(64),u=0;u<r.length;u+=64){s(h,l,e);for(var d=u;d<u+64&&d<r.length;d++)i[d]=r[d]^h[d-u];a(l,0,c)}return n.wipe(h),0===o&&n.wipe(l),i}function a(e,t,r){for(var i=1;r--;)i=i+(255&e[t])|0,e[t]=255&i,i>>>=8,t++;if(i>0)throw new Error("ChaCha: counter overflow")}t.streamXOR=o,t.stream=function(e,t,r,i){return void 0===i&&(i=0),n.wipe(r),o(e,t,r,r,i)}},5501:(e,t,r)=>{"use strict";var i=r(5439),n=r(3027),s=r(7309),o=r(8099),a=r(4153);t.Cv=32,t.WH=12,t.pg=16;var l=new Uint8Array(16),c=function(){function e(e){if(this.nonceLength=t.WH,this.tagLength=t.pg,e.length!==t.Cv)throw new Error("ChaCha20Poly1305 needs 32-byte key");this._key=new Uint8Array(e)}return e.prototype.seal=function(e,t,r,n){if(e.length>16)throw new Error("ChaCha20Poly1305: incorrect nonce length");var o=new Uint8Array(16);o.set(e,o.length-e.length);var a=new Uint8Array(32);i.stream(this._key,o,a,4);var l,c=t.length+this.tagLength;if(n){if(n.length!==c)throw new Error("ChaCha20Poly1305: incorrect destination length");l=n}else l=new Uint8Array(c);return i.streamXOR(this._key,o,t,l,4),this._authenticate(l.subarray(l.length-this.tagLength,l.length),a,l.subarray(0,l.length-this.tagLength),r),s.wipe(o),l},e.prototype.open=function(e,t,r,n){if(e.length>16)throw new Error("ChaCha20Poly1305: incorrect nonce length");if(t.length<this.tagLength)return null;var o=new Uint8Array(16);o.set(e,o.length-e.length);var l=new Uint8Array(32);i.stream(this._key,o,l,4);var c=new Uint8Array(this.tagLength);if(this._authenticate(c,l,t.subarray(0,t.length-this.tagLength),r),!a.equal(c,t.subarray(t.length-this.tagLength,t.length)))return null;var h,u=t.length-this.tagLength;if(n){if(n.length!==u)throw new Error("ChaCha20Poly1305: incorrect destination length");h=n}else h=new Uint8Array(u);return i.streamXOR(this._key,o,t.subarray(0,t.length-this.tagLength),h,4),s.wipe(o),h},e.prototype.clean=function(){return s.wipe(this._key),this},e.prototype._authenticate=function(e,t,r,i){var a=new n.Poly1305(t);i&&(a.update(i),i.length%16>0&&a.update(l.subarray(i.length%16))),a.update(r),r.length%16>0&&a.update(l.subarray(r.length%16));var c=new Uint8Array(8);i&&o.writeUint64LE(i.length,c),a.update(c),o.writeUint64LE(r.length,c),a.update(c);for(var h=a.digest(),u=0;u<h.length;u++)e[u]=h[u];a.clean(),s.wipe(h),s.wipe(c)},e}();t.OK=c},4153:(e,t)=>{"use strict";function r(e,t){if(e.length!==t.length)return 0;for(var r=0,i=0;i<e.length;i++)r|=e[i]^t[i];return 1&r-1>>>8}Object.defineProperty(t,"__esModule",{value:!0}),t.select=function(e,t,r){return~(e-1)&t|e-1&r},t.lessOrEqual=function(e,t){return(0|e)-(0|t)-1>>>31&1},t.compare=r,t.equal=function(e,t){return 0!==e.length&&0!==t.length&&0!==r(e,t)}},1050:(e,t,r)=>{"use strict";t.Xx=t._w=t.aP=t.KS=t.jQ=void 0;r(1416);const i=r(3350);r(7309);function n(e){const t=new Float64Array(16);if(e)for(let r=0;r<e.length;r++)t[r]=e[r];return t}t.jQ=64,t.KS=64,t.aP=32,new Uint8Array(32)[0]=9;const s=n(),o=n([1]),a=(n([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),n([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222])),l=n([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),c=n([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]);n([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function h(e,t){for(let r=0;r<16;r++)e[r]=0|t[r]}function u(e){let t=1;for(let r=0;r<16;r++){let i=e[r]+t+65535;t=Math.floor(i/65536),e[r]=i-65536*t}e[0]+=t-1+37*(t-1)}function d(e,t,r){const i=~(r-1);for(let r=0;r<16;r++){const n=i&(e[r]^t[r]);e[r]^=n,t[r]^=n}}function p(e,t){const r=n(),i=n();for(let e=0;e<16;e++)i[e]=t[e];u(i),u(i),u(i);for(let e=0;e<2;e++){r[0]=i[0]-65517;for(let e=1;e<15;e++)r[e]=i[e]-65535-(r[e-1]>>16&1),r[e-1]&=65535;r[15]=i[15]-32767-(r[14]>>16&1);const e=r[15]>>16&1;r[14]&=65535,d(i,r,1-e)}for(let t=0;t<16;t++)e[2*t]=255&i[t],e[2*t+1]=i[t]>>8}function f(e){const t=new Uint8Array(32);return p(t,e),1&t[0]}function g(e,t,r){for(let i=0;i<16;i++)e[i]=t[i]+r[i]}function m(e,t,r){for(let i=0;i<16;i++)e[i]=t[i]-r[i]}function v(e,t,r){let i,n,s=0,o=0,a=0,l=0,c=0,h=0,u=0,d=0,p=0,f=0,g=0,m=0,v=0,b=0,w=0,y=0,_=0,E=0,x=0,C=0,S=0,I=0,O=0,A=0,R=0,P=0,k=0,N=0,M=0,T=0,L=0,$=r[0],U=r[1],j=r[2],D=r[3],B=r[4],z=r[5],W=r[6],H=r[7],V=r[8],F=r[9],q=r[10],K=r[11],J=r[12],Z=r[13],G=r[14],Y=r[15];i=t[0],s+=i*$,o+=i*U,a+=i*j,l+=i*D,c+=i*B,h+=i*z,u+=i*W,d+=i*H,p+=i*V,f+=i*F,g+=i*q,m+=i*K,v+=i*J,b+=i*Z,w+=i*G,y+=i*Y,i=t[1],o+=i*$,a+=i*U,l+=i*j,c+=i*D,h+=i*B,u+=i*z,d+=i*W,p+=i*H,f+=i*V,g+=i*F,m+=i*q,v+=i*K,b+=i*J,w+=i*Z,y+=i*G,_+=i*Y,i=t[2],a+=i*$,l+=i*U,c+=i*j,h+=i*D,u+=i*B,d+=i*z,p+=i*W,f+=i*H,g+=i*V,m+=i*F,v+=i*q,b+=i*K,w+=i*J,y+=i*Z,_+=i*G,E+=i*Y,i=t[3],l+=i*$,c+=i*U,h+=i*j,u+=i*D,d+=i*B,p+=i*z,f+=i*W,g+=i*H,m+=i*V,v+=i*F,b+=i*q,w+=i*K,y+=i*J,_+=i*Z,E+=i*G,x+=i*Y,i=t[4],c+=i*$,h+=i*U,u+=i*j,d+=i*D,p+=i*B,f+=i*z,g+=i*W,m+=i*H,v+=i*V,b+=i*F,w+=i*q,y+=i*K,_+=i*J,E+=i*Z,x+=i*G,C+=i*Y,i=t[5],h+=i*$,u+=i*U,d+=i*j,p+=i*D,f+=i*B,g+=i*z,m+=i*W,v+=i*H,b+=i*V,w+=i*F,y+=i*q,_+=i*K,E+=i*J,x+=i*Z,C+=i*G,S+=i*Y,i=t[6],u+=i*$,d+=i*U,p+=i*j,f+=i*D,g+=i*B,m+=i*z,v+=i*W,b+=i*H,w+=i*V,y+=i*F,_+=i*q,E+=i*K,x+=i*J,C+=i*Z,S+=i*G,I+=i*Y,i=t[7],d+=i*$,p+=i*U,f+=i*j,g+=i*D,m+=i*B,v+=i*z,b+=i*W,w+=i*H,y+=i*V,_+=i*F,E+=i*q,x+=i*K,C+=i*J,S+=i*Z,I+=i*G,O+=i*Y,i=t[8],p+=i*$,f+=i*U,g+=i*j,m+=i*D,v+=i*B,b+=i*z,w+=i*W,y+=i*H,_+=i*V,E+=i*F,x+=i*q,C+=i*K,S+=i*J,I+=i*Z,O+=i*G,A+=i*Y,i=t[9],f+=i*$,g+=i*U,m+=i*j,v+=i*D,b+=i*B,w+=i*z,y+=i*W,_+=i*H,E+=i*V,x+=i*F,C+=i*q,S+=i*K,I+=i*J,O+=i*Z,A+=i*G,R+=i*Y,i=t[10],g+=i*$,m+=i*U,v+=i*j,b+=i*D,w+=i*B,y+=i*z,_+=i*W,E+=i*H,x+=i*V,C+=i*F,S+=i*q,I+=i*K,O+=i*J,A+=i*Z,R+=i*G,P+=i*Y,i=t[11],m+=i*$,v+=i*U,b+=i*j,w+=i*D,y+=i*B,_+=i*z,E+=i*W,x+=i*H,C+=i*V,S+=i*F,I+=i*q,O+=i*K,A+=i*J,R+=i*Z,P+=i*G,k+=i*Y,i=t[12],v+=i*$,b+=i*U,w+=i*j,y+=i*D,_+=i*B,E+=i*z,x+=i*W,C+=i*H,S+=i*V,I+=i*F,O+=i*q,A+=i*K,R+=i*J,P+=i*Z,k+=i*G,N+=i*Y,i=t[13],b+=i*$,w+=i*U,y+=i*j,_+=i*D,E+=i*B,x+=i*z,C+=i*W,S+=i*H,I+=i*V,O+=i*F,A+=i*q,R+=i*K,P+=i*J,k+=i*Z,N+=i*G,M+=i*Y,i=t[14],w+=i*$,y+=i*U,_+=i*j,E+=i*D,x+=i*B,C+=i*z,S+=i*W,I+=i*H,O+=i*V,A+=i*F,R+=i*q,P+=i*K,k+=i*J,N+=i*Z,M+=i*G,T+=i*Y,i=t[15],y+=i*$,_+=i*U,E+=i*j,x+=i*D,C+=i*B,S+=i*z,I+=i*W,O+=i*H,A+=i*V,R+=i*F,P+=i*q,k+=i*K,N+=i*J,M+=i*Z,T+=i*G,L+=i*Y,s+=38*_,o+=38*E,a+=38*x,l+=38*C,c+=38*S,h+=38*I,u+=38*O,d+=38*A,p+=38*R,f+=38*P,g+=38*k,m+=38*N,v+=38*M,b+=38*T,w+=38*L,n=1,i=s+n+65535,n=Math.floor(i/65536),s=i-65536*n,i=o+n+65535,n=Math.floor(i/65536),o=i-65536*n,i=a+n+65535,n=Math.floor(i/65536),a=i-65536*n,i=l+n+65535,n=Math.floor(i/65536),l=i-65536*n,i=c+n+65535,n=Math.floor(i/65536),c=i-65536*n,i=h+n+65535,n=Math.floor(i/65536),h=i-65536*n,i=u+n+65535,n=Math.floor(i/65536),u=i-65536*n,i=d+n+65535,n=Math.floor(i/65536),d=i-65536*n,i=p+n+65535,n=Math.floor(i/65536),p=i-65536*n,i=f+n+65535,n=Math.floor(i/65536),f=i-65536*n,i=g+n+65535,n=Math.floor(i/65536),g=i-65536*n,i=m+n+65535,n=Math.floor(i/65536),m=i-65536*n,i=v+n+65535,n=Math.floor(i/65536),v=i-65536*n,i=b+n+65535,n=Math.floor(i/65536),b=i-65536*n,i=w+n+65535,n=Math.floor(i/65536),w=i-65536*n,i=y+n+65535,n=Math.floor(i/65536),y=i-65536*n,s+=n-1+37*(n-1),n=1,i=s+n+65535,n=Math.floor(i/65536),s=i-65536*n,i=o+n+65535,n=Math.floor(i/65536),o=i-65536*n,i=a+n+65535,n=Math.floor(i/65536),a=i-65536*n,i=l+n+65535,n=Math.floor(i/65536),l=i-65536*n,i=c+n+65535,n=Math.floor(i/65536),c=i-65536*n,i=h+n+65535,n=Math.floor(i/65536),h=i-65536*n,i=u+n+65535,n=Math.floor(i/65536),u=i-65536*n,i=d+n+65535,n=Math.floor(i/65536),d=i-65536*n,i=p+n+65535,n=Math.floor(i/65536),p=i-65536*n,i=f+n+65535,n=Math.floor(i/65536),f=i-65536*n,i=g+n+65535,n=Math.floor(i/65536),g=i-65536*n,i=m+n+65535,n=Math.floor(i/65536),m=i-65536*n,i=v+n+65535,n=Math.floor(i/65536),v=i-65536*n,i=b+n+65535,n=Math.floor(i/65536),b=i-65536*n,i=w+n+65535,n=Math.floor(i/65536),w=i-65536*n,i=y+n+65535,n=Math.floor(i/65536),y=i-65536*n,s+=n-1+37*(n-1),e[0]=s,e[1]=o,e[2]=a,e[3]=l,e[4]=c,e[5]=h,e[6]=u,e[7]=d,e[8]=p,e[9]=f,e[10]=g,e[11]=m,e[12]=v,e[13]=b,e[14]=w,e[15]=y}function b(e,t){v(e,t,t)}function w(e,t){const r=n(),i=n(),s=n(),o=n(),l=n(),c=n(),h=n(),u=n(),d=n();m(r,e[1],e[0]),m(d,t[1],t[0]),v(r,r,d),g(i,e[0],e[1]),g(d,t[0],t[1]),v(i,i,d),v(s,e[3],t[3]),v(s,s,a),v(o,e[2],t[2]),g(o,o,o),m(l,i,r),m(c,o,s),g(h,o,s),g(u,i,r),v(e[0],l,c),v(e[1],u,h),v(e[2],h,c),v(e[3],l,u)}function y(e,t,r){for(let i=0;i<4;i++)d(e[i],t[i],r)}function _(e,t){const r=n(),i=n(),s=n();(function(e,t){const r=n();let i;for(i=0;i<16;i++)r[i]=t[i];for(i=253;i>=0;i--)b(r,r),2!==i&&4!==i&&v(r,r,t);for(i=0;i<16;i++)e[i]=r[i]})(s,t[2]),v(r,t[0],s),v(i,t[1],s),p(e,i),e[31]^=f(r)<<7}function E(e,t){const r=[n(),n(),n(),n()];h(r[0],l),h(r[1],c),h(r[2],o),v(r[3],l,c),function(e,t,r){h(e[0],s),h(e[1],o),h(e[2],o),h(e[3],s);for(let i=255;i>=0;--i){const n=r[i/8|0]>>(7&i)&1;y(e,t,n),w(t,e),w(e,e),y(e,t,n)}}(e,r,t)}t._w=function(e){if(e.length!==t.aP)throw new Error(`ed25519: seed must be ${t.aP} bytes`);const r=(0,i.hash)(e);r[0]&=248,r[31]&=127,r[31]|=64;const s=new Uint8Array(32),o=[n(),n(),n(),n()];E(o,r),_(s,o);const a=new Uint8Array(64);return a.set(e),a.set(s,32),{publicKey:s,secretKey:a}};const x=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function C(e,t){let r,i,n,s;for(i=63;i>=32;--i){for(r=0,n=i-32,s=i-12;n<s;++n)t[n]+=r-16*t[i]*x[n-(i-32)],r=Math.floor((t[n]+128)/256),t[n]-=256*r;t[n]+=r,t[i]=0}for(r=0,n=0;n<32;n++)t[n]+=r-(t[31]>>4)*x[n],r=t[n]>>8,t[n]&=255;for(n=0;n<32;n++)t[n]-=r*x[n];for(i=0;i<32;i++)t[i+1]+=t[i]>>8,e[i]=255&t[i]}function S(e){const t=new Float64Array(64);for(let r=0;r<64;r++)t[r]=e[r];for(let t=0;t<64;t++)e[t]=0;C(e,t)}t.Xx=function(e,t){const r=new Float64Array(64),s=[n(),n(),n(),n()],o=(0,i.hash)(e.subarray(0,32));o[0]&=248,o[31]&=127,o[31]|=64;const a=new Uint8Array(64);a.set(o.subarray(32),32);const l=new i.SHA512;l.update(a.subarray(32)),l.update(t);const c=l.digest();l.clean(),S(c),E(s,c),_(a,s),l.reset(),l.update(a.subarray(0,32)),l.update(e.subarray(32)),l.update(t);const h=l.digest();S(h);for(let e=0;e<32;e++)r[e]=c[e];for(let e=0;e<32;e++)for(let t=0;t<32;t++)r[e+t]+=h[e]*o[t];return C(a.subarray(32),r),a}},9984:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isSerializableHash=function(e){return void 0!==e.saveState&&void 0!==e.restoreState&&void 0!==e.cleanSavedState}},512:(e,t,r)=>{"use strict";var i=r(5629),n=r(7309),s=function(){function e(e,t,r,n){void 0===r&&(r=new Uint8Array(0)),this._counter=new Uint8Array(1),this._hash=e,this._info=n;var s=i.hmac(this._hash,r,t);this._hmac=new i.HMAC(e,s),this._buffer=new Uint8Array(this._hmac.digestLength),this._bufpos=this._buffer.length}return e.prototype._fillBuffer=function(){this._counter[0]++;var e=this._counter[0];if(0===e)throw new Error("hkdf: cannot expand more");this._hmac.reset(),e>1&&this._hmac.update(this._buffer),this._info&&this._hmac.update(this._info),this._hmac.update(this._counter),this._hmac.finish(this._buffer),this._bufpos=0},e.prototype.expand=function(e){for(var t=new Uint8Array(e),r=0;r<t.length;r++)this._bufpos===this._buffer.length&&this._fillBuffer(),t[r]=this._buffer[this._bufpos++];return t},e.prototype.clean=function(){this._hmac.clean(),n.wipe(this._buffer),n.wipe(this._counter),this._bufpos=0},e}();t.t=s},5629:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(9984),n=r(4153),s=r(7309),o=function(){function e(e,t){this._finished=!1,this._inner=new e,this._outer=new e,this.blockSize=this._outer.blockSize,this.digestLength=this._outer.digestLength;var r=new Uint8Array(this.blockSize);t.length>this.blockSize?this._inner.update(t).finish(r).clean():r.set(t);for(var n=0;n<r.length;n++)r[n]^=54;for(this._inner.update(r),n=0;n<r.length;n++)r[n]^=106;this._outer.update(r),i.isSerializableHash(this._inner)&&i.isSerializableHash(this._outer)&&(this._innerKeyedState=this._inner.saveState(),this._outerKeyedState=this._outer.saveState()),s.wipe(r)}return e.prototype.reset=function(){if(!i.isSerializableHash(this._inner)||!i.isSerializableHash(this._outer))throw new Error("hmac: can't reset() because hash doesn't implement restoreState()");return this._inner.restoreState(this._innerKeyedState),this._outer.restoreState(this._outerKeyedState),this._finished=!1,this},e.prototype.clean=function(){i.isSerializableHash(this._inner)&&this._inner.cleanSavedState(this._innerKeyedState),i.isSerializableHash(this._outer)&&this._outer.cleanSavedState(this._outerKeyedState),this._inner.clean(),this._outer.clean()},e.prototype.update=function(e){return this._inner.update(e),this},e.prototype.finish=function(e){return this._finished?(this._outer.finish(e),this):(this._inner.finish(e),this._outer.update(e.subarray(0,this.digestLength)).finish(e),this._finished=!0,this)},e.prototype.digest=function(){var e=new Uint8Array(this.digestLength);return this.finish(e),e},e.prototype.saveState=function(){if(!i.isSerializableHash(this._inner))throw new Error("hmac: can't saveState() because hash doesn't implement it");return this._inner.saveState()},e.prototype.restoreState=function(e){if(!i.isSerializableHash(this._inner)||!i.isSerializableHash(this._outer))throw new Error("hmac: can't restoreState() because hash doesn't implement it");return this._inner.restoreState(e),this._outer.restoreState(this._outerKeyedState),this._finished=!1,this},e.prototype.cleanSavedState=function(e){if(!i.isSerializableHash(this._inner))throw new Error("hmac: can't cleanSavedState() because hash doesn't implement it");this._inner.cleanSavedState(e)},e}();t.HMAC=o,t.hmac=function(e,t,r){var i=new o(e,t);i.update(r);var n=i.digest();return i.clean(),n},t.equal=n.equal},7117:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mul=Math.imul||function(e,t){var r=65535&e,i=65535&t;return r*i+((e>>>16&65535)*i+r*(t>>>16&65535)<<16>>>0)|0},t.add=function(e,t){return e+t|0},t.sub=function(e,t){return e-t|0},t.rotl=function(e,t){return e<<t|e>>>32-t},t.rotr=function(e,t){return e<<32-t|e>>>t},t.isInteger=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e},t.MAX_SAFE_INTEGER=9007199254740991,t.isSafeInteger=function(e){return t.isInteger(e)&&e>=-t.MAX_SAFE_INTEGER&&e<=t.MAX_SAFE_INTEGER}},3027:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(4153),n=r(7309);t.DIGEST_LENGTH=16;var s=function(){function e(e){this.digestLength=t.DIGEST_LENGTH,this._buffer=new Uint8Array(16),this._r=new Uint16Array(10),this._h=new Uint16Array(10),this._pad=new Uint16Array(8),this._leftover=0,this._fin=0,this._finished=!1;var r=e[0]|e[1]<<8;this._r[0]=8191&r;var i=e[2]|e[3]<<8;this._r[1]=8191&(r>>>13|i<<3);var n=e[4]|e[5]<<8;this._r[2]=7939&(i>>>10|n<<6);var s=e[6]|e[7]<<8;this._r[3]=8191&(n>>>7|s<<9);var o=e[8]|e[9]<<8;this._r[4]=255&(s>>>4|o<<12),this._r[5]=o>>>1&8190;var a=e[10]|e[11]<<8;this._r[6]=8191&(o>>>14|a<<2);var l=e[12]|e[13]<<8;this._r[7]=8065&(a>>>11|l<<5);var c=e[14]|e[15]<<8;this._r[8]=8191&(l>>>8|c<<8),this._r[9]=c>>>5&127,this._pad[0]=e[16]|e[17]<<8,this._pad[1]=e[18]|e[19]<<8,this._pad[2]=e[20]|e[21]<<8,this._pad[3]=e[22]|e[23]<<8,this._pad[4]=e[24]|e[25]<<8,this._pad[5]=e[26]|e[27]<<8,this._pad[6]=e[28]|e[29]<<8,this._pad[7]=e[30]|e[31]<<8}return e.prototype._blocks=function(e,t,r){for(var i=this._fin?0:2048,n=this._h[0],s=this._h[1],o=this._h[2],a=this._h[3],l=this._h[4],c=this._h[5],h=this._h[6],u=this._h[7],d=this._h[8],p=this._h[9],f=this._r[0],g=this._r[1],m=this._r[2],v=this._r[3],b=this._r[4],w=this._r[5],y=this._r[6],_=this._r[7],E=this._r[8],x=this._r[9];r>=16;){var C=e[t+0]|e[t+1]<<8;n+=8191&C;var S=e[t+2]|e[t+3]<<8;s+=8191&(C>>>13|S<<3);var I=e[t+4]|e[t+5]<<8;o+=8191&(S>>>10|I<<6);var O=e[t+6]|e[t+7]<<8;a+=8191&(I>>>7|O<<9);var A=e[t+8]|e[t+9]<<8;l+=8191&(O>>>4|A<<12),c+=A>>>1&8191;var R=e[t+10]|e[t+11]<<8;h+=8191&(A>>>14|R<<2);var P=e[t+12]|e[t+13]<<8;u+=8191&(R>>>11|P<<5);var k=e[t+14]|e[t+15]<<8,N=0,M=N;M+=n*f,M+=s*(5*x),M+=o*(5*E),M+=a*(5*_),N=(M+=l*(5*y))>>>13,M&=8191,M+=c*(5*w),M+=h*(5*b),M+=u*(5*v),M+=(d+=8191&(P>>>8|k<<8))*(5*m);var T=N+=(M+=(p+=k>>>5|i)*(5*g))>>>13;T+=n*g,T+=s*f,T+=o*(5*x),T+=a*(5*E),N=(T+=l*(5*_))>>>13,T&=8191,T+=c*(5*y),T+=h*(5*w),T+=u*(5*b),T+=d*(5*v),N+=(T+=p*(5*m))>>>13,T&=8191;var L=N;L+=n*m,L+=s*g,L+=o*f,L+=a*(5*x),N=(L+=l*(5*E))>>>13,L&=8191,L+=c*(5*_),L+=h*(5*y),L+=u*(5*w),L+=d*(5*b);var $=N+=(L+=p*(5*v))>>>13;$+=n*v,$+=s*m,$+=o*g,$+=a*f,N=($+=l*(5*x))>>>13,$&=8191,$+=c*(5*E),$+=h*(5*_),$+=u*(5*y),$+=d*(5*w);var U=N+=($+=p*(5*b))>>>13;U+=n*b,U+=s*v,U+=o*m,U+=a*g,N=(U+=l*f)>>>13,U&=8191,U+=c*(5*x),U+=h*(5*E),U+=u*(5*_),U+=d*(5*y);var j=N+=(U+=p*(5*w))>>>13;j+=n*w,j+=s*b,j+=o*v,j+=a*m,N=(j+=l*g)>>>13,j&=8191,j+=c*f,j+=h*(5*x),j+=u*(5*E),j+=d*(5*_);var D=N+=(j+=p*(5*y))>>>13;D+=n*y,D+=s*w,D+=o*b,D+=a*v,N=(D+=l*m)>>>13,D&=8191,D+=c*g,D+=h*f,D+=u*(5*x),D+=d*(5*E);var B=N+=(D+=p*(5*_))>>>13;B+=n*_,B+=s*y,B+=o*w,B+=a*b,N=(B+=l*v)>>>13,B&=8191,B+=c*m,B+=h*g,B+=u*f,B+=d*(5*x);var z=N+=(B+=p*(5*E))>>>13;z+=n*E,z+=s*_,z+=o*y,z+=a*w,N=(z+=l*b)>>>13,z&=8191,z+=c*v,z+=h*m,z+=u*g,z+=d*f;var W=N+=(z+=p*(5*x))>>>13;W+=n*x,W+=s*E,W+=o*_,W+=a*y,N=(W+=l*w)>>>13,W&=8191,W+=c*b,W+=h*v,W+=u*m,W+=d*g,n=M=8191&(N=(N=((N+=(W+=p*f)>>>13)<<2)+N|0)+(M&=8191)|0),s=T+=N>>>=13,o=L&=8191,a=$&=8191,l=U&=8191,c=j&=8191,h=D&=8191,u=B&=8191,d=z&=8191,p=W&=8191,t+=16,r-=16}this._h[0]=n,this._h[1]=s,this._h[2]=o,this._h[3]=a,this._h[4]=l,this._h[5]=c,this._h[6]=h,this._h[7]=u,this._h[8]=d,this._h[9]=p},e.prototype.finish=function(e,t){void 0===t&&(t=0);var r,i,n,s,o=new Uint16Array(10);if(this._leftover){for(s=this._leftover,this._buffer[s++]=1;s<16;s++)this._buffer[s]=0;this._fin=1,this._blocks(this._buffer,0,16)}for(r=this._h[1]>>>13,this._h[1]&=8191,s=2;s<10;s++)this._h[s]+=r,r=this._h[s]>>>13,this._h[s]&=8191;for(this._h[0]+=5*r,r=this._h[0]>>>13,this._h[0]&=8191,this._h[1]+=r,r=this._h[1]>>>13,this._h[1]&=8191,this._h[2]+=r,o[0]=this._h[0]+5,r=o[0]>>>13,o[0]&=8191,s=1;s<10;s++)o[s]=this._h[s]+r,r=o[s]>>>13,o[s]&=8191;for(o[9]-=8192,i=(1^r)-1,s=0;s<10;s++)o[s]&=i;for(i=~i,s=0;s<10;s++)this._h[s]=this._h[s]&i|o[s];for(this._h[0]=65535&(this._h[0]|this._h[1]<<13),this._h[1]=65535&(this._h[1]>>>3|this._h[2]<<10),this._h[2]=65535&(this._h[2]>>>6|this._h[3]<<7),this._h[3]=65535&(this._h[3]>>>9|this._h[4]<<4),this._h[4]=65535&(this._h[4]>>>12|this._h[5]<<1|this._h[6]<<14),this._h[5]=65535&(this._h[6]>>>2|this._h[7]<<11),this._h[6]=65535&(this._h[7]>>>5|this._h[8]<<8),this._h[7]=65535&(this._h[8]>>>8|this._h[9]<<5),n=this._h[0]+this._pad[0],this._h[0]=65535&n,s=1;s<8;s++)n=(this._h[s]+this._pad[s]|0)+(n>>>16)|0,this._h[s]=65535&n;return e[t+0]=this._h[0]>>>0,e[t+1]=this._h[0]>>>8,e[t+2]=this._h[1]>>>0,e[t+3]=this._h[1]>>>8,e[t+4]=this._h[2]>>>0,e[t+5]=this._h[2]>>>8,e[t+6]=this._h[3]>>>0,e[t+7]=this._h[3]>>>8,e[t+8]=this._h[4]>>>0,e[t+9]=this._h[4]>>>8,e[t+10]=this._h[5]>>>0,e[t+11]=this._h[5]>>>8,e[t+12]=this._h[6]>>>0,e[t+13]=this._h[6]>>>8,e[t+14]=this._h[7]>>>0,e[t+15]=this._h[7]>>>8,this._finished=!0,this},e.prototype.update=function(e){var t,r=0,i=e.length;if(this._leftover){(t=16-this._leftover)>i&&(t=i);for(var n=0;n<t;n++)this._buffer[this._leftover+n]=e[r+n];if(i-=t,r+=t,this._leftover+=t,this._leftover<16)return this;this._blocks(this._buffer,0,16),this._leftover=0}if(i>=16&&(t=i-i%16,this._blocks(e,r,t),r+=t,i-=t),i){for(n=0;n<i;n++)this._buffer[this._leftover+n]=e[r+n];this._leftover+=i}return this},e.prototype.digest=function(){if(this._finished)throw new Error("Poly1305 was finished");var e=new Uint8Array(16);return this.finish(e),e},e.prototype.clean=function(){return n.wipe(this._buffer),n.wipe(this._r),n.wipe(this._h),n.wipe(this._pad),this._leftover=0,this._fin=0,this._finished=!0,this},e}();t.Poly1305=s,t.oneTimeAuth=function(e,t){var r=new s(e);r.update(t);var i=r.digest();return r.clean(),i},t.equal=function(e,r){return e.length===t.DIGEST_LENGTH&&r.length===t.DIGEST_LENGTH&&i.equal(e,r)}},1416:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.randomStringForEntropy=t.randomString=t.randomUint32=t.randomBytes=t.defaultRandomSource=void 0;const i=r(6008),n=r(8099),s=r(7309);function o(e,r=t.defaultRandomSource){return r.randomBytes(e)}t.defaultRandomSource=new i.SystemRandomSource,t.randomBytes=o,t.randomUint32=function(e=t.defaultRandomSource){const r=o(4,e),i=(0,n.readUint32LE)(r);return(0,s.wipe)(r),i};const a="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";function l(e,r=a,i=t.defaultRandomSource){if(r.length<2)throw new Error("randomString charset is too short");if(r.length>256)throw new Error("randomString charset is too long");let n="";const l=r.length,c=256-256%l;for(;e>0;){const t=o(Math.ceil(256*e/c),i);for(let i=0;i<t.length&&e>0;i++){const s=t[i];s<c&&(n+=r.charAt(s%l),e--)}(0,s.wipe)(t)}return n}t.randomString=l,t.randomStringForEntropy=function(e,r=a,i=t.defaultRandomSource){return l(Math.ceil(e/(Math.log(r.length)/Math.LN2)),r,i)}},5455:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BrowserRandomSource=void 0,t.BrowserRandomSource=class{constructor(){this.isAvailable=!1,this.isInstantiated=!1;const e="undefined"!=typeof self?self.crypto||self.msCrypto:null;e&&void 0!==e.getRandomValues&&(this._crypto=e,this.isAvailable=!0,this.isInstantiated=!0)}randomBytes(e){if(!this.isAvailable||!this._crypto)throw new Error("Browser random byte generator is not available.");const t=new Uint8Array(e);for(let e=0;e<t.length;e+=65536)this._crypto.getRandomValues(t.subarray(e,e+Math.min(t.length-e,65536)));return t}}},8871:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NodeRandomSource=void 0;const i=r(7309);t.NodeRandomSource=class{constructor(){this.isAvailable=!1,this.isInstantiated=!1;{const e=r(5883);e&&e.randomBytes&&(this._crypto=e,this.isAvailable=!0,this.isInstantiated=!0)}}randomBytes(e){if(!this.isAvailable||!this._crypto)throw new Error("Node.js random byte generator is not available.");let t=this._crypto.randomBytes(e);if(t.length!==e)throw new Error("NodeRandomSource: got fewer bytes than requested");const r=new Uint8Array(e);for(let e=0;e<r.length;e++)r[e]=t[e];return(0,i.wipe)(t),r}}},6008:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SystemRandomSource=void 0;const i=r(5455),n=r(8871);t.SystemRandomSource=class{constructor(){return this.isAvailable=!1,this.name="",this._source=new i.BrowserRandomSource,this._source.isAvailable?(this.isAvailable=!0,void(this.name="Browser")):(this._source=new n.NodeRandomSource,this._source.isAvailable?(this.isAvailable=!0,void(this.name="Node")):void 0)}randomBytes(e){if(!this.isAvailable)throw new Error("System random byte generator is not available.");return this._source.randomBytes(e)}}},3294:(e,t,r)=>{"use strict";var i=r(8099),n=r(7309);t.k=32,t.cn=64;var s=function(){function e(){this.digestLength=t.k,this.blockSize=t.cn,this._state=new Int32Array(8),this._temp=new Int32Array(64),this._buffer=new Uint8Array(128),this._bufferLength=0,this._bytesHashed=0,this._finished=!1,this.reset()}return e.prototype._initState=function(){this._state[0]=1779033703,this._state[1]=3144134277,this._state[2]=1013904242,this._state[3]=2773480762,this._state[4]=1359893119,this._state[5]=2600822924,this._state[6]=528734635,this._state[7]=1541459225},e.prototype.reset=function(){return this._initState(),this._bufferLength=0,this._bytesHashed=0,this._finished=!1,this},e.prototype.clean=function(){n.wipe(this._buffer),n.wipe(this._temp),this.reset()},e.prototype.update=function(e,t){if(void 0===t&&(t=e.length),this._finished)throw new Error("SHA256: can't update because hash was finished.");var r=0;if(this._bytesHashed+=t,this._bufferLength>0){for(;this._bufferLength<this.blockSize&&t>0;)this._buffer[this._bufferLength++]=e[r++],t--;this._bufferLength===this.blockSize&&(a(this._temp,this._state,this._buffer,0,this.blockSize),this._bufferLength=0)}for(t>=this.blockSize&&(r=a(this._temp,this._state,e,r,t),t%=this.blockSize);t>0;)this._buffer[this._bufferLength++]=e[r++],t--;return this},e.prototype.finish=function(e){if(!this._finished){var t=this._bytesHashed,r=this._bufferLength,n=t/536870912|0,s=t<<3,o=t%64<56?64:128;this._buffer[r]=128;for(var l=r+1;l<o-8;l++)this._buffer[l]=0;i.writeUint32BE(n,this._buffer,o-8),i.writeUint32BE(s,this._buffer,o-4),a(this._temp,this._state,this._buffer,0,o),this._finished=!0}for(l=0;l<this.digestLength/4;l++)i.writeUint32BE(this._state[l],e,4*l);return this},e.prototype.digest=function(){var e=new Uint8Array(this.digestLength);return this.finish(e),e},e.prototype.saveState=function(){if(this._finished)throw new Error("SHA256: cannot save finished state");return{state:new Int32Array(this._state),buffer:this._bufferLength>0?new Uint8Array(this._buffer):void 0,bufferLength:this._bufferLength,bytesHashed:this._bytesHashed}},e.prototype.restoreState=function(e){return this._state.set(e.state),this._bufferLength=e.bufferLength,e.buffer&&this._buffer.set(e.buffer),this._bytesHashed=e.bytesHashed,this._finished=!1,this},e.prototype.cleanSavedState=function(e){n.wipe(e.state),e.buffer&&n.wipe(e.buffer),e.bufferLength=0,e.bytesHashed=0},e}();t.mE=s;var o=new Int32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]);function a(e,t,r,n,s){for(;s>=64;){for(var a=t[0],l=t[1],c=t[2],h=t[3],u=t[4],d=t[5],p=t[6],f=t[7],g=0;g<16;g++){var m=n+4*g;e[g]=i.readUint32BE(r,m)}for(g=16;g<64;g++){var v=e[g-2],b=(v>>>17|v<<15)^(v>>>19|v<<13)^v>>>10,w=((v=e[g-15])>>>7|v<<25)^(v>>>18|v<<14)^v>>>3;e[g]=(b+e[g-7]|0)+(w+e[g-16]|0)}for(g=0;g<64;g++)b=(((u>>>6|u<<26)^(u>>>11|u<<21)^(u>>>25|u<<7))+(u&d^~u&p)|0)+(f+(o[g]+e[g]|0)|0)|0,w=((a>>>2|a<<30)^(a>>>13|a<<19)^(a>>>22|a<<10))+(a&l^a&c^l&c)|0,f=p,p=d,d=u,u=h+b|0,h=c,c=l,l=a,a=b+w|0;t[0]+=a,t[1]+=l,t[2]+=c,t[3]+=h,t[4]+=u,t[5]+=d,t[6]+=p,t[7]+=f,n+=64,s-=64}return n}t.vp=function(e){var t=new s;t.update(e);var r=t.digest();return t.clean(),r}},3350:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(8099),n=r(7309);t.DIGEST_LENGTH=64,t.BLOCK_SIZE=128;var s=function(){function e(){this.digestLength=t.DIGEST_LENGTH,this.blockSize=t.BLOCK_SIZE,this._stateHi=new Int32Array(8),this._stateLo=new Int32Array(8),this._tempHi=new Int32Array(16),this._tempLo=new Int32Array(16),this._buffer=new Uint8Array(256),this._bufferLength=0,this._bytesHashed=0,this._finished=!1,this.reset()}return e.prototype._initState=function(){this._stateHi[0]=1779033703,this._stateHi[1]=3144134277,this._stateHi[2]=1013904242,this._stateHi[3]=2773480762,this._stateHi[4]=1359893119,this._stateHi[5]=2600822924,this._stateHi[6]=528734635,this._stateHi[7]=1541459225,this._stateLo[0]=4089235720,this._stateLo[1]=2227873595,this._stateLo[2]=4271175723,this._stateLo[3]=1595750129,this._stateLo[4]=2917565137,this._stateLo[5]=725511199,this._stateLo[6]=4215389547,this._stateLo[7]=327033209},e.prototype.reset=function(){return this._initState(),this._bufferLength=0,this._bytesHashed=0,this._finished=!1,this},e.prototype.clean=function(){n.wipe(this._buffer),n.wipe(this._tempHi),n.wipe(this._tempLo),this.reset()},e.prototype.update=function(e,r){if(void 0===r&&(r=e.length),this._finished)throw new Error("SHA512: can't update because hash was finished.");var i=0;if(this._bytesHashed+=r,this._bufferLength>0){for(;this._bufferLength<t.BLOCK_SIZE&&r>0;)this._buffer[this._bufferLength++]=e[i++],r--;this._bufferLength===this.blockSize&&(a(this._tempHi,this._tempLo,this._stateHi,this._stateLo,this._buffer,0,this.blockSize),this._bufferLength=0)}for(r>=this.blockSize&&(i=a(this._tempHi,this._tempLo,this._stateHi,this._stateLo,e,i,r),r%=this.blockSize);r>0;)this._buffer[this._bufferLength++]=e[i++],r--;return this},e.prototype.finish=function(e){if(!this._finished){var t=this._bytesHashed,r=this._bufferLength,n=t/536870912|0,s=t<<3,o=t%128<112?128:256;this._buffer[r]=128;for(var l=r+1;l<o-8;l++)this._buffer[l]=0;i.writeUint32BE(n,this._buffer,o-8),i.writeUint32BE(s,this._buffer,o-4),a(this._tempHi,this._tempLo,this._stateHi,this._stateLo,this._buffer,0,o),this._finished=!0}for(l=0;l<this.digestLength/8;l++)i.writeUint32BE(this._stateHi[l],e,8*l),i.writeUint32BE(this._stateLo[l],e,8*l+4);return this},e.prototype.digest=function(){var e=new Uint8Array(this.digestLength);return this.finish(e),e},e.prototype.saveState=function(){if(this._finished)throw new Error("SHA256: cannot save finished state");return{stateHi:new Int32Array(this._stateHi),stateLo:new Int32Array(this._stateLo),buffer:this._bufferLength>0?new Uint8Array(this._buffer):void 0,bufferLength:this._bufferLength,bytesHashed:this._bytesHashed}},e.prototype.restoreState=function(e){return this._stateHi.set(e.stateHi),this._stateLo.set(e.stateLo),this._bufferLength=e.bufferLength,e.buffer&&this._buffer.set(e.buffer),this._bytesHashed=e.bytesHashed,this._finished=!1,this},e.prototype.cleanSavedState=function(e){n.wipe(e.stateHi),n.wipe(e.stateLo),e.buffer&&n.wipe(e.buffer),e.bufferLength=0,e.bytesHashed=0},e}();t.SHA512=s;var o=new Int32Array([1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591]);function a(e,t,r,n,s,a,l){for(var c,h,u,d,p,f,g,m,v=r[0],b=r[1],w=r[2],y=r[3],_=r[4],E=r[5],x=r[6],C=r[7],S=n[0],I=n[1],O=n[2],A=n[3],R=n[4],P=n[5],k=n[6],N=n[7];l>=128;){for(var M=0;M<16;M++){var T=8*M+a;e[M]=i.readUint32BE(s,T),t[M]=i.readUint32BE(s,T+4)}for(M=0;M<80;M++){var L,$,U=v,j=b,D=w,B=y,z=_,W=E,H=x,V=S,F=I,q=O,K=A,J=R,Z=P,G=k;if(p=65535&(h=N),f=h>>>16,g=65535&(c=C),m=c>>>16,p+=65535&(h=(R>>>14|_<<18)^(R>>>18|_<<14)^(_>>>9|R<<23)),f+=h>>>16,g+=65535&(c=(_>>>14|R<<18)^(_>>>18|R<<14)^(R>>>9|_<<23)),m+=c>>>16,p+=65535&(h=R&P^~R&k),f+=h>>>16,g+=65535&(c=_&E^~_&x),m+=c>>>16,c=o[2*M],p+=65535&(h=o[2*M+1]),f+=h>>>16,g+=65535&c,m+=c>>>16,c=e[M%16],f+=(h=t[M%16])>>>16,g+=65535&c,m+=c>>>16,g+=(f+=(p+=65535&h)>>>16)>>>16,p=65535&(h=d=65535&p|f<<16),f=h>>>16,g=65535&(c=u=65535&g|(m+=g>>>16)<<16),m=c>>>16,p+=65535&(h=(S>>>28|v<<4)^(v>>>2|S<<30)^(v>>>7|S<<25)),f+=h>>>16,g+=65535&(c=(v>>>28|S<<4)^(S>>>2|v<<30)^(S>>>7|v<<25)),m+=c>>>16,f+=(h=S&I^S&O^I&O)>>>16,g+=65535&(c=v&b^v&w^b&w),m+=c>>>16,L=65535&(g+=(f+=(p+=65535&h)>>>16)>>>16)|(m+=g>>>16)<<16,$=65535&p|f<<16,p=65535&(h=K),f=h>>>16,g=65535&(c=B),m=c>>>16,f+=(h=d)>>>16,g+=65535&(c=u),m+=c>>>16,b=U,w=j,y=D,_=B=65535&(g+=(f+=(p+=65535&h)>>>16)>>>16)|(m+=g>>>16)<<16,E=z,x=W,C=H,v=L,I=V,O=F,A=q,R=K=65535&p|f<<16,P=J,k=Z,N=G,S=$,M%16==15)for(T=0;T<16;T++)c=e[T],p=65535&(h=t[T]),f=h>>>16,g=65535&c,m=c>>>16,c=e[(T+9)%16],p+=65535&(h=t[(T+9)%16]),f+=h>>>16,g+=65535&c,m+=c>>>16,u=e[(T+1)%16],p+=65535&(h=((d=t[(T+1)%16])>>>1|u<<31)^(d>>>8|u<<24)^(d>>>7|u<<25)),f+=h>>>16,g+=65535&(c=(u>>>1|d<<31)^(u>>>8|d<<24)^u>>>7),m+=c>>>16,u=e[(T+14)%16],f+=(h=((d=t[(T+14)%16])>>>19|u<<13)^(u>>>29|d<<3)^(d>>>6|u<<26))>>>16,g+=65535&(c=(u>>>19|d<<13)^(d>>>29|u<<3)^u>>>6),m+=c>>>16,m+=(g+=(f+=(p+=65535&h)>>>16)>>>16)>>>16,e[T]=65535&g|m<<16,t[T]=65535&p|f<<16}p=65535&(h=S),f=h>>>16,g=65535&(c=v),m=c>>>16,c=r[0],f+=(h=n[0])>>>16,g+=65535&c,m+=c>>>16,m+=(g+=(f+=(p+=65535&h)>>>16)>>>16)>>>16,r[0]=v=65535&g|m<<16,n[0]=S=65535&p|f<<16,p=65535&(h=I),f=h>>>16,g=65535&(c=b),m=c>>>16,c=r[1],f+=(h=n[1])>>>16,g+=65535&c,m+=c>>>16,m+=(g+=(f+=(p+=65535&h)>>>16)>>>16)>>>16,r[1]=b=65535&g|m<<16,n[1]=I=65535&p|f<<16,p=65535&(h=O),f=h>>>16,g=65535&(c=w),m=c>>>16,c=r[2],f+=(h=n[2])>>>16,g+=65535&c,m+=c>>>16,m+=(g+=(f+=(p+=65535&h)>>>16)>>>16)>>>16,r[2]=w=65535&g|m<<16,n[2]=O=65535&p|f<<16,p=65535&(h=A),f=h>>>16,g=65535&(c=y),m=c>>>16,c=r[3],f+=(h=n[3])>>>16,g+=65535&c,m+=c>>>16,m+=(g+=(f+=(p+=65535&h)>>>16)>>>16)>>>16,r[3]=y=65535&g|m<<16,n[3]=A=65535&p|f<<16,p=65535&(h=R),f=h>>>16,g=65535&(c=_),m=c>>>16,c=r[4],f+=(h=n[4])>>>16,g+=65535&c,m+=c>>>16,m+=(g+=(f+=(p+=65535&h)>>>16)>>>16)>>>16,r[4]=_=65535&g|m<<16,n[4]=R=65535&p|f<<16,p=65535&(h=P),f=h>>>16,g=65535&(c=E),m=c>>>16,c=r[5],f+=(h=n[5])>>>16,g+=65535&c,m+=c>>>16,m+=(g+=(f+=(p+=65535&h)>>>16)>>>16)>>>16,r[5]=E=65535&g|m<<16,n[5]=P=65535&p|f<<16,p=65535&(h=k),f=h>>>16,g=65535&(c=x),m=c>>>16,c=r[6],f+=(h=n[6])>>>16,g+=65535&c,m+=c>>>16,m+=(g+=(f+=(p+=65535&h)>>>16)>>>16)>>>16,r[6]=x=65535&g|m<<16,n[6]=k=65535&p|f<<16,p=65535&(h=N),f=h>>>16,g=65535&(c=C),m=c>>>16,c=r[7],f+=(h=n[7])>>>16,g+=65535&c,m+=c>>>16,m+=(g+=(f+=(p+=65535&h)>>>16)>>>16)>>>16,r[7]=C=65535&g|m<<16,n[7]=N=65535&p|f<<16,a+=128,l-=128}return a}t.hash=function(e){var t=new s;t.update(e);var r=t.digest();return t.clean(),r}},7309:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.wipe=function(e){for(var t=0;t<e.length;t++)e[t]=0;return e}},7664:(e,t,r)=>{"use strict";t.gi=t.Au=t.KS=t.kz=void 0;const i=r(1416),n=r(7309);function s(e){const t=new Float64Array(16);if(e)for(let r=0;r<e.length;r++)t[r]=e[r];return t}t.kz=32,t.KS=32;const o=new Uint8Array(32);o[0]=9;const a=s([56129,1]);function l(e){let t=1;for(let r=0;r<16;r++){let i=e[r]+t+65535;t=Math.floor(i/65536),e[r]=i-65536*t}e[0]+=t-1+37*(t-1)}function c(e,t,r){const i=~(r-1);for(let r=0;r<16;r++){const n=i&(e[r]^t[r]);e[r]^=n,t[r]^=n}}function h(e,t,r){for(let i=0;i<16;i++)e[i]=t[i]+r[i]}function u(e,t,r){for(let i=0;i<16;i++)e[i]=t[i]-r[i]}function d(e,t,r){let i,n,s=0,o=0,a=0,l=0,c=0,h=0,u=0,d=0,p=0,f=0,g=0,m=0,v=0,b=0,w=0,y=0,_=0,E=0,x=0,C=0,S=0,I=0,O=0,A=0,R=0,P=0,k=0,N=0,M=0,T=0,L=0,$=r[0],U=r[1],j=r[2],D=r[3],B=r[4],z=r[5],W=r[6],H=r[7],V=r[8],F=r[9],q=r[10],K=r[11],J=r[12],Z=r[13],G=r[14],Y=r[15];i=t[0],s+=i*$,o+=i*U,a+=i*j,l+=i*D,c+=i*B,h+=i*z,u+=i*W,d+=i*H,p+=i*V,f+=i*F,g+=i*q,m+=i*K,v+=i*J,b+=i*Z,w+=i*G,y+=i*Y,i=t[1],o+=i*$,a+=i*U,l+=i*j,c+=i*D,h+=i*B,u+=i*z,d+=i*W,p+=i*H,f+=i*V,g+=i*F,m+=i*q,v+=i*K,b+=i*J,w+=i*Z,y+=i*G,_+=i*Y,i=t[2],a+=i*$,l+=i*U,c+=i*j,h+=i*D,u+=i*B,d+=i*z,p+=i*W,f+=i*H,g+=i*V,m+=i*F,v+=i*q,b+=i*K,w+=i*J,y+=i*Z,_+=i*G,E+=i*Y,i=t[3],l+=i*$,c+=i*U,h+=i*j,u+=i*D,d+=i*B,p+=i*z,f+=i*W,g+=i*H,m+=i*V,v+=i*F,b+=i*q,w+=i*K,y+=i*J,_+=i*Z,E+=i*G,x+=i*Y,i=t[4],c+=i*$,h+=i*U,u+=i*j,d+=i*D,p+=i*B,f+=i*z,g+=i*W,m+=i*H,v+=i*V,b+=i*F,w+=i*q,y+=i*K,_+=i*J,E+=i*Z,x+=i*G,C+=i*Y,i=t[5],h+=i*$,u+=i*U,d+=i*j,p+=i*D,f+=i*B,g+=i*z,m+=i*W,v+=i*H,b+=i*V,w+=i*F,y+=i*q,_+=i*K,E+=i*J,x+=i*Z,C+=i*G,S+=i*Y,i=t[6],u+=i*$,d+=i*U,p+=i*j,f+=i*D,g+=i*B,m+=i*z,v+=i*W,b+=i*H,w+=i*V,y+=i*F,_+=i*q,E+=i*K,x+=i*J,C+=i*Z,S+=i*G,I+=i*Y,i=t[7],d+=i*$,p+=i*U,f+=i*j,g+=i*D,m+=i*B,v+=i*z,b+=i*W,w+=i*H,y+=i*V,_+=i*F,E+=i*q,x+=i*K,C+=i*J,S+=i*Z,I+=i*G,O+=i*Y,i=t[8],p+=i*$,f+=i*U,g+=i*j,m+=i*D,v+=i*B,b+=i*z,w+=i*W,y+=i*H,_+=i*V,E+=i*F,x+=i*q,C+=i*K,S+=i*J,I+=i*Z,O+=i*G,A+=i*Y,i=t[9],f+=i*$,g+=i*U,m+=i*j,v+=i*D,b+=i*B,w+=i*z,y+=i*W,_+=i*H,E+=i*V,x+=i*F,C+=i*q,S+=i*K,I+=i*J,O+=i*Z,A+=i*G,R+=i*Y,i=t[10],g+=i*$,m+=i*U,v+=i*j,b+=i*D,w+=i*B,y+=i*z,_+=i*W,E+=i*H,x+=i*V,C+=i*F,S+=i*q,I+=i*K,O+=i*J,A+=i*Z,R+=i*G,P+=i*Y,i=t[11],m+=i*$,v+=i*U,b+=i*j,w+=i*D,y+=i*B,_+=i*z,E+=i*W,x+=i*H,C+=i*V,S+=i*F,I+=i*q,O+=i*K,A+=i*J,R+=i*Z,P+=i*G,k+=i*Y,i=t[12],v+=i*$,b+=i*U,w+=i*j,y+=i*D,_+=i*B,E+=i*z,x+=i*W,C+=i*H,S+=i*V,I+=i*F,O+=i*q,A+=i*K,R+=i*J,P+=i*Z,k+=i*G,N+=i*Y,i=t[13],b+=i*$,w+=i*U,y+=i*j,_+=i*D,E+=i*B,x+=i*z,C+=i*W,S+=i*H,I+=i*V,O+=i*F,A+=i*q,R+=i*K,P+=i*J,k+=i*Z,N+=i*G,M+=i*Y,i=t[14],w+=i*$,y+=i*U,_+=i*j,E+=i*D,x+=i*B,C+=i*z,S+=i*W,I+=i*H,O+=i*V,A+=i*F,R+=i*q,P+=i*K,k+=i*J,N+=i*Z,M+=i*G,T+=i*Y,i=t[15],y+=i*$,_+=i*U,E+=i*j,x+=i*D,C+=i*B,S+=i*z,I+=i*W,O+=i*H,A+=i*V,R+=i*F,P+=i*q,k+=i*K,N+=i*J,M+=i*Z,T+=i*G,L+=i*Y,s+=38*_,o+=38*E,a+=38*x,l+=38*C,c+=38*S,h+=38*I,u+=38*O,d+=38*A,p+=38*R,f+=38*P,g+=38*k,m+=38*N,v+=38*M,b+=38*T,w+=38*L,n=1,i=s+n+65535,n=Math.floor(i/65536),s=i-65536*n,i=o+n+65535,n=Math.floor(i/65536),o=i-65536*n,i=a+n+65535,n=Math.floor(i/65536),a=i-65536*n,i=l+n+65535,n=Math.floor(i/65536),l=i-65536*n,i=c+n+65535,n=Math.floor(i/65536),c=i-65536*n,i=h+n+65535,n=Math.floor(i/65536),h=i-65536*n,i=u+n+65535,n=Math.floor(i/65536),u=i-65536*n,i=d+n+65535,n=Math.floor(i/65536),d=i-65536*n,i=p+n+65535,n=Math.floor(i/65536),p=i-65536*n,i=f+n+65535,n=Math.floor(i/65536),f=i-65536*n,i=g+n+65535,n=Math.floor(i/65536),g=i-65536*n,i=m+n+65535,n=Math.floor(i/65536),m=i-65536*n,i=v+n+65535,n=Math.floor(i/65536),v=i-65536*n,i=b+n+65535,n=Math.floor(i/65536),b=i-65536*n,i=w+n+65535,n=Math.floor(i/65536),w=i-65536*n,i=y+n+65535,n=Math.floor(i/65536),y=i-65536*n,s+=n-1+37*(n-1),n=1,i=s+n+65535,n=Math.floor(i/65536),s=i-65536*n,i=o+n+65535,n=Math.floor(i/65536),o=i-65536*n,i=a+n+65535,n=Math.floor(i/65536),a=i-65536*n,i=l+n+65535,n=Math.floor(i/65536),l=i-65536*n,i=c+n+65535,n=Math.floor(i/65536),c=i-65536*n,i=h+n+65535,n=Math.floor(i/65536),h=i-65536*n,i=u+n+65535,n=Math.floor(i/65536),u=i-65536*n,i=d+n+65535,n=Math.floor(i/65536),d=i-65536*n,i=p+n+65535,n=Math.floor(i/65536),p=i-65536*n,i=f+n+65535,n=Math.floor(i/65536),f=i-65536*n,i=g+n+65535,n=Math.floor(i/65536),g=i-65536*n,i=m+n+65535,n=Math.floor(i/65536),m=i-65536*n,i=v+n+65535,n=Math.floor(i/65536),v=i-65536*n,i=b+n+65535,n=Math.floor(i/65536),b=i-65536*n,i=w+n+65535,n=Math.floor(i/65536),w=i-65536*n,i=y+n+65535,n=Math.floor(i/65536),y=i-65536*n,s+=n-1+37*(n-1),e[0]=s,e[1]=o,e[2]=a,e[3]=l,e[4]=c,e[5]=h,e[6]=u,e[7]=d,e[8]=p,e[9]=f,e[10]=g,e[11]=m,e[12]=v,e[13]=b,e[14]=w,e[15]=y}function p(e,t){d(e,t,t)}function f(e,t){const r=new Uint8Array(32),i=new Float64Array(80),n=s(),o=s(),f=s(),g=s(),m=s(),v=s();for(let t=0;t<31;t++)r[t]=e[t];r[31]=127&e[31]|64,r[0]&=248,function(e,t){for(let r=0;r<16;r++)e[r]=t[2*r]+(t[2*r+1]<<8);e[15]&=32767}(i,t);for(let e=0;e<16;e++)o[e]=i[e];n[0]=g[0]=1;for(let e=254;e>=0;--e){const t=r[e>>>3]>>>(7&e)&1;c(n,o,t),c(f,g,t),h(m,n,f),u(n,n,f),h(f,o,g),u(o,o,g),p(g,m),p(v,n),d(n,f,n),d(f,o,m),h(m,n,f),u(n,n,f),p(o,n),u(f,g,v),d(n,f,a),h(n,n,g),d(f,f,n),d(n,g,v),d(g,o,i),p(o,m),c(n,o,t),c(f,g,t)}for(let e=0;e<16;e++)i[e+16]=n[e],i[e+32]=f[e],i[e+48]=o[e],i[e+64]=g[e];const b=i.subarray(32),w=i.subarray(16);!function(e,t){const r=s();for(let e=0;e<16;e++)r[e]=t[e];for(let e=253;e>=0;e--)p(r,r),2!==e&&4!==e&&d(r,r,t);for(let t=0;t<16;t++)e[t]=r[t]}(b,b),d(w,w,b);const y=new Uint8Array(32);return function(e,t){const r=s(),i=s();for(let e=0;e<16;e++)i[e]=t[e];l(i),l(i),l(i);for(let e=0;e<2;e++){r[0]=i[0]-65517;for(let e=1;e<15;e++)r[e]=i[e]-65535-(r[e-1]>>16&1),r[e-1]&=65535;r[15]=i[15]-32767-(r[14]>>16&1);const e=r[15]>>16&1;r[14]&=65535,c(i,r,1-e)}for(let t=0;t<16;t++)e[2*t]=255&i[t],e[2*t+1]=i[t]>>8}(y,w),y}t.Au=function(e){const r=(0,i.randomBytes)(32,e),s=function(e){if(e.length!==t.KS)throw new Error(`x25519: seed must be ${t.KS} bytes`);const r=new Uint8Array(e);return{publicKey:(i=r,f(i,o)),secretKey:r};var i}(r);return(0,n.wipe)(r),s},t.gi=function(e,r,i=!1){if(e.length!==t.kz)throw new Error("X25519: incorrect secret key length");if(r.length!==t.kz)throw new Error("X25519: incorrect public key length");const n=f(e,r);if(i){let e=0;for(let t=0;t<n.length;t++)e|=n[t];if(0===e)throw new Error("X25519: invalid shared key")}return n}},926:(e,t,r)=>{"use strict";function i(){return(null===r.g||void 0===r.g?void 0:r.g.crypto)||(null===r.g||void 0===r.g?void 0:r.g.msCrypto)||{}}function n(){const e=i();return e.subtle||e.webkitSubtle}Object.defineProperty(t,"__esModule",{value:!0}),t.isBrowserCryptoAvailable=t.getSubtleCrypto=t.getBrowerCrypto=void 0,t.getBrowerCrypto=i,t.getSubtleCrypto=n,t.isBrowserCryptoAvailable=function(){return!!i()&&!!n()}},8618:(e,t)=>{"use strict";function r(){return"undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product}function i(){return"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node}Object.defineProperty(t,"__esModule",{value:!0}),t.isBrowser=t.isNode=t.isReactNative=void 0,t.isReactNative=r,t.isNode=i,t.isBrowser=function(){return!r()&&!i()}},1468:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(655);i.__exportStar(r(926),t),i.__exportStar(r(8618),t)},8200:(e,t,r)=>{"use strict";r.d(t,{q:()=>i});class i{}},997:(e,t,r)=>{"use strict";r.r(t),r.d(t,{IEvents:()=>i.q});var i=r(8200)},2568:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HEARTBEAT_EVENTS=t.HEARTBEAT_INTERVAL=void 0;const i=r(6736);t.HEARTBEAT_INTERVAL=i.FIVE_SECONDS,t.HEARTBEAT_EVENTS={pulse:"heartbeat_pulse"}},3401:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),r(655).__exportStar(r(2568),t)},8969:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HeartBeat=void 0;const i=r(655),n=r(7187),s=r(6736),o=r(1614),a=r(3401);class l extends o.IHeartBeat{constructor(e){super(e),this.events=new n.EventEmitter,this.interval=a.HEARTBEAT_INTERVAL,this.interval=(null==e?void 0:e.interval)||a.HEARTBEAT_INTERVAL}static init(e){return i.__awaiter(this,void 0,void 0,(function*(){const t=new l(e);return yield t.init(),t}))}init(){return i.__awaiter(this,void 0,void 0,(function*(){yield this.initialize()}))}on(e,t){this.events.on(e,t)}once(e,t){this.events.once(e,t)}off(e,t){this.events.off(e,t)}removeListener(e,t){this.events.removeListener(e,t)}initialize(){return i.__awaiter(this,void 0,void 0,(function*(){setInterval((()=>this.pulse()),s.toMiliseconds(this.interval))}))}pulse(){this.events.emit(a.HEARTBEAT_EVENTS.pulse)}}t.HeartBeat=l},772:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(655);i.__exportStar(r(8969),t),i.__exportStar(r(1614),t),i.__exportStar(r(3401),t)},4174:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IHeartBeat=void 0;const i=r(997);class n extends i.IEvents{constructor(e){super()}}t.IHeartBeat=n},1614:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),r(655).__exportStar(r(4174),t)},5885:(e,t,r)=>{"use strict";r.d(t,{IJsonRpcProvider:()=>n.x0});var i=r(4057);r.o(i,"IJsonRpcProvider")&&r.d(t,{IJsonRpcProvider:function(){return i.IJsonRpcProvider}}),r.o(i,"isJsonRpcError")&&r.d(t,{isJsonRpcError:function(){return i.isJsonRpcError}}),r.o(i,"isJsonRpcRequest")&&r.d(t,{isJsonRpcRequest:function(){return i.isJsonRpcRequest}}),r.o(i,"isJsonRpcResponse")&&r.d(t,{isJsonRpcResponse:function(){return i.isJsonRpcResponse}}),r.o(i,"isJsonRpcResult")&&r.d(t,{isJsonRpcResult:function(){return i.isJsonRpcResult}}),r.o(i,"isLocalhostUrl")&&r.d(t,{isLocalhostUrl:function(){return i.isLocalhostUrl}}),r.o(i,"isReactNative")&&r.d(t,{isReactNative:function(){return i.isReactNative}}),r.o(i,"isWsUrl")&&r.d(t,{isWsUrl:function(){return i.isWsUrl}});var n=r(7826),s=r(1948);r.o(s,"isJsonRpcError")&&r.d(t,{isJsonRpcError:function(){return s.isJsonRpcError}}),r.o(s,"isJsonRpcRequest")&&r.d(t,{isJsonRpcRequest:function(){return s.isJsonRpcRequest}}),r.o(s,"isJsonRpcResponse")&&r.d(t,{isJsonRpcResponse:function(){return s.isJsonRpcResponse}}),r.o(s,"isJsonRpcResult")&&r.d(t,{isJsonRpcResult:function(){return s.isJsonRpcResult}}),r.o(s,"isLocalhostUrl")&&r.d(t,{isLocalhostUrl:function(){return s.isLocalhostUrl}}),r.o(s,"isReactNative")&&r.d(t,{isReactNative:function(){return s.isReactNative}}),r.o(s,"isWsUrl")&&r.d(t,{isWsUrl:function(){return s.isWsUrl}})},4057:()=>{},7826:(e,t,r)=>{"use strict";r.d(t,{x0:()=>s});class i{}class n extends i{constructor(){super()}}class s extends n{constructor(e){super()}}},1948:()=>{},9806:(e,t,r)=>{"use strict";r.d(t,{CA:()=>n,JV:()=>a,O4:()=>i,dQ:()=>s,xK:()=>o});const i="INTERNAL_ERROR",n="SERVER_ERROR",s=[-32700,-32600,-32601,-32602,-32603],o={PARSE_ERROR:{code:-32700,message:"Parse error"},INVALID_REQUEST:{code:-32600,message:"Invalid Request"},METHOD_NOT_FOUND:{code:-32601,message:"Method not found"},INVALID_PARAMS:{code:-32602,message:"Invalid params"},[i]:{code:-32603,message:"Internal error"},[n]:{code:-32e3,message:"Server error"}},a=n},9698:(e,t,r)=>{"use strict";var i=r(1468);r.o(i,"IJsonRpcProvider")&&r.d(t,{IJsonRpcProvider:function(){return i.IJsonRpcProvider}}),r.o(i,"formatJsonRpcError")&&r.d(t,{formatJsonRpcError:function(){return i.formatJsonRpcError}}),r.o(i,"formatJsonRpcRequest")&&r.d(t,{formatJsonRpcRequest:function(){return i.formatJsonRpcRequest}}),r.o(i,"formatJsonRpcResult")&&r.d(t,{formatJsonRpcResult:function(){return i.formatJsonRpcResult}}),r.o(i,"isJsonRpcError")&&r.d(t,{isJsonRpcError:function(){return i.isJsonRpcError}}),r.o(i,"isJsonRpcRequest")&&r.d(t,{isJsonRpcRequest:function(){return i.isJsonRpcRequest}}),r.o(i,"isJsonRpcResponse")&&r.d(t,{isJsonRpcResponse:function(){return i.isJsonRpcResponse}}),r.o(i,"isJsonRpcResult")&&r.d(t,{isJsonRpcResult:function(){return i.isJsonRpcResult}}),r.o(i,"isLocalhostUrl")&&r.d(t,{isLocalhostUrl:function(){return i.isLocalhostUrl}}),r.o(i,"isReactNative")&&r.d(t,{isReactNative:function(){return i.isReactNative}}),r.o(i,"isWsUrl")&&r.d(t,{isWsUrl:function(){return i.isWsUrl}})},110:(e,t,r)=>{"use strict";r.d(t,{CX:()=>a,L2:()=>o,by:()=>s,i5:()=>n});var i=r(9806);function n(e){return i.dQ.includes(e)}function s(e){return Object.keys(i.xK).includes(e)?i.xK[e]:i.xK[i.JV]}function o(e){return Object.values(i.xK).find((t=>t.code===e))||i.xK[i.JV]}function a(e,t,r){return e.message.includes("getaddrinfo ENOTFOUND")||e.message.includes("connect ECONNREFUSED")?new Error(`Unavailable ${r} RPC url at ${t}`):e}},1937:(e,t,r)=>{"use strict";r.d(t,{RI:()=>a,sT:()=>s,tm:()=>o});var i=r(110),n=r(9806);function s(e,t,r){return{id:r||Date.now()*Math.pow(10,3)+Math.floor(Math.random()*Math.pow(10,3)),jsonrpc:"2.0",method:e,params:t}}function o(e,t){return{id:e,jsonrpc:"2.0",result:t}}function a(e,t,r){return{id:e,jsonrpc:"2.0",error:l(t,r)}}function l(e,t){return void 0===e?(0,i.by)(n.O4):("string"==typeof e&&(e=Object.assign(Object.assign({},(0,i.by)(n.CA)),{message:e})),void 0!==t&&(e.data=t),(0,i.i5)(e.code)&&(e=(0,i.L2)(e.code)),e)}},6186:(e,t,r)=>{"use strict";r.d(t,{formatJsonRpcError:()=>s.RI,formatJsonRpcRequest:()=>s.sT,formatJsonRpcResult:()=>s.tm,isJsonRpcError:()=>l.jg,isJsonRpcRequest:()=>l.DW,isJsonRpcResponse:()=>l.u,isJsonRpcResult:()=>l.k4,isLocalhostUrl:()=>a.JF,isWsUrl:()=>a.UZ,parseConnectionError:()=>i.CX}),r(9806);var i=r(110),n=r(9698);r.o(n,"IJsonRpcProvider")&&r.d(t,{IJsonRpcProvider:function(){return n.IJsonRpcProvider}}),r.o(n,"formatJsonRpcError")&&r.d(t,{formatJsonRpcError:function(){return n.formatJsonRpcError}}),r.o(n,"formatJsonRpcRequest")&&r.d(t,{formatJsonRpcRequest:function(){return n.formatJsonRpcRequest}}),r.o(n,"formatJsonRpcResult")&&r.d(t,{formatJsonRpcResult:function(){return n.formatJsonRpcResult}}),r.o(n,"isJsonRpcError")&&r.d(t,{isJsonRpcError:function(){return n.isJsonRpcError}}),r.o(n,"isJsonRpcRequest")&&r.d(t,{isJsonRpcRequest:function(){return n.isJsonRpcRequest}}),r.o(n,"isJsonRpcResponse")&&r.d(t,{isJsonRpcResponse:function(){return n.isJsonRpcResponse}}),r.o(n,"isJsonRpcResult")&&r.d(t,{isJsonRpcResult:function(){return n.isJsonRpcResult}}),r.o(n,"isLocalhostUrl")&&r.d(t,{isLocalhostUrl:function(){return n.isLocalhostUrl}}),r.o(n,"isReactNative")&&r.d(t,{isReactNative:function(){return n.isReactNative}}),r.o(n,"isWsUrl")&&r.d(t,{isWsUrl:function(){return n.isWsUrl}});var s=r(1937),o=r(6043);r.o(o,"IJsonRpcProvider")&&r.d(t,{IJsonRpcProvider:function(){return o.IJsonRpcProvider}}),r.o(o,"isJsonRpcError")&&r.d(t,{isJsonRpcError:function(){return o.isJsonRpcError}}),r.o(o,"isJsonRpcRequest")&&r.d(t,{isJsonRpcRequest:function(){return o.isJsonRpcRequest}}),r.o(o,"isJsonRpcResponse")&&r.d(t,{isJsonRpcResponse:function(){return o.isJsonRpcResponse}}),r.o(o,"isJsonRpcResult")&&r.d(t,{isJsonRpcResult:function(){return o.isJsonRpcResult}}),r.o(o,"isLocalhostUrl")&&r.d(t,{isLocalhostUrl:function(){return o.isLocalhostUrl}}),r.o(o,"isReactNative")&&r.d(t,{isReactNative:function(){return o.isReactNative}}),r.o(o,"isWsUrl")&&r.d(t,{isWsUrl:function(){return o.isWsUrl}});var a=r(6119),l=r(4733)},6043:(e,t,r)=>{"use strict";r.d(t,{IJsonRpcProvider:()=>i.IJsonRpcProvider});var i=r(5885);r.o(i,"isJsonRpcError")&&r.d(t,{isJsonRpcError:function(){return i.isJsonRpcError}}),r.o(i,"isJsonRpcRequest")&&r.d(t,{isJsonRpcRequest:function(){return i.isJsonRpcRequest}}),r.o(i,"isJsonRpcResponse")&&r.d(t,{isJsonRpcResponse:function(){return i.isJsonRpcResponse}}),r.o(i,"isJsonRpcResult")&&r.d(t,{isJsonRpcResult:function(){return i.isJsonRpcResult}}),r.o(i,"isLocalhostUrl")&&r.d(t,{isLocalhostUrl:function(){return i.isLocalhostUrl}}),r.o(i,"isReactNative")&&r.d(t,{isReactNative:function(){return i.isReactNative}}),r.o(i,"isWsUrl")&&r.d(t,{isWsUrl:function(){return i.isWsUrl}})},6119:(e,t,r)=>{"use strict";function i(e){return function(e,t){const r=function(e){const t=e.match(new RegExp(/^\w+:/,"gi"));if(t&&t.length)return t[0]}(e);return void 0!==r&&new RegExp(t).test(r)}(e,"^wss?:")}function n(e){return new RegExp("wss?://localhost(:d{2,5})?").test(e)}r.d(t,{JF:()=>n,UZ:()=>i})},4733:(e,t,r)=>{"use strict";function i(e){return"object"==typeof e&&"id"in e&&"jsonrpc"in e&&"2.0"===e.jsonrpc}function n(e){return i(e)&&"method"in e}function s(e){return i(e)&&(o(e)||a(e))}function o(e){return"result"in e}function a(e){return"error"in e}r.d(t,{DW:()=>n,jg:()=>a,k4:()=>o,u:()=>s})},5150:(e,t,r)=>{"use strict";const i=r(655),n=r(3954),s=i.__importDefault(r(653)),o=r(9728);t.ZP=class{constructor(){this.localStorage=s.default}getKeys(){return i.__awaiter(this,void 0,void 0,(function*(){return Object.keys(this.localStorage)}))}getEntries(){return i.__awaiter(this,void 0,void 0,(function*(){return Object.entries(this.localStorage).map(o.parseEntry)}))}getItem(e){return i.__awaiter(this,void 0,void 0,(function*(){const t=this.localStorage.getItem(e);if(null!==t)return n.safeJsonParse(t)}))}setItem(e,t){return i.__awaiter(this,void 0,void 0,(function*(){this.localStorage.setItem(e,n.safeJsonStringify(t))}))}removeItem(e){return i.__awaiter(this,void 0,void 0,(function*(){this.localStorage.removeItem(e)}))}}},653:(e,t,r)=>{"use strict";!function(){let t;function i(){}t=i,t.prototype.getItem=function(e){return this.hasOwnProperty(e)?String(this[e]):null},t.prototype.setItem=function(e,t){this[e]=String(t)},t.prototype.removeItem=function(e){delete this[e]},t.prototype.clear=function(){const e=this;Object.keys(e).forEach((function(t){e[t]=void 0,delete e[t]}))},t.prototype.key=function(e){return e=e||0,Object.keys(this)[e]},t.prototype.__defineGetter__("length",(function(){return Object.keys(this).length})),void 0!==r.g&&r.g.localStorage?e.exports=r.g.localStorage:"undefined"!=typeof window&&window.localStorage?e.exports=window.localStorage:e.exports=new i}()},9728:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(655);i.__exportStar(r(9076),t),i.__exportStar(r(496),t)},9076:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IKeyValueStorage=void 0,t.IKeyValueStorage=class{}},496:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseEntry=void 0;const i=r(3954);t.parseEntry=function(e){var t;return[e[0],i.safeJsonParse(null!==(t=e[1])&&void 0!==t?t:"")]}},5727:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PINO_CUSTOM_CONTEXT_KEY=t.PINO_LOGGER_DEFAULTS=void 0,t.PINO_LOGGER_DEFAULTS={level:"info"},t.PINO_CUSTOM_CONTEXT_KEY="custom_context"},9107:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pino=void 0;const i=r(655),n=i.__importDefault(r(6559));Object.defineProperty(t,"pino",{enumerable:!0,get:function(){return n.default}}),i.__exportStar(r(5727),t),i.__exportStar(r(8048),t)},8048:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateChildLogger=t.formatChildLoggerContext=t.getLoggerContext=t.setBrowserLoggerContext=t.getBrowserLoggerContext=t.getDefaultLoggerOptions=void 0;const i=r(5727);function n(e,t=i.PINO_CUSTOM_CONTEXT_KEY){return e[t]||""}function s(e,t,r=i.PINO_CUSTOM_CONTEXT_KEY){return e[r]=t,e}function o(e,t=i.PINO_CUSTOM_CONTEXT_KEY){let r="";return r=void 0===e.bindings?n(e,t):e.bindings().context||"",r}function a(e,t,r=i.PINO_CUSTOM_CONTEXT_KEY){const n=o(e,r);return n.trim()?`${n}/${t}`:t}t.getDefaultLoggerOptions=function(e){return Object.assign(Object.assign({},e),{level:(null==e?void 0:e.level)||i.PINO_LOGGER_DEFAULTS.level})},t.getBrowserLoggerContext=n,t.setBrowserLoggerContext=s,t.getLoggerContext=o,t.formatChildLoggerContext=a,t.generateChildLogger=function(e,t,r=i.PINO_CUSTOM_CONTEXT_KEY){const n=a(e,t,r);return s(e.child({context:n}),n,r)}},1882:()=>{},3014:()=>{},8495:(e,t)=>{"use strict";function r(e){let t;return"undefined"!=typeof window&&void 0!==window[e]&&(t=window[e]),t}function i(e){const t=r(e);if(!t)throw new Error(`${e} is not defined in Window`);return t}Object.defineProperty(t,"__esModule",{value:!0}),t.getLocalStorage=t.getLocalStorageOrThrow=t.getCrypto=t.getCryptoOrThrow=t.getLocation=t.getLocationOrThrow=t.getNavigator=t.getNavigatorOrThrow=t.getDocument=t.getDocumentOrThrow=t.getFromWindowOrThrow=t.getFromWindow=void 0,t.getFromWindow=r,t.getFromWindowOrThrow=i,t.getDocumentOrThrow=function(){return i("document")},t.getDocument=function(){return r("document")},t.getNavigatorOrThrow=function(){return i("navigator")},t.getNavigator=function(){return r("navigator")},t.getLocationOrThrow=function(){return i("location")},t.getLocation=function(){return r("location")},t.getCryptoOrThrow=function(){return i("crypto")},t.getCrypto=function(){return r("crypto")},t.getLocalStorageOrThrow=function(){return i("localStorage")},t.getLocalStorage=function(){return r("localStorage")}},416:(e,t,r)=>{"use strict";t.D=void 0;const i=r(8495);t.D=function(){let e,t;try{e=i.getDocumentOrThrow(),t=i.getLocationOrThrow()}catch(e){return null}function r(...t){const r=e.getElementsByTagName("meta");for(let e=0;e<r.length;e++){const i=r[e],n=["itemprop","property","name"].map((e=>i.getAttribute(e))).filter((e=>!!e&&t.includes(e)));if(n.length&&n){const e=i.getAttribute("content");if(e)return e}}return""}const n=function(){let t=r("name","og:site_name","og:title","twitter:title");return t||(t=e.title),t}();return{description:r("description","og:description","twitter:description","keywords"),url:t.origin,icons:function(){const r=e.getElementsByTagName("link"),i=[];for(let e=0;e<r.length;e++){const n=r[e],s=n.getAttribute("rel");if(s&&s.toLowerCase().indexOf("icon")>-1){const e=n.getAttribute("href");if(e)if(-1===e.toLowerCase().indexOf("https:")&&-1===e.toLowerCase().indexOf("http:")&&0!==e.indexOf("//")){let r=t.protocol+"//"+t.host;if(0===e.indexOf("/"))r+=e;else{const i=t.pathname.split("/");i.pop(),r+=i.join("/")+"/"+e}i.push(r)}else if(0===e.indexOf("//")){const r=t.protocol+e;i.push(r)}else i.push(e)}}return i}(),name:n}}},7338:(e,t,r)=>{"use strict";const i=r(610),n=r(4020),s=r(500),o=r(2806),a=Symbol("encodeFragmentIdentifier");function l(e){if("string"!=typeof e||1!==e.length)throw new TypeError("arrayFormatSeparator must be single character string")}function c(e,t){return t.encode?t.strict?i(e):encodeURIComponent(e):e}function h(e,t){return t.decode?n(e):e}function u(e){return Array.isArray(e)?e.sort():"object"==typeof e?u(Object.keys(e)).sort(((e,t)=>Number(e)-Number(t))).map((t=>e[t])):e}function d(e){const t=e.indexOf("#");return-1!==t&&(e=e.slice(0,t)),e}function p(e){const t=(e=d(e)).indexOf("?");return-1===t?"":e.slice(t+1)}function f(e,t){return t.parseNumbers&&!Number.isNaN(Number(e))&&"string"==typeof e&&""!==e.trim()?e=Number(e):!t.parseBooleans||null===e||"true"!==e.toLowerCase()&&"false"!==e.toLowerCase()||(e="true"===e.toLowerCase()),e}function g(e,t){l((t=Object.assign({decode:!0,sort:!0,arrayFormat:"none",arrayFormatSeparator:",",parseNumbers:!1,parseBooleans:!1},t)).arrayFormatSeparator);const r=function(e){let t;switch(e.arrayFormat){case"index":return(e,r,i)=>{t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===i[e]&&(i[e]={}),i[e][t[1]]=r):i[e]=r};case"bracket":return(e,r,i)=>{t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==i[e]?i[e]=[].concat(i[e],r):i[e]=[r]:i[e]=r};case"colon-list-separator":return(e,r,i)=>{t=/(:list)$/.exec(e),e=e.replace(/:list$/,""),t?void 0!==i[e]?i[e]=[].concat(i[e],r):i[e]=[r]:i[e]=r};case"comma":case"separator":return(t,r,i)=>{const n="string"==typeof r&&r.includes(e.arrayFormatSeparator),s="string"==typeof r&&!n&&h(r,e).includes(e.arrayFormatSeparator);r=s?h(r,e):r;const o=n||s?r.split(e.arrayFormatSeparator).map((t=>h(t,e))):null===r?r:h(r,e);i[t]=o};case"bracket-separator":return(t,r,i)=>{const n=/(\[\])$/.test(t);if(t=t.replace(/\[\]$/,""),!n)return void(i[t]=r?h(r,e):r);const s=null===r?[]:r.split(e.arrayFormatSeparator).map((t=>h(t,e)));void 0!==i[t]?i[t]=[].concat(i[t],s):i[t]=s};default:return(e,t,r)=>{void 0!==r[e]?r[e]=[].concat(r[e],t):r[e]=t}}}(t),i=Object.create(null);if("string"!=typeof e)return i;if(!(e=e.trim().replace(/^[?#&]/,"")))return i;for(const n of e.split("&")){if(""===n)continue;let[e,o]=s(t.decode?n.replace(/\+/g," "):n,"=");o=void 0===o?null:["comma","separator","bracket-separator"].includes(t.arrayFormat)?o:h(o,t),r(h(e,t),o,i)}for(const e of Object.keys(i)){const r=i[e];if("object"==typeof r&&null!==r)for(const e of Object.keys(r))r[e]=f(r[e],t);else i[e]=f(r,t)}return!1===t.sort?i:(!0===t.sort?Object.keys(i).sort():Object.keys(i).sort(t.sort)).reduce(((e,t)=>{const r=i[t];return Boolean(r)&&"object"==typeof r&&!Array.isArray(r)?e[t]=u(r):e[t]=r,e}),Object.create(null))}t.extract=p,t.parse=g,t.stringify=(e,t)=>{if(!e)return"";l((t=Object.assign({encode:!0,strict:!0,arrayFormat:"none",arrayFormatSeparator:","},t)).arrayFormatSeparator);const r=r=>t.skipNull&&null==e[r]||t.skipEmptyString&&""===e[r],i=function(e){switch(e.arrayFormat){case"index":return t=>(r,i)=>{const n=r.length;return void 0===i||e.skipNull&&null===i||e.skipEmptyString&&""===i?r:null===i?[...r,[c(t,e),"[",n,"]"].join("")]:[...r,[c(t,e),"[",c(n,e),"]=",c(i,e)].join("")]};case"bracket":return t=>(r,i)=>void 0===i||e.skipNull&&null===i||e.skipEmptyString&&""===i?r:null===i?[...r,[c(t,e),"[]"].join("")]:[...r,[c(t,e),"[]=",c(i,e)].join("")];case"colon-list-separator":return t=>(r,i)=>void 0===i||e.skipNull&&null===i||e.skipEmptyString&&""===i?r:null===i?[...r,[c(t,e),":list="].join("")]:[...r,[c(t,e),":list=",c(i,e)].join("")];case"comma":case"separator":case"bracket-separator":{const t="bracket-separator"===e.arrayFormat?"[]=":"=";return r=>(i,n)=>void 0===n||e.skipNull&&null===n||e.skipEmptyString&&""===n?i:(n=null===n?"":n,0===i.length?[[c(r,e),t,c(n,e)].join("")]:[[i,c(n,e)].join(e.arrayFormatSeparator)])}default:return t=>(r,i)=>void 0===i||e.skipNull&&null===i||e.skipEmptyString&&""===i?r:null===i?[...r,c(t,e)]:[...r,[c(t,e),"=",c(i,e)].join("")]}}(t),n={};for(const t of Object.keys(e))r(t)||(n[t]=e[t]);const s=Object.keys(n);return!1!==t.sort&&s.sort(t.sort),s.map((r=>{const n=e[r];return void 0===n?"":null===n?c(r,t):Array.isArray(n)?0===n.length&&"bracket-separator"===t.arrayFormat?c(r,t)+"[]":n.reduce(i(r),[]).join("&"):c(r,t)+"="+c(n,t)})).filter((e=>e.length>0)).join("&")},t.parseUrl=(e,t)=>{t=Object.assign({decode:!0},t);const[r,i]=s(e,"#");return Object.assign({url:r.split("?")[0]||"",query:g(p(e),t)},t&&t.parseFragmentIdentifier&&i?{fragmentIdentifier:h(i,t)}:{})},t.stringifyUrl=(e,r)=>{r=Object.assign({encode:!0,strict:!0,[a]:!0},r);const i=d(e.url).split("?")[0]||"",n=t.extract(e.url),s=t.parse(n,{sort:!1}),o=Object.assign(s,e.query);let l=t.stringify(o,r);l&&(l=`?${l}`);let h=function(e){let t="";const r=e.indexOf("#");return-1!==r&&(t=e.slice(r)),t}(e.url);return e.fragmentIdentifier&&(h=`#${r[a]?c(e.fragmentIdentifier,r):e.fragmentIdentifier}`),`${i}${l}${h}`},t.pick=(e,r,i)=>{i=Object.assign({parseFragmentIdentifier:!0,[a]:!1},i);const{url:n,query:s,fragmentIdentifier:l}=t.parseUrl(e,i);return t.stringifyUrl({url:n,query:o(s,r),fragmentIdentifier:l},i)},t.exclude=(e,r,i)=>{const n=Array.isArray(r)?e=>!r.includes(e):(e,t)=>!r(e,t);return t.pick(e,n,i)}},6900:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(655);i.__exportStar(r(6869),t),i.__exportStar(r(8033),t)},6869:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ONE_THOUSAND=t.ONE_HUNDRED=void 0,t.ONE_HUNDRED=100,t.ONE_THOUSAND=1e3},8033:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ONE_YEAR=t.FOUR_WEEKS=t.THREE_WEEKS=t.TWO_WEEKS=t.ONE_WEEK=t.THIRTY_DAYS=t.SEVEN_DAYS=t.FIVE_DAYS=t.THREE_DAYS=t.ONE_DAY=t.TWENTY_FOUR_HOURS=t.TWELVE_HOURS=t.SIX_HOURS=t.THREE_HOURS=t.ONE_HOUR=t.SIXTY_MINUTES=t.THIRTY_MINUTES=t.TEN_MINUTES=t.FIVE_MINUTES=t.ONE_MINUTE=t.SIXTY_SECONDS=t.THIRTY_SECONDS=t.TEN_SECONDS=t.FIVE_SECONDS=t.ONE_SECOND=void 0,t.ONE_SECOND=1,t.FIVE_SECONDS=5,t.TEN_SECONDS=10,t.THIRTY_SECONDS=30,t.SIXTY_SECONDS=60,t.ONE_MINUTE=t.SIXTY_SECONDS,t.FIVE_MINUTES=5*t.ONE_MINUTE,t.TEN_MINUTES=10*t.ONE_MINUTE,t.THIRTY_MINUTES=30*t.ONE_MINUTE,t.SIXTY_MINUTES=60*t.ONE_MINUTE,t.ONE_HOUR=t.SIXTY_MINUTES,t.THREE_HOURS=3*t.ONE_HOUR,t.SIX_HOURS=6*t.ONE_HOUR,t.TWELVE_HOURS=12*t.ONE_HOUR,t.TWENTY_FOUR_HOURS=24*t.ONE_HOUR,t.ONE_DAY=t.TWENTY_FOUR_HOURS,t.THREE_DAYS=3*t.ONE_DAY,t.FIVE_DAYS=5*t.ONE_DAY,t.SEVEN_DAYS=7*t.ONE_DAY,t.THIRTY_DAYS=30*t.ONE_DAY,t.ONE_WEEK=t.SEVEN_DAYS,t.TWO_WEEKS=2*t.ONE_WEEK,t.THREE_WEEKS=3*t.ONE_WEEK,t.FOUR_WEEKS=4*t.ONE_WEEK,t.ONE_YEAR=365*t.ONE_DAY},6736:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(655);i.__exportStar(r(4273),t),i.__exportStar(r(7001),t),i.__exportStar(r(2939),t),i.__exportStar(r(6900),t)},2939:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),r(655).__exportStar(r(8766),t)},8766:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IWatch=void 0,t.IWatch=class{}},3207:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromMiliseconds=t.toMiliseconds=void 0;const i=r(6900);t.toMiliseconds=function(e){return e*i.ONE_THOUSAND},t.fromMiliseconds=function(e){return Math.floor(e/i.ONE_THOUSAND)}},3873:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.delay=void 0,t.delay=function(e){return new Promise((t=>{setTimeout((()=>{t(!0)}),e)}))}},4273:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(655);i.__exportStar(r(3873),t),i.__exportStar(r(3207),t)},7001:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Watch=void 0;class r{constructor(){this.timestamps=new Map}start(e){if(this.timestamps.has(e))throw new Error(`Watch already started for label: ${e}`);this.timestamps.set(e,{started:Date.now()})}stop(e){const t=this.get(e);if(void 0!==t.elapsed)throw new Error(`Watch already stopped for label: ${e}`);const r=Date.now()-t.started;this.timestamps.set(e,{started:t.started,elapsed:r})}get(e){const t=this.timestamps.get(e);if(void 0===t)throw new Error(`No timestamp found for label: ${e}`);return t}elapsed(e){const t=this.get(e);return t.elapsed||Date.now()-t.started}}t.Watch=r,t.default=r},4249:(e,t,r)=>{const i=r(5293),n=r(6999),s=r(1250),o=r(8390);function a(e,t,r,s,o){const a=[].slice.call(arguments,1),l=a.length,c="function"==typeof a[l-1];if(!c&&!i())throw new Error("Callback required as last argument");if(!c){if(l<1)throw new Error("Too few arguments provided");return 1===l?(r=t,t=s=void 0):2!==l||t.getContext||(s=r,r=t,t=void 0),new Promise((function(i,o){try{const o=n.create(r,s);i(e(o,t,s))}catch(e){o(e)}}))}if(l<2)throw new Error("Too few arguments provided");2===l?(o=r,r=t,t=s=void 0):3===l&&(t.getContext&&void 0===o?(o=s,s=void 0):(o=s,s=r,r=t,t=void 0));try{const i=n.create(r,s);o(null,e(i,t,s))}catch(e){o(e)}}t.create=n.create,t.toCanvas=a.bind(null,s.render),t.toDataURL=a.bind(null,s.renderToDataURL),t.toString=a.bind(null,(function(e,t,r){return o.render(e,r)}))},5293:e=>{e.exports=function(){return"function"==typeof Promise&&Promise.prototype&&Promise.prototype.then}},1201:(e,t,r)=>{const i=r(7052).getSymbolSize;t.getRowColCoords=function(e){if(1===e)return[];const t=Math.floor(e/7)+2,r=i(e),n=145===r?26:2*Math.ceil((r-13)/(2*t-2)),s=[r-7];for(let e=1;e<t-1;e++)s[e]=s[e-1]-n;return s.push(6),s.reverse()},t.getPositions=function(e){const r=[],i=t.getRowColCoords(e),n=i.length;for(let e=0;e<n;e++)for(let t=0;t<n;t++)0===e&&0===t||0===e&&t===n-1||e===n-1&&0===t||r.push([i[e],i[t]]);return r}},4691:(e,t,r)=>{const i=r(1730),n=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"," ","$","%","*","+","-",".","/",":"];function s(e){this.mode=i.ALPHANUMERIC,this.data=e}s.getBitsLength=function(e){return 11*Math.floor(e/2)+e%2*6},s.prototype.getLength=function(){return this.data.length},s.prototype.getBitsLength=function(){return s.getBitsLength(this.data.length)},s.prototype.write=function(e){let t;for(t=0;t+2<=this.data.length;t+=2){let r=45*n.indexOf(this.data[t]);r+=n.indexOf(this.data[t+1]),e.put(r,11)}this.data.length%2&&e.put(n.indexOf(this.data[t]),6)},e.exports=s},7611:e=>{function t(){this.buffer=[],this.length=0}t.prototype={get:function(e){const t=Math.floor(e/8);return 1==(this.buffer[t]>>>7-e%8&1)},put:function(e,t){for(let r=0;r<t;r++)this.putBit(1==(e>>>t-r-1&1))},getLengthInBits:function(){return this.length},putBit:function(e){const t=Math.floor(this.length/8);this.buffer.length<=t&&this.buffer.push(0),e&&(this.buffer[t]|=128>>>this.length%8),this.length++}},e.exports=t},6424:e=>{function t(e){if(!e||e<1)throw new Error("BitMatrix size must be defined and greater than 0");this.size=e,this.data=new Uint8Array(e*e),this.reservedBit=new Uint8Array(e*e)}t.prototype.set=function(e,t,r,i){const n=e*this.size+t;this.data[n]=r,i&&(this.reservedBit[n]=!0)},t.prototype.get=function(e,t){return this.data[e*this.size+t]},t.prototype.xor=function(e,t,r){this.data[e*this.size+t]^=r},t.prototype.isReserved=function(e,t){return this.reservedBit[e*this.size+t]},e.exports=t},2470:(e,t,r)=>{const i=r(2378),n=r(1730);function s(e){this.mode=n.BYTE,"string"==typeof e&&(e=i(e)),this.data=new Uint8Array(e)}s.getBitsLength=function(e){return 8*e},s.prototype.getLength=function(){return this.data.length},s.prototype.getBitsLength=function(){return s.getBitsLength(this.data.length)},s.prototype.write=function(e){for(let t=0,r=this.data.length;t<r;t++)e.put(this.data[t],8)},e.exports=s},719:(e,t,r)=>{const i=r(8906),n=[1,1,1,1,1,1,1,1,1,1,2,2,1,2,2,4,1,2,4,4,2,4,4,4,2,4,6,5,2,4,6,6,2,5,8,8,4,5,8,8,4,5,8,11,4,8,10,11,4,9,12,16,4,9,16,16,6,10,12,18,6,10,17,16,6,11,16,19,6,13,18,21,7,14,21,25,8,16,20,25,8,17,23,25,9,17,23,34,9,18,25,30,10,20,27,32,12,21,29,35,12,23,34,37,12,25,34,40,13,26,35,42,14,28,38,45,15,29,40,48,16,31,43,51,17,33,45,54,18,35,48,57,19,37,51,60,19,38,53,63,20,40,56,66,21,43,59,70,22,45,62,74,24,47,65,77,25,49,68,81],s=[7,10,13,17,10,16,22,28,15,26,36,44,20,36,52,64,26,48,72,88,36,64,96,112,40,72,108,130,48,88,132,156,60,110,160,192,72,130,192,224,80,150,224,264,96,176,260,308,104,198,288,352,120,216,320,384,132,240,360,432,144,280,408,480,168,308,448,532,180,338,504,588,196,364,546,650,224,416,600,700,224,442,644,750,252,476,690,816,270,504,750,900,300,560,810,960,312,588,870,1050,336,644,952,1110,360,700,1020,1200,390,728,1050,1260,420,784,1140,1350,450,812,1200,1440,480,868,1290,1530,510,924,1350,1620,540,980,1440,1710,570,1036,1530,1800,570,1064,1590,1890,600,1120,1680,1980,630,1204,1770,2100,660,1260,1860,2220,720,1316,1950,2310,750,1372,2040,2430];t.getBlocksCount=function(e,t){switch(t){case i.L:return n[4*(e-1)+0];case i.M:return n[4*(e-1)+1];case i.Q:return n[4*(e-1)+2];case i.H:return n[4*(e-1)+3];default:return}},t.getTotalCodewordsCount=function(e,t){switch(t){case i.L:return s[4*(e-1)+0];case i.M:return s[4*(e-1)+1];case i.Q:return s[4*(e-1)+2];case i.H:return s[4*(e-1)+3];default:return}}},8906:(e,t)=>{t.L={bit:1},t.M={bit:0},t.Q={bit:3},t.H={bit:2},t.isValid=function(e){return e&&void 0!==e.bit&&e.bit>=0&&e.bit<4},t.from=function(e,r){if(t.isValid(e))return e;try{return function(e){if("string"!=typeof e)throw new Error("Param is not a string");switch(e.toLowerCase()){case"l":case"low":return t.L;case"m":case"medium":return t.M;case"q":case"quartile":return t.Q;case"h":case"high":return t.H;default:throw new Error("Unknown EC Level: "+e)}}(e)}catch(e){return r}}},2381:(e,t,r)=>{const i=r(7052).getSymbolSize;t.getPositions=function(e){const t=i(e);return[[0,0],[t-7,0],[0,t-7]]}},8208:(e,t,r)=>{const i=r(7052),n=i.getBCHDigit(1335);t.getEncodedBits=function(e,t){const r=e.bit<<3|t;let s=r<<10;for(;i.getBCHDigit(s)-n>=0;)s^=1335<<i.getBCHDigit(s)-n;return 21522^(r<<10|s)}},9198:(e,t)=>{const r=new Uint8Array(512),i=new Uint8Array(256);!function(){let e=1;for(let t=0;t<255;t++)r[t]=e,i[e]=t,e<<=1,256&e&&(e^=285);for(let e=255;e<512;e++)r[e]=r[e-255]}(),t.log=function(e){if(e<1)throw new Error("log("+e+")");return i[e]},t.exp=function(e){return r[e]},t.mul=function(e,t){return 0===e||0===t?0:r[i[e]+i[t]]}},771:(e,t,r)=>{const i=r(1730),n=r(7052);function s(e){this.mode=i.KANJI,this.data=e}s.getBitsLength=function(e){return 13*e},s.prototype.getLength=function(){return this.data.length},s.prototype.getBitsLength=function(){return s.getBitsLength(this.data.length)},s.prototype.write=function(e){let t;for(t=0;t<this.data.length;t++){let r=n.toSJIS(this.data[t]);if(r>=33088&&r<=40956)r-=33088;else{if(!(r>=57408&&r<=60351))throw new Error("Invalid SJIS character: "+this.data[t]+"\nMake sure your charset is UTF-8");r-=49472}r=192*(r>>>8&255)+(255&r),e.put(r,13)}},e.exports=s},9746:(e,t)=>{t.Patterns={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7};function r(e,r,i){switch(e){case t.Patterns.PATTERN000:return(r+i)%2==0;case t.Patterns.PATTERN001:return r%2==0;case t.Patterns.PATTERN010:return i%3==0;case t.Patterns.PATTERN011:return(r+i)%3==0;case t.Patterns.PATTERN100:return(Math.floor(r/2)+Math.floor(i/3))%2==0;case t.Patterns.PATTERN101:return r*i%2+r*i%3==0;case t.Patterns.PATTERN110:return(r*i%2+r*i%3)%2==0;case t.Patterns.PATTERN111:return(r*i%3+(r+i)%2)%2==0;default:throw new Error("bad maskPattern:"+e)}}t.isValid=function(e){return null!=e&&""!==e&&!isNaN(e)&&e>=0&&e<=7},t.from=function(e){return t.isValid(e)?parseInt(e,10):void 0},t.getPenaltyN1=function(e){const t=e.size;let r=0,i=0,n=0,s=null,o=null;for(let a=0;a<t;a++){i=n=0,s=o=null;for(let l=0;l<t;l++){let t=e.get(a,l);t===s?i++:(i>=5&&(r+=i-5+3),s=t,i=1),t=e.get(l,a),t===o?n++:(n>=5&&(r+=n-5+3),o=t,n=1)}i>=5&&(r+=i-5+3),n>=5&&(r+=n-5+3)}return r},t.getPenaltyN2=function(e){const t=e.size;let r=0;for(let i=0;i<t-1;i++)for(let n=0;n<t-1;n++){const t=e.get(i,n)+e.get(i,n+1)+e.get(i+1,n)+e.get(i+1,n+1);4!==t&&0!==t||r++}return 3*r},t.getPenaltyN3=function(e){const t=e.size;let r=0,i=0,n=0;for(let s=0;s<t;s++){i=n=0;for(let o=0;o<t;o++)i=i<<1&2047|e.get(s,o),o>=10&&(1488===i||93===i)&&r++,n=n<<1&2047|e.get(o,s),o>=10&&(1488===n||93===n)&&r++}return 40*r},t.getPenaltyN4=function(e){let t=0;const r=e.data.length;for(let i=0;i<r;i++)t+=e.data[i];return 10*Math.abs(Math.ceil(100*t/r/5)-10)},t.applyMask=function(e,t){const i=t.size;for(let n=0;n<i;n++)for(let s=0;s<i;s++)t.isReserved(s,n)||t.xor(s,n,r(e,s,n))},t.getBestMask=function(e,r){const i=Object.keys(t.Patterns).length;let n=0,s=1/0;for(let o=0;o<i;o++){r(o),t.applyMask(o,e);const i=t.getPenaltyN1(e)+t.getPenaltyN2(e)+t.getPenaltyN3(e)+t.getPenaltyN4(e);t.applyMask(o,e),i<s&&(s=i,n=o)}return n}},1730:(e,t,r)=>{const i=r(8122),n=r(1445);t.NUMERIC={id:"Numeric",bit:1,ccBits:[10,12,14]},t.ALPHANUMERIC={id:"Alphanumeric",bit:2,ccBits:[9,11,13]},t.BYTE={id:"Byte",bit:4,ccBits:[8,16,16]},t.KANJI={id:"Kanji",bit:8,ccBits:[8,10,12]},t.MIXED={bit:-1},t.getCharCountIndicator=function(e,t){if(!e.ccBits)throw new Error("Invalid mode: "+e);if(!i.isValid(t))throw new Error("Invalid version: "+t);return t>=1&&t<10?e.ccBits[0]:t<27?e.ccBits[1]:e.ccBits[2]},t.getBestModeForData=function(e){return n.testNumeric(e)?t.NUMERIC:n.testAlphanumeric(e)?t.ALPHANUMERIC:n.testKanji(e)?t.KANJI:t.BYTE},t.toString=function(e){if(e&&e.id)return e.id;throw new Error("Invalid mode")},t.isValid=function(e){return e&&e.bit&&e.ccBits},t.from=function(e,r){if(t.isValid(e))return e;try{return function(e){if("string"!=typeof e)throw new Error("Param is not a string");switch(e.toLowerCase()){case"numeric":return t.NUMERIC;case"alphanumeric":return t.ALPHANUMERIC;case"kanji":return t.KANJI;case"byte":return t.BYTE;default:throw new Error("Unknown mode: "+e)}}(e)}catch(e){return r}}},1308:(e,t,r)=>{const i=r(1730);function n(e){this.mode=i.NUMERIC,this.data=e.toString()}n.getBitsLength=function(e){return 10*Math.floor(e/3)+(e%3?e%3*3+1:0)},n.prototype.getLength=function(){return this.data.length},n.prototype.getBitsLength=function(){return n.getBitsLength(this.data.length)},n.prototype.write=function(e){let t,r,i;for(t=0;t+3<=this.data.length;t+=3)r=this.data.substr(t,3),i=parseInt(r,10),e.put(i,10);const n=this.data.length-t;n>0&&(r=this.data.substr(t),i=parseInt(r,10),e.put(i,3*n+1))},e.exports=n},9261:(e,t,r)=>{const i=r(9198);t.mul=function(e,t){const r=new Uint8Array(e.length+t.length-1);for(let n=0;n<e.length;n++)for(let s=0;s<t.length;s++)r[n+s]^=i.mul(e[n],t[s]);return r},t.mod=function(e,t){let r=new Uint8Array(e);for(;r.length-t.length>=0;){const e=r[0];for(let n=0;n<t.length;n++)r[n]^=i.mul(t[n],e);let n=0;for(;n<r.length&&0===r[n];)n++;r=r.slice(n)}return r},t.generateECPolynomial=function(e){let r=new Uint8Array([1]);for(let n=0;n<e;n++)r=t.mul(r,new Uint8Array([1,i.exp(n)]));return r}},6999:(e,t,r)=>{const i=r(7052),n=r(8906),s=r(7611),o=r(6424),a=r(1201),l=r(2381),c=r(9746),h=r(719),u=r(8986),d=r(2850),p=r(8208),f=r(1730),g=r(9409);function m(e,t,r){const i=e.size,n=p.getEncodedBits(t,r);let s,o;for(s=0;s<15;s++)o=1==(n>>s&1),s<6?e.set(s,8,o,!0):s<8?e.set(s+1,8,o,!0):e.set(i-15+s,8,o,!0),s<8?e.set(8,i-s-1,o,!0):s<9?e.set(8,15-s-1+1,o,!0):e.set(8,15-s-1,o,!0);e.set(i-8,8,1,!0)}function v(e,t,r,n){let p;if(Array.isArray(e))p=g.fromArray(e);else{if("string"!=typeof e)throw new Error("Invalid data");{let i=t;if(!i){const t=g.rawSplit(e);i=d.getBestVersionForData(t,r)}p=g.fromString(e,i||40)}}const v=d.getBestVersionForData(p,r);if(!v)throw new Error("The amount of data is too big to be stored in a QR Code");if(t){if(t<v)throw new Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: "+v+".\n")}else t=v;const b=function(e,t,r){const n=new s;r.forEach((function(t){n.put(t.mode.bit,4),n.put(t.getLength(),f.getCharCountIndicator(t.mode,e)),t.write(n)}));const o=8*(i.getSymbolTotalCodewords(e)-h.getTotalCodewordsCount(e,t));for(n.getLengthInBits()+4<=o&&n.put(0,4);n.getLengthInBits()%8!=0;)n.putBit(0);const a=(o-n.getLengthInBits())/8;for(let e=0;e<a;e++)n.put(e%2?17:236,8);return function(e,t,r){const n=i.getSymbolTotalCodewords(t),s=n-h.getTotalCodewordsCount(t,r),o=h.getBlocksCount(t,r),a=o-n%o,l=Math.floor(n/o),c=Math.floor(s/o),d=c+1,p=l-c,f=new u(p);let g=0;const m=new Array(o),v=new Array(o);let b=0;const w=new Uint8Array(e.buffer);for(let e=0;e<o;e++){const t=e<a?c:d;m[e]=w.slice(g,g+t),v[e]=f.encode(m[e]),g+=t,b=Math.max(b,t)}const y=new Uint8Array(n);let _,E,x=0;for(_=0;_<b;_++)for(E=0;E<o;E++)_<m[E].length&&(y[x++]=m[E][_]);for(_=0;_<p;_++)for(E=0;E<o;E++)y[x++]=v[E][_];return y}(n,e,t)}(t,r,p),w=i.getSymbolSize(t),y=new o(w);return function(e,t){const r=e.size,i=l.getPositions(t);for(let t=0;t<i.length;t++){const n=i[t][0],s=i[t][1];for(let t=-1;t<=7;t++)if(!(n+t<=-1||r<=n+t))for(let i=-1;i<=7;i++)s+i<=-1||r<=s+i||(t>=0&&t<=6&&(0===i||6===i)||i>=0&&i<=6&&(0===t||6===t)||t>=2&&t<=4&&i>=2&&i<=4?e.set(n+t,s+i,!0,!0):e.set(n+t,s+i,!1,!0))}}(y,t),function(e){const t=e.size;for(let r=8;r<t-8;r++){const t=r%2==0;e.set(r,6,t,!0),e.set(6,r,t,!0)}}(y),function(e,t){const r=a.getPositions(t);for(let t=0;t<r.length;t++){const i=r[t][0],n=r[t][1];for(let t=-2;t<=2;t++)for(let r=-2;r<=2;r++)-2===t||2===t||-2===r||2===r||0===t&&0===r?e.set(i+t,n+r,!0,!0):e.set(i+t,n+r,!1,!0)}}(y,t),m(y,r,0),t>=7&&function(e,t){const r=e.size,i=d.getEncodedBits(t);let n,s,o;for(let t=0;t<18;t++)n=Math.floor(t/3),s=t%3+r-8-3,o=1==(i>>t&1),e.set(n,s,o,!0),e.set(s,n,o,!0)}(y,t),function(e,t){const r=e.size;let i=-1,n=r-1,s=7,o=0;for(let a=r-1;a>0;a-=2)for(6===a&&a--;;){for(let r=0;r<2;r++)if(!e.isReserved(n,a-r)){let i=!1;o<t.length&&(i=1==(t[o]>>>s&1)),e.set(n,a-r,i),s--,-1===s&&(o++,s=7)}if(n+=i,n<0||r<=n){n-=i,i=-i;break}}}(y,b),isNaN(n)&&(n=c.getBestMask(y,m.bind(null,y,r))),c.applyMask(n,y),m(y,r,n),{modules:y,version:t,errorCorrectionLevel:r,maskPattern:n,segments:p}}t.create=function(e,t){if(void 0===e||""===e)throw new Error("No input text");let r,s,o=n.M;return void 0!==t&&(o=n.from(t.errorCorrectionLevel,n.M),r=d.from(t.version),s=c.from(t.maskPattern),t.toSJISFunc&&i.setToSJISFunction(t.toSJISFunc)),v(e,r,o,s)}},8986:(e,t,r)=>{const i=r(9261);function n(e){this.genPoly=void 0,this.degree=e,this.degree&&this.initialize(this.degree)}n.prototype.initialize=function(e){this.degree=e,this.genPoly=i.generateECPolynomial(this.degree)},n.prototype.encode=function(e){if(!this.genPoly)throw new Error("Encoder not initialized");const t=new Uint8Array(e.length+this.degree);t.set(e);const r=i.mod(t,this.genPoly),n=this.degree-r.length;if(n>0){const e=new Uint8Array(this.degree);return e.set(r,n),e}return r},e.exports=n},1445:(e,t)=>{const r="[0-9]+";let i="(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";i=i.replace(/u/g,"\\u");const n="(?:(?![A-Z0-9 $%*+\\-./:]|"+i+")(?:.|[\r\n]))+";t.KANJI=new RegExp(i,"g"),t.BYTE_KANJI=new RegExp("[^A-Z0-9 $%*+\\-./:]+","g"),t.BYTE=new RegExp(n,"g"),t.NUMERIC=new RegExp(r,"g"),t.ALPHANUMERIC=new RegExp("[A-Z $%*+\\-./:]+","g");const s=new RegExp("^"+i+"$"),o=new RegExp("^"+r+"$"),a=new RegExp("^[A-Z0-9 $%*+\\-./:]+$");t.testKanji=function(e){return s.test(e)},t.testNumeric=function(e){return o.test(e)},t.testAlphanumeric=function(e){return a.test(e)}},9409:(e,t,r)=>{const i=r(1730),n=r(1308),s=r(4691),o=r(2470),a=r(771),l=r(1445),c=r(7052),h=r(5987);function u(e){return unescape(encodeURIComponent(e)).length}function d(e,t,r){const i=[];let n;for(;null!==(n=e.exec(r));)i.push({data:n[0],index:n.index,mode:t,length:n[0].length});return i}function p(e){const t=d(l.NUMERIC,i.NUMERIC,e),r=d(l.ALPHANUMERIC,i.ALPHANUMERIC,e);let n,s;return c.isKanjiModeEnabled()?(n=d(l.BYTE,i.BYTE,e),s=d(l.KANJI,i.KANJI,e)):(n=d(l.BYTE_KANJI,i.BYTE,e),s=[]),t.concat(r,n,s).sort((function(e,t){return e.index-t.index})).map((function(e){return{data:e.data,mode:e.mode,length:e.length}}))}function f(e,t){switch(t){case i.NUMERIC:return n.getBitsLength(e);case i.ALPHANUMERIC:return s.getBitsLength(e);case i.KANJI:return a.getBitsLength(e);case i.BYTE:return o.getBitsLength(e)}}function g(e,t){let r;const l=i.getBestModeForData(e);if(r=i.from(t,l),r!==i.BYTE&&r.bit<l.bit)throw new Error('"'+e+'" cannot be encoded with mode '+i.toString(r)+".\n Suggested mode is: "+i.toString(l));switch(r!==i.KANJI||c.isKanjiModeEnabled()||(r=i.BYTE),r){case i.NUMERIC:return new n(e);case i.ALPHANUMERIC:return new s(e);case i.KANJI:return new a(e);case i.BYTE:return new o(e)}}t.fromArray=function(e){return e.reduce((function(e,t){return"string"==typeof t?e.push(g(t,null)):t.data&&e.push(g(t.data,t.mode)),e}),[])},t.fromString=function(e,r){const n=function(e){const t=[];for(let r=0;r<e.length;r++){const n=e[r];switch(n.mode){case i.NUMERIC:t.push([n,{data:n.data,mode:i.ALPHANUMERIC,length:n.length},{data:n.data,mode:i.BYTE,length:n.length}]);break;case i.ALPHANUMERIC:t.push([n,{data:n.data,mode:i.BYTE,length:n.length}]);break;case i.KANJI:t.push([n,{data:n.data,mode:i.BYTE,length:u(n.data)}]);break;case i.BYTE:t.push([{data:n.data,mode:i.BYTE,length:u(n.data)}])}}return t}(p(e,c.isKanjiModeEnabled())),s=function(e,t){const r={},n={start:{}};let s=["start"];for(let o=0;o<e.length;o++){const a=e[o],l=[];for(let e=0;e<a.length;e++){const c=a[e],h=""+o+e;l.push(h),r[h]={node:c,lastCount:0},n[h]={};for(let e=0;e<s.length;e++){const o=s[e];r[o]&&r[o].node.mode===c.mode?(n[o][h]=f(r[o].lastCount+c.length,c.mode)-f(r[o].lastCount,c.mode),r[o].lastCount+=c.length):(r[o]&&(r[o].lastCount=c.length),n[o][h]=f(c.length,c.mode)+4+i.getCharCountIndicator(c.mode,t))}}s=l}for(let e=0;e<s.length;e++)n[s[e]].end=0;return{map:n,table:r}}(n,r),o=h.find_path(s.map,"start","end"),a=[];for(let e=1;e<o.length-1;e++)a.push(s.table[o[e]].node);return t.fromArray(a.reduce((function(e,t){const r=e.length-1>=0?e[e.length-1]:null;return r&&r.mode===t.mode?(e[e.length-1].data+=t.data,e):(e.push(t),e)}),[]))},t.rawSplit=function(e){return t.fromArray(p(e,c.isKanjiModeEnabled()))}},7052:(e,t)=>{let r;const i=[0,26,44,70,100,134,172,196,242,292,346,404,466,532,581,655,733,815,901,991,1085,1156,1258,1364,1474,1588,1706,1828,1921,2051,2185,2323,2465,2611,2761,2876,3034,3196,3362,3532,3706];t.getSymbolSize=function(e){if(!e)throw new Error('"version" cannot be null or undefined');if(e<1||e>40)throw new Error('"version" should be in range from 1 to 40');return 4*e+17},t.getSymbolTotalCodewords=function(e){return i[e]},t.getBCHDigit=function(e){let t=0;for(;0!==e;)t++,e>>>=1;return t},t.setToSJISFunction=function(e){if("function"!=typeof e)throw new Error('"toSJISFunc" is not a valid function.');r=e},t.isKanjiModeEnabled=function(){return void 0!==r},t.toSJIS=function(e){return r(e)}},8122:(e,t)=>{t.isValid=function(e){return!isNaN(e)&&e>=1&&e<=40}},2850:(e,t,r)=>{const i=r(7052),n=r(719),s=r(8906),o=r(1730),a=r(8122),l=i.getBCHDigit(7973);function c(e,t){return o.getCharCountIndicator(e,t)+4}function h(e,t){let r=0;return e.forEach((function(e){const i=c(e.mode,t);r+=i+e.getBitsLength()})),r}t.from=function(e,t){return a.isValid(e)?parseInt(e,10):t},t.getCapacity=function(e,t,r){if(!a.isValid(e))throw new Error("Invalid QR Code version");void 0===r&&(r=o.BYTE);const s=8*(i.getSymbolTotalCodewords(e)-n.getTotalCodewordsCount(e,t));if(r===o.MIXED)return s;const l=s-c(r,e);switch(r){case o.NUMERIC:return Math.floor(l/10*3);case o.ALPHANUMERIC:return Math.floor(l/11*2);case o.KANJI:return Math.floor(l/13);case o.BYTE:default:return Math.floor(l/8)}},t.getBestVersionForData=function(e,r){let i;const n=s.from(r,s.M);if(Array.isArray(e)){if(e.length>1)return function(e,r){for(let i=1;i<=40;i++)if(h(e,i)<=t.getCapacity(i,r,o.MIXED))return i}(e,n);if(0===e.length)return 1;i=e[0]}else i=e;return function(e,r,i){for(let n=1;n<=40;n++)if(r<=t.getCapacity(n,i,e))return n}(i.mode,i.getLength(),n)},t.getEncodedBits=function(e){if(!a.isValid(e)||e<7)throw new Error("Invalid QR Code version");let t=e<<12;for(;i.getBCHDigit(t)-l>=0;)t^=7973<<i.getBCHDigit(t)-l;return e<<12|t}},1250:(e,t,r)=>{const i=r(4786);t.render=function(e,t,r){let n=r,s=t;void 0!==n||t&&t.getContext||(n=t,t=void 0),t||(s=function(){try{return document.createElement("canvas")}catch(e){throw new Error("You need to specify a canvas element")}}()),n=i.getOptions(n);const o=i.getImageWidth(e.modules.size,n),a=s.getContext("2d"),l=a.createImageData(o,o);return i.qrToImageData(l.data,e,n),function(e,t,r){e.clearRect(0,0,t.width,t.height),t.style||(t.style={}),t.height=r,t.width=r,t.style.height=r+"px",t.style.width=r+"px"}(a,s,o),a.putImageData(l,0,0),s},t.renderToDataURL=function(e,r,i){let n=i;void 0!==n||r&&r.getContext||(n=r,r=void 0),n||(n={});const s=t.render(e,r,n),o=n.type||"image/png",a=n.rendererOpts||{};return s.toDataURL(o,a.quality)}},8390:(e,t,r)=>{const i=r(4786);function n(e,t){const r=e.a/255,i=t+'="'+e.hex+'"';return r<1?i+" "+t+'-opacity="'+r.toFixed(2).slice(1)+'"':i}function s(e,t,r){let i=e+t;return void 0!==r&&(i+=" "+r),i}t.render=function(e,t,r){const o=i.getOptions(t),a=e.modules.size,l=e.modules.data,c=a+2*o.margin,h=o.color.light.a?"<path "+n(o.color.light,"fill")+' d="M0 0h'+c+"v"+c+'H0z"/>':"",u="<path "+n(o.color.dark,"stroke")+' d="'+function(e,t,r){let i="",n=0,o=!1,a=0;for(let l=0;l<e.length;l++){const c=Math.floor(l%t),h=Math.floor(l/t);c||o||(o=!0),e[l]?(a++,l>0&&c>0&&e[l-1]||(i+=o?s("M",c+r,.5+h+r):s("m",n,0),n=0,o=!1),c+1<t&&e[l+1]||(i+=s("h",a),a=0)):n++}return i}(l,a,o.margin)+'"/>',d='viewBox="0 0 '+c+" "+c+'"',p='<svg xmlns="http://www.w3.org/2000/svg" '+(o.width?'width="'+o.width+'" height="'+o.width+'" ':"")+d+' shape-rendering="crispEdges">'+h+u+"</svg>\n";return"function"==typeof r&&r(null,p),p}},4786:(e,t)=>{function r(e){if("number"==typeof e&&(e=e.toString()),"string"!=typeof e)throw new Error("Color should be defined as hex string");let t=e.slice().replace("#","").split("");if(t.length<3||5===t.length||t.length>8)throw new Error("Invalid hex color: "+e);3!==t.length&&4!==t.length||(t=Array.prototype.concat.apply([],t.map((function(e){return[e,e]})))),6===t.length&&t.push("F","F");const r=parseInt(t.join(""),16);return{r:r>>24&255,g:r>>16&255,b:r>>8&255,a:255&r,hex:"#"+t.slice(0,6).join("")}}t.getOptions=function(e){e||(e={}),e.color||(e.color={});const t=void 0===e.margin||null===e.margin||e.margin<0?4:e.margin,i=e.width&&e.width>=21?e.width:void 0,n=e.scale||4;return{width:i,scale:i?4:n,margin:t,color:{dark:r(e.color.dark||"#000000ff"),light:r(e.color.light||"#ffffffff")},type:e.type,rendererOpts:e.rendererOpts||{}}},t.getScale=function(e,t){return t.width&&t.width>=e+2*t.margin?t.width/(e+2*t.margin):t.scale},t.getImageWidth=function(e,r){const i=t.getScale(e,r);return Math.floor((e+2*r.margin)*i)},t.qrToImageData=function(e,r,i){const n=r.modules.size,s=r.modules.data,o=t.getScale(n,i),a=Math.floor((n+2*i.margin)*o),l=i.margin*o,c=[i.color.light,i.color.dark];for(let t=0;t<a;t++)for(let r=0;r<a;r++){let h=4*(t*a+r),u=i.color.light;t>=l&&r>=l&&t<a-l&&r<a-l&&(u=c[s[Math.floor((t-l)/o)*n+Math.floor((r-l)/o)]?1:0]),e[h++]=u.r,e[h++]=u.g,e[h++]=u.b,e[h]=u.a}}},9742:(e,t)=>{"use strict";t.byteLength=function(e){var t=l(e),r=t[0],i=t[1];return 3*(r+i)/4-i},t.toByteArray=function(e){var t,r,s=l(e),o=s[0],a=s[1],c=new n(function(e,t,r){return 3*(t+r)/4-r}(0,o,a)),h=0,u=a>0?o-4:o;for(r=0;r<u;r+=4)t=i[e.charCodeAt(r)]<<18|i[e.charCodeAt(r+1)]<<12|i[e.charCodeAt(r+2)]<<6|i[e.charCodeAt(r+3)],c[h++]=t>>16&255,c[h++]=t>>8&255,c[h++]=255&t;return 2===a&&(t=i[e.charCodeAt(r)]<<2|i[e.charCodeAt(r+1)]>>4,c[h++]=255&t),1===a&&(t=i[e.charCodeAt(r)]<<10|i[e.charCodeAt(r+1)]<<4|i[e.charCodeAt(r+2)]>>2,c[h++]=t>>8&255,c[h++]=255&t),c},t.fromByteArray=function(e){for(var t,i=e.length,n=i%3,s=[],o=16383,a=0,l=i-n;a<l;a+=o)s.push(c(e,a,a+o>l?l:a+o));return 1===n?(t=e[i-1],s.push(r[t>>2]+r[t<<4&63]+"==")):2===n&&(t=(e[i-2]<<8)+e[i-1],s.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"=")),s.join("")};for(var r=[],i=[],n="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,a=s.length;o<a;++o)r[o]=s[o],i[s.charCodeAt(o)]=o;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function c(e,t,i){for(var n,s,o=[],a=t;a<i;a+=3)n=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),o.push(r[(s=n)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},8764:(e,t,r)=>{"use strict";const i=r(9742),n=r(645),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.lW=l,t.h2=50;const o=2147483647;function a(e){if(e>o)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,l.prototype),t}function l(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return u(e)}return c(e,t,r)}function c(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!l.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|g(e,t);let i=a(r);const n=i.write(e,t);return n!==r&&(i=i.slice(0,n)),i}(e,t);if(ArrayBuffer.isView(e))return function(e){if(Z(e,Uint8Array)){const t=new Uint8Array(e);return p(t.buffer,t.byteOffset,t.byteLength)}return d(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(Z(e,ArrayBuffer)||e&&Z(e.buffer,ArrayBuffer))return p(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(Z(e,SharedArrayBuffer)||e&&Z(e.buffer,SharedArrayBuffer)))return p(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const i=e.valueOf&&e.valueOf();if(null!=i&&i!==e)return l.from(i,t,r);const n=function(e){if(l.isBuffer(e)){const t=0|f(e.length),r=a(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||G(e.length)?a(0):d(e):"Buffer"===e.type&&Array.isArray(e.data)?d(e.data):void 0}(e);if(n)return n;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return l.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function h(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function u(e){return h(e),a(e<0?0:0|f(e))}function d(e){const t=e.length<0?0:0|f(e.length),r=a(t);for(let i=0;i<t;i+=1)r[i]=255&e[i];return r}function p(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let i;return i=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(i,l.prototype),i}function f(e){if(e>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|e}function g(e,t){if(l.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||Z(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,i=arguments.length>2&&!0===arguments[2];if(!i&&0===r)return 0;let n=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return q(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return K(e).length;default:if(n)return i?-1:q(e).length;t=(""+t).toLowerCase(),n=!0}}function m(e,t,r){let i=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return P(this,t,r);case"utf8":case"utf-8":return I(this,t,r);case"ascii":return A(this,t,r);case"latin1":case"binary":return R(this,t,r);case"base64":return S(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,t,r);default:if(i)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),i=!0}}function v(e,t,r){const i=e[t];e[t]=e[r],e[r]=i}function b(e,t,r,i,n){if(0===e.length)return-1;if("string"==typeof r?(i=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),G(r=+r)&&(r=n?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(n)return-1;r=e.length-1}else if(r<0){if(!n)return-1;r=0}if("string"==typeof t&&(t=l.from(t,i)),l.isBuffer(t))return 0===t.length?-1:w(e,t,r,i,n);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?n?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):w(e,[t],r,i,n);throw new TypeError("val must be string, number or Buffer")}function w(e,t,r,i,n){let s,o=1,a=e.length,l=t.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(e.length<2||t.length<2)return-1;o=2,a/=2,l/=2,r/=2}function c(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(n){let i=-1;for(s=r;s<a;s++)if(c(e,s)===c(t,-1===i?0:s-i)){if(-1===i&&(i=s),s-i+1===l)return i*o}else-1!==i&&(s-=s-i),i=-1}else for(r+l>a&&(r=a-l),s=r;s>=0;s--){let r=!0;for(let i=0;i<l;i++)if(c(e,s+i)!==c(t,i)){r=!1;break}if(r)return s}return-1}function y(e,t,r,i){r=Number(r)||0;const n=e.length-r;i?(i=Number(i))>n&&(i=n):i=n;const s=t.length;let o;for(i>s/2&&(i=s/2),o=0;o<i;++o){const i=parseInt(t.substr(2*o,2),16);if(G(i))return o;e[r+o]=i}return o}function _(e,t,r,i){return J(q(t,e.length-r),e,r,i)}function E(e,t,r,i){return J(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,i)}function x(e,t,r,i){return J(K(t),e,r,i)}function C(e,t,r,i){return J(function(e,t){let r,i,n;const s=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),i=r>>8,n=r%256,s.push(n),s.push(i);return s}(t,e.length-r),e,r,i)}function S(e,t,r){return 0===t&&r===e.length?i.fromByteArray(e):i.fromByteArray(e.slice(t,r))}function I(e,t,r){r=Math.min(e.length,r);const i=[];let n=t;for(;n<r;){const t=e[n];let s=null,o=t>239?4:t>223?3:t>191?2:1;if(n+o<=r){let r,i,a,l;switch(o){case 1:t<128&&(s=t);break;case 2:r=e[n+1],128==(192&r)&&(l=(31&t)<<6|63&r,l>127&&(s=l));break;case 3:r=e[n+1],i=e[n+2],128==(192&r)&&128==(192&i)&&(l=(15&t)<<12|(63&r)<<6|63&i,l>2047&&(l<55296||l>57343)&&(s=l));break;case 4:r=e[n+1],i=e[n+2],a=e[n+3],128==(192&r)&&128==(192&i)&&128==(192&a)&&(l=(15&t)<<18|(63&r)<<12|(63&i)<<6|63&a,l>65535&&l<1114112&&(s=l))}}null===s?(s=65533,o=1):s>65535&&(s-=65536,i.push(s>>>10&1023|55296),s=56320|1023&s),i.push(s),n+=o}return function(e){const t=e.length;if(t<=O)return String.fromCharCode.apply(String,e);let r="",i=0;for(;i<t;)r+=String.fromCharCode.apply(String,e.slice(i,i+=O));return r}(i)}l.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),l.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(l.prototype,"parent",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.buffer}}),Object.defineProperty(l.prototype,"offset",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.byteOffset}}),l.poolSize=8192,l.from=function(e,t,r){return c(e,t,r)},Object.setPrototypeOf(l.prototype,Uint8Array.prototype),Object.setPrototypeOf(l,Uint8Array),l.alloc=function(e,t,r){return function(e,t,r){return h(e),e<=0?a(e):void 0!==t?"string"==typeof r?a(e).fill(t,r):a(e).fill(t):a(e)}(e,t,r)},l.allocUnsafe=function(e){return u(e)},l.allocUnsafeSlow=function(e){return u(e)},l.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==l.prototype},l.compare=function(e,t){if(Z(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),Z(t,Uint8Array)&&(t=l.from(t,t.offset,t.byteLength)),!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,i=t.length;for(let n=0,s=Math.min(r,i);n<s;++n)if(e[n]!==t[n]){r=e[n],i=t[n];break}return r<i?-1:i<r?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const i=l.allocUnsafe(t);let n=0;for(r=0;r<e.length;++r){let t=e[r];if(Z(t,Uint8Array))n+t.length>i.length?(l.isBuffer(t)||(t=l.from(t)),t.copy(i,n)):Uint8Array.prototype.set.call(i,t,n);else{if(!l.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(i,n)}n+=t.length}return i},l.byteLength=g,l.prototype._isBuffer=!0,l.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)v(this,t,t+1);return this},l.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)v(this,t,t+3),v(this,t+1,t+2);return this},l.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)v(this,t,t+7),v(this,t+1,t+6),v(this,t+2,t+5),v(this,t+3,t+4);return this},l.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?I(this,0,e):m.apply(this,arguments)},l.prototype.toLocaleString=l.prototype.toString,l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){let e="";const r=t.h2;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},s&&(l.prototype[s]=l.prototype.inspect),l.prototype.compare=function(e,t,r,i,n){if(Z(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),!l.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===i&&(i=0),void 0===n&&(n=this.length),t<0||r>e.length||i<0||n>this.length)throw new RangeError("out of range index");if(i>=n&&t>=r)return 0;if(i>=n)return-1;if(t>=r)return 1;if(this===e)return 0;let s=(n>>>=0)-(i>>>=0),o=(r>>>=0)-(t>>>=0);const a=Math.min(s,o),c=this.slice(i,n),h=e.slice(t,r);for(let e=0;e<a;++e)if(c[e]!==h[e]){s=c[e],o=h[e];break}return s<o?-1:o<s?1:0},l.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},l.prototype.indexOf=function(e,t,r){return b(this,e,t,r,!0)},l.prototype.lastIndexOf=function(e,t,r){return b(this,e,t,r,!1)},l.prototype.write=function(e,t,r,i){if(void 0===t)i="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)i=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===i&&(i="utf8")):(i=r,r=void 0)}const n=this.length-t;if((void 0===r||r>n)&&(r=n),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");let s=!1;for(;;)switch(i){case"hex":return y(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":case"latin1":case"binary":return E(this,e,t,r);case"base64":return x(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,e,t,r);default:if(s)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),s=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const O=4096;function A(e,t,r){let i="";r=Math.min(e.length,r);for(let n=t;n<r;++n)i+=String.fromCharCode(127&e[n]);return i}function R(e,t,r){let i="";r=Math.min(e.length,r);for(let n=t;n<r;++n)i+=String.fromCharCode(e[n]);return i}function P(e,t,r){const i=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>i)&&(r=i);let n="";for(let i=t;i<r;++i)n+=Y[e[i]];return n}function k(e,t,r){const i=e.slice(t,r);let n="";for(let e=0;e<i.length-1;e+=2)n+=String.fromCharCode(i[e]+256*i[e+1]);return n}function N(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function M(e,t,r,i,n,s){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>n||t<s)throw new RangeError('"value" argument is out of bounds');if(r+i>e.length)throw new RangeError("Index out of range")}function T(e,t,r,i,n){W(t,i,n,e,r,7);let s=Number(t&BigInt(4294967295));e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,r}function L(e,t,r,i,n){W(t,i,n,e,r,7);let s=Number(t&BigInt(4294967295));e[r+7]=s,s>>=8,e[r+6]=s,s>>=8,e[r+5]=s,s>>=8,e[r+4]=s;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=o,o>>=8,e[r+2]=o,o>>=8,e[r+1]=o,o>>=8,e[r]=o,r+8}function $(e,t,r,i,n,s){if(r+i>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function U(e,t,r,i,s){return t=+t,r>>>=0,s||$(e,0,r,4),n.write(e,t,r,i,23,4),r+4}function j(e,t,r,i,s){return t=+t,r>>>=0,s||$(e,0,r,8),n.write(e,t,r,i,52,8),r+8}l.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const i=this.subarray(e,t);return Object.setPrototypeOf(i,l.prototype),i},l.prototype.readUintLE=l.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||N(e,t,this.length);let i=this[e],n=1,s=0;for(;++s<t&&(n*=256);)i+=this[e+s]*n;return i},l.prototype.readUintBE=l.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||N(e,t,this.length);let i=this[e+--t],n=1;for(;t>0&&(n*=256);)i+=this[e+--t]*n;return i},l.prototype.readUint8=l.prototype.readUInt8=function(e,t){return e>>>=0,t||N(e,1,this.length),this[e]},l.prototype.readUint16LE=l.prototype.readUInt16LE=function(e,t){return e>>>=0,t||N(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUint16BE=l.prototype.readUInt16BE=function(e,t){return e>>>=0,t||N(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUint32LE=l.prototype.readUInt32LE=function(e,t){return e>>>=0,t||N(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUint32BE=l.prototype.readUInt32BE=function(e,t){return e>>>=0,t||N(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readBigUInt64LE=X((function(e){H(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const i=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,n=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(i)+(BigInt(n)<<BigInt(32))})),l.prototype.readBigUInt64BE=X((function(e){H(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const i=t*2**24+65536*this[++e]+256*this[++e]+this[++e],n=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(i)<<BigInt(32))+BigInt(n)})),l.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||N(e,t,this.length);let i=this[e],n=1,s=0;for(;++s<t&&(n*=256);)i+=this[e+s]*n;return n*=128,i>=n&&(i-=Math.pow(2,8*t)),i},l.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||N(e,t,this.length);let i=t,n=1,s=this[e+--i];for(;i>0&&(n*=256);)s+=this[e+--i]*n;return n*=128,s>=n&&(s-=Math.pow(2,8*t)),s},l.prototype.readInt8=function(e,t){return e>>>=0,t||N(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){e>>>=0,t||N(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},l.prototype.readInt16BE=function(e,t){e>>>=0,t||N(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},l.prototype.readInt32LE=function(e,t){return e>>>=0,t||N(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return e>>>=0,t||N(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readBigInt64LE=X((function(e){H(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const i=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(i)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),l.prototype.readBigInt64BE=X((function(e){H(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const i=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(i)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),l.prototype.readFloatLE=function(e,t){return e>>>=0,t||N(e,4,this.length),n.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return e>>>=0,t||N(e,4,this.length),n.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return e>>>=0,t||N(e,8,this.length),n.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return e>>>=0,t||N(e,8,this.length),n.read(this,e,!1,52,8)},l.prototype.writeUintLE=l.prototype.writeUIntLE=function(e,t,r,i){e=+e,t>>>=0,r>>>=0,i||M(this,e,t,r,Math.pow(2,8*r)-1,0);let n=1,s=0;for(this[t]=255&e;++s<r&&(n*=256);)this[t+s]=e/n&255;return t+r},l.prototype.writeUintBE=l.prototype.writeUIntBE=function(e,t,r,i){e=+e,t>>>=0,r>>>=0,i||M(this,e,t,r,Math.pow(2,8*r)-1,0);let n=r-1,s=1;for(this[t+n]=255&e;--n>=0&&(s*=256);)this[t+n]=e/s&255;return t+r},l.prototype.writeUint8=l.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||M(this,e,t,1,255,0),this[t]=255&e,t+1},l.prototype.writeUint16LE=l.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||M(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeUint16BE=l.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||M(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeUint32LE=l.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||M(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},l.prototype.writeUint32BE=l.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||M(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeBigUInt64LE=X((function(e,t=0){return T(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeBigUInt64BE=X((function(e,t=0){return L(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeIntLE=function(e,t,r,i){if(e=+e,t>>>=0,!i){const i=Math.pow(2,8*r-1);M(this,e,t,r,i-1,-i)}let n=0,s=1,o=0;for(this[t]=255&e;++n<r&&(s*=256);)e<0&&0===o&&0!==this[t+n-1]&&(o=1),this[t+n]=(e/s>>0)-o&255;return t+r},l.prototype.writeIntBE=function(e,t,r,i){if(e=+e,t>>>=0,!i){const i=Math.pow(2,8*r-1);M(this,e,t,r,i-1,-i)}let n=r-1,s=1,o=0;for(this[t+n]=255&e;--n>=0&&(s*=256);)e<0&&0===o&&0!==this[t+n+1]&&(o=1),this[t+n]=(e/s>>0)-o&255;return t+r},l.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||M(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||M(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||M(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||M(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},l.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||M(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeBigInt64LE=X((function(e,t=0){return T(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeBigInt64BE=X((function(e,t=0){return L(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeFloatLE=function(e,t,r){return U(this,e,t,!0,r)},l.prototype.writeFloatBE=function(e,t,r){return U(this,e,t,!1,r)},l.prototype.writeDoubleLE=function(e,t,r){return j(this,e,t,!0,r)},l.prototype.writeDoubleBE=function(e,t,r){return j(this,e,t,!1,r)},l.prototype.copy=function(e,t,r,i){if(!l.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),i||0===i||(i=this.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<r&&(i=r),i===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-t<i-r&&(i=e.length-t+r);const n=i-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,i):Uint8Array.prototype.set.call(e,this.subarray(r,i),t),n},l.prototype.fill=function(e,t,r,i){if("string"==typeof e){if("string"==typeof t?(i=t,t=0,r=this.length):"string"==typeof r&&(i=r,r=this.length),void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!l.isEncoding(i))throw new TypeError("Unknown encoding: "+i);if(1===e.length){const t=e.charCodeAt(0);("utf8"===i&&t<128||"latin1"===i)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let n;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(n=t;n<r;++n)this[n]=e;else{const s=l.isBuffer(e)?e:l.from(e,i),o=s.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(n=0;n<r-t;++n)this[n+t]=s[n%o]}return this};const D={};function B(e,t,r){D[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function z(e){let t="",r=e.length;const i="-"===e[0]?1:0;for(;r>=i+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function W(e,t,r,i,n,s){if(e>r||e<t){const i="bigint"==typeof t?"n":"";let n;throw n=s>3?0===t||t===BigInt(0)?`>= 0${i} and < 2${i} ** ${8*(s+1)}${i}`:`>= -(2${i} ** ${8*(s+1)-1}${i}) and < 2 ** ${8*(s+1)-1}${i}`:`>= ${t}${i} and <= ${r}${i}`,new D.ERR_OUT_OF_RANGE("value",n,e)}!function(e,t,r){H(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||V(t,e.length-(r+1))}(i,n,s)}function H(e,t){if("number"!=typeof e)throw new D.ERR_INVALID_ARG_TYPE(t,"number",e)}function V(e,t,r){if(Math.floor(e)!==e)throw H(e,r),new D.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new D.ERR_BUFFER_OUT_OF_BOUNDS;throw new D.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}B("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),B("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),B("ERR_OUT_OF_RANGE",(function(e,t,r){let i=`The value of "${e}" is out of range.`,n=r;return Number.isInteger(r)&&Math.abs(r)>2**32?n=z(String(r)):"bigint"==typeof r&&(n=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(n=z(n)),n+="n"),i+=` It must be ${t}. Received ${n}`,i}),RangeError);const F=/[^+/0-9A-Za-z-_]/g;function q(e,t){let r;t=t||1/0;const i=e.length;let n=null;const s=[];for(let o=0;o<i;++o){if(r=e.charCodeAt(o),r>55295&&r<57344){if(!n){if(r>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(o+1===i){(t-=3)>-1&&s.push(239,191,189);continue}n=r;continue}if(r<56320){(t-=3)>-1&&s.push(239,191,189),n=r;continue}r=65536+(n-55296<<10|r-56320)}else n&&(t-=3)>-1&&s.push(239,191,189);if(n=null,r<128){if((t-=1)<0)break;s.push(r)}else if(r<2048){if((t-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function K(e){return i.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(F,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function J(e,t,r,i){let n;for(n=0;n<i&&!(n+r>=t.length||n>=e.length);++n)t[n+r]=e[n];return n}function Z(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function G(e){return e!=e}const Y=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const i=16*r;for(let n=0;n<16;++n)t[i+n]=e[r]+e[n]}return t}();function X(e){return"undefined"==typeof BigInt?Q:e}function Q(){throw new Error("BigInt not supported")}},4020:e=>{"use strict";var t="%[a-f0-9]{2}",r=new RegExp("("+t+")|([^%]+?)","gi"),i=new RegExp("("+t+")+","gi");function n(e,t){try{return[decodeURIComponent(e.join(""))]}catch(e){}if(1===e.length)return e;t=t||1;var r=e.slice(0,t),i=e.slice(t);return Array.prototype.concat.call([],n(r),n(i))}function s(e){try{return decodeURIComponent(e)}catch(s){for(var t=e.match(r)||[],i=1;i<t.length;i++)t=(e=n(t,i).join("")).match(r)||[];return e}}e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof e+"`");try{return e=e.replace(/\+/g," "),decodeURIComponent(e)}catch(t){return function(e){for(var t={"%FE%FF":"��","%FF%FE":"��"},r=i.exec(e);r;){try{t[r[0]]=decodeURIComponent(r[0])}catch(e){var n=s(r[0]);n!==r[0]&&(t[r[0]]=n)}r=i.exec(e)}t["%C2"]="�";for(var o=Object.keys(t),a=0;a<o.length;a++){var l=o[a];e=e.replace(new RegExp(l,"g"),t[l])}return e}(e)}}},5987:e=>{"use strict";var t={single_source_shortest_paths:function(e,r,i){var n={},s={};s[r]=0;var o,a,l,c,h,u,d,p=t.PriorityQueue.make();for(p.push(r,0);!p.empty();)for(l in a=(o=p.pop()).value,c=o.cost,h=e[a]||{})h.hasOwnProperty(l)&&(u=c+h[l],d=s[l],(void 0===s[l]||d>u)&&(s[l]=u,p.push(l,u),n[l]=a));if(void 0!==i&&void 0===s[i]){var f=["Could not find a path from ",r," to ",i,"."].join("");throw new Error(f)}return n},extract_shortest_path_from_predecessor_list:function(e,t){for(var r=[],i=t;i;)r.push(i),e[i],i=e[i];return r.reverse(),r},find_path:function(e,r,i){var n=t.single_source_shortest_paths(e,r,i);return t.extract_shortest_path_from_predecessor_list(n,i)},PriorityQueue:{make:function(e){var r,i=t.PriorityQueue,n={};for(r in e=e||{},i)i.hasOwnProperty(r)&&(n[r]=i[r]);return n.queue=[],n.sorter=e.sorter||i.default_sorter,n},default_sorter:function(e,t){return e.cost-t.cost},push:function(e,t){var r={value:e,cost:t};this.queue.push(r),this.queue.sort(this.sorter)},pop:function(){return this.queue.shift()},empty:function(){return 0===this.queue.length}}};e.exports=t},2378:e=>{"use strict";e.exports=function(e){for(var t=[],r=e.length,i=0;i<r;i++){var n=e.charCodeAt(i);if(n>=55296&&n<=56319&&r>i+1){var s=e.charCodeAt(i+1);s>=56320&&s<=57343&&(n=1024*(n-55296)+s-56320+65536,i+=1)}n<128?t.push(n):n<2048?(t.push(n>>6|192),t.push(63&n|128)):n<55296||n>=57344&&n<65536?(t.push(n>>12|224),t.push(n>>6&63|128),t.push(63&n|128)):n>=65536&&n<=1114111?(t.push(n>>18|240),t.push(n>>12&63|128),t.push(n>>6&63|128),t.push(63&n|128)):t.push(239,191,189)}return new Uint8Array(t).buffer}},7187:e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,i=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,e.exports.once=function(e,t){return new Promise((function(r,i){function n(r){e.removeListener(t,s),i(r)}function s(){"function"==typeof e.removeListener&&e.removeListener("error",n),r([].slice.call(arguments))}g(e,t,s,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&g(e,"error",t,{once:!0})}(e,n)}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var o=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function c(e,t,r,i){var n,s,o,c;if(a(r),void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),s=e._events),o=s[t]),void 0===o)o=s[t]=r,++e._eventsCount;else if("function"==typeof o?o=s[t]=i?[r,o]:[o,r]:i?o.unshift(r):o.push(r),(n=l(e))>0&&o.length>n&&!o.warned){o.warned=!0;var h=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");h.name="MaxListenersExceededWarning",h.emitter=e,h.type=t,h.count=o.length,c=h,console&&console.warn&&console.warn(c)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function u(e,t,r){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},n=h.bind(i);return n.listener=r,i.wrapFn=n,n}function d(e,t,r){var i=e._events;if(void 0===i)return[];var n=i[t];return void 0===n?[]:"function"==typeof n?r?[n.listener||n]:[n]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(n):f(n,n.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(e,t){for(var r=new Array(t),i=0;i<t;++i)r[i]=e[i];return r}function g(e,t,r,i){if("function"==typeof e.on)i.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function n(s){i.once&&e.removeEventListener(t,n),r(s)}))}}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return l(this)},s.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,s=this._events;if(void 0!==s)n=n&&void 0===s.error;else if(!n)return!1;if(n){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var l=s[e];if(void 0===l)return!1;if("function"==typeof l)i(l,this,t);else{var c=l.length,h=f(l,c);for(r=0;r<c;++r)i(h[r],this,t)}return!0},s.prototype.addListener=function(e,t){return c(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return c(this,e,t,!0)},s.prototype.once=function(e,t){return a(t),this.on(e,u(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,u(this,e,t)),this},s.prototype.removeListener=function(e,t){var r,i,n,s,o;if(a(t),void 0===(i=this._events))return this;if(void 0===(r=i[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(n=-1,s=r.length-1;s>=0;s--)if(r[s]===t||r[s].listener===t){o=r[s].listener,n=s;break}if(n<0)return this;0===n?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,n),1===r.length&&(i[e]=r[0]),void 0!==i.removeListener&&this.emit("removeListener",e,o||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,r,i;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var n,s=Object.keys(r);for(i=0;i<s.length;++i)"removeListener"!==(n=s[i])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},s.prototype.listeners=function(e){return d(this,e,!0)},s.prototype.rawListeners=function(e){return d(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},s.prototype.listenerCount=p,s.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},2806:e=>{"use strict";e.exports=function(e,t){for(var r={},i=Object.keys(e),n=Array.isArray(t),s=0;s<i.length;s++){var o=i[s],a=e[o];(n?-1!==t.indexOf(o):t(o,a,e))&&(r[o]=a)}return r}},645:(e,t)=>{t.read=function(e,t,r,i,n){var s,o,a=8*n-i-1,l=(1<<a)-1,c=l>>1,h=-7,u=r?n-1:0,d=r?-1:1,p=e[t+u];for(u+=d,s=p&(1<<-h)-1,p>>=-h,h+=a;h>0;s=256*s+e[t+u],u+=d,h-=8);for(o=s&(1<<-h)-1,s>>=-h,h+=i;h>0;o=256*o+e[t+u],u+=d,h-=8);if(0===s)s=1-c;else{if(s===l)return o?NaN:1/0*(p?-1:1);o+=Math.pow(2,i),s-=c}return(p?-1:1)*o*Math.pow(2,s-i)},t.write=function(e,t,r,i,n,s){var o,a,l,c=8*s-n-1,h=(1<<c)-1,u=h>>1,d=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,p=i?0:s-1,f=i?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,o=h):(o=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-o))<1&&(o--,l*=2),(t+=o+u>=1?d/l:d*Math.pow(2,1-u))*l>=2&&(o++,l/=2),o+u>=h?(a=0,o=h):o+u>=1?(a=(t*l-1)*Math.pow(2,n),o+=u):(a=t*Math.pow(2,u-1)*Math.pow(2,n),o=0));n>=8;e[r+p]=255&a,p+=f,a/=256,n-=8);for(o=o<<n|a,c+=n;c>0;e[r+p]=255&o,p+=f,o/=256,c-=8);e[r+p-f]|=128*g}},2307:(e,t,r)=>{e=r.nmd(e);var i="__lodash_hash_undefined__",n=9007199254740991,s="[object Arguments]",o="[object Array]",a="[object Boolean]",l="[object Date]",c="[object Error]",h="[object Function]",u="[object Map]",d="[object Number]",p="[object Object]",f="[object Promise]",g="[object RegExp]",m="[object Set]",v="[object String]",b="[object WeakMap]",w="[object ArrayBuffer]",y="[object DataView]",_=/^\[object .+?Constructor\]$/,E=/^(?:0|[1-9]\d*)$/,x={};x["[object Float32Array]"]=x["[object Float64Array]"]=x["[object Int8Array]"]=x["[object Int16Array]"]=x["[object Int32Array]"]=x["[object Uint8Array]"]=x["[object Uint8ClampedArray]"]=x["[object Uint16Array]"]=x["[object Uint32Array]"]=!0,x[s]=x[o]=x[w]=x[a]=x[y]=x[l]=x[c]=x[h]=x[u]=x[d]=x[p]=x[g]=x[m]=x[v]=x[b]=!1;var C="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g,S="object"==typeof self&&self&&self.Object===Object&&self,I=C||S||Function("return this")(),O=t&&!t.nodeType&&t,A=O&&e&&!e.nodeType&&e,R=A&&A.exports===O,P=R&&C.process,k=function(){try{return P&&P.binding&&P.binding("util")}catch(e){}}(),N=k&&k.isTypedArray;function M(e,t){for(var r=-1,i=null==e?0:e.length;++r<i;)if(t(e[r],r,e))return!0;return!1}function T(e){var t=-1,r=Array(e.size);return e.forEach((function(e,i){r[++t]=[i,e]})),r}function L(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}var $,U,j,D=Array.prototype,B=Function.prototype,z=Object.prototype,W=I["__core-js_shared__"],H=B.toString,V=z.hasOwnProperty,F=($=/[^.]+$/.exec(W&&W.keys&&W.keys.IE_PROTO||""))?"Symbol(src)_1."+$:"",q=z.toString,K=RegExp("^"+H.call(V).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),J=R?I.Buffer:void 0,Z=I.Symbol,G=I.Uint8Array,Y=z.propertyIsEnumerable,X=D.splice,Q=Z?Z.toStringTag:void 0,ee=Object.getOwnPropertySymbols,te=J?J.isBuffer:void 0,re=(U=Object.keys,j=Object,function(e){return U(j(e))}),ie=Ae(I,"DataView"),ne=Ae(I,"Map"),se=Ae(I,"Promise"),oe=Ae(I,"Set"),ae=Ae(I,"WeakMap"),le=Ae(Object,"create"),ce=Ne(ie),he=Ne(ne),ue=Ne(se),de=Ne(oe),pe=Ne(ae),fe=Z?Z.prototype:void 0,ge=fe?fe.valueOf:void 0;function me(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var i=e[t];this.set(i[0],i[1])}}function ve(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var i=e[t];this.set(i[0],i[1])}}function be(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var i=e[t];this.set(i[0],i[1])}}function we(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new be;++t<r;)this.add(e[t])}function ye(e){var t=this.__data__=new ve(e);this.size=t.size}function _e(e,t){for(var r=e.length;r--;)if(Me(e[r][0],t))return r;return-1}function Ee(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Q&&Q in Object(e)?function(e){var t=V.call(e,Q),r=e[Q];try{e[Q]=void 0;var i=!0}catch(e){}var n=q.call(e);return i&&(t?e[Q]=r:delete e[Q]),n}(e):function(e){return q.call(e)}(e)}function xe(e){return Be(e)&&Ee(e)==s}function Ce(e,t,r,i,n){return e===t||(null==e||null==t||!Be(e)&&!Be(t)?e!=e&&t!=t:function(e,t,r,i,n,h){var f=Le(e),b=Le(t),_=f?o:Pe(e),E=b?o:Pe(t),x=(_=_==s?p:_)==p,C=(E=E==s?p:E)==p,S=_==E;if(S&&$e(e)){if(!$e(t))return!1;f=!0,x=!1}if(S&&!x)return h||(h=new ye),f||ze(e)?Se(e,t,r,i,n,h):function(e,t,r,i,n,s,o){switch(r){case y:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case w:return!(e.byteLength!=t.byteLength||!s(new G(e),new G(t)));case a:case l:case d:return Me(+e,+t);case c:return e.name==t.name&&e.message==t.message;case g:case v:return e==t+"";case u:var h=T;case m:var p=1&i;if(h||(h=L),e.size!=t.size&&!p)return!1;var f=o.get(e);if(f)return f==t;i|=2,o.set(e,t);var b=Se(h(e),h(t),i,n,s,o);return o.delete(e),b;case"[object Symbol]":if(ge)return ge.call(e)==ge.call(t)}return!1}(e,t,_,r,i,n,h);if(!(1&r)){var I=x&&V.call(e,"__wrapped__"),O=C&&V.call(t,"__wrapped__");if(I||O){var A=I?e.value():e,R=O?t.value():t;return h||(h=new ye),n(A,R,r,i,h)}}return!!S&&(h||(h=new ye),function(e,t,r,i,n,s){var o=1&r,a=Ie(e),l=a.length;if(l!=Ie(t).length&&!o)return!1;for(var c=l;c--;){var h=a[c];if(!(o?h in t:V.call(t,h)))return!1}var u=s.get(e);if(u&&s.get(t))return u==t;var d=!0;s.set(e,t),s.set(t,e);for(var p=o;++c<l;){var f=e[h=a[c]],g=t[h];if(i)var m=o?i(g,f,h,t,e,s):i(f,g,h,e,t,s);if(!(void 0===m?f===g||n(f,g,r,i,s):m)){d=!1;break}p||(p="constructor"==h)}if(d&&!p){var v=e.constructor,b=t.constructor;v==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof v&&v instanceof v&&"function"==typeof b&&b instanceof b||(d=!1)}return s.delete(e),s.delete(t),d}(e,t,r,i,n,h))}(e,t,r,i,Ce,n))}function Se(e,t,r,i,n,s){var o=1&r,a=e.length,l=t.length;if(a!=l&&!(o&&l>a))return!1;var c=s.get(e);if(c&&s.get(t))return c==t;var h=-1,u=!0,d=2&r?new we:void 0;for(s.set(e,t),s.set(t,e);++h<a;){var p=e[h],f=t[h];if(i)var g=o?i(f,p,h,t,e,s):i(p,f,h,e,t,s);if(void 0!==g){if(g)continue;u=!1;break}if(d){if(!M(t,(function(e,t){if(o=t,!d.has(o)&&(p===e||n(p,e,r,i,s)))return d.push(t);var o}))){u=!1;break}}else if(p!==f&&!n(p,f,r,i,s)){u=!1;break}}return s.delete(e),s.delete(t),u}function Ie(e){return function(e,t,r){var i=t(e);return Le(e)?i:function(e,t){for(var r=-1,i=t.length,n=e.length;++r<i;)e[n+r]=t[r];return e}(i,r(e))}(e,We,Re)}function Oe(e,t){var r,i,n=e.__data__;return("string"==(i=typeof(r=t))||"number"==i||"symbol"==i||"boolean"==i?"__proto__"!==r:null===r)?n["string"==typeof t?"string":"hash"]:n.map}function Ae(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!De(e)||function(e){return!!F&&F in e}(e))&&(Ue(e)?K:_).test(Ne(e))}(r)?r:void 0}me.prototype.clear=function(){this.__data__=le?le(null):{},this.size=0},me.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},me.prototype.get=function(e){var t=this.__data__;if(le){var r=t[e];return r===i?void 0:r}return V.call(t,e)?t[e]:void 0},me.prototype.has=function(e){var t=this.__data__;return le?void 0!==t[e]:V.call(t,e)},me.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=le&&void 0===t?i:t,this},ve.prototype.clear=function(){this.__data__=[],this.size=0},ve.prototype.delete=function(e){var t=this.__data__,r=_e(t,e);return!(r<0||(r==t.length-1?t.pop():X.call(t,r,1),--this.size,0))},ve.prototype.get=function(e){var t=this.__data__,r=_e(t,e);return r<0?void 0:t[r][1]},ve.prototype.has=function(e){return _e(this.__data__,e)>-1},ve.prototype.set=function(e,t){var r=this.__data__,i=_e(r,e);return i<0?(++this.size,r.push([e,t])):r[i][1]=t,this},be.prototype.clear=function(){this.size=0,this.__data__={hash:new me,map:new(ne||ve),string:new me}},be.prototype.delete=function(e){var t=Oe(this,e).delete(e);return this.size-=t?1:0,t},be.prototype.get=function(e){return Oe(this,e).get(e)},be.prototype.has=function(e){return Oe(this,e).has(e)},be.prototype.set=function(e,t){var r=Oe(this,e),i=r.size;return r.set(e,t),this.size+=r.size==i?0:1,this},we.prototype.add=we.prototype.push=function(e){return this.__data__.set(e,i),this},we.prototype.has=function(e){return this.__data__.has(e)},ye.prototype.clear=function(){this.__data__=new ve,this.size=0},ye.prototype.delete=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r},ye.prototype.get=function(e){return this.__data__.get(e)},ye.prototype.has=function(e){return this.__data__.has(e)},ye.prototype.set=function(e,t){var r=this.__data__;if(r instanceof ve){var i=r.__data__;if(!ne||i.length<199)return i.push([e,t]),this.size=++r.size,this;r=this.__data__=new be(i)}return r.set(e,t),this.size=r.size,this};var Re=ee?function(e){return null==e?[]:(e=Object(e),function(t,r){for(var i=-1,n=null==t?0:t.length,s=0,o=[];++i<n;){var a=t[i];l=a,Y.call(e,l)&&(o[s++]=a)}var l;return o}(ee(e)))}:function(){return[]},Pe=Ee;function ke(e,t){return!!(t=null==t?n:t)&&("number"==typeof e||E.test(e))&&e>-1&&e%1==0&&e<t}function Ne(e){if(null!=e){try{return H.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Me(e,t){return e===t||e!=e&&t!=t}(ie&&Pe(new ie(new ArrayBuffer(1)))!=y||ne&&Pe(new ne)!=u||se&&Pe(se.resolve())!=f||oe&&Pe(new oe)!=m||ae&&Pe(new ae)!=b)&&(Pe=function(e){var t=Ee(e),r=t==p?e.constructor:void 0,i=r?Ne(r):"";if(i)switch(i){case ce:return y;case he:return u;case ue:return f;case de:return m;case pe:return b}return t});var Te=xe(function(){return arguments}())?xe:function(e){return Be(e)&&V.call(e,"callee")&&!Y.call(e,"callee")},Le=Array.isArray,$e=te||function(){return!1};function Ue(e){if(!De(e))return!1;var t=Ee(e);return t==h||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function je(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}function De(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Be(e){return null!=e&&"object"==typeof e}var ze=N?function(e){return function(t){return e(t)}}(N):function(e){return Be(e)&&je(e.length)&&!!x[Ee(e)]};function We(e){return null!=(t=e)&&je(t.length)&&!Ue(t)?function(e,t){var r=Le(e),i=!r&&Te(e),n=!r&&!i&&$e(e),s=!r&&!i&&!n&&ze(e),o=r||i||n||s,a=o?function(e,t){for(var r=-1,i=Array(e);++r<e;)i[r]=t(r);return i}(e.length,String):[],l=a.length;for(var c in e)!t&&!V.call(e,c)||o&&("length"==c||n&&("offset"==c||"parent"==c)||s&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||ke(c,l))||a.push(c);return a}(e):function(e){if(r=(t=e)&&t.constructor,t!==("function"==typeof r&&r.prototype||z))return re(e);var t,r,i=[];for(var n in Object(e))V.call(e,n)&&"constructor"!=n&&i.push(n);return i}(e);var t}e.exports=function(e,t){return Ce(e,t)}},5346:e=>{"use strict";function t(e){try{return JSON.stringify(e)}catch(e){return'"[Circular]"'}}e.exports=function(e,r,i){var n=i&&i.stringify||t;if("object"==typeof e&&null!==e){var s=r.length+1;if(1===s)return e;var o=new Array(s);o[0]=n(e);for(var a=1;a<s;a++)o[a]=n(r[a]);return o.join(" ")}if("string"!=typeof e)return e;var l=r.length;if(0===l)return e;for(var c="",h=0,u=-1,d=e&&e.length||0,p=0;p<d;){if(37===e.charCodeAt(p)&&p+1<d){switch(u=u>-1?u:0,e.charCodeAt(p+1)){case 100:case 102:if(h>=l)break;if(null==r[h])break;u<p&&(c+=e.slice(u,p)),c+=Number(r[h]),u=p+2,p++;break;case 105:if(h>=l)break;if(null==r[h])break;u<p&&(c+=e.slice(u,p)),c+=Math.floor(Number(r[h])),u=p+2,p++;break;case 79:case 111:case 106:if(h>=l)break;if(void 0===r[h])break;u<p&&(c+=e.slice(u,p));var f=typeof r[h];if("string"===f){c+="'"+r[h]+"'",u=p+2,p++;break}if("function"===f){c+=r[h].name||"<anonymous>",u=p+2,p++;break}c+=n(r[h]),u=p+2,p++;break;case 115:if(h>=l)break;u<p&&(c+=e.slice(u,p)),c+=String(r[h]),u=p+2,p++;break;case 37:u<p&&(c+=e.slice(u,p)),c+="%",u=p+2,p++,h--}++h}++p}return-1===u?e:(u<d&&(c+=e.slice(u)),c)}},3954:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.safeJsonParse=function(e){if("string"!=typeof e)throw new Error("Cannot safe json parse value of type "+typeof e);try{return JSON.parse(e)}catch(t){return e}},t.safeJsonStringify=function(e){return"string"==typeof e?e:JSON.stringify(e,((e,t)=>void 0===t?null:t))}},500:e=>{"use strict";e.exports=(e,t)=>{if("string"!=typeof e||"string"!=typeof t)throw new TypeError("Expected the arguments to be of type `string`");if(""===t)return[e];const r=e.indexOf(t);return-1===r?[e]:[e.slice(0,r),e.slice(r+t.length)]}},610:e=>{"use strict";e.exports=e=>encodeURIComponent(e).replace(/[!'()*]/g,(e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`))},655:(e,t,r)=>{"use strict";r.r(t),r.d(t,{__assign:()=>s,__asyncDelegator:()=>y,__asyncGenerator:()=>w,__asyncValues:()=>_,__await:()=>b,__awaiter:()=>h,__classPrivateFieldGet:()=>S,__classPrivateFieldSet:()=>I,__createBinding:()=>d,__decorate:()=>a,__exportStar:()=>p,__extends:()=>n,__generator:()=>u,__importDefault:()=>C,__importStar:()=>x,__makeTemplateObject:()=>E,__metadata:()=>c,__param:()=>l,__read:()=>g,__rest:()=>o,__spread:()=>m,__spreadArrays:()=>v,__values:()=>f});var i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},i(e,t)};function n(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var s=function(){return s=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},s.apply(this,arguments)};function o(e,t){var r={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(r[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(i=Object.getOwnPropertySymbols(e);n<i.length;n++)t.indexOf(i[n])<0&&Object.prototype.propertyIsEnumerable.call(e,i[n])&&(r[i[n]]=e[i[n]])}return r}function a(e,t,r,i){var n,s=arguments.length,o=s<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(o=(s<3?n(o):s>3?n(t,r,o):n(t,r))||o);return s>3&&o&&Object.defineProperty(t,r,o),o}function l(e,t){return function(r,i){t(r,i,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function h(e,t,r,i){return new(r||(r=Promise))((function(n,s){function o(e){try{l(i.next(e))}catch(e){s(e)}}function a(e){try{l(i.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}l((i=i.apply(e,t||[])).next())}))}function u(e,t){var r,i,n,s,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,i&&(n=2&s[0]?i.return:s[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,s[1])).done)return n;switch(i=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,i=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((n=(n=o.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){o.label=s[1];break}if(6===s[0]&&o.label<n[1]){o.label=n[1],n=s;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(s);break}n[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],i=0}finally{r=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}function d(e,t,r,i){void 0===i&&(i=r),e[i]=t[r]}function p(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||(t[r]=e[r])}function f(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],i=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function g(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var i,n,s=r.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(i=s.next()).done;)o.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}return o}function m(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(g(arguments[t]));return e}function v(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var i=Array(e),n=0;for(t=0;t<r;t++)for(var s=arguments[t],o=0,a=s.length;o<a;o++,n++)i[n]=s[o];return i}function b(e){return this instanceof b?(this.v=e,this):new b(e)}function w(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,n=r.apply(e,t||[]),s=[];return i={},o("next"),o("throw"),o("return"),i[Symbol.asyncIterator]=function(){return this},i;function o(e){n[e]&&(i[e]=function(t){return new Promise((function(r,i){s.push([e,t,r,i])>1||a(e,t)}))})}function a(e,t){try{(r=n[e](t)).value instanceof b?Promise.resolve(r.value.v).then(l,c):h(s[0][2],r)}catch(e){h(s[0][3],e)}var r}function l(e){a("next",e)}function c(e){a("throw",e)}function h(e,t){e(t),s.shift(),s.length&&a(s[0][0],s[0][1])}}function y(e){var t,r;return t={},i("next"),i("throw",(function(e){throw e})),i("return"),t[Symbol.iterator]=function(){return this},t;function i(i,n){t[i]=e[i]?function(t){return(r=!r)?{value:b(e[i](t)),done:"return"===i}:n?n(t):t}:n}}function _(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=f(e),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(r){t[r]=e[r]&&function(t){return new Promise((function(i,n){!function(e,t,r,i){Promise.resolve(i).then((function(t){e({value:t,done:r})}),t)}(i,n,(t=e[r](t)).done,t.value)}))}}}function E(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function x(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function C(e){return e&&e.__esModule?e:{default:e}}function S(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function I(e,t,r){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,r),r}},7026:e=>{"use strict";e.exports=function(){throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object")}},5883:()=>{},6559:(e,t,r)=>{"use strict";const i=r(5346);e.exports=o;const n=function(){function e(e){return void 0!==e&&e}try{return"undefined"!=typeof globalThis||Object.defineProperty(Object.prototype,"globalThis",{get:function(){return delete Object.prototype.globalThis,this.globalThis=this},configurable:!0}),globalThis}catch(t){return e(self)||e(window)||e(this)||{}}}().console||{},s={mapHttpRequest:f,mapHttpResponse:f,wrapRequestSerializer:g,wrapResponseSerializer:g,wrapErrorSerializer:g,req:f,res:f,err:function(e){const t={type:e.constructor.name,msg:e.message,stack:e.stack};for(const r in e)void 0===t[r]&&(t[r]=e[r]);return t}};function o(e){(e=e||{}).browser=e.browser||{};const t=e.browser.transmit;if(t&&"function"!=typeof t.send)throw Error("pino: transmit option must have a send function");const r=e.browser.write||n;e.browser.write&&(e.browser.asObject=!0);const i=e.serializers||{},s=function(e,t){return Array.isArray(e)?e.filter((function(e){return"!stdSerializers.err"!==e})):!0===e&&Object.keys(t)}(e.browser.serialize,i);let l=e.browser.serialize;Array.isArray(e.browser.serialize)&&e.browser.serialize.indexOf("!stdSerializers.err")>-1&&(l=!1),"function"==typeof r&&(r.error=r.fatal=r.warn=r.info=r.debug=r.trace=r),!1===e.enabled&&(e.level="silent");const u=e.level||"info",f=Object.create(r);f.log||(f.log=m),Object.defineProperty(f,"levelVal",{get:function(){return"silent"===this.level?1/0:this.levels.values[this.level]}}),Object.defineProperty(f,"level",{get:function(){return this._level},set:function(e){if("silent"!==e&&!this.levels.values[e])throw Error("unknown level "+e);this._level=e,a(g,f,"error","log"),a(g,f,"fatal","error"),a(g,f,"warn","error"),a(g,f,"info","log"),a(g,f,"debug","log"),a(g,f,"trace","log")}});const g={transmit:t,serialize:s,asObject:e.browser.asObject,levels:["error","fatal","warn","info","debug","trace"],timestamp:p(e)};return f.levels=o.levels,f.level=u,f.setMaxListeners=f.getMaxListeners=f.emit=f.addListener=f.on=f.prependListener=f.once=f.prependOnceListener=f.removeListener=f.removeAllListeners=f.listeners=f.listenerCount=f.eventNames=f.write=f.flush=m,f.serializers=i,f._serialize=s,f._stdErrSerialize=l,f.child=function(r,n){if(!r)throw new Error("missing bindings for child Pino");n=n||{},s&&r.serializers&&(n.serializers=r.serializers);const o=n.serializers;if(s&&o){var a=Object.assign({},i,o),l=!0===e.browser.serialize?Object.keys(a):s;delete r.serializers,c([r],l,a,this._stdErrSerialize)}function u(e){this._childLevel=1+(0|e._childLevel),this.error=h(e,r,"error"),this.fatal=h(e,r,"fatal"),this.warn=h(e,r,"warn"),this.info=h(e,r,"info"),this.debug=h(e,r,"debug"),this.trace=h(e,r,"trace"),a&&(this.serializers=a,this._serialize=l),t&&(this._logEvent=d([].concat(e._logEvent.bindings,r)))}return u.prototype=this,new u(this)},t&&(f._logEvent=d()),f}function a(e,t,r,i){const s=Object.getPrototypeOf(t);t[r]=t.levelVal>t.levels.values[r]?m:s[r]?s[r]:n[r]||n[i]||m,function(e,t,r){var i;(e.transmit||t[r]!==m)&&(t[r]=(i=t[r],function(){const s=e.timestamp(),a=new Array(arguments.length),h=Object.getPrototypeOf&&Object.getPrototypeOf(this)===n?n:this;for(var d=0;d<a.length;d++)a[d]=arguments[d];if(e.serialize&&!e.asObject&&c(a,this._serialize,this.serializers,this._stdErrSerialize),e.asObject?i.call(h,l(this,r,a,s)):i.apply(h,a),e.transmit){const i=e.transmit.level||t.level,n=o.levels.values[i],l=o.levels.values[r];if(l<n)return;u(this,{ts:s,methodLevel:r,methodValue:l,transmitLevel:i,transmitValue:o.levels.values[e.transmit.level||t.level],send:e.transmit.send,val:t.levelVal},a)}}))}(e,t,r)}function l(e,t,r,n){e._serialize&&c(r,e._serialize,e.serializers,e._stdErrSerialize);const s=r.slice();let a=s[0];const l={};n&&(l.time=n),l.level=o.levels.values[t];let h=1+(0|e._childLevel);if(h<1&&(h=1),null!==a&&"object"==typeof a){for(;h--&&"object"==typeof s[0];)Object.assign(l,s.shift());a=s.length?i(s.shift(),s):void 0}else"string"==typeof a&&(a=i(s.shift(),s));return void 0!==a&&(l.msg=a),l}function c(e,t,r,i){for(const n in e)if(i&&e[n]instanceof Error)e[n]=o.stdSerializers.err(e[n]);else if("object"==typeof e[n]&&!Array.isArray(e[n]))for(const i in e[n])t&&t.indexOf(i)>-1&&i in r&&(e[n][i]=r[i](e[n][i]))}function h(e,t,r){return function(){const i=new Array(1+arguments.length);i[0]=t;for(var n=1;n<i.length;n++)i[n]=arguments[n-1];return e[r].apply(this,i)}}function u(e,t,r){const i=t.send,n=t.ts,s=t.methodLevel,o=t.methodValue,a=t.val,l=e._logEvent.bindings;c(r,e._serialize||Object.keys(e.serializers),e.serializers,void 0===e._stdErrSerialize||e._stdErrSerialize),e._logEvent.ts=n,e._logEvent.messages=r.filter((function(e){return-1===l.indexOf(e)})),e._logEvent.level.label=s,e._logEvent.level.value=o,i(s,e._logEvent,a),e._logEvent=d(l)}function d(e){return{ts:0,messages:[],bindings:e||[],level:{label:"",value:0}}}function p(e){return"function"==typeof e.timestamp?e.timestamp:!1===e.timestamp?v:b}function f(){return{}}function g(e){return e}function m(){}function v(){return!1}function b(){return Date.now()}o.levels={values:{fatal:60,error:50,warn:40,info:30,debug:20,trace:10},labels:{10:"trace",20:"debug",30:"info",40:"warn",50:"error",60:"fatal"}},o.stdSerializers=s,o.stdTimeFunctions=Object.assign({},{nullTime:v,epochTime:b,unixTime:function(){return Math.round(Date.now()/1e3)},isoTime:function(){return new Date(Date.now()).toISOString()}})},9342:(e,t,r)=>{"use strict";r.d(t,{Id:()=>v,t0:()=>y,zv:()=>b,uc:()=>S,jb:()=>R,zb:()=>g,AV:()=>O,Vs:()=>k}),Symbol(),Symbol();const i=Symbol(),n=Object.getPrototypeOf,s=new WeakMap,o=(new WeakMap,(e,t=!0)=>{s.set(e,t)}),a=e=>"object"==typeof e&&null!==e,l=Symbol(),c=new WeakSet,[h]=((e=Object.is,t=((e,t)=>new Proxy(e,t)),r=(e=>a(e)&&!c.has(e)&&(Array.isArray(e)||!(Symbol.iterator in e))&&!(e instanceof WeakMap)&&!(e instanceof WeakSet)&&!(e instanceof Error)&&!(e instanceof Number)&&!(e instanceof Date)&&!(e instanceof String)&&!(e instanceof RegExp)&&!(e instanceof ArrayBuffer)),h=(e=>{switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:throw e}}),d=new WeakMap,p=((e,t,r,i=h)=>{const n=d.get(t);if((null==n?void 0:n[0])===r)return n[1];const s=Array.isArray(e)?[]:Object.create(Object.getPrototypeOf(e));return o(s,!0),d.set(t,[r,s]),Reflect.ownKeys(e).forEach((r=>{const n=Reflect.get(e,r,t);c.has(n)?(o(n,!1),s[r]=n):n instanceof Promise?Object.defineProperty(s,r,{get:()=>i(n)}):(null==n?void 0:n[l])?s[r]=function(e,t){(null==e?void 0:e[l])||console.warn("Please use proxy object");const[r,i,n,s]=e[l];return s(r,i,n,t)}(n,i):s[r]=n})),Object.freeze(s)}),f=new WeakMap,g=[1],m=(o=>{if(!a(o))throw new Error("object required");const c=f.get(o);if(c)return c;let h=g[0];const d=new Set,m=(e,t=++g[0])=>{h!==t&&(h=t,d.forEach((r=>r(e,t))))},v=new Map,b=e=>{const t=v.get(e);return v.delete(e),t},w=Array.isArray(o)?[]:Object.create(Object.getPrototypeOf(o)),y={get:(e,t,r)=>t===l?[e,r,h,p,d]:Reflect.get(e,t,r),deleteProperty(e,t){var r;const i=Reflect.get(e,t),n=null==(r=null==i?void 0:i[l])?void 0:r[4];n&&n.delete(b(t));const s=Reflect.deleteProperty(e,t);return s&&m(["delete",[t],i]),s},set(t,o,c,h){var d,p;const f=Reflect.has(t,o),g=Reflect.get(t,o,h);if(f&&e(g,c))return!0;const w=null==(d=null==g?void 0:g[l])?void 0:d[4];var y;w&&w.delete(b(o)),a(c)&&(c=(e=>e&&(s.has(e)?s.get(e):n(e)===Object.prototype||n(e)===Array.prototype))(y=c)&&y[i]||null||c);let _=c;return(null==(p=Object.getOwnPropertyDescriptor(t,o))?void 0:p.set)||(c instanceof Promise?c.then((e=>{c.status="fulfilled",c.value=e,m(["resolve",[o],e])})).catch((e=>{c.status="rejected",c.reason=e,m(["reject",[o],e])})):(!(null==c?void 0:c[l])&&r(c)&&(_=u(c)),(null==_?void 0:_[l])&&_[l][4].add((e=>{let t=v.get(e);return t||(t=(t,r)=>{const i=[...t];i[1]=[e,...i[1]],m(i,r)},v.set(e,t)),t})(o)))),Reflect.set(t,o,_,h),m(["set",[o],c,g]),!0}},_=t(w,y);return f.set(o,_),Reflect.ownKeys(o).forEach((e=>{const t=Object.getOwnPropertyDescriptor(o,e);t.get||t.set?Object.defineProperty(w,e,t):_[e]=o[e]})),_}))=>[m,l,c,e,t,r,h,d,p,f,g])();function u(e={}){return h(e)}function d(e,t,r){let i;(null==e?void 0:e[l])||console.warn("Please use proxy object");const n=[],s=e[l][4],o=e=>{n.push(e),r?t(n.splice(0)):i||(i=Promise.resolve().then((()=>{i=void 0,s.has(o)&&t(n.splice(0))})))};return s.add(o),()=>s.delete(o)}var p=r(8764);const f=u({selectedChain:void 0,chains:void 0,standaloneChains:void 0,standaloneUri:void 0,address:void 0,profileName:void 0,profileAvatar:void 0,profileLoading:!1,balanceLoading:!1,balance:void 0,isConnected:!1,isStandalone:!1,isCustomDesktop:!1,isCustomMobile:!1,isExplorer:!1}),g={state:f,subscribe:e=>d(f,(()=>e(f))),setChains(e){f.chains=e},setStandaloneChains(e){f.standaloneChains=e},setStandaloneUri(e){f.standaloneUri=e},getSelectedChain(){if(!f.selectedChain){const e=v.client().getNetwork().chain;f.selectedChain=e}return f.selectedChain},setSelectedChain(e){f.selectedChain=e},setIsStandalone(e){f.isStandalone=e},setIsCustomDesktop(e){f.isCustomDesktop=e},setIsCustomMobile(e){f.isCustomMobile=e},setIsExplorer(e){f.isExplorer=e},getAccount(){const e=v.client().getAccount();f.address=e.address,f.isConnected=e.isConnected},setAddress(e){f.address=e},setIsConnected(e){f.isConnected=e},setProfileName(e){f.profileName=e},setProfileAvatar(e){f.profileAvatar=e},setProfileLoading(e){f.profileLoading=e},setBalanceLoading(e){f.balanceLoading=e},setBalance(e){f.balance=e},resetProfile(){f.profileName=void 0,f.profileAvatar=void 0,f.balance=void 0},resetAccount(){f.address=void 0,g.resetProfile()}},m=u({initialized:!1,ethereumClient:void 0}),v={setEthereumClient(e){!m.initialized&&e&&(m.ethereumClient=e,g.setChains(e.chains),m.initialized=!0)},client(){if(m.ethereumClient)return m.ethereumClient;throw new Error("ClientCtrl has no client set")}},b={WALLETCONNECT_DEEPLINK_CHOICE:"WALLETCONNECT_DEEPLINK_CHOICE",isMobile:()=>typeof window<"u"&&Boolean(window.matchMedia("(pointer:coarse)").matches||/Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent)),isAndroid:()=>b.isMobile()&&navigator.userAgent.toLowerCase().includes("android"),isEmptyObject:e=>Object.getPrototypeOf(e)===Object.prototype&&0===Object.getOwnPropertyNames(e).length&&0===Object.getOwnPropertySymbols(e).length,isHttpUrl:e=>e.startsWith("http://")||e.startsWith("https://"),formatNativeUrl(e,t,r){if(b.isHttpUrl(e))return this.formatUniversalUrl(e,t,r);let i=e;return i.includes("://")||(i=e.replaceAll("/","").replaceAll(":",""),i=`${i}://`),this.setWalletConnectDeepLink(i,r),`${i}wc?uri=${encodeURIComponent(t)}`},formatUniversalUrl(e,t,r){if(!b.isHttpUrl(e))return this.formatNativeUrl(e,t,r);let i=e;return e.endsWith("/")&&(i=e.slice(0,-1)),this.setWalletConnectDeepLink(i,r),`${i}/wc?uri=${encodeURIComponent(t)}`},wait:async e=>new Promise((t=>{setTimeout(t,e)})),openHref(e,t="_self"){window.open(e,t,"noreferrer noopener")},setWalletConnectDeepLink(e,t){localStorage.setItem(b.WALLETCONNECT_DEEPLINK_CHOICE,JSON.stringify({href:e,name:t}))},setWalletConnectAndroidDeepLink(e){const[t]=e.split("?");localStorage.setItem(b.WALLETCONNECT_DEEPLINK_CHOICE,JSON.stringify({href:t,name:"Android"}))},removeWalletConnectDeepLink(){localStorage.removeItem(b.WALLETCONNECT_DEEPLINK_CHOICE)},isNull:e=>null===e},w=u({projectId:void 0,themeMode:typeof matchMedia<"u"&&matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light",themeColor:"default",themeBackground:b.isMobile()?"themeColor":"gradient",themeZIndex:89,mobileWallets:void 0,desktopWallets:void 0,walletImages:void 0,chainImages:void 0,tokenImages:void 0,standaloneChains:void 0,enableStandaloneMode:!1,enableNetworkView:!1,defaultChain:void 0,explorerAllowList:void 0,explorerDenyList:void 0,termsOfServiceUrl:void 0,privacyPolicyUrl:void 0}),y={state:w,subscribe:e=>d(w,(()=>e(w))),setConfig(e){var t,r,i,n;if(g.setStandaloneChains(e.standaloneChains),g.setIsStandalone(Boolean(null==(t=e.standaloneChains)?void 0:t.length)||Boolean(e.enableStandaloneMode)),g.setIsCustomMobile(Boolean(null==(r=e.mobileWallets)?void 0:r.length)),g.setIsCustomDesktop(Boolean(null==(i=e.desktopWallets)?void 0:i.length)),g.setIsExplorer(Boolean(null==(n=e.projectId)?void 0:n.length)),e.defaultChain)g.setSelectedChain(e.defaultChain);else if(!g.state.isStandalone){const e=v.client().getDefaultChain();g.setSelectedChain(e)}Object.assign(w,e)},setThemeConfig(e){Object.assign(w,e)}},_="https://explorer-api.walletconnect.com",E={async fetchWallets(e,t){const r=function(e){const t=Object.fromEntries(Object.entries(e).filter((([e,t])=>typeof t<"u"&&null!==t&&""!==t)).map((([e,t])=>[e,t.toString()])));return new URLSearchParams(t).toString()}(t),i=`${_}/v3/wallets?projectId=${e}&${r}`;return(await fetch(i)).json()},formatImageUrl:(e,t)=>`${_}/v3/logo/lg/${t}?projectId=${e}`},x=u({wallets:{listings:[],total:0,page:1},search:{listings:[],total:0,page:1},previewWallets:[],recomendedWallets:[]});function C(){const{projectId:e}=y.state;if(!e)throw new Error("projectId is required to work with explorer api");return e}const S={state:x,async getPreviewWallets(e){const{listings:t}=await E.fetchWallets(C(),e);return x.previewWallets=Object.values(t),x.previewWallets},async getRecomendedWallets(){const{listings:e}=await E.fetchWallets(C(),{page:1,entries:6});x.recomendedWallets=Object.values(e)},async getPaginatedWallets(e){const{page:t,search:r}=e,{listings:i,total:n}=await E.fetchWallets(C(),e),s=Object.values(i),o=r?"search":"wallets";return x[o]={listings:[...x[o].listings,...s],total:n,page:t??1},{listings:s,total:n}},getImageUrl:e=>E.formatImageUrl(C(),e),resetSearch(){x.search={listings:[],total:0,page:1}}},I=u({history:["ConnectWallet"],view:"ConnectWallet",data:void 0}),O={state:I,subscribe:e=>d(I,(()=>e(I))),push(e,t){e!==I.view&&(I.view=e,t&&(I.data=t),I.history.push(e))},replace(e){I.view=e,I.history=[e]},goBack(){if(I.history.length>1){I.history.pop();const[e]=I.history.slice(-1);I.view=e}}},A=u({open:!1}),R={state:A,subscribe:e=>d(A,(()=>e(A))),open(e){var t;null!=e&&e.route&&O.replace(e.route),null!=e&&e.uri&&g.setStandaloneUri(e.uri),null!=(t=e?.standaloneChains)&&t.length&&g.setStandaloneChains(e.standaloneChains),A.open=!0},close(){A.open=!1}},P=u({open:!1,message:"",variant:"success"}),k={state:P,subscribe:e=>d(P,(()=>e(P))),openToast(e,t){P.open=!0,P.message=e,P.variant=t},closeToast(){P.open=!1}};typeof window<"u"&&(window.Buffer||(window.Buffer=p.lW),window.global||(window.global=window),window.process||(window.process={env:{}}))},6030:(e,t,r)=>{"use strict";r.r(t),r.d(t,{W3mAccountButton:()=>Oi,W3mConnectButton:()=>en,W3mCoreButton:()=>sn,W3mModal:()=>vn,W3mNetworkSwitch:()=>En});const i=window,n=i.ShadowRoot&&(void 0===i.ShadyCSS||i.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,s=Symbol(),o=new WeakMap;class a{constructor(e,t,r){if(this._$cssResult$=!0,r!==s)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(n&&void 0===e){const r=void 0!==t&&1===t.length;r&&(e=o.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),r&&o.set(t,e))}return e}toString(){return this.cssText}}const l=(e,...t)=>{const r=1===e.length?e[0]:t.reduce(((t,r,i)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(r)+e[i+1]),e[0]);return new a(r,e,s)},c=n?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const r of e.cssRules)t+=r.cssText;return(e=>new a("string"==typeof e?e:e+"",void 0,s))(t)})(e):e;var h;const u=window,d=u.trustedTypes,p=d?d.emptyScript:"",f=u.reactiveElementPolyfillSupport,g={toAttribute(e,t){switch(t){case Boolean:e=e?p:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let r=e;switch(t){case Boolean:r=null!==e;break;case Number:r=null===e?null:Number(e);break;case Object:case Array:try{r=JSON.parse(e)}catch(e){r=null}}return r}},m=(e,t)=>t!==e&&(t==t||e==e),v={attribute:!0,type:String,converter:g,reflect:!1,hasChanged:m};class b extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(e){var t;this.finalize(),(null!==(t=this.h)&&void 0!==t?t:this.h=[]).push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,r)=>{const i=this._$Ep(r,t);void 0!==i&&(this._$Ev.set(i,r),e.push(i))})),e}static createProperty(e,t=v){if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const r="symbol"==typeof e?Symbol():"__"+e,i=this.getPropertyDescriptor(e,r,t);void 0!==i&&Object.defineProperty(this.prototype,e,i)}}static getPropertyDescriptor(e,t,r){return{get(){return this[t]},set(i){const n=this[e];this[t]=i,this.requestUpdate(e,n,r)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||v}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),void 0!==e.h&&(this.h=[...e.h]),this.elementProperties=new Map(e.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const r of t)this.createProperty(r,e[r])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const r=new Set(e.flat(1/0).reverse());for(const e of r)t.unshift(c(e))}else void 0!==e&&t.push(c(e));return t}static _$Ep(e,t){const r=t.attribute;return!1===r?void 0:"string"==typeof r?r:"string"==typeof e?e.toLowerCase():void 0}u(){var e;this._$E_=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(e=this.constructor.h)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,r;(null!==(t=this._$ES)&&void 0!==t?t:this._$ES=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(r=e.hostConnected)||void 0===r||r.call(e))}removeController(e){var t;null===(t=this._$ES)||void 0===t||t.splice(this._$ES.indexOf(e)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this._$Ei.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return((e,t)=>{n?e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):t.forEach((t=>{const r=document.createElement("style"),n=i.litNonce;void 0!==n&&r.setAttribute("nonce",n),r.textContent=t.cssText,e.appendChild(r)}))})(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,r){this._$AK(e,r)}_$EO(e,t,r=v){var i;const n=this.constructor._$Ep(e,r);if(void 0!==n&&!0===r.reflect){const s=(void 0!==(null===(i=r.converter)||void 0===i?void 0:i.toAttribute)?r.converter:g).toAttribute(t,r.type);this._$El=e,null==s?this.removeAttribute(n):this.setAttribute(n,s),this._$El=null}}_$AK(e,t){var r;const i=this.constructor,n=i._$Ev.get(e);if(void 0!==n&&this._$El!==n){const e=i.getPropertyOptions(n),s="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(r=e.converter)||void 0===r?void 0:r.fromAttribute)?e.converter:g;this._$El=n,this[n]=s.fromAttribute(t,e.type),this._$El=null}}requestUpdate(e,t,r){let i=!0;void 0!==e&&(((r=r||this.constructor.getPropertyOptions(e)).hasChanged||m)(this[e],t)?(this._$AL.has(e)||this._$AL.set(e,t),!0===r.reflect&&this._$El!==e&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(e,r))):i=!1),!this.isUpdatePending&&i&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((e,t)=>this[t]=e)),this._$Ei=void 0);let t=!1;const r=this._$AL;try{t=this.shouldUpdate(r),t?(this.willUpdate(r),null===(e=this._$ES)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(r)):this._$Ek()}catch(e){throw t=!1,this._$Ek(),e}t&&this._$AE(r)}willUpdate(e){}_$AE(e){var t;null===(t=this._$ES)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(e){return!0}update(e){void 0!==this._$EC&&(this._$EC.forEach(((e,t)=>this._$EO(t,this[t],e))),this._$EC=void 0),this._$Ek()}updated(e){}firstUpdated(e){}}var w;b.finalized=!0,b.elementProperties=new Map,b.elementStyles=[],b.shadowRootOptions={mode:"open"},null==f||f({ReactiveElement:b}),(null!==(h=u.reactiveElementVersions)&&void 0!==h?h:u.reactiveElementVersions=[]).push("1.5.0");const y=window,_=y.trustedTypes,E=_?_.createPolicy("lit-html",{createHTML:e=>e}):void 0,x=`lit$${(Math.random()+"").slice(9)}$`,C="?"+x,S=`<${C}>`,I=document,O=(e="")=>I.createComment(e),A=e=>null===e||"object"!=typeof e&&"function"!=typeof e,R=Array.isArray,P=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,k=/-->/g,N=/>/g,M=RegExp(">|[ \t\n\f\r](?:([^\\s\"'>=/]+)([ \t\n\f\r]*=[ \t\n\f\r]*(?:[^ \t\n\f\r\"'`<>=]|(\"|')|))|$)","g"),T=/'/g,L=/"/g,$=/^(?:script|style|textarea|title)$/i,U=e=>(t,...r)=>({_$litType$:e,strings:t,values:r}),j=U(1),D=U(2),B=Symbol.for("lit-noChange"),z=Symbol.for("lit-nothing"),W=new WeakMap,H=I.createTreeWalker(I,129,null,!1),V=(e,t)=>{const r=e.length-1,i=[];let n,s=2===t?"<svg>":"",o=P;for(let t=0;t<r;t++){const r=e[t];let a,l,c=-1,h=0;for(;h<r.length&&(o.lastIndex=h,l=o.exec(r),null!==l);)h=o.lastIndex,o===P?"!--"===l[1]?o=k:void 0!==l[1]?o=N:void 0!==l[2]?($.test(l[2])&&(n=RegExp("</"+l[2],"g")),o=M):void 0!==l[3]&&(o=M):o===M?">"===l[0]?(o=null!=n?n:P,c=-1):void 0===l[1]?c=-2:(c=o.lastIndex-l[2].length,a=l[1],o=void 0===l[3]?M:'"'===l[3]?L:T):o===L||o===T?o=M:o===k||o===N?o=P:(o=M,n=void 0);const u=o===M&&e[t+1].startsWith("/>")?" ":"";s+=o===P?r+S:c>=0?(i.push(a),r.slice(0,c)+"$lit$"+r.slice(c)+x+u):r+x+(-2===c?(i.push(void 0),t):u)}const a=s+(e[r]||"<?>")+(2===t?"</svg>":"");if(!Array.isArray(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==E?E.createHTML(a):a,i]};class F{constructor({strings:e,_$litType$:t},r){let i;this.parts=[];let n=0,s=0;const o=e.length-1,a=this.parts,[l,c]=V(e,t);if(this.el=F.createElement(l,r),H.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(i=H.nextNode())&&a.length<o;){if(1===i.nodeType){if(i.hasAttributes()){const e=[];for(const t of i.getAttributeNames())if(t.endsWith("$lit$")||t.startsWith(x)){const r=c[s++];if(e.push(t),void 0!==r){const e=i.getAttribute(r.toLowerCase()+"$lit$").split(x),t=/([.?@])?(.*)/.exec(r);a.push({type:1,index:n,name:t[2],strings:e,ctor:"."===t[1]?G:"?"===t[1]?X:"@"===t[1]?Q:Z})}else a.push({type:6,index:n})}for(const t of e)i.removeAttribute(t)}if($.test(i.tagName)){const e=i.textContent.split(x),t=e.length-1;if(t>0){i.textContent=_?_.emptyScript:"";for(let r=0;r<t;r++)i.append(e[r],O()),H.nextNode(),a.push({type:2,index:++n});i.append(e[t],O())}}}else if(8===i.nodeType)if(i.data===C)a.push({type:2,index:n});else{let e=-1;for(;-1!==(e=i.data.indexOf(x,e+1));)a.push({type:7,index:n}),e+=x.length-1}n++}}static createElement(e,t){const r=I.createElement("template");return r.innerHTML=e,r}}function q(e,t,r=e,i){var n,s,o,a;if(t===B)return t;let l=void 0!==i?null===(n=r._$Co)||void 0===n?void 0:n[i]:r._$Cl;const c=A(t)?void 0:t._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(s=null==l?void 0:l._$AO)||void 0===s||s.call(l,!1),void 0===c?l=void 0:(l=new c(e),l._$AT(e,r,i)),void 0!==i?(null!==(o=(a=r)._$Co)&&void 0!==o?o:a._$Co=[])[i]=l:r._$Cl=l),void 0!==l&&(t=q(e,l._$AS(e,t.values),l,i)),t}class K{constructor(e,t){this.u=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}v(e){var t;const{el:{content:r},parts:i}=this._$AD,n=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:I).importNode(r,!0);H.currentNode=n;let s=H.nextNode(),o=0,a=0,l=i[0];for(;void 0!==l;){if(o===l.index){let t;2===l.type?t=new J(s,s.nextSibling,this,e):1===l.type?t=new l.ctor(s,l.name,l.strings,this,e):6===l.type&&(t=new ee(s,this,e)),this.u.push(t),l=i[++a]}o!==(null==l?void 0:l.index)&&(s=H.nextNode(),o++)}return n}p(e){let t=0;for(const r of this.u)void 0!==r&&(void 0!==r.strings?(r._$AI(e,r,t),t+=r.strings.length-2):r._$AI(e[t])),t++}}class J{constructor(e,t,r,i){var n;this.type=2,this._$AH=z,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=r,this.options=i,this._$Cm=null===(n=null==i?void 0:i.isConnected)||void 0===n||n}get _$AU(){var e,t;return null!==(t=null===(e=this._$AM)||void 0===e?void 0:e._$AU)&&void 0!==t?t:this._$Cm}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===e.nodeType&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=q(this,e,t),A(e)?e===z||null==e||""===e?(this._$AH!==z&&this._$AR(),this._$AH=z):e!==this._$AH&&e!==B&&this.g(e):void 0!==e._$litType$?this.$(e):void 0!==e.nodeType?this.T(e):(e=>R(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]))(e)?this.k(e):this.g(e)}O(e,t=this._$AB){return this._$AA.parentNode.insertBefore(e,t)}T(e){this._$AH!==e&&(this._$AR(),this._$AH=this.O(e))}g(e){this._$AH!==z&&A(this._$AH)?this._$AA.nextSibling.data=e:this.T(I.createTextNode(e)),this._$AH=e}$(e){var t;const{values:r,_$litType$:i}=e,n="number"==typeof i?this._$AC(e):(void 0===i.el&&(i.el=F.createElement(i.h,this.options)),i);if((null===(t=this._$AH)||void 0===t?void 0:t._$AD)===n)this._$AH.p(r);else{const e=new K(n,this),t=e.v(this.options);e.p(r),this.T(t),this._$AH=e}}_$AC(e){let t=W.get(e.strings);return void 0===t&&W.set(e.strings,t=new F(e)),t}k(e){R(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let r,i=0;for(const n of e)i===t.length?t.push(r=new J(this.O(O()),this.O(O()),this,this.options)):r=t[i],r._$AI(n),i++;i<t.length&&(this._$AR(r&&r._$AB.nextSibling,i),t.length=i)}_$AR(e=this._$AA.nextSibling,t){var r;for(null===(r=this._$AP)||void 0===r||r.call(this,!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){var t;void 0===this._$AM&&(this._$Cm=e,null===(t=this._$AP)||void 0===t||t.call(this,e))}}class Z{constructor(e,t,r,i,n){this.type=1,this._$AH=z,this._$AN=void 0,this.element=e,this.name=t,this._$AM=i,this.options=n,r.length>2||""!==r[0]||""!==r[1]?(this._$AH=Array(r.length-1).fill(new String),this.strings=r):this._$AH=z}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(e,t=this,r,i){const n=this.strings;let s=!1;if(void 0===n)e=q(this,e,t,0),s=!A(e)||e!==this._$AH&&e!==B,s&&(this._$AH=e);else{const i=e;let o,a;for(e=n[0],o=0;o<n.length-1;o++)a=q(this,i[r+o],t,o),a===B&&(a=this._$AH[o]),s||(s=!A(a)||a!==this._$AH[o]),a===z?e=z:e!==z&&(e+=(null!=a?a:"")+n[o+1]),this._$AH[o]=a}s&&!i&&this.j(e)}j(e){e===z?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=e?e:"")}}class G extends Z{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===z?void 0:e}}const Y=_?_.emptyScript:"";class X extends Z{constructor(){super(...arguments),this.type=4}j(e){e&&e!==z?this.element.setAttribute(this.name,Y):this.element.removeAttribute(this.name)}}class Q extends Z{constructor(e,t,r,i,n){super(e,t,r,i,n),this.type=5}_$AI(e,t=this){var r;if((e=null!==(r=q(this,e,t,0))&&void 0!==r?r:z)===B)return;const i=this._$AH,n=e===z&&i!==z||e.capture!==i.capture||e.once!==i.once||e.passive!==i.passive,s=e!==z&&(i===z||n);n&&this.element.removeEventListener(this.name,this,i),s&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){var t,r;"function"==typeof this._$AH?this._$AH.call(null!==(r=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==r?r:this.element,e):this._$AH.handleEvent(e)}}class ee{constructor(e,t,r){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=r}get _$AU(){return this._$AM._$AU}_$AI(e){q(this,e)}}const te=y.litHtmlPolyfillSupport;var re,ie;null==te||te(F,J),(null!==(w=y.litHtmlVersions)&&void 0!==w?w:y.litHtmlVersions=[]).push("2.5.0");class ne extends b{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var e,t;const r=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=r.firstChild),r}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=((e,t,r)=>{var i,n;const s=null!==(i=null==r?void 0:r.renderBefore)&&void 0!==i?i:t;let o=s._$litPart$;if(void 0===o){const e=null!==(n=null==r?void 0:r.renderBefore)&&void 0!==n?n:null;s._$litPart$=o=new J(t.insertBefore(O(),e),e,void 0,null!=r?r:{})}return o._$AI(e),o})(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this._$Do)||void 0===e||e.setConnected(!1)}render(){return B}}ne.finalized=!0,ne._$litElement$=!0,null===(re=globalThis.litElementHydrateSupport)||void 0===re||re.call(globalThis,{LitElement:ne});const se=globalThis.litElementPolyfillSupport;null==se||se({LitElement:ne}),(null!==(ie=globalThis.litElementVersions)&&void 0!==ie?ie:globalThis.litElementVersions=[]).push("3.2.2");const oe=e=>t=>"function"==typeof t?((e,t)=>(customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:r,elements:i}=t;return{kind:r,elements:i,finisher(t){customElements.define(e,t)}}})(e,t),ae=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?{...t,finisher(r){r.createProperty(t.key,e)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:t.key,initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(r){r.createProperty(t.key,e)}};function le(e){return(t,r)=>void 0!==r?((e,t,r)=>{t.constructor.createProperty(r,e)})(e,t,r):ae(e,t)}function ce(e){return le({...e,state:!0})}var he;null===(he=window.HTMLSlotElement)||void 0===he||he.prototype.assignedElements;var ue=r(9342);class de{constructor(e){}get _$AU(){return this._$AM._$AU}_$AT(e,t,r){this._$Ct=e,this._$AM=t,this._$Ci=r}_$AS(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}const pe=(we=class extends de{constructor(e){var t;if(super(e),1!==e.type||"class"!==e.name||(null===(t=e.strings)||void 0===t?void 0:t.length)>2)throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.")}render(e){return" "+Object.keys(e).filter((t=>e[t])).join(" ")+" "}update(e,[t]){var r,i;if(void 0===this.nt){this.nt=new Set,void 0!==e.strings&&(this.st=new Set(e.strings.join(" ").split(/\s/).filter((e=>""!==e))));for(const e in t)t[e]&&!(null===(r=this.st)||void 0===r?void 0:r.has(e))&&this.nt.add(e);return this.render(t)}const n=e.element.classList;this.nt.forEach((e=>{e in t||(n.remove(e),this.nt.delete(e))}));for(const e in t){const r=!!t[e];r===this.nt.has(e)||(null===(i=this.st)||void 0===i?void 0:i.has(e))||(r?(n.add(e),this.nt.add(e)):(n.remove(e),this.nt.delete(e)))}return B}},(...e)=>({_$litDirective$:we,values:e})),fe={duration:.3,delay:0,endDelay:0,repeat:0,easing:"ease"},ge=e=>1e3*e,me=e=>e/1e3,ve=()=>{},be=e=>e;var we;function ye(e,t=!0){if(e&&"finished"!==e.playState)try{e.stop?e.stop():(t&&e.commitStyles(),e.cancel())}catch(e){}}const _e=e=>e(),Ee=(e,t,r=fe.duration)=>new Proxy({animations:e.map(_e).filter(Boolean),duration:r,options:t},xe),xe={get:(e,t)=>{const r=e.animations[0];switch(t){case"duration":return e.duration;case"currentTime":return me((null==r?void 0:r[t])||0);case"playbackRate":case"playState":return null==r?void 0:r[t];case"finished":return e.finished||(e.finished=Promise.all(e.animations.map(Ce)).catch(ve)),e.finished;case"stop":return()=>{e.animations.forEach((e=>ye(e)))};case"forEachNative":return t=>{e.animations.forEach((r=>t(r,e)))};default:return void 0===(null==r?void 0:r[t])?void 0:()=>e.animations.forEach((e=>e[t]()))}},set:(e,t,r)=>{switch(t){case"currentTime":r=ge(r);case"currentTime":case"playbackRate":for(let i=0;i<e.animations.length;i++)e.animations[i][t]=r;return!0}return!1}},Ce=e=>e.finished,Se=e=>"object"==typeof e&&Boolean(e.createAnimation),Ie=e=>"number"==typeof e,Oe=e=>Array.isArray(e)&&!Ie(e[0]),Ae=(e,t,r)=>-r*e+r*t+e,Re=(e,t,r)=>t-e==0?1:(r-e)/(t-e);function Pe(e,t){const r=e[e.length-1];for(let i=1;i<=t;i++){const n=Re(0,t,i);e.push(Ae(r,1,n))}}const ke=(e,t,r)=>Math.min(Math.max(r,e),t);const Ne=(e,t,r)=>(((1-3*r+3*t)*e+(3*r-6*t))*e+3*t)*e;function Me(e,t,r,i){if(e===t&&r===i)return be;return n=>0===n||1===n?n:Ne(function(e,t,r,i,n){let s,o,a=0;do{o=t+(r-t)/2,s=Ne(o,i,n)-e,s>0?r=o:t=o}while(Math.abs(s)>1e-7&&++a<12);return o}(n,0,1,e,r),t,i)}const Te=e=>"function"==typeof e,Le=e=>Array.isArray(e)&&Ie(e[0]),$e={ease:Me(.25,.1,.25,1),"ease-in":Me(.42,0,1,1),"ease-in-out":Me(.42,0,.58,1),"ease-out":Me(0,0,.58,1)},Ue=/\((.*?)\)/;function je(e){if(Te(e))return e;if(Le(e))return Me(...e);if($e[e])return $e[e];if(e.startsWith("steps")){const t=Ue.exec(e);if(t){const e=t[1].split(",");return((e,t="end")=>r=>{const i=(r="end"===t?Math.min(r,.999):Math.max(r,.001))*e,n="end"===t?Math.floor(i):Math.ceil(i);return ke(0,1,n/e)})(parseFloat(e[0]),e[1].trim())}}return be}class De{constructor(e,t=[0,1],{easing:r,duration:i=fe.duration,delay:n=fe.delay,endDelay:s=fe.endDelay,repeat:o=fe.repeat,offset:a,direction:l="normal"}={}){if(this.startTime=null,this.rate=1,this.t=0,this.cancelTimestamp=null,this.easing=be,this.duration=0,this.totalDuration=0,this.repeat=0,this.playState="idle",this.finished=new Promise(((e,t)=>{this.resolve=e,this.reject=t})),r=r||fe.easing,Se(r)){const e=r.createAnimation(t);r=e.easing,t=e.keyframes||t,i=e.duration||i}this.repeat=o,this.easing=Oe(r)?be:je(r),this.updateDuration(i);const c=function(e,t=function(e){const t=[0];return Pe(t,e-1),t}(e.length),r=be){const i=e.length,n=i-t.length;return n>0&&Pe(t,n),n=>{let s=0;for(;s<i-2&&!(n<t[s+1]);s++);let o=ke(0,1,Re(t[s],t[s+1],n));const a=function(e,t){return Oe(e)?e[((e,t,r)=>{const i=t-0;return((r-0)%i+i)%i+0})(0,e.length,t)]:e}(r,s);return o=a(o),Ae(e[s],e[s+1],o)}}(t,a,Oe(r)?r.map(je):be);this.tick=t=>{var r;let i=0;i=void 0!==this.pauseTime?this.pauseTime:(t-this.startTime)*this.rate,this.t=i,i/=1e3,i=Math.max(i-n,0),"finished"===this.playState&&void 0===this.pauseTime&&(i=this.totalDuration);const o=i/this.duration;let a=Math.floor(o),h=o%1;!h&&o>=1&&(h=1),1===h&&a--;const u=a%2;("reverse"===l||"alternate"===l&&u||"alternate-reverse"===l&&!u)&&(h=1-h);const d=i>=this.totalDuration?1:Math.min(h,1),p=c(this.easing(d));e(p),void 0===this.pauseTime&&("finished"===this.playState||i>=this.totalDuration+s)?(this.playState="finished",null===(r=this.resolve)||void 0===r||r.call(this,p)):"idle"!==this.playState&&(this.frameRequestId=requestAnimationFrame(this.tick))},this.play()}play(){const e=performance.now();this.playState="running",void 0!==this.pauseTime?this.startTime=e-this.pauseTime:this.startTime||(this.startTime=e),this.cancelTimestamp=this.startTime,this.pauseTime=void 0,this.frameRequestId=requestAnimationFrame(this.tick)}pause(){this.playState="paused",this.pauseTime=this.t}finish(){this.playState="finished",this.tick(0)}stop(){var e;this.playState="idle",void 0!==this.frameRequestId&&cancelAnimationFrame(this.frameRequestId),null===(e=this.reject)||void 0===e||e.call(this,!1)}cancel(){this.stop(),this.tick(this.cancelTimestamp)}reverse(){this.rate*=-1}commitStyles(){}updateDuration(e){this.duration=e,this.totalDuration=e*(this.repeat+1)}get currentTime(){return this.t}set currentTime(e){void 0!==this.pauseTime||0===this.rate?this.pauseTime=e:this.startTime=performance.now()-e/this.rate}get playbackRate(){return this.rate}set playbackRate(e){this.rate=e}}class Be{setAnimation(e){this.animation=e,null==e||e.finished.then((()=>this.clearAnimation())).catch((()=>{}))}clearAnimation(){this.animation=this.generator=void 0}}const ze=new WeakMap;function We(e){return ze.has(e)||ze.set(e,{transforms:[],values:new Map}),ze.get(e)}const He=["","X","Y","Z"],Ve={x:"translateX",y:"translateY",z:"translateZ"},Fe={syntax:"<angle>",initialValue:"0deg",toDefaultUnit:e=>e+"deg"},qe={translate:{syntax:"<length-percentage>",initialValue:"0px",toDefaultUnit:e=>e+"px"},rotate:Fe,scale:{syntax:"<number>",initialValue:1,toDefaultUnit:be},skew:Fe},Ke=new Map,Je=e=>`--motion-${e}`,Ze=["x","y","z"];["translate","scale","rotate","skew"].forEach((e=>{He.forEach((t=>{Ze.push(e+t),Ke.set(Je(e+t),qe[e])}))}));const Ge=(e,t)=>Ze.indexOf(e)-Ze.indexOf(t),Ye=new Set(Ze),Xe=e=>Ye.has(e),Qe=(e,t)=>`${e} ${t}(var(${Je(t)}))`,et=e=>e.startsWith("--"),tt=new Set,rt=(e,t)=>document.createElement("div").animate(e,t),it={cssRegisterProperty:()=>"undefined"!=typeof CSS&&Object.hasOwnProperty.call(CSS,"registerProperty"),waapi:()=>Object.hasOwnProperty.call(Element.prototype,"animate"),partialKeyframes:()=>{try{rt({opacity:[1]})}catch(e){return!1}return!0},finished:()=>Boolean(rt({opacity:[0,1]},{duration:.001}).finished),linearEasing:()=>{try{rt({opacity:0},{easing:"linear(0, 1)"})}catch(e){return!1}return!0}},nt={},st={};for(const e in it)st[e]=()=>(void 0===nt[e]&&(nt[e]=it[e]()),nt[e]);const ot=(e,t)=>Te(e)?st.linearEasing()?`linear(${((e,t)=>{let r="";const i=Math.round(t/.015);for(let t=0;t<i;t++)r+=e(Re(0,i-1,t))+", ";return r.substring(0,r.length-2)})(e,t)})`:fe.easing:Le(e)?at(e):e,at=([e,t,r,i])=>`cubic-bezier(${e}, ${t}, ${r}, ${i})`;function lt(e){return Ve[e]&&(e=Ve[e]),Xe(e)?Je(e):e}const ct=(e,t,r)=>{t=lt(t),et(t)?e.style.setProperty(t,r):e.style[t]=r},ht=e=>"string"==typeof e;function ut(e,t){var r;let i=(null==t?void 0:t.toDefaultUnit)||be;const n=e[e.length-1];if(ht(n)){const e=(null===(r=n.match(/(-?[\d.]+)([a-z%]*)/))||void 0===r?void 0:r[2])||"";e&&(i=t=>t+e)}return i}function dt(e,t,r,i={},n){const s=window.__MOTION_DEV_TOOLS_RECORD,o=!1!==i.record&&s;let a,{duration:l=fe.duration,delay:c=fe.delay,endDelay:h=fe.endDelay,repeat:u=fe.repeat,easing:d=fe.easing,persist:p=!1,direction:f,offset:g,allowWebkitAcceleration:m=!1}=i;const v=We(e),b=Xe(t);let w=st.waapi();b&&((e,t)=>{Ve[t]&&(t=Ve[t]);const{transforms:r}=We(e);var i,n;n=t,-1===(i=r).indexOf(n)&&i.push(n),e.style.transform=(e=>e.sort(Ge).reduce(Qe,"").trim())(r)})(e,t);const y=lt(t),_=function(e,t){return e.has(t)||e.set(t,new Be),e.get(t)}(v.values,y),E=Ke.get(y);return ye(_.animation,!(Se(d)&&_.generator)&&!1!==i.record),()=>{const v=()=>{var t,r;return null!==(r=null!==(t=((e,t)=>{t=lt(t);let r=et(t)?e.style.getPropertyValue(t):getComputedStyle(e)[t];if(!r&&0!==r){const e=Ke.get(t);e&&(r=e.initialValue)}return r})(e,y))&&void 0!==t?t:null==E?void 0:E.initialValue)&&void 0!==r?r:0};let x=function(e,t){for(let r=0;r<e.length;r++)null===e[r]&&(e[r]=r?e[r-1]:t());return e}((e=>Array.isArray(e)?e:[e])(r),v);const C=ut(x,E);if(Se(d)){const e=d.createAnimation(x,"opacity"!==t,v,y,_);d=e.easing,x=e.keyframes||x,l=e.duration||l}if(et(y)&&(st.cssRegisterProperty()?function(e){if(!tt.has(e)){tt.add(e);try{const{syntax:t,initialValue:r}=Ke.has(e)?Ke.get(e):{};CSS.registerProperty({name:e,inherits:!1,syntax:t,initialValue:r})}catch(e){}}}(y):w=!1),b&&!st.linearEasing()&&(Te(d)||Oe(d)&&d.some(Te))&&(w=!1),w){E&&(x=x.map((e=>Ie(e)?E.toDefaultUnit(e):e))),1!==x.length||st.partialKeyframes()&&!o||x.unshift(v());const t={delay:ge(c),duration:ge(l),endDelay:ge(h),easing:Oe(d)?void 0:ot(d,l),direction:f,iterations:u+1,fill:"both"};a=e.animate({[y]:x,offset:g,easing:Oe(d)?d.map((e=>ot(e,l))):void 0},t),a.finished||(a.finished=new Promise(((e,t)=>{a.onfinish=e,a.oncancel=t})));const r=x[x.length-1];a.finished.then((()=>{p||(ct(e,y,r),a.cancel())})).catch(ve),m||(a.playbackRate=1.000001)}else if(n&&b)x=x.map((e=>"string"==typeof e?parseFloat(e):e)),1===x.length&&x.unshift(parseFloat(v())),a=new n((t=>{ct(e,y,C?C(t):t)}),x,Object.assign(Object.assign({},i),{duration:l,easing:d}));else{const t=x[x.length-1];ct(e,y,E&&Ie(t)?E.toDefaultUnit(t):t)}return o&&s(e,t,x,{duration:l,delay:c,easing:d,repeat:u,offset:g},"motion-one"),_.setAnimation(a),a}}const pt=(e,t)=>e[t]?Object.assign(Object.assign({},e),e[t]):Object.assign({},e);function ft(e,t,r){return Te(e)?e(t,r):e}const gt=(mt=De,function(e,t,r={}){const i=(e=function(e,t){return"string"==typeof e?e=document.querySelectorAll(e):e instanceof Element&&(e=[e]),Array.from(e||[])}(e)).length,n=[];for(let s=0;s<i;s++){const o=e[s];for(const e in t){const a=pt(r,e);a.delay=ft(a.delay,s,i);const l=dt(o,e,t[e],a,mt);n.push(l)}}return Ee(n,r,r.duration)});var mt;function vt(e,t={}){return Ee([()=>{const r=new De(e,[0,1],t);return r.finished.catch((()=>{})),r}],t,t.duration)}function bt(e,t,r){return(Te(e)?vt:gt)(e,t,r)}function wt(e,t,r){const i=Math.max(t-5,0);return n=r-e(i),(s=t-i)?n*(1e3/s):0;var n,s}function yt(e){return Ie(e)&&!isNaN(e)}function _t(e){return ht(e)?parseFloat(e):e}const Et=function(e){const t=new WeakMap;return(e={})=>{const r=new Map,i=(t=0,i=100,n=0,s=!1)=>{const o=`${t}-${i}-${n}-${s}`;return r.has(o)||r.set(o,(({stiffness:e=100,damping:t=10,mass:r=1,from:i=0,to:n=1,velocity:s=0,restSpeed:o=2,restDistance:a=.5}={})=>{s=s?me(s):0;const l={done:!1,hasReachedTarget:!1,current:i,target:n},c=n-i,h=Math.sqrt(e/r)/1e3,u=((e=100,t=10,r=1)=>t/(2*Math.sqrt(e*r)))(e,t,r);let d;if(u<1){const e=h*Math.sqrt(1-u*u);d=t=>n-Math.exp(-u*h*t)*((u*h*c-s)/e*Math.sin(e*t)+c*Math.cos(e*t))}else d=e=>n-Math.exp(-h*e)*(c+(h*c-s)*e);return e=>{l.current=d(e);const t=0===e?s:wt(d,e,l.current),r=Math.abs(t)<=o,c=Math.abs(n-l.current)<=a;var h,u,p;return l.done=r&&c,l.hasReachedTarget=(h=i,u=n,p=l.current,h<u&&p>=u||h>u&&p<=u),l}})(Object.assign({from:t,to:i,velocity:n,restSpeed:s?.05:2,restDistance:s?.01:.5},e))),r.get(o)},n=(e,r)=>(t.has(e)||t.set(e,function(e,t=be){let r,i=10,n=e(0);const s=[t(n.current)];for(;!n.done&&i<1e4;)n=e(i),s.push(t(n.done?n.target:n.current)),void 0===r&&n.hasReachedTarget&&(r=i),i+=10;const o=i-10;return 1===s.length&&s.push(n.current),{keyframes:s,duration:o/1e3,overshootDuration:(null!=r?r:o)/1e3}}(e,r)),t.get(e));return{createAnimation:(e,t=!0,r,s,o)=>{let a,l,c,h=0,u=be;const d=e.length;if(t)if(u=ut(e,s?Ke.get(lt(s)):void 0),c=_t(e[d-1]),d>1&&null!==e[0])l=_t(e[0]);else{const e=null==o?void 0:o.generator;if(e){const{animation:t,generatorStartTime:r}=o,i=(null==t?void 0:t.startTime)||r||0,n=(null==t?void 0:t.currentTime)||performance.now()-i,s=e(n).current;l=s,h=wt((t=>e(t).current),n,s)}else r&&(l=_t(r()))}if(yt(l)&&yt(c)){const e=i(l,c,h,null==s?void 0:s.includes("scale"));a=Object.assign(Object.assign({},n(e,u)),{easing:"linear"}),o&&(o.generator=e,o.generatorStartTime=performance.now())}return a||(a={easing:"ease",duration:n(i(0,100)).overshootDuration}),a}}}}(),xt=e=>null!=e?e:z;var Ct=r(4249),St=Object.defineProperty,It=Object.getOwnPropertySymbols,Ot=Object.prototype.hasOwnProperty,At=Object.prototype.propertyIsEnumerable,Rt=(e,t,r)=>t in e?St(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Pt=(e,t)=>{for(var r in t||(t={}))Ot.call(t,r)&&Rt(e,r,t[r]);if(It)for(var r of It(t))At.call(t,r)&&Rt(e,r,t[r]);return e};const kt={color(){var e,t;const r=null!=(e=ue.t0.state.themeColor)?e:"default",i=null!=(t=ue.t0.state.themeMode)?t:"dark",n={default:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(51,150,255)",background:"rgb(232,242,252)"},dark:{inverse:"rgb(255,255,255)",foreground:"rgb(71,161,255)",background:"rgb(21,38,55)"}},magenta:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(198,83,128)",background:"rgb(244,221,230)"},dark:{inverse:"rgb(255,255,255)",foreground:"rgb(203,77,140)",background:"rgb(57,35,43)"}},blue:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(61,92,245)",background:"rgb(232,235,252)"},dark:{inverse:"rgb(255,255,255)",foreground:"rgb(81,109,251)",background:"rgb(28,33,59)"}},orange:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(234,140,46)",background:"rgb(244,236,221)"},dark:{inverse:"rgb(0,0,0)",foreground:"rgb(255,166,76)",background:"rgb(57,50,34)"}},green:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(38,181,98)",background:"rgb(218,246,218)"},dark:{inverse:"rgb(0,0,0)",foreground:"rgb(38,217,98)",background:"rgb(35,52,40)"}},purple:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(121,76,255)",background:"rgb(225,218,246)"},dark:{inverse:"rgb(255,255,255)",foreground:"rgb(144,110,247)",background:"rgb(36,31,51)"}},teal:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(43,182,182)",background:"rgb(217,242,238)"},dark:{inverse:"rgb(0,0,0)",foreground:"rgb(54,226,226)",background:"rgb(29,48,52)"}},blackWhite:{light:{inverse:"rgb(255,255,255)",foreground:"rgb(20,20,20)",background:"rgb(255,255,255)"},dark:{inverse:"rgb(0,0,0)",foreground:"rgb(255,255,255)",background:"rgb(20,20,20)"}}}[r][i],s={light:{foreground:{1:"rgb(20,20,20)",2:"rgb(121,134,134)",3:"rgb(158,169,169)"},background:{1:"rgb(255,255,255)",2:"rgb(241,243,243)",3:"rgb(228,231,231)"},overlay:"rgba(0,0,0,0.1)"},dark:{foreground:{1:"rgb(228,231,231)",2:"rgb(148,158,158)",3:"rgb(110,119,119)"},background:{1:"rgb(20,20,20)",2:"rgb(39,42,42)",3:"rgb(59,64,64)"},overlay:"rgba(255,255,255,0.1"}}[i],o={default:{1:"#B6B9C9",2:"#C653C6",3:"#794DFF",4:"#2EB8B8"},blue:{1:"#E8EBFD",2:"#C653C6",3:"#2DD2C5",4:"#3D5CF5"},magenta:{1:"#F4DDE6",2:"#E0D452",3:"#F09475",4:"#D1618D"},orange:{1:"#F4ECDD",2:"#B4EB47",3:"#3075E8",4:"#EB9947"},green:{1:"#DAF6DA",2:"#E06B92",3:"#99E54D",4:"#26B562"},purple:{1:"#E1DAF6",2:"#EB9947",3:"#E06B92",4:"#794DFF"},teal:{1:"#D9F2EE",2:"#F09475",3:"#794DFF",4:"#2EB8B8"},blackWhite:{1:"#E3E8E8",2:"#98AEAE",3:"#516767",4:"#242E2E"}}[r];return{foreground:Pt({accent:n.foreground,inverse:n.inverse},s.foreground),background:Pt({accent:n.background},s.background),gradient:o,overlay:s.overlay,error:"rgb(242, 90, 103)"}},setTheme(){const e=document.querySelector(":root"),{themeZIndex:t}=ue.t0.state;if(e){const r={"--color-fg-accent":kt.color().foreground.accent,"--color-fg-inverse":kt.color().foreground.inverse,"--color-fg-1":kt.color().foreground[1],"--color-fg-2":kt.color().foreground[2],"--color-fg-3":kt.color().foreground[3],"--color-bg-1":kt.color().background[1],"--color-bg-2":kt.color().background[2],"--color-bg-3":kt.color().background[3],"--color-overlay":kt.color().overlay,"--color-err":kt.color().error,"--color-success":"rgb(38,181,98)","--gradient-1":kt.color().gradient[1],"--gradient-2":kt.color().gradient[2],"--gradient-3":kt.color().gradient[3],"--gradient-4":kt.color().gradient[4],"--modal-z-index":`${t}`};Object.entries(r).forEach((([t,r])=>e.style.setProperty(t,r)))}},globalCss:l`*,::after,::before{margin:0;padding:0;box-sizing:border-box;font-style:normal;text-rendering:optimizeSpeed;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-tap-highlight-color:transparent;backface-visibility:hidden}button{cursor:pointer;display:flex;justify-content:center;align-items:center;position:relative;border:none;background-color:transparent}button::after{content:'';position:absolute;inset:0;transition:background-color,.2s ease}button:disabled{cursor:not-allowed}button svg,button w3m-text{position:relative;z-index:1}input{border:none;outline:0;appearance:none}img{display:block}::selection{color:var(--color-fg-inverse);background:var(--color-fg-accent)}`},Nt=l`button{display:flex;border-radius:10px;flex-direction:column;transition:background-color .2s ease;justify-content:center;padding:5px;width:100px}button:hover{background-color:var(--color-overlay)}button>div{display:flex;justify-content:center;align-items:center;width:32px;height:32px;box-shadow:inset 0 0 0 1px var(--color-overlay);background-color:var(--color-fg-accent);border-radius:50%;margin-bottom:4px}button path{fill:var(--color-fg-inverse)}`;var Mt=Object.defineProperty,Tt=Object.getOwnPropertyDescriptor,Lt=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Tt(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Mt(t,r,s),s};let $t=class extends ne{constructor(){super(...arguments),this.icon=void 0,this.label="",this.onClick=()=>null}render(){return j`<button @click="${this.onClick}"><div>${this.icon}</div><w3m-text variant="xsmall-normal" color="accent">${this.label}</w3m-text></button>`}};$t.styles=[kt.globalCss,Nt],Lt([le()],$t.prototype,"icon",2),Lt([le()],$t.prototype,"label",2),Lt([le()],$t.prototype,"onClick",2),$t=Lt([oe("w3m-box-button")],$t);const Ut=l`button{border-radius:28px;height:28px;padding:0 10px;background-color:var(--color-fg-accent)}button path{fill:var(--color-fg-inverse)}button::after{border-radius:inherit;border:1px solid var(--color-overlay)}button:disabled::after{background-color:transparent}.w3m-icon-left svg{margin-right:5px}.w3m-icon-right svg{margin-left:5px}button:hover::after{background-color:var(--color-overlay)}button:disabled{background-color:var(--color-bg-3)}`;var jt=Object.defineProperty,Dt=Object.getOwnPropertyDescriptor,Bt=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Dt(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&jt(t,r,s),s};let zt=class extends ne{constructor(){super(...arguments),this.disabled=!1,this.iconLeft=void 0,this.iconRight=void 0,this.onClick=()=>null}render(){const e={"w3m-icon-left":void 0!==this.iconLeft,"w3m-icon-right":void 0!==this.iconRight};return j`<button class="${pe(e)}" ?disabled="${this.disabled}" @click="${this.onClick}">${this.iconLeft}<w3m-text variant="small-normal" color="inverse"><slot></slot></w3m-text>${this.iconRight}</button>`}};zt.styles=[kt.globalCss,Ut],Bt([le()],zt.prototype,"disabled",2),Bt([le()],zt.prototype,"iconLeft",2),Bt([le()],zt.prototype,"iconRight",2),Bt([le()],zt.prototype,"onClick",2),zt=Bt([oe("w3m-button")],zt);const Wt=l`:host{display:inline-block}button{padding:0 15px;height:40px;border-radius:10px;color:var(--color-fg-inverse);background-color:var(--color-fg-accent)}button::after{content:'';inset:0;position:absolute;background-color:transparent;border-radius:inherit;transition:background-color .2s ease;border:1px solid var(--color-overlay)}button:hover::after{background-color:var(--color-overlay)}button:disabled{padding-bottom:0;background-color:var(--color-bg-3);color:var(--color-fg-3)}`;var Ht=Object.defineProperty,Vt=Object.getOwnPropertyDescriptor,Ft=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Vt(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Ht(t,r,s),s};let qt=class extends ne{constructor(){super(...arguments),this.disabled=!1}render(){return j`<button ?disabled="${this.disabled}"><slot></slot></button>`}};function Kt(e){return[(e>>16&255)/255,(e>>8&255)/255,(255&e)/255]}function Jt(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}qt.styles=[kt.globalCss,Wt],Ft([le()],qt.prototype,"disabled",2),qt=Ft([oe("w3m-button-big")],qt);const Zt={CROSS_ICON:D`<svg width="12" height="12" viewBox="0 0 12 12"><path d="M9.94 11A.75.75 0 1 0 11 9.94L7.414 6.353a.5.5 0 0 1 0-.708L11 2.061A.75.75 0 1 0 9.94 1L6.353 4.586a.5.5 0 0 1-.708 0L2.061 1A.75.75 0 0 0 1 2.06l3.586 3.586a.5.5 0 0 1 0 .708L1 9.939A.75.75 0 1 0 2.06 11l3.586-3.586a.5.5 0 0 1 .708 0L9.939 11Z" fill="#fff"/></svg>`,NOISE_TEXTURE:D`<svg id="w3m-transparent-noise"><filter id="w3m-noise"><feTurbulence type="fractalNoise" baseFrequency="0.8"/></filter><rect width="100%" height="100%" filter="url(#w3m-noise)"/></svg>`,WALLET_CONNECT_LOGO:D`<svg width="178" height="29" viewBox="0 0 178 29" id="w3m-wc-logo"><path d="M10.683 7.926c5.284-5.17 13.85-5.17 19.134 0l.636.623a.652.652 0 0 1 0 .936l-2.176 2.129a.343.343 0 0 1-.478 0l-.875-.857c-3.686-3.607-9.662-3.607-13.348 0l-.937.918a.343.343 0 0 1-.479 0l-2.175-2.13a.652.652 0 0 1 0-.936l.698-.683Zm23.633 4.403 1.935 1.895a.652.652 0 0 1 0 .936l-8.73 8.543a.687.687 0 0 1-.956 0L20.37 17.64a.172.172 0 0 0-.239 0l-6.195 6.063a.687.687 0 0 1-.957 0l-8.73-8.543a.652.652 0 0 1 0-.936l1.936-1.895a.687.687 0 0 1 .957 0l6.196 6.064a.172.172 0 0 0 .239 0l6.195-6.064a.687.687 0 0 1 .957 0l6.196 6.064a.172.172 0 0 0 .24 0l6.195-6.064a.687.687 0 0 1 .956 0ZM48.093 20.948l2.338-9.355c.139-.515.258-1.07.416-1.942.12.872.258 1.427.357 1.942l2.022 9.355h4.181l3.528-13.874h-3.21l-1.943 8.523a24.825 24.825 0 0 0-.456 2.457c-.158-.931-.317-1.625-.495-2.438l-1.883-8.542h-4.201l-2.042 8.542a41.204 41.204 0 0 0-.475 2.438 41.208 41.208 0 0 0-.476-2.438l-1.903-8.542h-3.349l3.508 13.874h4.083ZM63.33 21.304c1.585 0 2.596-.654 3.11-1.605-.059.297-.078.595-.078.892v.357h2.655V15.22c0-2.735-1.248-4.32-4.3-4.32-2.636 0-4.36 1.466-4.52 3.487h2.914c.1-.891.734-1.426 1.705-1.426.911 0 1.407.515 1.407 1.11 0 .435-.258.693-1.03.792l-1.388.159c-2.061.257-3.825 1.01-3.825 3.19 0 1.982 1.645 3.092 3.35 3.092Zm.891-2.041c-.773 0-1.348-.436-1.348-1.19 0-.733.655-1.09 1.645-1.268l.674-.119c.575-.118.892-.218 1.09-.396v.912c0 1.228-.892 2.06-2.06 2.06ZM70.398 7.074v13.874h2.874V7.074h-2.874ZM74.934 7.074v13.874h2.874V7.074h-2.874ZM84.08 21.304c2.735 0 4.5-1.546 4.697-3.567h-2.893c-.139.892-.892 1.387-1.804 1.387-1.228 0-2.12-.99-2.14-2.358h6.897v-.555c0-3.21-1.764-5.312-4.816-5.312-2.933 0-4.994 2.062-4.994 5.173 0 3.37 2.12 5.232 5.053 5.232Zm-2.16-6.421c.119-1.11.932-1.922 2.081-1.922 1.11 0 1.883.772 1.903 1.922H81.92ZM94.92 21.146c.633 0 1.248-.1 1.525-.179v-2.18c-.218.04-.475.06-.693.06-1.05 0-1.427-.595-1.427-1.566v-3.805h2.338v-2.24h-2.338V7.788H91.47v3.448H89.37v2.24h2.1v4.201c0 2.3 1.15 3.469 3.45 3.469ZM104.62 21.304c3.924 0 6.302-2.299 6.599-5.608h-3.111c-.238 1.803-1.506 3.032-3.369 3.032-2.2 0-3.746-1.784-3.746-4.796 0-2.953 1.605-4.638 3.805-4.638 1.883 0 2.953 1.15 3.171 2.834h3.191c-.317-3.448-2.854-5.41-6.342-5.41-3.984 0-7.036 2.695-7.036 7.214 0 4.677 2.676 7.372 6.838 7.372ZM117.449 21.304c2.993 0 5.114-1.882 5.114-5.172 0-3.23-2.121-5.233-5.114-5.233-2.972 0-5.093 2.002-5.093 5.233 0 3.29 2.101 5.172 5.093 5.172Zm0-2.22c-1.327 0-2.18-1.09-2.18-2.952 0-1.903.892-2.973 2.18-2.973 1.308 0 2.2 1.07 2.2 2.973 0 1.862-.872 2.953-2.2 2.953ZM126.569 20.948v-5.689c0-1.208.753-2.1 1.823-2.1 1.011 0 1.606.773 1.606 2.06v5.729h2.873v-6.144c0-2.339-1.229-3.905-3.428-3.905-1.526 0-2.458.734-2.953 1.606a5.31 5.31 0 0 0 .079-.892v-.377h-2.874v9.712h2.874ZM137.464 20.948v-5.689c0-1.208.753-2.1 1.823-2.1 1.011 0 1.606.773 1.606 2.06v5.729h2.873v-6.144c0-2.339-1.228-3.905-3.428-3.905-1.526 0-2.458.734-2.953 1.606a5.31 5.31 0 0 0 .079-.892v-.377h-2.874v9.712h2.874ZM149.949 21.304c2.735 0 4.499-1.546 4.697-3.567h-2.893c-.139.892-.892 1.387-1.804 1.387-1.228 0-2.12-.99-2.14-2.358h6.897v-.555c0-3.21-1.764-5.312-4.816-5.312-2.933 0-4.994 2.062-4.994 5.173 0 3.37 2.12 5.232 5.053 5.232Zm-2.16-6.421c.119-1.11.932-1.922 2.081-1.922 1.11 0 1.883.772 1.903 1.922h-3.984ZM160.876 21.304c3.013 0 4.658-1.645 4.975-4.201h-2.874c-.099 1.07-.713 1.982-2.001 1.982-1.309 0-2.2-1.21-2.2-2.993 0-1.942 1.03-2.933 2.259-2.933 1.209 0 1.803.872 1.883 1.882h2.873c-.218-2.358-1.823-4.142-4.776-4.142-2.874 0-5.153 1.903-5.153 5.193 0 3.25 1.923 5.212 5.014 5.212ZM172.067 21.146c.634 0 1.248-.1 1.526-.179v-2.18c-.218.04-.476.06-.694.06-1.05 0-1.427-.595-1.427-1.566v-3.805h2.339v-2.24h-2.339V7.788h-2.854v3.448h-2.1v2.24h2.1v4.201c0 2.3 1.15 3.469 3.449 3.469Z" fill="#fff"/></svg>`,WALLET_CONNECT_ICON:D`<svg width="28" height="20" viewBox="0 0 28 20"><g clip-path="url(#a)"><path d="M7.386 6.482c3.653-3.576 9.575-3.576 13.228 0l.44.43a.451.451 0 0 1 0 .648L19.55 9.033a.237.237 0 0 1-.33 0l-.606-.592c-2.548-2.496-6.68-2.496-9.228 0l-.648.634a.237.237 0 0 1-.33 0L6.902 7.602a.451.451 0 0 1 0-.647l.483-.473Zm16.338 3.046 1.339 1.31a.451.451 0 0 1 0 .648l-6.035 5.909a.475.475 0 0 1-.662 0L14.083 13.2a.119.119 0 0 0-.166 0l-4.283 4.194a.475.475 0 0 1-.662 0l-6.035-5.91a.451.451 0 0 1 0-.647l1.338-1.31a.475.475 0 0 1 .662 0l4.283 4.194c.046.044.12.044.166 0l4.283-4.194a.475.475 0 0 1 .662 0l4.283 4.194c.046.044.12.044.166 0l4.283-4.194a.475.475 0 0 1 .662 0Z" fill="#000000"/></g><defs><clipPath id="a"><path fill="#ffffff" d="M0 0h28v20H0z"/></clipPath></defs></svg>`,WALLET_CONNECT_ICON_COLORED:D`<svg width="96" height="96" fill="none"><path fill="#fff" d="M25.322 33.597c12.525-12.263 32.83-12.263 45.355 0l1.507 1.476a1.547 1.547 0 0 1 0 2.22l-5.156 5.048a.814.814 0 0 1-1.134 0l-2.074-2.03c-8.737-8.555-22.903-8.555-31.64 0l-2.222 2.175a.814.814 0 0 1-1.134 0l-5.156-5.049a1.547 1.547 0 0 1 0-2.22l1.654-1.62Zm56.019 10.44 4.589 4.494a1.547 1.547 0 0 1 0 2.22l-20.693 20.26a1.628 1.628 0 0 1-2.267 0L48.283 56.632a.407.407 0 0 0-.567 0L33.03 71.012a1.628 1.628 0 0 1-2.268 0L10.07 50.75a1.547 1.547 0 0 1 0-2.22l4.59-4.494a1.628 1.628 0 0 1 2.267 0l14.687 14.38c.156.153.41.153.567 0l14.685-14.38a1.628 1.628 0 0 1 2.268 0l14.687 14.38c.156.153.41.153.567 0l14.686-14.38a1.628 1.628 0 0 1 2.268 0Z"/><path stroke="#000" d="M25.672 33.954c12.33-12.072 32.325-12.072 44.655 0l1.508 1.476a1.047 1.047 0 0 1 0 1.506l-5.157 5.048a.314.314 0 0 1-.434 0l-2.074-2.03c-8.932-8.746-23.409-8.746-32.34 0l-2.222 2.174a.314.314 0 0 1-.434 0l-5.157-5.048a1.047 1.047 0 0 1 0-1.506l1.655-1.62Zm55.319 10.44 4.59 4.494a1.047 1.047 0 0 1 0 1.506l-20.694 20.26a1.128 1.128 0 0 1-1.568 0l-14.686-14.38a.907.907 0 0 0-1.267 0L32.68 70.655a1.128 1.128 0 0 1-1.568 0L10.42 50.394a1.047 1.047 0 0 1 0-1.506l4.59-4.493a1.128 1.128 0 0 1 1.567 0l14.687 14.379a.907.907 0 0 0 1.266 0l-.35-.357.35.357 14.686-14.38a1.128 1.128 0 0 1 1.568 0l14.687 14.38a.907.907 0 0 0 1.267 0l14.686-14.38a1.128 1.128 0 0 1 1.568 0Z"/></svg>`,BACK_ICON:D`<svg width="10" height="18" viewBox="0 0 10 18"><path fill-rule="evenodd" clip-rule="evenodd" d="M8.735.179a.75.75 0 0 1 .087 1.057L2.92 8.192a1.25 1.25 0 0 0 0 1.617l5.902 6.956a.75.75 0 1 1-1.144.97L1.776 10.78a2.75 2.75 0 0 1 0-3.559L7.678.265A.75.75 0 0 1 8.735.18Z" fill="#fff"/></svg>`,COPY_ICON:D`<svg width="24" height="24" fill="none"><path fill="#fff" fill-rule="evenodd" d="M7.01 7.01c.03-1.545.138-2.5.535-3.28A5 5 0 0 1 9.73 1.545C10.8 1 12.2 1 15 1c2.8 0 4.2 0 5.27.545a5 5 0 0 1 2.185 2.185C23 4.8 23 6.2 23 9c0 2.8 0 4.2-.545 5.27a5 5 0 0 1-2.185 2.185c-.78.397-1.735.505-3.28.534l-.001.01c-.03 1.54-.138 2.493-.534 3.27a5 5 0 0 1-2.185 2.186C13.2 23 11.8 23 9 23c-2.8 0-4.2 0-5.27-.545a5 5 0 0 1-2.185-2.185C1 19.2 1 17.8 1 15c0-2.8 0-4.2.545-5.27A5 5 0 0 1 3.73 7.545C4.508 7.149 5.46 7.04 7 7.01h.01ZM15 15.5c-1.425 0-2.403-.001-3.162-.063-.74-.06-1.139-.172-1.427-.319a3.5 3.5 0 0 1-1.53-1.529c-.146-.288-.257-.686-.318-1.427C8.501 11.403 8.5 10.425 8.5 9c0-1.425.001-2.403.063-3.162.06-.74.172-1.139.318-1.427a3.5 3.5 0 0 1 1.53-1.53c.288-.146.686-.257 1.427-.318.759-.062 1.737-.063 3.162-.063 1.425 0 2.403.001 3.162.063.74.06 1.139.172 1.427.318a3.5 3.5 0 0 1 1.53 1.53c.146.288.257.686.318 1.427.062.759.063 1.737.063 3.162 0 1.425-.001 2.403-.063 3.162-.06.74-.172 1.139-.319 1.427a3.5 3.5 0 0 1-1.529 1.53c-.288.146-.686.257-1.427.318-.759.062-1.737.063-3.162.063ZM7 8.511c-.444.009-.825.025-1.162.052-.74.06-1.139.172-1.427.318a3.5 3.5 0 0 0-1.53 1.53c-.146.288-.257.686-.318 1.427-.062.759-.063 1.737-.063 3.162 0 1.425.001 2.403.063 3.162.06.74.172 1.139.318 1.427a3.5 3.5 0 0 0 1.53 1.53c.288.146.686.257 1.427.318.759.062 1.737.063 3.162.063 1.425 0 2.403-.001 3.162-.063.74-.06 1.139-.172 1.427-.319a3.5 3.5 0 0 0 1.53-1.53c.146-.287.257-.685.318-1.426.027-.337.043-.718.052-1.162H15c-2.8 0-4.2 0-5.27-.545a5 5 0 0 1-2.185-2.185C7 13.2 7 11.8 7 9v-.489Z" clip-rule="evenodd"/></svg>`,RETRY_ICON:D`<svg width="15" height="16" viewBox="0 0 15 16"><path d="M6.464 2.03A.75.75 0 0 0 5.403.97L2.08 4.293a1 1 0 0 0 0 1.414L5.403 9.03a.75.75 0 0 0 1.06-1.06L4.672 6.177a.25.25 0 0 1 .177-.427h2.085a4 4 0 1 1-3.93 4.746c-.077-.407-.405-.746-.82-.746-.414 0-.755.338-.7.748a5.501 5.501 0 1 0 5.45-6.248H4.848a.25.25 0 0 1-.177-.427L6.464 2.03Z" fill="#fff"/></svg>`,DESKTOP_ICON:D`<svg width="16" height="16" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M0 5.98c0-1.85 0-2.775.394-3.466a3 3 0 0 1 1.12-1.12C2.204 1 3.13 1 4.98 1h6.04c1.85 0 2.775 0 3.466.394a3 3 0 0 1 1.12 1.12C16 3.204 16 4.13 16 5.98v1.04c0 1.85 0 2.775-.394 3.466a3 3 0 0 1-1.12 1.12C13.796 12 12.87 12 11.02 12H4.98c-1.85 0-2.775 0-3.466-.394a3 3 0 0 1-1.12-1.12C0 9.796 0 8.87 0 7.02V5.98ZM4.98 2.5h6.04c.953 0 1.568.001 2.034.043.446.04.608.108.69.154a1.5 1.5 0 0 1 .559.56c.046.08.114.243.154.69.042.465.043 1.08.043 2.033v1.04c0 .952-.001 1.568-.043 2.034-.04.446-.108.608-.154.69a1.499 1.499 0 0 1-.56.559c-.08.046-.243.114-.69.154-.466.042-1.08.043-2.033.043H4.98c-.952 0-1.568-.001-2.034-.043-.446-.04-.608-.108-.69-.154a1.5 1.5 0 0 1-.559-.56c-.046-.08-.114-.243-.154-.69-.042-.465-.043-1.08-.043-2.033V5.98c0-.952.001-1.568.043-2.034.04-.446.108-.608.154-.69a1.5 1.5 0 0 1 .56-.559c.08-.046.243-.114.69-.154.465-.042 1.08-.043 2.033-.043Z" fill="#fff"/><path d="M4 14.25a.75.75 0 0 1 .75-.75h6.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1-.75-.75Z" fill="#fff"/></svg>`,MOBILE_ICON:D`<svg width="16" height="16" viewBox="0 0 16 16"><path d="M6.75 5a1.25 1.25 0 1 0 0-2.5 1.25 1.25 0 0 0 0 2.5Z" fill="#fff"/><path fill-rule="evenodd" clip-rule="evenodd" d="M3 4.98c0-1.85 0-2.775.394-3.466a3 3 0 0 1 1.12-1.12C5.204 0 6.136 0 8 0s2.795 0 3.486.394a3 3 0 0 1 1.12 1.12C13 2.204 13 3.13 13 4.98v6.04c0 1.85 0 2.775-.394 3.466a3 3 0 0 1-1.12 1.12C10.796 16 9.864 16 8 16s-2.795 0-3.486-.394a3 3 0 0 1-1.12-1.12C3 13.796 3 12.87 3 11.02V4.98Zm8.5 0v6.04c0 .953-.001 1.568-.043 2.034-.04.446-.108.608-.154.69a1.499 1.499 0 0 1-.56.559c-.08.045-.242.113-.693.154-.47.042-1.091.043-2.05.043-.959 0-1.58-.001-2.05-.043-.45-.04-.613-.109-.693-.154a1.5 1.5 0 0 1-.56-.56c-.046-.08-.114-.243-.154-.69-.042-.466-.043-1.08-.043-2.033V4.98c0-.952.001-1.568.043-2.034.04-.446.108-.608.154-.69a1.5 1.5 0 0 1 .56-.559c.08-.045.243-.113.693-.154C6.42 1.501 7.041 1.5 8 1.5c.959 0 1.58.001 2.05.043.45.04.613.109.693.154a1.5 1.5 0 0 1 .56.56c.046.08.114.243.154.69.042.465.043 1.08.043 2.033Z" fill="#fff"/></svg>`,ARROW_DOWN_ICON:D`<svg width="14" height="14" viewBox="0 0 14 14"><path d="M2.28 7.47a.75.75 0 0 0-1.06 1.06l5.25 5.25a.75.75 0 0 0 1.06 0l5.25-5.25a.75.75 0 0 0-1.06-1.06l-3.544 3.543a.25.25 0 0 1-.426-.177V.75a.75.75 0 0 0-1.5 0v10.086a.25.25 0 0 1-.427.176L2.28 7.47Z" fill="#fff"/></svg>`,ARROW_UP_RIGHT_ICON:D`<svg width="15" height="14" fill="none"><path d="M4.5 1.75A.75.75 0 0 1 5.25 1H12a1.5 1.5 0 0 1 1.5 1.5v6.75a.75.75 0 0 1-1.5 0V4.164a.25.25 0 0 0-.427-.176L4.061 11.5A.75.75 0 0 1 3 10.44l7.513-7.513a.25.25 0 0 0-.177-.427H5.25a.75.75 0 0 1-.75-.75Z" fill="#fff"/></svg>`,ARROW_RIGHT_ICON:D`<svg width="6" height="14" viewBox="0 0 6 14"><path fill-rule="evenodd" clip-rule="evenodd" d="M2.181 1.099a.75.75 0 0 1 1.024.279l2.433 4.258a2.75 2.75 0 0 1 0 2.729l-2.433 4.257a.75.75 0 1 1-1.303-.744L4.335 7.62a1.25 1.25 0 0 0 0-1.24L1.902 2.122a.75.75 0 0 1 .28-1.023Z" fill="#fff"/></svg>`,QRCODE_ICON:D`<svg width="25" height="24" viewBox="0 0 25 24"><path d="M23.748 9a.748.748 0 0 0 .748-.752c-.018-2.596-.128-4.07-.784-5.22a6 6 0 0 0-2.24-2.24c-1.15-.656-2.624-.766-5.22-.784a.748.748 0 0 0-.752.748c0 .414.335.749.748.752 1.015.007 1.82.028 2.494.088.995.09 1.561.256 1.988.5.7.398 1.28.978 1.679 1.678.243.427.41.993.498 1.988.061.675.082 1.479.09 2.493a.753.753 0 0 0 .75.749ZM3.527.788C4.677.132 6.152.022 8.747.004A.748.748 0 0 1 9.5.752a.753.753 0 0 1-.749.752c-1.014.007-1.818.028-2.493.088-.995.09-1.561.256-1.988.5-.7.398-1.28.978-1.679 1.678-.243.427-.41.993-.499 1.988-.06.675-.081 1.479-.088 2.493A.753.753 0 0 1 1.252 9a.748.748 0 0 1-.748-.752c.018-2.596.128-4.07.784-5.22a6 6 0 0 1 2.24-2.24ZM1.252 15a.748.748 0 0 0-.748.752c.018 2.596.128 4.07.784 5.22a6 6 0 0 0 2.24 2.24c1.15.656 2.624.766 5.22.784a.748.748 0 0 0 .752-.748.753.753 0 0 0-.749-.752c-1.014-.007-1.818-.028-2.493-.089-.995-.089-1.561-.255-1.988-.498a4.5 4.5 0 0 1-1.679-1.68c-.243-.426-.41-.992-.499-1.987-.06-.675-.081-1.479-.088-2.493A.753.753 0 0 0 1.252 15ZM22.996 15.749a.753.753 0 0 1 .752-.749c.415 0 .751.338.748.752-.018 2.596-.128 4.07-.784 5.22a6 6 0 0 1-2.24 2.24c-1.15.656-2.624.766-5.22.784a.748.748 0 0 1-.752-.748c0-.414.335-.749.748-.752 1.015-.007 1.82-.028 2.494-.089.995-.089 1.561-.255 1.988-.498a4.5 4.5 0 0 0 1.679-1.68c.243-.426.41-.992.498-1.987.061-.675.082-1.479.09-2.493Z" fill="#fff"/><path fill-rule="evenodd" clip-rule="evenodd" d="M7 4a2.5 2.5 0 0 0-2.5 2.5v2A2.5 2.5 0 0 0 7 11h2a2.5 2.5 0 0 0 2.5-2.5v-2A2.5 2.5 0 0 0 9 4H7Zm2 1.5H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1ZM13.5 6.5A2.5 2.5 0 0 1 16 4h2a2.5 2.5 0 0 1 2.5 2.5v2A2.5 2.5 0 0 1 18 11h-2a2.5 2.5 0 0 1-2.5-2.5v-2Zm2.5-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1ZM7 13a2.5 2.5 0 0 0-2.5 2.5v2A2.5 2.5 0 0 0 7 20h2a2.5 2.5 0 0 0 2.5-2.5v-2A2.5 2.5 0 0 0 9 13H7Zm2 1.5H7a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1Z" fill="#fff"/><path d="M13.5 15.5c0-.465 0-.697.038-.89a2 2 0 0 1 1.572-1.572C15.303 13 15.535 13 16 13v2.5h-2.5ZM18 13c.465 0 .697 0 .89.038a2 2 0 0 1 1.572 1.572c.038.193.038.425.038.89H18V13ZM18 17.5h2.5c0 .465 0 .697-.038.89a2 2 0 0 1-1.572 1.572C18.697 20 18.465 20 18 20v-2.5ZM13.5 17.5H16V20c-.465 0-.697 0-.89-.038a2 2 0 0 1-1.572-1.572c-.038-.193-.038-.425-.038-.89Z" fill="#fff"/></svg>`,SCAN_ICON:D`<svg width="16" height="16" fill="none"><path fill="#fff" d="M10 15.216c0 .422.347.763.768.74 1.202-.064 2.025-.222 2.71-.613a5.001 5.001 0 0 0 1.865-1.866c.39-.684.549-1.507.613-2.709a.735.735 0 0 0-.74-.768.768.768 0 0 0-.76.732c-.009.157-.02.306-.032.447-.073.812-.206 1.244-.384 1.555-.31.545-.761.996-1.306 1.306-.311.178-.743.311-1.555.384-.141.013-.29.023-.447.032a.768.768 0 0 0-.732.76ZM10 .784c0 .407.325.737.732.76.157.009.306.02.447.032.812.073 1.244.206 1.555.384a3.5 3.5 0 0 1 1.306 1.306c.178.311.311.743.384 1.555.013.142.023.29.032.447a.768.768 0 0 0 .76.732.734.734 0 0 0 .74-.768c-.064-1.202-.222-2.025-.613-2.71A5 5 0 0 0 13.477.658c-.684-.39-1.507-.549-2.709-.613a.735.735 0 0 0-.768.74ZM5.232.044A.735.735 0 0 1 6 .784a.768.768 0 0 1-.732.76c-.157.009-.305.02-.447.032-.812.073-1.244.206-1.555.384A3.5 3.5 0 0 0 1.96 3.266c-.178.311-.311.743-.384 1.555-.013.142-.023.29-.032.447A.768.768 0 0 1 .784 6a.735.735 0 0 1-.74-.768c.064-1.202.222-2.025.613-2.71A5 5 0 0 1 2.523.658C3.207.267 4.03.108 5.233.044ZM5.268 14.456a.768.768 0 0 1 .732.76.734.734 0 0 1-.768.74c-1.202-.064-2.025-.222-2.71-.613a5 5 0 0 1-1.865-1.866c-.39-.684-.549-1.507-.613-2.709A.735.735 0 0 1 .784 10c.407 0 .737.325.76.732.009.157.02.306.032.447.073.812.206 1.244.384 1.555a3.5 3.5 0 0 0 1.306 1.306c.311.178.743.311 1.555.384.142.013.29.023.447.032Z"/></svg>`,CHECKMARK_ICON:D`<svg width="13" height="12" viewBox="0 0 13 12"><path fill-rule="evenodd" clip-rule="evenodd" d="M12.155.132a.75.75 0 0 1 .232 1.035L5.821 11.535a1 1 0 0 1-1.626.09L.665 7.21a.75.75 0 1 1 1.17-.937L4.71 9.867a.25.25 0 0 0 .406-.023L11.12.364a.75.75 0 0 1 1.035-.232Z" fill="#fff"/></svg>`,HELP_ETH_IMG:D`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#j)"><rect width="60" height="60" rx="30" fill="#987DE8"/><path fill-rule="evenodd" clip-rule="evenodd" d="m15.48 28.367 11.966-19.3c1.174-1.892 3.927-1.892 5.1 0l11.97 19.306a6 6 0 0 1 .9 3.142v.028a6 6 0 0 1-1.154 3.56L33.227 50.208c-1.599 2.188-4.864 2.188-6.461 0L15.733 35.095a6 6 0 0 1-1.154-3.538v-.029a6 6 0 0 1 .9-3.161Z" fill="#fff"/><path d="M30.84 10.112a.992.992 0 0 0-.844-.464V24.5l12.598 5.53c.081-.466-.001-.963-.27-1.398L30.84 10.112Z" fill="#643CDD"/><path d="M29.996 9.648a.991.991 0 0 0-.845.465l-11.489 18.53a1.991 1.991 0 0 0-.264 1.387l12.598-5.53V9.648Z" fill="#BDADEB"/><path d="M29.996 50.544a.994.994 0 0 0 .808-.41l11.235-15.38c.307-.434-.193-.988-.658-.72L31.49 39.71a2.998 2.998 0 0 1-1.494.398v10.437Z" fill="#643CDD"/><path d="M17.966 34.762 29.19 50.134c.2.274.503.41.807.41V40.108a2.998 2.998 0 0 1-1.493-.398l-9.884-5.676c-.468-.27-.971.292-.653.728Z" fill="#BDADEB"/><path d="M42.594 30.03 29.996 24.5v13.138a3 3 0 0 0 1.495-.399l10.149-5.83c.525-.31.856-.823.954-1.38Z" fill="#401AB3"/><path d="M29.996 37.638V24.462l-12.598 5.566c.098.564.437 1.083.974 1.392l10.13 5.82c.462.265.978.398 1.494.398Z" fill="#7C5AE2"/></g><rect class="help-img-highlight" x=".5" y=".5" width="59" height="59" rx="29.5"/><defs><clipPath id="j"><rect width="60" height="60" rx="30" fill="#fff"/></clipPath></defs></svg>`,HELP_PAINTING_IMG:D`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#k)"><rect width="60" height="60" rx="3" fill="#C653C6"/><path d="M52.094 47.344c0-4.246-1.436-9.557-5.885-12.4a2.876 2.876 0 0 0-1.615-3.891v-.819a4.037 4.037 0 0 0-1.34-3.007 4.75 4.75 0 0 0-2.41-6.252v-5.506c0-6.248-5.065-11.313-11.313-11.313-6.247 0-11.312 5.065-11.312 11.313v2.152a3.343 3.343 0 0 0-1.18 5.045 4.738 4.738 0 0 0-1.633 3.584 4.73 4.73 0 0 0 .956 2.858 5.218 5.218 0 0 0-2.358 6.815c-3.06 4.129-6.098 8.298-6.098 15.64 0 2.668.364 4.856.731 6.385.184.765.368 1.366.509 1.78a12.721 12.721 0 0 0 .225.611l.015.037.005.011.001.004v.002h.001l.92-.393-.92.394.26.606h38.26l.291-.49-.86-.51.86.51v-.001l.002-.002.002-.005.01-.017.035-.06.127-.225c.108-.195.26-.477.441-.835.363-.714.845-1.732 1.328-2.953.959-2.427 1.945-5.725 1.945-9.068Z" fill="#E87DE8" stroke="#fff" stroke-width="2"/><path fill-rule="evenodd" clip-rule="evenodd" d="M26.5 29.5c-3-.5-5.5-3-5.503-7l.002-7c0-.466 0-.698.026-.893a3 3 0 0 1 2.582-2.582c.195-.026.428-.026.893-.026 2 0 2.5-2.5 2.5-2.5s0 2.5 2.5 2.5c1.398 0 2.097 0 2.648.229a3 3 0 0 1 1.624 1.623c.228.552.228 1.25.228 2.649v6c0 4-3 7-6.5 7 1.35.23 4 0 6.5-2v9.53C34 38.5 31.495 40 28 40s-6-1.5-6-2.97L24 34l2.5 1.5v-6ZM26 47h4.5c2.5 0 3 4 3 5.5h-3l-1-1.5H26v-4Zm-6.25 5.5H24V57h-8c0-1 1-4.5 3.75-4.5Z" fill="#fff"/></g><rect class="help-img-highlight" x=".5" y=".5" width="59" height="59" rx="2.5"/><defs><clipPath id="k"><rect width="60" height="60" rx="3" fill="#fff"/></clipPath></defs></svg>`,HELP_CHART_IMG:D`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#l)"><path d="M0 25.01C0 15.76 0 11.133 1.97 7.678a15 15 0 0 1 5.598-5.597C11.023.11 15.648.11 24.9.11h10.2c9.251 0 13.877 0 17.332 1.97a15 15 0 0 1 5.597 5.597C60 11.133 60 15.758 60 25.01v10.2c0 9.252 0 13.877-1.97 17.332a15 15 0 0 1-5.598 5.598c-3.455 1.97-8.08 1.97-17.332 1.97H24.9c-9.251 0-13.877 0-17.332-1.97a14.999 14.999 0 0 1-5.597-5.598C0 49.087 0 44.462 0 35.21v-10.2Z" fill="#1DC956"/><path d="M.5 25.01c0-4.635 0-8.078.244-10.795.244-2.71.726-4.65 1.66-6.289a14.5 14.5 0 0 1 5.412-5.41c1.639-.936 3.579-1.418 6.289-1.661C16.822.61 20.265.61 24.9.61h10.2c4.635 0 8.078 0 10.795.245 2.71.243 4.65.725 6.29 1.66a14.5 14.5 0 0 1 5.41 5.411c.935 1.64 1.417 3.579 1.66 6.29.244 2.717.245 6.16.245 10.794v10.2c0 4.635 0 8.078-.244 10.795-.244 2.71-.726 4.65-1.66 6.29a14.5 14.5 0 0 1-5.412 5.41c-1.639.936-3.579 1.418-6.289 1.661-2.717.244-6.16.244-10.795.244H24.9c-4.635 0-8.078 0-10.795-.244-2.71-.243-4.65-.725-6.29-1.66a14.5 14.5 0 0 1-5.41-5.412C1.47 50.655.988 48.716.745 46.005.5 43.288.5 39.845.5 35.21v-10.2Z" stroke="#fff" stroke-opacity=".1"/><path d="M16.109 60c-3.833-.179-6.41-.645-8.541-1.86a15 15 0 0 1-5.598-5.598C.553 50.057.155 46.967.043 41.985l4.146-1.382a4 4 0 0 0 2.48-2.39l4.654-12.409a2 2 0 0 1 2.505-1.195l2.526.842a2 2 0 0 0 2.422-1.003l2.968-5.938c.81-1.62 3.185-1.415 3.705.32l3.774 12.581a2 2 0 0 0 3.025 1.09l3.342-2.228c.27-.18.49-.422.646-.706l5.297-9.712a2 2 0 0 1 1.428-1.016l4.134-.689a2 2 0 0 1 1.61.437l3.892 3.243a2 2 0 0 0 2.694-.122l4.633-4.632C60 19.28 60 21.88 60 25.01v10.2c0 9.252 0 13.877-1.97 17.332a14.998 14.998 0 0 1-5.598 5.598c-2.131 1.215-4.708 1.681-8.54 1.86H16.108Z" fill="#2BEE6C"/><path d="M.072 43.03a112.37 112.37 0 0 1-.048-2.093l3.85-1.283a3 3 0 0 0 1.86-1.793l4.653-12.408a3 3 0 0 1 3.758-1.793l2.526.842a1 1 0 0 0 1.21-.501l2.97-5.938c1.214-2.43 4.775-2.123 5.556.48l3.774 12.58a1 1 0 0 0 1.513.545l3.341-2.227a1 1 0 0 0 .323-.353l5.298-9.712a3 3 0 0 1 2.14-1.523l4.135-.69a3 3 0 0 1 2.414.655l3.892 3.244a1 1 0 0 0 1.347-.061l5.28-5.28c.046.845.077 1.752.097 2.732l-3.962 3.962a3 3 0 0 1-4.042.183l-3.893-3.243a1 1 0 0 0-.804-.218l-4.135.689a1 1 0 0 0-.714.507l-5.297 9.712c-.233.427-.565.79-.97 1.06l-3.34 2.228a3 3 0 0 1-4.538-1.635l-3.775-12.58c-.26-.868-1.447-.97-1.852-.16l-2.969 5.937a3 3 0 0 1-3.632 1.505l-2.526-.842a1 1 0 0 0-1.252.597L7.606 38.564a5 5 0 0 1-3.1 2.988L.072 43.029Z" fill="#fff"/><path fill-rule="evenodd" clip-rule="evenodd" d="M49.5 19a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0Z" fill="#2BEE6C"/><path d="M47.5 19a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z" fill="#fff"/><path d="M45 .283v59.654c-.63.042-1.294.074-2 .098V.185c.706.025 1.37.056 2 .098Z" fill="#fff"/><path class="help-img-highlight" d="M.5 25.01c0-4.635 0-8.078.244-10.795.244-2.71.726-4.65 1.66-6.289a14.5 14.5 0 0 1 5.412-5.41c1.639-.936 3.579-1.418 6.289-1.661C16.822.61 20.265.61 24.9.61h10.2c4.635 0 8.078 0 10.795.245 2.71.243 4.65.725 6.29 1.66a14.5 14.5 0 0 1 5.41 5.411c.935 1.64 1.417 3.579 1.66 6.29.244 2.717.245 6.16.245 10.794v10.2c0 4.635 0 8.078-.244 10.795-.244 2.71-.726 4.65-1.66 6.29a14.5 14.5 0 0 1-5.412 5.41c-1.639.936-3.579 1.418-6.289 1.661-2.717.244-6.16.244-10.795.244H24.9c-4.635 0-8.078 0-10.795-.244-2.71-.243-4.65-.725-6.29-1.66a14.5 14.5 0 0 1-5.41-5.412C1.47 50.655.988 48.716.745 46.005.5 43.288.5 39.845.5 35.21v-10.2Z"/></g><defs><clipPath id="l"><path fill="#fff" d="M0 0h60v60H0z"/></clipPath></defs></svg>`,HELP_KEY_IMG:D`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#m)"><path fill="#EB8B47" d="M0 24.9c0-9.252 0-13.878 1.97-17.332A15 15 0 0 1 7.569 1.97C11.023 0 15.648 0 24.9 0h10.2c9.251 0 13.877 0 17.332 1.97a15 15 0 0 1 5.597 5.598C60 11.022 60 15.648 60 24.899v10.2c0 9.252 0 13.878-1.97 17.332a15.001 15.001 0 0 1-5.598 5.598c-3.455 1.97-8.08 1.97-17.332 1.97H24.9c-9.251 0-13.877 0-17.332-1.97a15 15 0 0 1-5.597-5.598C0 48.977 0 44.351 0 35.1V24.9Z"/><path class="help-img-highlight" d="M.5 24.9c0-4.635 0-8.078.244-10.795.244-2.71.726-4.65 1.66-6.29a14.5 14.5 0 0 1 5.412-5.41C9.455 1.468 11.395.986 14.105.743 16.822.5 20.265.5 24.9.5h10.2c4.635 0 8.078 0 10.795.244 2.71.243 4.65.725 6.29 1.66a14.5 14.5 0 0 1 5.41 5.411c.935 1.64 1.417 3.58 1.66 6.29.244 2.717.245 6.16.245 10.794v10.2c0 4.635 0 8.078-.244 10.796-.244 2.71-.726 4.65-1.66 6.289a14.5 14.5 0 0 1-5.412 5.41c-1.639.936-3.579 1.418-6.289 1.661-2.717.244-6.16.244-10.795.244H24.9c-4.635 0-8.078 0-10.795-.244-2.71-.243-4.65-.725-6.29-1.66a14.5 14.5 0 0 1-5.41-5.411c-.935-1.64-1.417-3.58-1.66-6.29C.5 43.178.5 39.734.5 35.1V24.9Z"/><path fill="#FF974C" stroke="#fff" stroke-width="2" d="M39.192 29.192c5.077-5.077 5.077-13.308 0-18.385-5.076-5.077-13.308-5.077-18.384 0-5.077 5.077-5.077 13.308 0 18.385l1.287 1.291c1.137 1.142 1.706 1.712 2.097 2.387.267.462.472.957.608 1.473.2.755.2 1.56.2 3.171V48.75c0 1.077 0 1.615.134 2.119a4 4 0 0 0 .407.984c.262.45.643.831 1.404 1.592l.294.295c.654.654.982.981 1.365 1.086.26.07.533.07.792 0 .383-.105.71-.432 1.365-1.086l3.478-3.479c.655-.654.982-.981 1.087-1.365a1.5 1.5 0 0 0 0-.791c-.105-.384-.432-.711-1.087-1.365l-.478-.479c-.655-.654-.982-.981-1.087-1.365a1.5 1.5 0 0 1 0-.791c.105-.384.432-.711 1.087-1.365l.478-.479c.655-.654.982-.981 1.087-1.365a1.5 1.5 0 0 0 0-.791c-.105-.384-.432-.711-1.087-1.365l-.492-.493c-.65-.65-.974-.974-1.08-1.355a1.5 1.5 0 0 1-.003-.788c.102-.382.425-.71 1.069-1.364l5.46-5.547Z"/><circle cx="30" cy="17" r="4" fill="#EB8B47" stroke="#fff" stroke-width="2"/></g><defs><clipPath id="m"><path fill="#fff" d="M0 0h60v60H0z"/></clipPath></defs></svg>`,HELP_USER_IMG:D`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#n)"><rect width="60" height="60" fill="#00ACE6" rx="30"/><path fill="#1AC6FF" stroke="#fff" stroke-width="2" d="M59 73c0 16.016-12.984 29-29 29S1 89.016 1 73c0-16.017 11-29 29-29s29 12.983 29 29ZM18.69 19.902a11 11 0 0 1 9.281-8.692 14.842 14.842 0 0 1 4.058 0 11 11 0 0 1 9.28 8.692c.178.866.322 1.75.44 2.625.132.977.132 1.968 0 2.945a39.467 39.467 0 0 1-.44 2.625 11 11 0 0 1-9.28 8.692 14.862 14.862 0 0 1-4.058 0 11 11 0 0 1-9.28-8.692 39.467 39.467 0 0 1-.44-2.625 11.004 11.004 0 0 1 0-2.945c.118-.876.262-1.759.44-2.625Z"/><circle cx="24.5" cy="23.5" r="1.5" fill="#fff"/><circle cx="35.5" cy="23.5" r="1.5" fill="#fff"/><path stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m31 20-3 8h4"/></g><rect class="help-img-highlight" width="59" height="59" x=".5" y=".5" rx="29.5"/><defs><clipPath id="n"><rect width="60" height="60" fill="#fff" rx="30"/></clipPath></defs></svg>`,HELP_LOCK_IMG:D`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><rect width="60" height="60" fill="#C653C6" rx="3"/><path fill="#fff" d="M20.034 15.216C20 15.607 20 16.07 20 17v2.808c0 1.13 0 1.696-.2 2.11a1.78 1.78 0 0 1-.584.714c-.366.28-1.051.42-2.423.7a7.076 7.076 0 0 0-1.597.511 9.001 9.001 0 0 0-4.353 4.353C10 30.005 10 32.336 10 37c0 4.663 0 6.995.843 8.804a9.001 9.001 0 0 0 4.353 4.353C17.005 51 19.336 51 24 51h12c4.663 0 6.995 0 8.804-.843a9.001 9.001 0 0 0 4.353-4.353C50 43.995 50 41.664 50 37c0-4.663 0-6.995-.843-8.804a9.001 9.001 0 0 0-4.353-4.353 7.076 7.076 0 0 0-1.597-.511c-1.372-.28-2.057-.42-2.423-.7a1.78 1.78 0 0 1-.583-.715C40 21.505 40 20.94 40 19.809V17c0-.929 0-1.393-.034-1.784a9 9 0 0 0-8.182-8.182C31.393 7 30.93 7 30 7s-1.393 0-1.784.034a9 9 0 0 0-8.182 8.182Z"/><path fill="#E87DE8" d="M22 17c0-.929 0-1.393.044-1.784a7 7 0 0 1 6.172-6.172C28.606 9 29.071 9 30 9s1.393 0 1.784.044a7 7 0 0 1 6.172 6.172c.044.39.044.855.044 1.784v4.5a1.5 1.5 0 0 1-3 0V17c0-.93 0-1.394-.077-1.78a4 4 0 0 0-3.143-3.143C31.394 12 30.93 12 30 12s-1.394 0-1.78.077a4 4 0 0 0-3.143 3.143C25 15.606 25 16.07 25 17v4.5a1.5 1.5 0 0 1-3 0V17Z"/><path fill="#E87DE8" fill-rule="evenodd" d="M12 36.62c0-4.317 0-6.476.92-8.088a7 7 0 0 1 2.612-2.612c1.612-.92 3.77-.92 8.088-.92h6.855c.469 0 .703 0 .906.017 2.73.222 4.364 2.438 4.619 4.983.27-2.698 2.111-5 5.015-5A6.985 6.985 0 0 1 48 31.985v5.395c0 4.317 0 6.476-.92 8.088a7 7 0 0 1-2.612 2.612c-1.612.92-3.77.92-8.088.92h-5.855c-.469 0-.703 0-.906-.017-2.73-.222-4.364-2.438-4.619-4.983-.258 2.583-1.943 4.818-4.714 4.99-.155.01-.335.01-.694.01-.55 0-.825 0-1.057-.015a7 7 0 0 1-6.52-6.52C12 42.233 12 41.958 12 41.408V36.62Zm21.24-.273a4 4 0 1 0-6.478 0c.985 1.36 1.479 2.039 1.564 2.229.178.398.176.818.174 1.247V42.5a1.5 1.5 0 0 0 3 0v-2.677c-.002-.429-.004-.85.174-1.247.085-.19.579-.87 1.565-2.229Z" clip-rule="evenodd"/><rect class="help-img-highlight" width="59" height="59" x=".5" y=".5" rx="2.5"/></svg>`,HELP_COMPAS_IMG:D`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><rect width="60" height="60" fill="#1DC956" rx="30"/><circle cx="30" cy="29.999" r="3" fill="#fff"/><path fill="#2BEE6C" stroke="#fff" stroke-width="2" d="m45.316 17.9-.88-.425.88.424a7.9 7.9 0 0 1 .026-.053c.093-.192.21-.432.26-.687l-.819-.162.819.162a2 2 0 0 0-.239-1.405c-.132-.224-.32-.412-.472-.562a8.415 8.415 0 0 1-.042-.042l-.042-.042c-.15-.151-.338-.34-.562-.472l-.508.862.508-.862a2 2 0 0 0-1.405-.239c-.255.05-.495.167-.687.26l-.053.026-15.05 7.246-.108.052c-1.131.545-1.843.887-2.456 1.374a6.994 6.994 0 0 0-1.13 1.13c-.487.613-.83 1.325-1.375 2.457l-.051.108-7.247 15.05-.025.053c-.094.192-.21.431-.26.686a2 2 0 0 0 .239 1.406l.855-.505-.856.505c.133.224.321.411.473.562l.042.042.041.042c.15.151.338.34.563.472a2 2 0 0 0 1.405.239l-.195-.981.195.98c.255-.05.494-.166.686-.26l.054-.025-.419-.87.419.87 15.05-7.247.107-.051c1.132-.545 1.844-.888 2.457-1.374a7.002 7.002 0 0 0 1.13-1.13c.487-.614.83-1.325 1.374-2.457l.052-.108 7.246-15.05Z"/><path fill="#1DC956" d="m33.376 32.723-2.669-3.43-14.85 14.849.206.205a1 1 0 0 0 1.141.194l15.105-7.273a3 3 0 0 0 1.067-4.545Z"/><path fill="#86F999" d="m26.624 27.276 2.669 3.43 14.85-14.849-.206-.205a1 1 0 0 0-1.141-.194L27.69 22.731a3 3 0 0 0-1.067 4.545Z"/><circle cx="30" cy="30" r="3" fill="#fff" transform="rotate(45 30 30)"/><rect class="help-img-highlight" width="59" height="59" x=".5" y=".5" rx="29.5"/></svg>`,HELP_NOUN_IMG:D`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><rect width="60" height="60" fill="#794CFF" rx="3"/><path fill="#987DE8" stroke="#fff" stroke-width="2" d="M33 22.5v-1H16v5H8.5V36H13v-5h3v7.5h17V31h1v7.5h17v-17H34v5h-1v-4Z"/><path fill="#fff" d="M37.5 25h10v10h-10z"/><path fill="#4019B2" d="M42.5 25h5v10h-5z"/><path fill="#fff" d="M19.5 25h10v10h-10z"/><path fill="#4019B2" d="M24.5 25h5v10h-5z"/><path fill="#fff" d="M12 30.5h4V37h-4v-6.5Z"/><rect class="help-img-highlight" width="59" height="59" x=".5" y=".5" rx="2.5"/></svg>`,HELP_DAO_IMG:D`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#o)"><path fill="#EB8B47" d="M0 24.9c0-9.252 0-13.878 1.97-17.332A15 15 0 0 1 7.569 1.97C11.023 0 15.648 0 24.9 0h10.2c9.251 0 13.877 0 17.332 1.97a15 15 0 0 1 5.597 5.598C60 11.022 60 15.648 60 24.899v10.2c0 9.252 0 13.878-1.97 17.332a15.001 15.001 0 0 1-5.598 5.598c-3.455 1.97-8.08 1.97-17.332 1.97H24.9c-9.251 0-13.877 0-17.332-1.97a15 15 0 0 1-5.597-5.598C0 48.977 0 44.351 0 35.1V24.9Z"/><path class="help-img-highlight" d="M.5 24.9c0-4.635 0-8.078.244-10.795.244-2.71.726-4.65 1.66-6.29a14.5 14.5 0 0 1 5.412-5.41C9.455 1.468 11.395.986 14.105.743 16.822.5 20.265.5 24.9.5h10.2c4.635 0 8.078 0 10.795.244 2.71.243 4.65.725 6.29 1.66a14.5 14.5 0 0 1 5.41 5.411c.935 1.64 1.417 3.58 1.66 6.29.244 2.717.245 6.16.245 10.794v10.2c0 4.635 0 8.078-.244 10.796-.244 2.71-.726 4.65-1.66 6.289a14.5 14.5 0 0 1-5.412 5.41c-1.639.936-3.579 1.418-6.289 1.661-2.717.244-6.16.244-10.795.244H24.9c-4.635 0-8.078 0-10.795-.244-2.71-.243-4.65-.725-6.29-1.66a14.5 14.5 0 0 1-5.41-5.411c-.935-1.64-1.417-3.58-1.66-6.29C.5 43.178.5 39.734.5 35.1V24.9Z"/><path fill="#FF974C" stroke="#fff" stroke-width="2" d="M19 52c5.523 0 10-4.477 10-10s-4.477-10-10-10S9 36.477 9 42s4.477 10 10 10Z"/><path fill="#fff" fill-rule="evenodd" d="M42.844 8.326a1 1 0 0 0-1.687 0L28.978 27.463A1 1 0 0 0 29.822 29h24.357a1 1 0 0 0 .843-1.537L42.844 8.326Z" clip-rule="evenodd"/><path fill="#FF974C" fill-rule="evenodd" d="M42.335 11.646c.324.115.571.504 1.066 1.28l7.332 11.523c.562.883.843 1.325.792 1.69a1 1 0 0 1-.342.623c-.28.238-.803.238-1.85.238H34.667c-1.047 0-1.57 0-1.85-.238a1 1 0 0 1-.342-.623c-.051-.365.23-.806.792-1.69l7.332-11.523c.495-.776.742-1.165 1.066-1.28a1 1 0 0 1 .67 0ZM35 27a7 7 0 0 0 7-7 7 7 0 0 0 7 7H35Z" clip-rule="evenodd"/><path fill="#FF974C" stroke="#fff" stroke-width="2" d="M10.106 9.357c-.109.32-.107.682-.106.975V25.668c-.001.293-.003.654.106.975a2 2 0 0 0 1.251 1.25c.32.11.682.108.975.107H19c5.523 0 10-4.477 10-10S24.523 8 19 8h-6.668c-.293-.001-.654-.003-.975.106a2 2 0 0 0-1.25 1.251Z"/><circle cx="19" cy="18" r="4" fill="#EB8B47" stroke="#fff" stroke-width="2"/><circle cx="19" cy="41.999" r="4" fill="#EB8B47" stroke="#fff" stroke-width="2"/></g><defs><clipPath id="o"><path fill="#fff" d="M0 0h60v60H0z"/></clipPath></defs></svg>`,SEARCH_ICON:D`<svg width="20" height="21"><path fill-rule="evenodd" clip-rule="evenodd" d="M12.432 13.992c-.354-.353-.91-.382-1.35-.146a5.5 5.5 0 1 1 2.265-2.265c-.237.441-.208.997.145 1.35l3.296 3.296a.75.75 0 1 1-1.06 1.061l-3.296-3.296Zm.06-5a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z" fill="#949E9E"/></svg>`,HELP_ICON:D`<svg width="11" height="17" viewBox="0 0 11 17"><path fill="#fff" d="M5.22 2.97c-1.07 0-2.25.843-2.25 2.25a.75.75 0 0 1-1.5 0c0-2.393 2.019-3.75 3.75-3.75 1.73 0 3.75 1.357 3.75 3.75 0 1.64-1.038 2.466-1.785 3.057-.802.635-1.215.984-1.215 1.693a.75.75 0 1 1-1.5 0c0-1.466.985-2.24 1.681-2.788l.103-.081C7.007 6.504 7.47 6.08 7.47 5.22c0-1.407-1.181-2.25-2.25-2.25ZM5.22 14.97a1.25 1.25 0 1 0 0-2.5 1.25 1.25 0 0 0 0 2.5Z"/></svg>`,WALLET_ICON:D`<svg width="15" height="14" fill="none" viewBox="0 0 15 14"><path fill="#fff" fill-rule="evenodd" d="M.64 9.2v-3h.001c.009-1.857.07-2.886.525-3.682a4 4 0 0 1 1.492-1.493C3.58.5 4.813.5 7.28.5h3.735c.58 0 .871 0 1.114.04A3 3 0 0 1 14.6 3.011c.04.243.04.533.04 1.114 0 .58 0 .871-.04 1.114a3 3 0 0 1-2.471 2.47c-.243.041-.533.041-1.114.041h-.777c.178.307.302.648.362 1.011.04.243.04.533.04 1.114 0 .58 0 .871-.04 1.114a3 3 0 0 1-2.471 2.47c-.243.041-.533.041-1.114.041H4.507A3.867 3.867 0 0 1 .64 9.633V9.2ZM7.28 2h3.735c.64 0 .779.005.87.02a1.5 1.5 0 0 1 1.235 1.236c.015.09.02.229.02.869s-.005.779-.02.87a1.5 1.5 0 0 1-1.236 1.235c-.09.015-.229.02-.869.02H4.023c-.697 0-1.345.21-1.883.572V6.25h.001c.004-.791.015-1.383.059-1.867.056-.629.157-.926.269-1.122a2.5 2.5 0 0 1 .932-.933c.197-.111.494-.212 1.123-.268C5.173 2 6.019 2 7.28 2Zm-.265 5.75H4.023c-1.04 0-1.883.843-1.883 1.883A2.367 2.367 0 0 0 4.507 12h2.508c.64 0 .779-.005.87-.02a1.5 1.5 0 0 0 1.235-1.236c.015-.09.02-.229.02-.869s-.005-.779-.02-.87A1.5 1.5 0 0 0 7.884 7.77c-.09-.015-.228-.02-.869-.02Z" clip-rule="evenodd"/></svg>`,NETWORK_PLACEHOLDER:D`<svg width="28" height="28" fill="none" viewBox="0 0 28 28"><mask id="p" width="26" height="28" x="1" y="0" maskUnits="userSpaceOnUse" style="mask-type:alpha"><path fill="#D9D9D9" d="M12 1.172a4 4 0 0 1 4 0l8.124 4.69a4 4 0 0 1 2 3.465v9.381a4 4 0 0 1-2 3.464L16 26.862a4 4 0 0 1-4 0l-8.124-4.69a4 4 0 0 1-2-3.464V9.327a4 4 0 0 1 2-3.464L12 1.173Z"/></mask><g mask="url(#p)"><path id="network-placeholder-fill" fill="#fff" d="M0 0h28v28H0z"/><path id="network-placeholder-dash" stroke="#000" stroke-dasharray="2 2" d="m8.953 2.931 2.032-1.173.25.433 1.015-.586c.269-.155.553-.271.844-.35l-.13-.483a4.003 4.003 0 0 1 2.071 0l-.13.483c.293.079.576.195.845.35l1.016.586.25-.433 2.03 1.173-.25.433 2.032 1.173.25-.433 2.03 1.172-.25.433 1.016.587c.269.155.512.342.725.556l.354-.354a4.003 4.003 0 0 1 1.035 1.794l-.483.129c.078.292.12.596.12.906v1.172h.5v2.346h-.5v2.345h.5v2.345h-.5v1.173c0 .31-.042.614-.12.906l.483.13a4.003 4.003 0 0 1-1.035 1.793l-.354-.354a3.498 3.498 0 0 1-.725.556l-1.015.586.25.434-2.031 1.172-.25-.433-2.031 1.173.25.433-2.031 1.172-.25-.433-1.016.587a3.494 3.494 0 0 1-.844.35l.13.482a4.003 4.003 0 0 1-2.071 0l.13-.483a3.496 3.496 0 0 1-.845-.35l-1.015-.586-.25.433-2.032-1.172.25-.433-2.03-1.173-.25.433L4.89 22.76l.25-.434-1.015-.586a3.498 3.498 0 0 1-.725-.556l-.354.354a4.003 4.003 0 0 1-1.035-1.794l.483-.13a3.497 3.497 0 0 1-.12-.905v-1.173h-.5V15.19h.5v-2.345h-.5v-2.346h.5V9.327c0-.31.042-.614.12-.906l-.483-.13a4.003 4.003 0 0 1 1.035-1.793l.354.354c.213-.214.456-.401.725-.556l1.015-.587-.25-.433 2.031-1.172.25.433 2.031-1.173-.25-.433Z"/><path fill="#798686" stroke="#fff" d="M14.243 13.563 14 13.428l-.243.135-6.388 3.549-.024.013c-.432.24-.79.44-1.053.622-.266.184-.516.405-.636.722a1.5 1.5 0 0 0 0 1.062c.12.317.37.538.636.722.263.183.62.382 1.053.622l.024.013 3.164 1.758.088.049c1.164.646 1.857 1.032 2.607 1.162.51.09 1.033.09 1.544 0 .75-.13 1.443-.516 2.606-1.162l.09-.05 3.163-1.757.024-.013c.432-.24.79-.44 1.053-.622.266-.184.516-.405.636-.722l-.468-.177.468.177a1.5 1.5 0 0 0 0-1.062l-.468.177.468-.177c-.12-.317-.37-.538-.636-.722-.263-.183-.62-.382-1.053-.622l-.024-.013-6.388-3.55Z"/><path fill="#9EA9A9" stroke="#fff" d="M14.243 8.563 14 8.428l-.243.135-6.388 3.549-.024.013c-.432.24-.79.44-1.053.622-.266.184-.516.405-.636.722a1.5 1.5 0 0 0 0 1.062c.12.316.37.537.636.722.263.183.62.382 1.053.622l.024.013 3.164 1.758.088.049c1.164.646 1.857 1.032 2.607 1.162.51.09 1.033.09 1.544 0 .75-.13 1.443-.516 2.606-1.162l.09-.05 3.163-1.757.024-.013c.432-.24.79-.44 1.053-.622.266-.184.516-.405.636-.722l-.468-.177.468.177a1.5 1.5 0 0 0 0-1.062l-.468.177.468-.177c-.12-.316-.37-.537-.636-.722-.263-.183-.62-.382-1.053-.622l-.024-.013-6.388-3.55Z"/><path fill="#C9CFCF" stroke="#fff" d="m22.344 9.53-.468-.176.468.177a1.5 1.5 0 0 0 0-1.062l-.468.177.468-.177c-.12-.317-.37-.537-.636-.722-.263-.183-.62-.382-1.053-.622l-.024-.013-3.163-1.758-.09-.05c-1.163-.645-1.856-1.03-2.606-1.161a4.5 4.5 0 0 0-1.544 0c-.75.13-1.443.516-2.607 1.162l-.088.05-3.164 1.757-.024.013c-.432.24-.79.44-1.053.622-.266.185-.516.405-.636.722a1.5 1.5 0 0 0 0 1.062c.12.317.37.537.636.722.263.183.62.382 1.053.622l.024.013 3.164 1.758.088.049c1.164.646 1.857 1.032 2.607 1.162.51.09 1.033.09 1.544 0 .75-.13 1.443-.516 2.606-1.162l.09-.05 3.163-1.757.024-.013c.432-.24.79-.44 1.053-.622.266-.184.516-.405.636-.722Z"/></g></svg>`,WALLET_PLACEHOLDER:D`<svg width="60" height="60" fill="none" viewBox="0 0 60 60"><g clip-path="url(#q)"><path id="wallet-placeholder-fill" fill="#fff" d="M0 24.9c0-9.251 0-13.877 1.97-17.332a15 15 0 0 1 5.598-5.597C11.023 0 15.648 0 24.9 0h10.2c9.252 0 13.877 0 17.332 1.97a15 15 0 0 1 5.597 5.598C60 11.023 60 15.648 60 24.9v10.2c0 9.252 0 13.877-1.97 17.332a15.001 15.001 0 0 1-5.598 5.597C48.977 60 44.352 60 35.1 60H24.9c-9.251 0-13.877 0-17.332-1.97a15 15 0 0 1-5.597-5.598C0 48.977 0 44.352 0 35.1V24.9Z"/><path id="wallet-placeholder-dash" stroke="#000" stroke-dasharray="4 4" stroke-width="1.5" d="M.04 41.708a231.598 231.598 0 0 1-.039-4.403l.75-.001L.75 35.1v-2.55H0v-5.1h.75V24.9l.001-2.204h-.75c.003-1.617.011-3.077.039-4.404l.75.016c.034-1.65.099-3.08.218-4.343l-.746-.07c.158-1.678.412-3.083.82-4.316l.713.236c.224-.679.497-1.296.827-1.875a14.25 14.25 0 0 1 1.05-1.585L3.076 5.9A15 15 0 0 1 5.9 3.076l.455.596a14.25 14.25 0 0 1 1.585-1.05c.579-.33 1.196-.603 1.875-.827l-.236-.712C10.812.674 12.217.42 13.895.262l.07.746C15.23.89 16.66.824 18.308.79l-.016-.75C19.62.012 21.08.004 22.695.001l.001.75L24.9.75h2.55V0h5.1v.75h2.55l2.204.001v-.75c1.617.003 3.077.011 4.404.039l-.016.75c1.65.034 3.08.099 4.343.218l.07-.746c1.678.158 3.083.412 4.316.82l-.236.713c.679.224 1.296.497 1.875.827a14.24 14.24 0 0 1 1.585 1.05l.455-.596A14.999 14.999 0 0 1 56.924 5.9l-.596.455c.384.502.735 1.032 1.05 1.585.33.579.602 1.196.827 1.875l.712-.236c.409 1.233.663 2.638.822 4.316l-.747.07c.119 1.264.184 2.694.218 4.343l.75-.016c.028 1.327.036 2.787.039 4.403l-.75.001.001 2.204v2.55H60v5.1h-.75v2.55l-.001 2.204h.75a231.431 231.431 0 0 1-.039 4.404l-.75-.016c-.034 1.65-.099 3.08-.218 4.343l.747.07c-.159 1.678-.413 3.083-.822 4.316l-.712-.236a10.255 10.255 0 0 1-.827 1.875 14.242 14.242 0 0 1-1.05 1.585l.596.455a14.997 14.997 0 0 1-2.824 2.824l-.455-.596c-.502.384-1.032.735-1.585 1.05-.579.33-1.196.602-1.875.827l.236.712c-1.233.409-2.638.663-4.316.822l-.07-.747c-1.264.119-2.694.184-4.343.218l.016.75c-1.327.028-2.787.036-4.403.039l-.001-.75-2.204.001h-2.55V60h-5.1v-.75H24.9l-2.204-.001v.75a231.431 231.431 0 0 1-4.404-.039l.016-.75c-1.65-.034-3.08-.099-4.343-.218l-.07.747c-1.678-.159-3.083-.413-4.316-.822l.236-.712a10.258 10.258 0 0 1-1.875-.827 14.252 14.252 0 0 1-1.585-1.05l-.455.596A14.999 14.999 0 0 1 3.076 54.1l.596-.455a14.24 14.24 0 0 1-1.05-1.585 10.259 10.259 0 0 1-.827-1.875l-.712.236C.674 49.188.42 47.783.262 46.105l.746-.07C.89 44.77.824 43.34.79 41.692l-.75.016Z"/><path fill="#fff" fill-rule="evenodd" d="M35.643 32.145c-.297-.743-.445-1.114-.401-1.275a.42.42 0 0 1 .182-.27c.134-.1.463-.1 1.123-.1.742 0 1.499.046 2.236-.05a6 6 0 0 0 5.166-5.166c.051-.39.051-.855.051-1.784 0-.928 0-1.393-.051-1.783a6 6 0 0 0-5.166-5.165c-.39-.052-.854-.052-1.783-.052h-7.72c-4.934 0-7.401 0-9.244 1.051a8 8 0 0 0-2.985 2.986C16.057 22.28 16.003 24.58 16 29 15.998 31.075 16 33.15 16 35.224A7.778 7.778 0 0 0 23.778 43H28.5c1.394 0 2.09 0 2.67-.116a6 6 0 0 0 4.715-4.714c.115-.58.115-1.301.115-2.744 0-1.31 0-1.964-.114-2.49a4.998 4.998 0 0 0-.243-.792Z" clip-rule="evenodd"/><path fill="#9EA9A9" fill-rule="evenodd" d="M37 18h-7.72c-2.494 0-4.266.002-5.647.126-1.361.122-2.197.354-2.854.728a6.5 6.5 0 0 0-2.425 2.426c-.375.657-.607 1.492-.729 2.853-.11 1.233-.123 2.777-.125 4.867 0 .7 0 1.05.097 1.181.096.13.182.181.343.2.163.02.518-.18 1.229-.581a6.195 6.195 0 0 1 3.053-.8H37c.977 0 1.32-.003 1.587-.038a4.5 4.5 0 0 0 3.874-3.874c.036-.268.039-.611.039-1.588 0-.976-.003-1.319-.038-1.587a4.5 4.5 0 0 0-3.875-3.874C38.32 18.004 37.977 18 37 18Zm-7.364 12.5h-7.414a4.722 4.722 0 0 0-4.722 4.723 6.278 6.278 0 0 0 6.278 6.278H28.5c1.466 0 1.98-.008 2.378-.087a4.5 4.5 0 0 0 3.535-3.536c.08-.397.087-.933.087-2.451 0-1.391-.009-1.843-.08-2.17a3.5 3.5 0 0 0-2.676-2.676c-.328-.072-.762-.08-2.108-.08Z" clip-rule="evenodd"/></g><defs><clipPath id="q"><path fill="#fff" d="M0 0h60v60H0z"/></clipPath></defs></svg>`,TOKEN_PLACEHOLDER:D`<svg width="60" height="60" viewBox="0 0 60 60" fill="none"><rect id="token-placeholder-fill" width="58" height="58" x="1" y="1" fill="#fff" rx="29"/><path fill="#3B4040" stroke="#fff" stroke-width="2" d="M32 10a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v5.566c0 .357.192.685.495.875a16.001 16.001 0 0 1 4.256 3.894c.667.88.33 2.113-.627 2.665l-2.494 1.44c-.956.552-2.166.204-2.913-.609a9.12 9.12 0 1 0 .064 12.267c.739-.82 1.945-1.181 2.907-.64l2.509 1.415c.962.542 1.312 1.77.654 2.658a16 16 0 0 1-4.356 4.028c-.303.19-.495.518-.495.875V50a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-2.992c0-.602-.528-1.065-1.13-1.032-.579.032-1.16.032-1.74 0-.602-.032-1.13.43-1.13 1.032V50a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-5.566c0-.357-.192-.685-.495-.875a16 16 0 0 1 0-27.118c.303-.19.495-.517.495-.875V10a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2.992c0 .601.528 1.064 1.13 1.032.58-.032 1.161-.032 1.74 0 .602.033 1.13-.43 1.13-1.032V10Z"/><rect id="token-placeholder-dash" width="58" height="58" x="1" y="1" stroke="#000" stroke-dasharray="6 6" stroke-width="2" rx="29"/></svg>`,ACCOUNT_COPY:D`<svg width="14" height="14" fill="none" viewBox="0 0 14 14"><path fill="#fff" fill-rule="evenodd" d="M4.003 4.005c.012-1.225.074-1.936.391-2.491a3 3 0 0 1 1.12-1.12C6.204 0 7.136 0 9 0s2.795 0 3.486.394a3 3 0 0 1 1.12 1.12C14 2.204 14 3.136 14 5s0 2.795-.394 3.486a3 3 0 0 1-1.12 1.12c-.555.317-1.266.379-2.491.391l.002.003c-.012 1.222-.075 1.932-.391 2.486a3 3 0 0 1-1.12 1.12C7.796 14 6.864 14 5 14s-2.795 0-3.486-.394a3 3 0 0 1-1.12-1.12C0 11.796 0 10.864 0 9s0-2.795.394-3.486a3 3 0 0 1 1.12-1.12c.554-.316 1.264-.379 2.486-.391l.003.002ZM9 8.5c-.959 0-1.58-.001-2.05-.043-.45-.04-.613-.109-.693-.154a1.5 1.5 0 0 1-.56-.56c-.045-.08-.113-.243-.154-.693C5.501 6.58 5.5 5.959 5.5 5c0-.959.001-1.58.043-2.05.04-.45.109-.613.154-.693a1.5 1.5 0 0 1 .56-.56c.08-.045.243-.113.693-.154C7.42 1.501 8.041 1.5 9 1.5c.959 0 1.58.001 2.05.043.45.04.613.109.693.154a1.5 1.5 0 0 1 .56.56c.045.08.113.243.154.693.042.47.043 1.091.043 2.05 0 .959-.001 1.58-.043 2.05-.04.45-.109.613-.154.693a1.5 1.5 0 0 1-.56.56c-.08.045-.242.113-.693.154-.47.042-1.091.043-2.05.043ZM4 5.503a13.77 13.77 0 0 0-1.05.04c-.45.04-.613.109-.693.154a1.5 1.5 0 0 0-.56.56c-.045.08-.113.243-.154.693C1.501 7.42 1.5 8.041 1.5 9c0 .959.001 1.58.043 2.05.04.45.109.613.154.693a1.5 1.5 0 0 0 .56.56c.08.045.243.113.693.154.47.042 1.091.043 2.05.043.959 0 1.58-.001 2.05-.043.45-.04.613-.109.693-.154a1.5 1.5 0 0 0 .56-.56c.045-.08.113-.242.154-.693.025-.283.035-.619.04-1.05-1.534-.003-2.358-.037-2.983-.394a3 3 0 0 1-1.12-1.12c-.357-.625-.39-1.449-.394-2.983Z" clip-rule="evenodd"/></svg>`,ACCOUNT_DISCONNECT:D`<svg width="16" height="14" fill="none" viewBox="0 0 16 14"><path fill="#fff" d="M9.677 1.5h-2.61c-1.261 0-2.107.001-2.757.06-.629.056-.926.157-1.122.268a2.5 2.5 0 0 0-.933.933c-.112.196-.212.493-.269 1.122-.058.65-.06 1.496-.06 2.757v.72c0 1.26.002 2.107.06 2.756.057.63.157.927.27 1.123a2.5 2.5 0 0 0 .932.933c.196.111.493.212 1.122.268.65.059 1.496.06 2.757.06h2.61a.75.75 0 1 1 0 1.5h-2.61c-2.467 0-3.7 0-4.622-.525a4 4 0 0 1-1.493-1.493C.427 11.06.427 9.827.427 7.36v-.72c0-2.467 0-3.7.525-4.622A4 4 0 0 1 2.445.525C3.366 0 4.6 0 7.067 0h2.61a.75.75 0 1 1 0 1.5Z"/><path fill="#fff" d="M10.896 11.03a.75.75 0 0 1 0-1.06l1.793-1.793a.25.25 0 0 0-.176-.427H8.177a.75.75 0 0 1 0-1.5h4.336a.25.25 0 0 0 .176-.427L10.896 4.03a.75.75 0 0 1 1.061-1.06l3.323 3.323a1 1 0 0 1 0 1.414l-3.323 3.323a.75.75 0 0 1-1.06 0Z"/></svg>`},Gt={1:"692ed6ba-e569-459a-556a-776476829e00",42161:"600a9a04-c1b9-42ca-6785-9b4b6ff85200",43114:"30c46e53-e989-45fb-4549-be3bd4eb3b00",56:"93564157-2e8e-4ce7-81df-b264dbee9b00",250:"06b26297-fe0c-4733-5d6b-ffa5498aac00",10:"ab9c186a-c52f-464b-2906-ca59d760a400",137:"41d04d42-da3b-4453-8506-668cc0727900"};var Yt,Xt=((Yt=Xt||{}).metaMask="metaMask",Yt.trust="trust",Yt.phantom="phantom",Yt.brave="brave",Yt.spotEthWallet="spotEthWallet",Yt.exodus="exodus",Yt.tokenPocket="tokenPocket",Yt.frame="frame",Yt.tally="tally",Yt.coinbaseWallet="coinbaseWallet",Yt.core="core",Yt.bitkeep="bitkeep",Yt.mathWallet="mathWallet",Yt.opera="opera",Yt.tokenary="tokenary",Yt["1inch"]="1inch",Yt.kuCoinWallet="kuCoinWallet",Yt.ledger="ledger",Yt);const Qt={injectedPreset:{metaMask:{name:"MetaMask",icon:"619537c0-2ff3-4c78-9ed8-a05e7567f300",url:"https://metamask.io",isMobile:!0},trust:{name:"Trust",icon:"0528ee7e-16d1-4089-21e3-bbfb41933100",url:"https://trustwallet.com",isMobile:!0},spotEthWallet:{name:"Spot",icon:"1bf33a89-b049-4a1c-d1f6-4dd7419ee400",url:"https://www.spot-wallet.com",isMobile:!0},phantom:{name:"Phantom",icon:"62471a22-33cb-4e65-5b54-c3d9ea24b900",url:"https://phantom.app"},core:{name:"Core",icon:"35f9c46e-cc57-4aa7-315d-e6ccb2a1d600",url:"https://core.app",isMobile:!0},bitkeep:{name:"BitKeep",icon:"3f7075d0-4ab7-4db5-404d-3e4c05e6fe00",url:"https://bitkeep.com",isMobile:!0},tokenPocket:{name:"TokenPocket",icon:"f3119826-4ef5-4d31-4789-d4ae5c18e400",url:"https://www.tokenpocket.pro",isMobile:!0},mathWallet:{name:"MathWallet",icon:"26a8f588-3231-4411-60ce-5bb6b805a700",url:"https://mathwallet.org",isMobile:!0},exodus:{name:"Exodus",icon:"4c16cad4-cac9-4643-6726-c696efaf5200",url:"https://www.exodus.com",isMobile:!0,isDesktop:!0},kuCoinWallet:{name:"KuCoin Wallet",icon:"1e47340b-8fd7-4ad6-17e7-b2bd651fae00",url:"https://kuwallet.com",isMobile:!0},ledger:{name:"Ledger",icon:"a7f416de-aa03-4c5e-3280-ab49269aef00",url:"https://www.ledger.com",isDesktop:!0},brave:{name:"Brave",icon:"125e828e-9936-4451-a8f2-949c119b7400",url:"https://brave.com/wallet"},frame:{name:"Frame",icon:"cd492418-ea85-4ef1-aeed-1c9e20b58900",url:"https://frame.sh"},tally:{name:"Tally",icon:"98d2620c-9fc8-4a1c-31bc-78d59d00a300",url:"https://tallyho.org"},coinbaseWallet:{name:"Coinbase",icon:"f8068a7f-83d7-4190-1f94-78154a12c600",url:"https://www.coinbase.com/wallet"},opera:{name:"Opera",icon:"877fa1a4-304d-4d45-ca8e-f76d1a556f00",url:"https://www.opera.com/crypto"},tokenary:{name:"Tokenary",icon:"5e481041-dc3c-4a81-373a-76bbde91b800",url:"https://tokenary.io",isDesktop:!0},"1inch":{name:"1inch Wallet",icon:"dce1ee99-403f-44a9-9f94-20de30616500",url:"https://1inch.io/wallet",isMobile:!0,isDesktop:!0}},getInjectedId(e){if("INJECTED"!==e.toUpperCase()&&e.length)return e;const{ethereum:t,spotEthWallet:r,coinbaseWalletExtension:i}=window;return t?t.isTrust||t.isTrustWallet?"trust":t.isPhantom?"phantom":t.isBraveWallet?"brave":r?"spotEthWallet":t.isExodus?"exodus":t.isTokenPocket?"tokenPocket":t.isFrame?"frame":t.isTally?"tally":i?"coinbaseWallet":t.isAvalanche?"core":t.isBitKeep?"bitkeep":t.isMathWallet?"mathWallet":t.isOpera?"opera":t.isTokenary?"tokenary":t.isOneInchIOSWallet||t.isOneInchAndroidWallet?"1inch":t.isKuCoinWallet?"kuCoinWallet":t.isMetaMask?"metaMask":"injected":"metaMask"},getInjectedName(e){var t,r;if(e.length&&"INJECTED"!==e.toUpperCase())return e;const i=Qt.getInjectedId("");return null!=(r=null==(t=Qt.injectedPreset[i])?void 0:t.name)?r:"Injected"}},er={ETH:{icon:"692ed6ba-e569-459a-556a-776476829e00"},WETH:{icon:"692ed6ba-e569-459a-556a-776476829e00"},AVAX:{icon:"30c46e53-e989-45fb-4549-be3bd4eb3b00"},FTM:{icon:"06b26297-fe0c-4733-5d6b-ffa5498aac00"},BNB:{icon:"93564157-2e8e-4ce7-81df-b264dbee9b00"},MATIC:{icon:"41d04d42-da3b-4453-8506-668cc0727900"},OP:{icon:"ab9c186a-c52f-464b-2906-ca59d760a400"}};var tr=Object.defineProperty,rr=Object.getOwnPropertySymbols,ir=Object.prototype.hasOwnProperty,nr=Object.prototype.propertyIsEnumerable,sr=(e,t,r)=>t in e?tr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,or=(e,t)=>{for(var r in t||(t={}))ir.call(t,r)&&sr(e,r,t[r]);if(rr)for(var r of rr(t))nr.call(t,r)&&sr(e,r,t[r]);return e};const ar={MOBILE_BREAKPOINT:600,W3M_RECENT_WALLET:"W3M_RECENT_WALLET",rejectStandaloneButtonComponent(){const{isStandalone:e}=ue.zb.state;if(e)throw new Error("Web3Modal button components are not available in standalone mode.")},getShadowRootElement(e,t){const r=e.renderRoot.querySelector(t);if(!r)throw new Error(`${t} not found`);return r},getWalletId:e=>Qt.getInjectedId(e),getWalletIcon(e){var t,r;const i=null==(t=Qt.injectedPreset[e])?void 0:t.icon,{projectId:n,walletImages:s}=ue.t0.state;return null!=(r=s?.[e])?r:n&&i?ue.uc.getImageUrl(i):""},getWalletName(e,t=!1){const r=Qt.getInjectedName(e);return t?r.split(" ")[0]:r},getChainIcon(e){var t;const r=Gt[e],{projectId:i,chainImages:n}=ue.t0.state;return null!=(t=n?.[e])?t:i&&r?ue.uc.getImageUrl(r):""},getTokenIcon(e){var t,r;const i=null==(t=er[e])?void 0:t.icon,{projectId:n,tokenImages:s}=ue.t0.state;return null!=(r=s?.[e])?r:n&&i?ue.uc.getImageUrl(i):""},isMobileAnimation:()=>window.innerWidth<=ar.MOBILE_BREAKPOINT,preloadImage:async e=>new Promise(((t,r)=>{const i=new Image;i.onload=t,i.onerror=r,i.src=e})),getErrorMessage:e=>e instanceof Error?e.message:"Unknown Error",debounce(e,t=500){let r;return(...i)=>{r&&clearTimeout(r),r=setTimeout((function(){e(...i)}),t)}},async handleMobileLinking(e){const{standaloneUri:t,selectedChain:r}=ue.zb.state,{links:i,name:n}=e;function s(e){let t="";null!=i&&i.universal?t=ue.zv.formatUniversalUrl(i.universal,e,n):null!=i&&i.native&&(t=ue.zv.formatNativeUrl(i.native,e,n)),ue.zv.openHref(t)}t?s(t):(await ue.Id.client().connectWalletConnect((e=>{s(e)}),r?.id),ue.jb.close()),ar.setRecentWallet(e)},async handleAndroidLinking(){const{standaloneUri:e,selectedChain:t}=ue.zb.state;e?ue.zv.openHref(e):(await ue.Id.client().connectWalletConnect((e=>{ue.zv.setWalletConnectAndroidDeepLink(e),ue.zv.openHref(e)}),t?.id),ue.jb.close())},async handleUriCopy(){const{standaloneUri:e}=ue.zb.state;if(e)await navigator.clipboard.writeText(e);else{const e=await ue.Id.client().getActiveWalletConnectUri();await navigator.clipboard.writeText(e)}ue.Vs.openToast("Link copied","success")},async handleConnectorConnection(e,t){try{const{selectedChain:t}=ue.zb.state;await ue.Id.client().connectConnector(e,t?.id),ue.jb.close()}catch(e){t?t():ue.Vs.openToast(ar.getErrorMessage(e),"error")}},getCustomWallets(){var e;const{desktopWallets:t,mobileWallets:r}=ue.t0.state;return null!=(e=ue.zv.isMobile()?r:t)?e:[]},getCustomImageUrls(){const{chainImages:e,walletImages:t}=ue.t0.state,r=Object.values(e??{}),i=Object.values(t??{});return Object.values([...r,...i])},getConnectorImageUrls:()=>ue.Id.client().getConnectors().map((({id:e})=>Qt.getInjectedId(e))).map((e=>ar.getWalletIcon(e))),truncate:(e,t=8)=>e.length<=t?e:`${e.substring(0,4)}...${e.substring(e.length-4)}`,generateAvatarColors(e){var t;const r=null==(t=e.match(/.{1,7}/g))?void 0:t.splice(0,5),i=[];r?.forEach((e=>{let t=0;for(let r=0;r<e.length;r+=1)t=e.charCodeAt(r)+((t<<5)-t),t&=t;const r=[0,0,0];for(let e=0;e<3;e+=1){const i=t>>8*e&255;r[e]=i}i.push(`rgb(${r[0]}, ${r[1]}, ${r[2]})`)}));const n=document.querySelector(":root");if(n){const e={"--color-av-1":i[0],"--color-av-2":i[1],"--color-av-3":i[2],"--color-av-4":i[3],"--color-av-5":i[4]};Object.entries(e).forEach((([e,t])=>n.style.setProperty(e,t)))}},setRecentWallet(e){localStorage.setItem(ar.W3M_RECENT_WALLET,JSON.stringify(e))},getRecentWallet(){const e=localStorage.getItem(ar.W3M_RECENT_WALLET);if(e)return JSON.parse(e)},getExtensionWallets(){const e=[];for(const[t,r]of Object.entries(Qt.injectedPreset))t!==Xt.coinbaseWallet&&r&&!r.isDesktop&&e.push(or({id:t},r));return e},caseSafeIncludes:(e,t)=>e.toUpperCase().includes(t.toUpperCase())},lr=l`#w3m-transparent-noise,.w3m-canvas,.w3m-color-placeholder,.w3m-gradient-placeholder,.w3m-highlight{inset:0;position:absolute;display:block;pointer-events:none;width:100%;height:100px;border-radius:8px 8px 0 0;transform:translateY(-5px)}.w3m-gradient-placeholder{background:linear-gradient(var(--gradient-1),var(--gradient-2),var(--gradient-3),var(--gradient-4))}.w3m-color-placeholder{background-color:var(--color-fg-accent)}.w3m-highlight{border:1px solid var(--color-overlay)}.w3m-canvas{opacity:0;transition:opacity 2s ease;box-shadow:0 8px 28px -6px rgba(10,16,31,.12),0 18px 88px -4px rgba(10,16,31,.14)}.w3m-canvas-visible{opacity:1}#w3m-transparent-noise{mix-blend-mode:multiply;opacity:.35}.w3m-toolbar{height:28px;display:flex;position:relative;margin:5px 15px 5px 5px;justify-content:space-between;align-items:center}.w3m-toolbar img,.w3m-toolbar svg{height:28px;object-position:left center;object-fit:contain}#w3m-wc-logo path{fill:var(--color-fg-inverse)}.w3m-action-btn{width:28px;height:28px;border-radius:50%;border:0;display:flex;justify-content:center;align-items:center;cursor:pointer;transition:background-color,.2s ease;background-color:var(--color-bg-1);box-shadow:0 0 0 1px var(--color-overlay),0 2px 4px -2px rgba(0,0,0,.12),0 4px 4px -2px rgba(0,0,0,.08)}.w3m-action-btn:hover{background-color:var(--color-bg-2)}.w3m-action-btn svg{display:block;object-position:center}.w3m-action-btn path{fill:var(--color-fg-1)}.w3m-actions{display:flex}.w3m-actions button:first-child{margin-right:16px}.w3m-help-active button:first-child{background-color:var(--color-fg-1)}.w3m-help-active button:first-child path{fill:var(--color-bg-1)}`;var cr=Object.defineProperty,hr=Object.getOwnPropertyDescriptor,ur=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?hr(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&cr(t,r,s),s};const dr=new class{constructor(...e){this.angle=0,this.t=1253106,this.last=0,this.height=500,this.amp=300,this.seed=15,this.freqX=14e-5,this.freqY=29e-5,this.freqDelta=1e-5,this.activeColors=[1,1,1,1],this.isMetaKey=!1,this.playing=!1,Jt(this,"resize",(()=>{this.width=window.innerWidth,this.minigl.setSize(this.width,this.height),this.minigl.setOrthographicCamera(),this.xSegCount=Math.ceil(this.width*this.conf.density[0]),this.ySegCount=Math.ceil(this.height*this.conf.density[1]),this.mesh.geometry.setTopology(this.xSegCount,this.ySegCount),this.mesh.geometry.setSize(this.width,this.height),this.mesh.material.uniforms.u_shadow_power.value=this.width<550?5:6})),Jt(this,"animate",(e=>{if(this.playing){if(this.shouldSkipFrame(e)||(this.t+=Math.min(e-this.last,1e3/15),this.last=e,this.mesh.material.uniforms.u_time.value=this.t,this.minigl.render()),0!==this.last&&this.isStatic)return this.minigl.render();requestAnimationFrame(this.animate)}}))}play(e){this.el=e,this.connect()}stop(){this.playing=!1}async connect(){this.shaderFiles={vertex:"varying vec3 v_color;void main(){float time=u_time*u_global.noiseSpeed;vec2 noiseCoord=resolution*uvNorm*u_global.noiseFreq;vec2 st=1.-uvNorm.xy;float tilt=resolution.y/2.0*uvNorm.y;float incline=resolution.x*uvNorm.x/2.0*u_vertDeform.incline;float offset=resolution.x/2.0*u_vertDeform.incline*mix(u_vertDeform.offsetBottom,u_vertDeform.offsetTop,uv.y);float noise=snoise(vec3(noiseCoord.x*u_vertDeform.noiseFreq.x+time*u_vertDeform.noiseFlow,noiseCoord.y*u_vertDeform.noiseFreq.y,time*u_vertDeform.noiseSpeed+u_vertDeform.noiseSeed))*u_vertDeform.noiseAmp;noise*=1.0-pow(abs(uvNorm.y),2.0);noise=max(0.0,noise);vec3 pos=vec3(position.x,position.y+tilt+incline+noise-offset,position.z);if(u_active_colors[0]==1.){v_color=u_baseColor;}for(int i=0;i<u_waveLayers_length;i++){if(u_active_colors[i+1]==1.){WaveLayers layer=u_waveLayers[i];float noise=smoothstep(layer.noiseFloor,layer.noiseCeil,snoise(vec3(noiseCoord.x*layer.noiseFreq.x+time*layer.noiseFlow,noiseCoord.y*layer.noiseFreq.y,time*layer.noiseSpeed+layer.noiseSeed))/2.0+0.5);v_color=blendNormal(v_color,layer.color,pow(noise,4.));}}gl_Position=projectionMatrix*modelViewMatrix*vec4(pos,1.0);}",noise:"\n// MIT License: Copyright (C) 2011 Ashima Arts. All rights reserved. https://github.com/ashima/webgl-noise, https://github.com/stegu/webgl-noise\nvec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}float snoise(vec3 v){const vec2 C=vec2(1.0/6.0,1.0/3.0);const vec4 D=vec4(0.0,0.5,1.0,2.0);vec3 i=floor(v+dot(v,C.yyy));vec3 x0=v-i+dot(i,C.xxx);vec3 g=step(x0.yzx,x0.xyz);vec3 l=1.0-g;vec3 i1=min(g.xyz,l.zxy);vec3 i2=max(g.xyz,l.zxy);vec3 x1=x0-i1+C.xxx;vec3 x2=x0-i2+C.yyy;vec3 x3=x0-D.yyy;i=mod289(i);vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));float n_=0.142857142857;vec3 ns=n_*D.wyz-D.xzx;vec4 j=p-49.0*floor(p*ns.z*ns.z);vec4 x_=floor(j*ns.z);vec4 y_=floor(j-7.0*x_);vec4 x=x_*ns.x+ns.yyyy;vec4 y=y_*ns.x+ns.yyyy;vec4 h=1.0-abs(x)-abs(y);vec4 b0=vec4(x.xy,y.xy);vec4 b1=vec4(x.zw,y.zw);vec4 s0=floor(b0)*2.0+1.0;vec4 s1=floor(b1)*2.0+1.0;vec4 sh=-step(h,vec4(0.0));vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;vec3 p0=vec3(a0.xy,h.x);vec3 p1=vec3(a0.zw,h.y);vec3 p2=vec3(a1.xy,h.z);vec3 p3=vec3(a1.zw,h.w);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);m=m*m;return 42.0*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));}",blend:"\n// MIT Licence: Copyright (C) 2015 Jamie Owen. All rights reserved. https://github.com/jamieowen/glsl-blend\nvec3 blendNormal(vec3 base, vec3 blend){return blend;}vec3 blendNormal(vec3 base,vec3 blend,float opacity){return (blendNormal(base,blend)*opacity+base*(1.0-opacity));}float blendScreen(float base,float blend){return 1.0-((1.0-base)*(1.0-blend));}vec3 blendScreen(vec3 base,vec3 blend){return vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));}vec3 blendScreen(vec3 base,vec3 blend,float opacity){return (blendScreen(base, blend)*opacity+base*(1.0-opacity));}vec3 blendMultiply(vec3 base,vec3 blend){return base*blend;}vec3 blendMultiply(vec3 base,vec3 blend,float opacity){return (blendMultiply(base,blend)*opacity+base*(1.0-opacity));}float blendOverlay(float base,float blend){return base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));}vec3 blendOverlay(vec3 base,vec3 blend){return vec3(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));}vec3 blendOverlay(vec3 base,vec3 blend,float opacity){return (blendOverlay(base,blend)*opacity+base*(1.0-opacity));}vec3 blendHardLight(vec3 base,vec3 blend){return blendOverlay(blend,base);}vec3 blendHardLight(vec3 base,vec3 blend,float opacity){return (blendHardLight(base,blend)*opacity+base*(1.0-opacity));}float blendSoftLight(float base,float blend){return (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));}vec3 blendSoftLight(vec3 base,vec3 blend){return vec3(blendSoftLight(base.r,blend.r),blendSoftLight(base.g,blend.g),blendSoftLight(base.b,blend.b));}vec3 blendSoftLight(vec3 base,vec3 blend,float opacity){return (blendSoftLight(base,blend)*opacity+base*(1.0-opacity));}float blendColorDodge(float base,float blend){return (blend==1.0)?blend:min(base/(1.0-blend),1.0);}vec3 blendColorDodge(vec3 base,vec3 blend){return vec3(blendColorDodge(base.r,blend.r),blendColorDodge(base.g,blend.g),blendColorDodge(base.b,blend.b));}vec3 blendColorDodge(vec3 base,vec3 blend,float opacity){return (blendColorDodge(base, blend)*opacity+base*(1.0-opacity));}float blendColorBurn(float base,float blend){return (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);}vec3 blendColorBurn(vec3 base,vec3 blend){return vec3(blendColorBurn(base.r,blend.r),blendColorBurn(base.g,blend.g),blendColorBurn(base.b,blend.b));}vec3 blendColorBurn(vec3 base,vec3 blend,float opacity){return (blendColorBurn(base, blend)*opacity+base*(1.0-opacity));}float blendVividLight(float base,float blend){return (blend<0.5)?blendColorBurn(base,(2.0*blend)):blendColorDodge(base,(2.0*(blend-0.5)));}vec3 blendVividLight(vec3 base,vec3 blend){return vec3(blendVividLight(base.r,blend.r),blendVividLight(base.g,blend.g),blendVividLight(base.b,blend.b));}vec3 blendVividLight(vec3 base,vec3 blend,float opacity){return (blendVividLight(base,blend)*opacity+base*(1.0-opacity));}float blendLighten(float base,float blend){return max(blend,base);}vec3 blendLighten(vec3 base,vec3 blend){return vec3(blendLighten(base.r,blend.r),blendLighten(base.g,blend.g),blendLighten(base.b,blend.b));}vec3 blendLighten(vec3 base,vec3 blend,float opacity){return (blendLighten(base,blend)*opacity+base*(1.0-opacity));}float blendLinearBurn(float base,float blend){return max(base+blend-1.0,0.0);}vec3 blendLinearBurn(vec3 base,vec3 blend){return max(base+blend-vec3(1.0),vec3(0.0));}vec3 blendLinearBurn(vec3 base,vec3 blend,float opacity){return (blendLinearBurn(base, blend)*opacity+base*(1.0-opacity));}float blendLinearDodge(float base,float blend){return min(base+blend,1.0);}vec3 blendLinearDodge(vec3 base,vec3 blend){return min(base+blend,vec3(1.0));}vec3 blendLinearDodge(vec3 base,vec3 blend,float opacity){return (blendLinearDodge(base,blend)*opacity+base*(1.0-opacity));}float blendLinearLight(float base,float blend){return blend<0.5?blendLinearBurn(base,(2.0*blend)):blendLinearDodge(base,(2.0*(blend-0.5)));}vec3 blendLinearLight(vec3 base,vec3 blend){return vec3(blendLinearLight(base.r,blend.r),blendLinearLight(base.g,blend.g),blendLinearLight(base.b,blend.b));}vec3 blendLinearLight(vec3 base,vec3 blend,float opacity){return (blendLinearLight(base,blend)*opacity+base*(1.0-opacity));}",fragment:"varying vec3 v_color;void main(){vec3 color=v_color;if(u_darken_top==1.0){vec2 st=gl_FragCoord.xy/resolution.xy;color.g-=pow(st.y+sin(-12.0)*st.x,u_shadow_power)*0.4;}gl_FragColor=vec4(color,1.0);}"},this.conf={density:[.06,.16]},this.minigl=new class{constructor(e,t,r){const i=this;i.canvas=e,i.gl=i.canvas.getContext("webgl",{antialias:!0}),i.meshes=[];const n=i.gl;t&&r&&this.setSize(t,r),Object.defineProperties(i,{Material:{enumerable:!1,value:class{constructor(e,t,r={}){const s=this;function o(e,t){const r=n.createShader(e);return n.shaderSource(r,t),n.compileShader(r),n.getShaderParameter(r,n.COMPILE_STATUS)||console.error(n.getShaderInfoLog(r)),r}function a(e,t){return Object.entries(e).map((([e,r])=>r.getDeclaration(e,t))).join("")}s.uniforms=r,s.uniformInstances=[];const l="precision highp float;";s.vertexSource=`${l} attribute vec4 position;attribute vec2 uv;attribute vec2 uvNorm;${a(i.commonUniforms,"vertex")} ${a(r,"vertex")} ${e}`,s.Source=`${l} ${a(i.commonUniforms,"fragment")} ${a(r,"fragment")} ${t} `,s.vertexShader=o(n.VERTEX_SHADER,s.vertexSource),s.fragmentShader=o(n.FRAGMENT_SHADER,s.Source),s.program=n.createProgram(),n.attachShader(s.program,s.vertexShader),n.attachShader(s.program,s.fragmentShader),n.linkProgram(s.program),n.getProgramParameter(s.program,n.LINK_STATUS)||console.error(n.getProgramInfoLog(s.program)),n.useProgram(s.program),s.attachUniforms(void 0,i.commonUniforms),s.attachUniforms(void 0,s.uniforms)}attachUniforms(e,t){const r=this;void 0===e?Object.entries(t).forEach((([e,t])=>{r.attachUniforms(e,t)})):"array"==t.type?t.value.forEach(((t,i)=>r.attachUniforms(`${e}[${i}]`,t))):"struct"==t.type?Object.entries(t.value).forEach((([t,i])=>r.attachUniforms(`${e}.${t}`,i))):r.uniformInstances.push({uniform:t,location:n.getUniformLocation(r.program,e)})}}},Uniform:{enumerable:!1,value:class{constructor(e){this.type="float",Object.assign(this,e),this.typeFn={float:"1f",int:"1i",vec2:"2fv",vec3:"3fv",vec4:"4fv",mat4:"Matrix4fv"}[this.type]||"1f",this.update()}update(e){void 0!==this.value&&n[`uniform${this.typeFn}`](e,0===this.typeFn.indexOf("Matrix")?this.transpose:this.value,0===this.typeFn.indexOf("Matrix")?this.value:null)}getDeclaration(e,t,r){const i=this;if(i.excludeFrom!==t){if("array"===i.type)return i.value[0].getDeclaration(e,t,i.value.length)+`const int ${e}_length=${i.value.length};`;if("struct"===i.type){let n=e.replace("u_","");return n=n.charAt(0).toUpperCase()+n.slice(1),`uniform struct ${n} {`+Object.entries(i.value).map((([e,r])=>r.getDeclaration(e,t).replace(/^uniform/,""))).join("")+`} ${e}${r>0?`[${r}]`:""};`}return`uniform ${i.type} ${e}${r>0?`[${r}]`:""};`}}}},PlaneGeometry:{enumerable:!1,value:class{constructor(e,t,r,s,o){n.createBuffer(),this.attributes={position:new i.Attribute({target:n.ARRAY_BUFFER,size:3}),uv:new i.Attribute({target:n.ARRAY_BUFFER,size:2}),uvNorm:new i.Attribute({target:n.ARRAY_BUFFER,size:2}),index:new i.Attribute({target:n.ELEMENT_ARRAY_BUFFER,size:3,type:n.UNSIGNED_SHORT})},this.setTopology(r,s),this.setSize(e,t,o)}setTopology(e=1,t=1){const r=this;r.xSegCount=e,r.ySegCount=t,r.vertexCount=(r.xSegCount+1)*(r.ySegCount+1),r.quadCount=r.xSegCount*r.ySegCount*2,r.attributes.uv.values=new Float32Array(2*r.vertexCount),r.attributes.uvNorm.values=new Float32Array(2*r.vertexCount),r.attributes.index.values=new Uint16Array(3*r.quadCount);for(let e=0;e<=r.ySegCount;e++)for(let t=0;t<=r.xSegCount;t++){const i=e*(r.xSegCount+1)+t;if(r.attributes.uv.values[2*i]=t/r.xSegCount,r.attributes.uv.values[2*i+1]=1-e/r.ySegCount,r.attributes.uvNorm.values[2*i]=t/r.xSegCount*2-1,r.attributes.uvNorm.values[2*i+1]=1-e/r.ySegCount*2,t<r.xSegCount&&e<r.ySegCount){const n=e*r.xSegCount+t;r.attributes.index.values[6*n]=i,r.attributes.index.values[6*n+1]=i+1+r.xSegCount,r.attributes.index.values[6*n+2]=i+1,r.attributes.index.values[6*n+3]=i+1,r.attributes.index.values[6*n+4]=i+1+r.xSegCount,r.attributes.index.values[6*n+5]=i+2+r.xSegCount}}r.attributes.uv.update(),r.attributes.uvNorm.update(),r.attributes.index.update()}setSize(e=1,t=1,r="xz"){const i=this;i.width=e,i.height=t,i.orientation=r,i.attributes.position.values&&i.attributes.position.values.length===3*i.vertexCount||(i.attributes.position.values=new Float32Array(3*i.vertexCount));const n=e/-2,s=t/-2,o=e/i.xSegCount,a=t/i.ySegCount;for(let e=0;e<=i.ySegCount;e++){const t=s+e*a;for(let s=0;s<=i.xSegCount;s++){const a=n+s*o,l=e*(i.xSegCount+1)+s;i.attributes.position.values[3*l+"xyz".indexOf(r[0])]=a,i.attributes.position.values[3*l+"xyz".indexOf(r[1])]=-t}}i.attributes.position.update()}}},Mesh:{enumerable:!1,value:class{constructor(e,t){const r=this;r.geometry=e,r.material=t,r.attributeInstances=[],Object.entries(r.geometry.attributes).forEach((([e,t])=>{r.attributeInstances.push({attribute:t,location:t.attach(e,r.material.program)})})),i.meshes.push(r)}draw(){n.useProgram(this.material.program),this.material.uniformInstances.forEach((({uniform:e,location:t})=>e.update(t))),this.attributeInstances.forEach((({attribute:e,location:t})=>e.use(t))),n.drawElements(n.TRIANGLES,this.geometry.attributes.index.values.length,n.UNSIGNED_SHORT,0)}remove(){i.meshes=i.meshes.filter((e=>e!=this))}}},Attribute:{enumerable:!1,value:class{constructor(e){this.type=n.FLOAT,this.normalized=!1,this.buffer=n.createBuffer(),Object.assign(this,e),this.update()}update(){void 0!==this.values&&(n.bindBuffer(this.target,this.buffer),n.bufferData(this.target,this.values,n.STATIC_DRAW))}attach(e,t){const r=n.getAttribLocation(t,e);return this.target===n.ARRAY_BUFFER&&(n.enableVertexAttribArray(r),n.vertexAttribPointer(r,this.size,this.type,this.normalized,0,0)),r}use(e){n.bindBuffer(this.target,this.buffer),this.target===n.ARRAY_BUFFER&&(n.enableVertexAttribArray(e),n.vertexAttribPointer(e,this.size,this.type,this.normalized,0,0))}}}});const s=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];i.commonUniforms={projectionMatrix:new i.Uniform({type:"mat4",value:s}),modelViewMatrix:new i.Uniform({type:"mat4",value:s}),resolution:new i.Uniform({type:"vec2",value:[1,1]}),aspectRatio:new i.Uniform({type:"float",value:1})}}setSize(e=640,t=480){this.width=e,this.height=t,this.canvas.width=e,this.canvas.height=t,this.gl.viewport(0,0,e,t),this.commonUniforms.resolution.value=[e,t],this.commonUniforms.aspectRatio.value=e/t}setOrthographicCamera(e=0,t=0,r=0,i=-2e3,n=2e3){this.commonUniforms.projectionMatrix.value=[2/this.width,0,0,0,0,2/this.height,0,0,0,0,2/(i-n),0,e,t,r,1]}render(){this.gl.clearColor(0,0,0,0),this.gl.clearDepth(1),this.meshes.forEach((e=>e.draw()))}}(this.el,null,null,!0),requestAnimationFrame((()=>{this.el&&(this.computedCanvasStyle=getComputedStyle(this.el),this.waitForCssVars())}))}initMaterial(){this.uniforms={u_time:new this.minigl.Uniform({value:0}),u_shadow_power:new this.minigl.Uniform({value:5}),u_darken_top:new this.minigl.Uniform({value:""===this.el.dataset.jsDarkenTop?1:0}),u_active_colors:new this.minigl.Uniform({value:this.activeColors,type:"vec4"}),u_global:new this.minigl.Uniform({value:{noiseFreq:new this.minigl.Uniform({value:[this.freqX,this.freqY],type:"vec2"}),noiseSpeed:new this.minigl.Uniform({value:5e-6})},type:"struct"}),u_vertDeform:new this.minigl.Uniform({value:{incline:new this.minigl.Uniform({value:Math.sin(this.angle)/Math.cos(this.angle)}),offsetTop:new this.minigl.Uniform({value:-.5}),offsetBottom:new this.minigl.Uniform({value:-.5}),noiseFreq:new this.minigl.Uniform({value:[3,4],type:"vec2"}),noiseAmp:new this.minigl.Uniform({value:this.amp}),noiseSpeed:new this.minigl.Uniform({value:10}),noiseFlow:new this.minigl.Uniform({value:3}),noiseSeed:new this.minigl.Uniform({value:this.seed})},type:"struct",excludeFrom:"fragment"}),u_baseColor:new this.minigl.Uniform({value:this.sectionColors[0],type:"vec3",excludeFrom:"fragment"}),u_waveLayers:new this.minigl.Uniform({value:[],excludeFrom:"fragment",type:"array"})};for(let e=1;e<this.sectionColors.length;e+=1)this.uniforms.u_waveLayers.value.push(new this.minigl.Uniform({value:{color:new this.minigl.Uniform({value:this.sectionColors[e],type:"vec3"}),noiseFreq:new this.minigl.Uniform({value:[2+e/this.sectionColors.length,3+e/this.sectionColors.length],type:"vec2"}),noiseSpeed:new this.minigl.Uniform({value:11+.3*e}),noiseFlow:new this.minigl.Uniform({value:6.5+.3*e}),noiseSeed:new this.minigl.Uniform({value:this.seed+10*e}),noiseFloor:new this.minigl.Uniform({value:.1}),noiseCeil:new this.minigl.Uniform({value:.63+.07*e})},type:"struct"}));return this.vertexShader=[this.shaderFiles.noise,this.shaderFiles.blend,this.shaderFiles.vertex].join(""),new this.minigl.Material(this.vertexShader,this.shaderFiles.fragment,this.uniforms)}initMesh(){this.material=this.initMaterial(),this.geometry=new this.minigl.PlaneGeometry,this.mesh=new this.minigl.Mesh(this.geometry,this.material)}shouldSkipFrame(e){return!!window.document.hidden||parseInt(e,10)%2==0||void 0}updateFrequency(e){this.freqX+=e,this.freqY+=e}toggleColor(e){this.activeColors[e]=0===this.activeColors[e]?1:0}init(){this.playing=!0,this.initGradientColors(),this.initMesh(),this.resize(),requestAnimationFrame(this.animate)}waitForCssVars(){this.computedCanvasStyle&&this.computedCanvasStyle.getPropertyValue("--gradient-1").indexOf("#"),this.init()}initGradientColors(){this.sectionColors=["--gradient-1","--gradient-2","--gradient-3","--gradient-4"].map((e=>{let t=this.computedCanvasStyle.getPropertyValue(e).trim();return 4===t.length&&(t=`#${t.substr(1).split("").map((e=>e+e)).join("")}`),t&&`0x${t.substr(1)}`})).filter(Boolean).map(Kt)}};let pr=class extends ne{constructor(){super(),this.open=!1,this.isHelp=!1,this.unsubscribeRouter=void 0,this.playTimeout=void 0,this.unsubscribeRouter=ue.AV.subscribe((e=>{this.isHelp="Help"===e.view}))}firstUpdated(){const{themeBackground:e}=ue.t0.state;"gradient"===e&&(this.playTimeout=setTimeout((()=>{dr.play(this.canvasEl),this.open=!0}),800))}disconnectedCallback(){var e;null==(e=this.unsubscribeRouter)||e.call(this),clearTimeout(this.playTimeout),dr.stop()}get canvasEl(){return ar.getShadowRootElement(this,".w3m-canvas")}onHelp(){ue.AV.push("Help")}render(){const{themeBackground:e}=ue.t0.state,t={"w3m-canvas":!0,"w3m-canvas-visible":this.open},r={"w3m-actions":!0,"w3m-help-active":this.isHelp};return j`${"themeColor"===e?j`<div class="w3m-color-placeholder"></div>`:null} ${"gradient"===e?j`<div class="w3m-gradient-placeholder"></div><canvas class="${pe(t)}"></canvas>${Zt.NOISE_TEXTURE}`:null}<div class="w3m-highlight"></div><div class="w3m-toolbar">${Zt.WALLET_CONNECT_LOGO}<div class="${pe(r)}"><button class="w3m-action-btn" @click="${this.onHelp}">${Zt.HELP_ICON}</button> <button class="w3m-action-btn" @click="${ue.jb.close}">${Zt.CROSS_ICON}</button></div></div>`}};pr.styles=[kt.globalCss,lr],ur([ce()],pr.prototype,"open",2),ur([ce()],pr.prototype,"isHelp",2),pr=ur([oe("w3m-modal-backcard")],pr);const fr=l`main{padding:20px;padding-top:0;width:100%}`;Object.defineProperty,Object.getOwnPropertyDescriptor;let gr=class extends ne{render(){return j`<main><slot></slot></main>`}};gr.styles=[kt.globalCss,fr],gr=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-modal-content")],gr);const mr=l`footer{padding:10px;display:flex;flex-direction:column;align-items:inherit;justify-content:inherit;border-top:1px solid var(--color-bg-2)}`;Object.defineProperty,Object.getOwnPropertyDescriptor;let vr=class extends ne{render(){return j`<footer><slot></slot></footer>`}};vr.styles=[kt.globalCss,mr],vr=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-modal-footer")],vr);const br=l`header{display:flex;justify-content:center;align-items:center;padding:20px;position:relative}.w3m-border{border-bottom:1px solid var(--color-bg-2);margin-bottom:20px}header button{padding:15px 20px;transition:opacity .2s ease}@media(hover:hover){header button:hover{opacity:.5}}.w3m-back-btn{position:absolute;left:0}.w3m-action-btn{position:absolute;right:0}path{fill:var(--color-fg-accent)}`;var wr=Object.defineProperty,yr=Object.getOwnPropertyDescriptor,_r=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?yr(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&wr(t,r,s),s};let Er=class extends ne{constructor(){super(...arguments),this.title="",this.onAction=void 0,this.actionIcon=void 0,this.border=!1}backBtnTemplate(){return j`<button class="w3m-back-btn" @click="${ue.AV.goBack}">${Zt.BACK_ICON}</button>`}actionBtnTemplate(){return j`<button class="w3m-action-btn" @click="${this.onAction}">${this.actionIcon}</button>`}render(){const e={"w3m-border":this.border},t=ue.AV.state.history.length>1,r=this.title?j`<w3m-text variant="large-bold">${this.title}</w3m-text>`:j`<slot></slot>`;return j`<header class="${pe(e)}">${t?this.backBtnTemplate():null} ${r} ${this.onAction?this.actionBtnTemplate():null}</header>`}};Er.styles=[kt.globalCss,br],_r([le()],Er.prototype,"title",2),_r([le()],Er.prototype,"onAction",2),_r([le()],Er.prototype,"actionIcon",2),_r([le()],Er.prototype,"border",2),Er=_r([oe("w3m-modal-header")],Er);const xr=l`.w3m-router{overflow:hidden;will-change:transform}.w3m-content{display:flex;flex-direction:column}`;var Cr=Object.defineProperty,Sr=Object.getOwnPropertyDescriptor,Ir=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Sr(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Cr(t,r,s),s};let Or=class extends ne{constructor(){super(),this.view=ue.AV.state.view,this.prevView=ue.AV.state.view,this.unsubscribe=void 0,this.oldHeight="0px",this.resizeObserver=void 0,this.unsubscribe=ue.AV.subscribe((e=>{this.view!==e.view&&this.onChangeRoute()}))}firstUpdated(){this.resizeObserver=new ResizeObserver((([e])=>{const t=`${e.contentRect.height}px`;"0px"!==this.oldHeight&&(bt(this.routerEl,{height:[this.oldHeight,t]},{duration:.2}),bt(this.routerEl,{opacity:[0,1],scale:[.99,1]},{duration:.37,delay:.03})),this.oldHeight=t})),this.resizeObserver.observe(this.contentEl)}disconnectedCallback(){var e,t;null==(e=this.unsubscribe)||e.call(this),null==(t=this.resizeObserver)||t.disconnect()}get routerEl(){return ar.getShadowRootElement(this,".w3m-router")}get contentEl(){return ar.getShadowRootElement(this,".w3m-content")}viewTemplate(){switch(this.view){case"ConnectWallet":return j`<w3m-connect-wallet-view></w3m-connect-wallet-view>`;case"SelectNetwork":return j`<w3m-select-network-view></w3m-select-network-view>`;case"InjectedConnector":return j`<w3m-injected-connector-view></w3m-injected-connector-view>`;case"InstallConnector":return j`<w3m-install-connector-view></w3m-install-connector-view>`;case"GetWallet":return j`<w3m-get-wallet-view></w3m-get-wallet-view>`;case"DesktopConnector":return j`<w3m-desktop-connector-view></w3m-desktop-connector-view>`;case"WalletExplorer":return j`<w3m-wallet-explorer-view></w3m-wallet-explorer-view>`;case"Qrcode":return j`<w3m-qrcode-view></w3m-qrcode-view>`;case"Help":return j`<w3m-help-view></w3m-help-view>`;case"WalletFilter":return j`<w3m-wallet-filter-view></w3m-wallet-filter-view>`;case"Account":return j`<w3m-account-view></w3m-account-view>`;case"SwitchNetwork":return j`<w3m-switch-network-view></w3m-switch-network-view>`;default:return j`<div>Not Found</div>`}}async onChangeRoute(){await bt(this.routerEl,{opacity:[1,0],scale:[1,1.02]},{duration:.15}).finished,this.view=ue.AV.state.view}render(){return j`<div class="w3m-router"><div class="w3m-content">${this.viewTemplate()}</div></div>`}};Or.styles=[kt.globalCss,xr],Ir([ce()],Or.prototype,"view",2),Ir([ce()],Or.prototype,"prevView",2),Or=Ir([oe("w3m-modal-router")],Or);const Ar=l`div{height:36px;width:max-content;display:flex;justify-content:center;align-items:center;padding:10px 15px;position:absolute;top:12px;box-shadow:0 6px 14px -6px rgba(10,16,31,.3),0 10px 32px -4px rgba(10,16,31,.15);z-index:2;left:50%;transform:translateX(-50%);pointer-events:none;backdrop-filter:blur(20px) saturate(1.8);-webkit-backdrop-filter:blur(20px) saturate(1.8);border-radius:36px;border:1px solid var(--color-overlay);background-color:var(--color-overlay)}svg{margin-right:5px}@-moz-document url-prefix(){div{background-color:var(--color-bg-3)}}.w3m-success path{fill:var(--color-fg-accent)}.w3m-error path{fill:var(--color-err)}`;var Rr=Object.defineProperty,Pr=Object.getOwnPropertyDescriptor,kr=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Pr(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Rr(t,r,s),s};let Nr=class extends ne{constructor(){super(),this.open=!1,this.unsubscribe=void 0,this.timeout=void 0,this.unsubscribe=ue.Vs.subscribe((e=>{e.open?(this.open=!0,this.timeout=setTimeout((()=>ue.Vs.closeToast()),2200)):(this.open=!1,clearTimeout(this.timeout))}))}disconnectedCallback(){var e;null==(e=this.unsubscribe)||e.call(this),clearTimeout(this.timeout),ue.Vs.closeToast()}render(){const{message:e,variant:t}=ue.Vs.state,r={"w3m-success":"success"===t,"w3m-error":"error"===t};return this.open?j`<div class="${pe(r)}">${"success"===t?Zt.CHECKMARK_ICON:null} ${"error"===t?Zt.CROSS_ICON:null}<w3m-text variant="small-normal">${e}</w3m-text></div>`:null}};Nr.styles=[kt.globalCss,Ar],kr([ce()],Nr.prototype,"open",2),Nr=kr([oe("w3m-modal-toast")],Nr);const Mr=l`button{padding:5px;border-radius:10px;transition:all .2s ease;display:flex;flex-direction:column;align-items:center;justify-content:center;width:80px;height:90px}w3m-network-image{width:54px;height:59px}w3m-text{width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;text-align:center;margin-top:5px}button:hover{background-color:var(--color-overlay)}`;var Tr=Object.defineProperty,Lr=Object.getOwnPropertyDescriptor,$r=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Lr(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Tr(t,r,s),s};let Ur=class extends ne{constructor(){super(...arguments),this.onClick=()=>null,this.name="",this.chainId=""}render(){return j`<button @click="${this.onClick}"><w3m-network-image chainId="${this.chainId}"></w3m-network-image><w3m-text variant="xsmall-normal">${this.name}</w3m-text></button>`}};Ur.styles=[kt.globalCss,Mr],$r([le()],Ur.prototype,"onClick",2),$r([le()],Ur.prototype,"name",2),$r([le()],Ur.prototype,"chainId",2),Ur=$r([oe("w3m-network-button")],Ur);const jr=l`div{width:inherit;height:inherit}.polygon-stroke{stroke:var(--color-overlay)}svg{width:100%;height:100%;margin:0}#network-placeholder-fill{fill:var(--color-bg-3)}#network-placeholder-dash{stroke:var(--color-overlay)}`;var Dr=Object.defineProperty,Br=Object.getOwnPropertyDescriptor,zr=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Br(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Dr(t,r,s),s};let Wr=class extends ne{constructor(){super(...arguments),this.chainId=""}render(){const e=ar.getChainIcon(this.chainId);return e?j`<div><svg width="54" height="59" viewBox="0 0 54 59" fill="none"><defs><clipPath id="polygon"><path d="M17.033 4.964c3.852-2.262 5.778-3.393 7.84-3.77a11.807 11.807 0 0 1 4.254 0c2.062.377 3.988 1.508 7.84 3.77l6.066 3.562c3.852 2.263 5.777 3.394 7.13 5.022a12.268 12.268 0 0 1 2.127 3.747c.71 2.006.71 4.268.71 8.793v7.124c0 4.525 0 6.787-.71 8.793a12.268 12.268 0 0 1-2.126 3.747c-1.354 1.628-3.28 2.76-7.131 5.022l-6.066 3.562c-3.852 2.262-5.778 3.393-7.84 3.771a11.814 11.814 0 0 1-4.254 0c-2.062-.378-3.988-1.509-7.84-3.77l-6.066-3.563c-3.852-2.263-5.778-3.394-7.13-5.022a12.268 12.268 0 0 1-2.127-3.747C1 40 1 37.737 1 33.212v-7.124c0-4.525 0-6.787.71-8.793a12.268 12.268 0 0 1 2.127-3.747c1.352-1.628 3.278-2.76 7.13-5.022l6.066-3.562Z"/></clipPath></defs><image clip-path="url(#polygon)" href="${e}" width="58" height="59" x="-2" y="0"/><path class="polygon-stroke" d="M17.22 5.295c3.877-2.277 5.737-3.363 7.72-3.726a11.44 11.44 0 0 1 4.12 0c1.983.363 3.844 1.45 7.72 3.726l6.065 3.562c3.876 2.276 5.731 3.372 7.032 4.938a11.896 11.896 0 0 1 2.06 3.63c.683 1.928.688 4.11.688 8.663v7.124c0 4.553-.005 6.735-.688 8.664a11.896 11.896 0 0 1-2.06 3.63c-1.3 1.565-3.156 2.66-7.032 4.937l-6.065 3.563c-3.877 2.276-5.737 3.362-7.72 3.725a11.46 11.46 0 0 1-4.12 0c-1.983-.363-3.844-1.449-7.72-3.726l-6.065-3.562c-3.876-2.276-5.731-3.372-7.032-4.938a11.885 11.885 0 0 1-2.06-3.63c-.682-1.928-.688-4.11-.688-8.663v-7.124c0-4.553.006-6.735.688-8.664a11.885 11.885 0 0 1 2.06-3.63c1.3-1.565 3.156-2.66 7.032-4.937l6.065-3.562Z" stroke="#fff"/></svg></div>`:j`${Zt.NETWORK_PLACEHOLDER}`}};function Hr(e,t,r){return e!==t&&(e-t<0?t-e:e-t)<=r+.1}Wr.styles=[kt.globalCss,jr],zr([le()],Wr.prototype,"chainId",2),Wr=zr([oe("w3m-network-image")],Wr);const Vr={generate(e,t,r,i){const n="light"===i?"#141414":"#fff",s="light"===i?"#fff":"#141414",o=[],a=function(e,t){const r=Array.prototype.slice.call(Ct.create(e,{errorCorrectionLevel:"Q"}).modules.data,0),i=Math.sqrt(r.length);return r.reduce(((e,t,r)=>(r%i==0?e.push([t]):e[e.length-1].push(t))&&e),[])}(e),l=t/a.length,c=[{x:0,y:0},{x:1,y:0},{x:0,y:1}];c.forEach((({x:e,y:t})=>{const r=(a.length-7)*l*e,i=(a.length-7)*l*t;for(let e=0;e<c.length;e+=1){const t=l*(7-2*e);o.push(D`<rect fill="${e%2==0?n:s}" height="${t}" rx="${.32*t}" ry="${.32*t}" width="${t}" x="${r+l*e}" y="${i+l*e}">`)}}));const h=Math.floor((r+25)/l),u=a.length/2-h/2,d=a.length/2+h/2-1,p=[];a.forEach(((e,t)=>{e.forEach(((e,r)=>{if(a[t][r]&&!(t<7&&r<7||t>a.length-8&&r<7||t<7&&r>a.length-8)&&!(t>u&&t<d&&r>u&&r<d)){const e=t*l+l/2,i=r*l+l/2;p.push([e,i])}}))}));const f={};return p.forEach((([e,t])=>{f[e]?f[e].push(t):f[e]=[t]})),Object.entries(f).map((([e,t])=>{const r=t.filter((e=>t.every((t=>!Hr(e,t,l)))));return[Number(e),r]})).forEach((([e,t])=>{t.forEach((t=>{o.push(D`<circle cx="${e}" cy="${t}" fill="${n}" r="${l/2.5}">`)}))})),Object.entries(f).filter((([e,t])=>t.length>1)).map((([e,t])=>{const r=t.filter((e=>t.some((t=>Hr(e,t,l)))));return[Number(e),r]})).map((([e,t])=>{t.sort(((e,t)=>e<t?-1:1));const r=[];for(const e of t){const t=r.find((t=>t.some((t=>Hr(e,t,l)))));t?t.push(e):r.push([e])}return[e,r.map((e=>[e[0],e[e.length-1]]))]})).forEach((([e,t])=>{t.forEach((([t,r])=>{o.push(D`<line x1="${e}" x2="${e}" y1="${t}" y2="${r}" stroke="${n}" stroke-width="${l/1.25}" stroke-linecap="round">`)}))})),o}},Fr=l`div{position:relative;user-select:none;display:block;overflow:hidden;width:100%;aspect-ratio:1/1}svg:first-child,w3m-wallet-image{position:absolute;top:50%;left:50%;transform:translateY(-50%) translateX(-50%)}w3m-wallet-image{transform:translateY(-50%) translateX(-50%)}w3m-wallet-image{width:25%;height:25%;border-radius:15px}svg:first-child{transform:translateY(-50%) translateX(-50%) scale(.9)}svg:first-child path:first-child{fill:var(--color-fg-accent)}svg:first-child path:last-child{stroke:var(--color-overlay)}`;var qr=Object.defineProperty,Kr=Object.getOwnPropertyDescriptor,Jr=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Kr(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&qr(t,r,s),s};let Zr=class extends ne{constructor(){super(...arguments),this.uri="",this.size=0,this.logoSrc="",this.walletId=""}svgTemplate(){var e;const t=null!=(e=ue.t0.state.themeMode)?e:"light";return D`<svg height="${this.size}" width="${this.size}">${Vr.generate(this.uri,this.size,this.size/4,t)}</svg>`}render(){return j`<div>${this.walletId||this.logoSrc?j`<w3m-wallet-image walletId="${xt(this.walletId)}" src="${xt(this.logoSrc)}"></w3m-wallet-image>`:Zt.WALLET_CONNECT_ICON_COLORED} ${this.svgTemplate()}</div>`}};Zr.styles=[kt.globalCss,Fr],Jr([le()],Zr.prototype,"uri",2),Jr([le({type:Number})],Zr.prototype,"size",2),Jr([le()],Zr.prototype,"logoSrc",2),Jr([le()],Zr.prototype,"walletId",2),Zr=Jr([oe("w3m-qrcode")],Zr);const Gr=l`:host{position:relative;height:28px;width:75%}input{width:100%;height:100%;line-height:28px;border-radius:28px;font-style:normal;font-family:-apple-system,system-ui,BlinkMacSystemFont,'Segoe UI',Roboto,Ubuntu,'Helvetica Neue',sans-serif;font-feature-settings:'case' on;font-weight:500;font-size:16px;letter-spacing:-.03em;padding:0 10px 0 34px;transition:.2s all ease;color:transparent;position:absolute;background-color:var(--color-bg-3);box-shadow:inset 0 0 0 1px var(--color-overlay)}input::placeholder{color:transparent}svg{margin-right:4px}.w3m-placeholder{top:0;left:50%;transform:translateX(-50%);transition:.2s all ease;pointer-events:none;display:flex;align-items:center;justify-content:center;height:100%;width:fit-content;position:relative}input:focus-within+.w3m-placeholder,input:not(:placeholder-shown)+.w3m-placeholder{transform:translateX(10px);left:0}w3m-text{opacity:1;transition:.2s opacity ease}input:focus-within+.w3m-placeholder w3m-text,input:not(:placeholder-shown)+.w3m-placeholder w3m-text{opacity:0}input:focus-within,input:not(:placeholder-shown){color:var(--color-fg-1)}input:focus-within{box-shadow:inset 0 0 0 1px var(--color-fg-accent)}path{fill:var(--color-fg-2)}`;var Yr=Object.defineProperty,Xr=Object.getOwnPropertyDescriptor,Qr=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Xr(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Yr(t,r,s),s};let ei=class extends ne{constructor(){super(...arguments),this.onChange=()=>null}render(){const e=ue.zv.isMobile()?"Search mobile wallets":"Search desktop wallets";return j`<input type="text" @input="${this.onChange}" placeholder="${e}"><div class="w3m-placeholder">${Zt.SEARCH_ICON}<w3m-text color="secondary" variant="medium-thin">${e}</w3m-text></div>`}};ei.styles=[kt.globalCss,Gr],Qr([le()],ei.prototype,"onChange",2),ei=Qr([oe("w3m-search-input")],ei);const ti=l`@keyframes rotate{100%{transform:rotate(360deg)}}@keyframes dash{0%{stroke-dasharray:1,150;stroke-dashoffset:0}50%{stroke-dasharray:90,150;stroke-dashoffset:-35}100%{stroke-dasharray:90,150;stroke-dashoffset:-124}}svg{animation:rotate 2s linear infinite;display:flex;justify-content:center;align-items:center}svg circle{stroke-linecap:round;animation:dash 1.5s ease infinite;stroke:var(--color-fg-accent)}`;Object.defineProperty,Object.getOwnPropertyDescriptor;let ri=class extends ne{render(){return j`<svg viewBox="0 0 50 50" width="24" height="24"><circle cx="25" cy="25" r="20" fill="none" stroke-width="4" stroke="#fff"/></svg>`}};ri.styles=[kt.globalCss,ti],ri=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-spinner")],ri);const ii=l`span{font-style:normal;font-family:-apple-system,system-ui,BlinkMacSystemFont,'Segoe UI',Roboto,Ubuntu,'Helvetica Neue',sans-serif;font-feature-settings:'tnum' on,'lnum' on,'case' on}.w3m-xxsmall-bold{font-weight:700;font-size:10px;line-height:12px;letter-spacing:.02em;text-transform:uppercase}.w3m-xsmall-normal{font-weight:600;font-size:12px;line-height:14px;letter-spacing:-.03em}.w3m-small-thin{font-weight:500;font-size:14px;line-height:16px;letter-spacing:-.03em}.w3m-small-normal{font-weight:600;font-size:14px;line-height:16px;letter-spacing:-.03em}.w3m-medium-thin{font-weight:500;font-size:16px;line-height:20px;letter-spacing:-.03em}.w3m-medium-normal{font-weight:600;font-size:16px;line-height:20px;letter-spacing:-.03em}.w3m-medium-bold{font-weight:700;font-size:16px;line-height:20px;letter-spacing:-.03em}.w3m-large-bold{font-weight:600;font-size:20px;line-height:24px;letter-spacing:-.03em}.w3m-left{text-align:left}.w3m-center{text-align:center}.w3m-right{text-align:right}:host(*){color:var(--color-fg-1)}.w3m-color-primary{color:var(--color-fg-1)}.w3m-color-secondary{color:var(--color-fg-2)}.w3m-color-tertiary{color:var(--color-fg-3)}.w3m-color-inverse{color:var(--color-fg-inverse)}.w3m-color-accnt{color:var(--color-fg-accent)}.w3m-color-error{color:var(--color-err)}`;var ni=Object.defineProperty,si=Object.getOwnPropertyDescriptor,oi=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?si(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&ni(t,r,s),s};let ai=class extends ne{constructor(){super(...arguments),this.variant="medium-normal",this.align="left",this.color="primary"}render(){const e={"w3m-large-bold":"large-bold"===this.variant,"w3m-medium-bold":"medium-bold"===this.variant,"w3m-medium-normal":"medium-normal"===this.variant,"w3m-medium-thin":"medium-thin"===this.variant,"w3m-small-normal":"small-normal"===this.variant,"w3m-small-thin":"small-thin"===this.variant,"w3m-xsmall-normal":"xsmall-normal"===this.variant,"w3m-xxsmall-bold":"xxsmall-bold"===this.variant,"w3m-left":"left"===this.align,"w3m-center":"center"===this.align,"w3m-right":"right"===this.align,"w3m-color-primary":"primary"===this.color,"w3m-color-secondary":"secondary"===this.color,"w3m-color-tertiary":"tertiary"===this.color,"w3m-color-inverse":"inverse"===this.color,"w3m-color-accnt":"accent"===this.color,"w3m-color-error":"error"===this.color};return j`<span class="${pe(e)}"><slot></slot></span>`}};ai.styles=[kt.globalCss,ii],oi([le()],ai.prototype,"variant",2),oi([le()],ai.prototype,"align",2),oi([le()],ai.prototype,"color",2),ai=oi([oe("w3m-text")],ai);const li=l`div{overflow:hidden;position:relative;border-radius:50%}div::after{content:'';position:absolute;inset:0;border-radius:50%;border:1px solid var(--color-overlay)}div img{width:100%;height:100%;object-fit:cover;object-position:center}svg{width:100%;height:100%}#token-placeholder-fill{fill:var(--color-bg-3)}#token-placeholder-dash{stroke:var(--color-overlay)}`;var ci=Object.defineProperty,hi=Object.getOwnPropertyDescriptor,ui=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?hi(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&ci(t,r,s),s};let di=class extends ne{constructor(){super(...arguments),this.symbol=void 0}render(){var e;const t=ar.getTokenIcon(null!=(e=this.symbol)?e:"");return t?j`<div><img src="${t}" alt="${this.id}"></div>`:Zt.TOKEN_PLACEHOLDER}};di.styles=[kt.globalCss,li],ui([le()],di.prototype,"symbol",2),di=ui([oe("w3m-token-image")],di);const pi=l`button{transition:all .2s ease;width:100%;height:100%;border-radius:10px;display:flex;align-items:flex-start}button:hover{background-color:var(--color-overlay)}button>div{width:80px;padding:5px 0;display:flex;flex-direction:column;align-items:center}w3m-text{width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;text-align:center}w3m-wallet-image{height:60px;width:60px;transition:all .2s ease;border-radius:15px;margin-bottom:5px}.w3m-sublabel{margin-top:2px}`;var fi=Object.defineProperty,gi=Object.getOwnPropertyDescriptor,mi=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?gi(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&fi(t,r,s),s};let vi=class extends ne{constructor(){super(...arguments),this.onClick=()=>null,this.name="",this.walletId="",this.label=void 0,this.src=void 0,this.installed=!1,this.recent=!1}sublabelTemplate(){return this.recent?j`<w3m-text class="w3m-sublabel" variant="xxsmall-bold" color="tertiary">RECENT</w3m-text>`:this.installed?j`<w3m-text class="w3m-sublabel" variant="xxsmall-bold" color="tertiary">INSTALLED</w3m-text>`:null}render(){var e;return j`<button @click="${this.onClick}"><div><w3m-wallet-image walletId="${this.walletId}" .src="${this.src}"></w3m-wallet-image><w3m-text variant="xsmall-normal">${null!=(e=this.label)?e:ar.getWalletName(this.name,!0)}</w3m-text>${this.sublabelTemplate()}</div></button>`}};vi.styles=[kt.globalCss,pi],mi([le()],vi.prototype,"onClick",2),mi([le()],vi.prototype,"name",2),mi([le()],vi.prototype,"walletId",2),mi([le()],vi.prototype,"label",2),mi([le()],vi.prototype,"src",2),mi([le()],vi.prototype,"installed",2),mi([le()],vi.prototype,"recent",2),vi=mi([oe("w3m-wallet-button")],vi);const bi=l`div{overflow:hidden;position:relative;border-radius:inherit;width:100%;height:100%}svg{position:relative;width:100%;height:100%}div::after{content:'';position:absolute;inset:0;border-radius:inherit;border:1px solid var(--color-overlay)}div img{width:100%;height:100%;object-fit:cover;object-position:center}#wallet-placeholder-fill{fill:var(--color-bg-3)}#wallet-placeholder-dash{stroke:var(--color-overlay)}`;var wi=Object.defineProperty,yi=Object.getOwnPropertyDescriptor,_i=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?yi(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&wi(t,r,s),s};let Ei=class extends ne{constructor(){super(...arguments),this.walletId=void 0,this.src=void 0}render(){var e;const t=ar.getWalletId(null!=(e=this.walletId)?e:""),r=ar.getWalletId(t),i=this.src?this.src:ar.getWalletIcon(r);return j`${i.length?j`<div><img src="${i}" alt="${this.id}"></div>`:Zt.WALLET_PLACEHOLDER}`}};Ei.styles=[kt.globalCss,bi],_i([le()],Ei.prototype,"walletId",2),_i([le()],Ei.prototype,"src",2),Ei=_i([oe("w3m-wallet-image")],Ei);const xi=l`div{display:flex;align-items:center;background-color:var(--color-overlay);box-shadow:inset 0 0 0 1px var(--color-overlay);border-radius:10px;padding:4px 4px 4px 8px}div button{border-radius:16px;padding:4px 8px 4px 4px;height:auto;margin-left:10px;color:var(--color-fg-inverse);background-color:var(--color-fg-accent)}button::after{content:'';inset:0;position:absolute;background-color:transparent;border-radius:inherit;transition:background-color .2s ease;border:1px solid var(--color-overlay)}button:hover::after{background-color:var(--color-overlay)}w3m-avatar{margin-right:6px}w3m-button-big w3m-avatar{margin-left:-5px}`;var Ci=Object.defineProperty,Si=Object.getOwnPropertyDescriptor,Ii=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Si(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Ci(t,r,s),s};let Oi=class extends ne{constructor(){super(),this.balance="hide",ar.rejectStandaloneButtonComponent()}onOpen(){const{isStandalone:e}=ue.zb.state;e||ue.jb.open({route:"Account"})}accountTemplate(){return j`<w3m-avatar></w3m-avatar><w3m-address-text></w3m-address-text>`}render(){return"show"===this.balance?j`<div><w3m-balance></w3m-balance><button @click="${this.onOpen}">${this.accountTemplate()}</button></div>`:j`<w3m-button-big @click="${this.onOpen}">${this.accountTemplate()}</w3m-button-big>`}};Oi.styles=[kt.globalCss,xi],Ii([le()],Oi.prototype,"balance",2),Oi=Ii([oe("w3m-account-button")],Oi);const Ai=l`button{display:flex;border-radius:10px;flex-direction:column;transition:background-color .2s ease;justify-content:center;padding:5px;width:100px}button:hover{background-color:var(--color-overlay)}button:disabled{pointer-events:none}w3m-network-image{width:32px;height:32px}w3m-text{margin-top:4px}`;var Ri=Object.defineProperty,Pi=Object.getOwnPropertyDescriptor,ki=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Pi(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Ri(t,r,s),s};let Ni=class extends ne{constructor(){super(),this.chainId="",this.label="",this.unsubscribeNetwork=void 0;const{selectedChain:e}=ue.zb.state;this.chainId=e?.id.toString(),this.label=e?.name,this.unsubscribeNetwork=ue.zb.subscribe((({selectedChain:e})=>{this.chainId=e?.id.toString(),this.label=e?.name}))}disconnectedCallback(){var e;null==(e=this.unsubscribeNetwork)||e.call(this)}onClick(){ue.AV.push("SelectNetwork")}render(){const{chains:e}=ue.zb.state,t=e&&e.length>1;return j`<button @click="${this.onClick}" ?disabled="${!t}"><w3m-network-image chainId="${xt(this.chainId)}"></w3m-network-image><w3m-text variant="xsmall-normal" color="accent">${this.label}</w3m-text></button>`}};Ni.styles=[kt.globalCss,Ai],ki([ce()],Ni.prototype,"chainId",2),ki([ce()],Ni.prototype,"label",2),Ni=ki([oe("w3m-account-network-button")],Ni);const Mi=l`@keyframes slide{0%{background-position:0 0}100%{background-position:200px 0}}w3m-text{padding:1px 0}.w3m-loading{background:linear-gradient(270deg,var(--color-fg-1) 36.33%,var(--color-fg-3) 42.07%,var(--color-fg-1) 83.3%);background-size:200px 100%;background-clip:text;-webkit-background-clip:text;-webkit-text-fill-color:transparent;animation-name:slide;animation-duration:1.5s;animation-iteration-count:infinite;animation-timing-function:linear}`;var Ti=Object.defineProperty,Li=Object.getOwnPropertyDescriptor,$i=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Li(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Ti(t,r,s),s};let Ui=class extends ne{constructor(){super(),this.address=void 0,this.name=void 0,this.loading=!0,this.variant="button",this.unsubscribeAccount=void 0,this.address=ue.zb.state.address,this.name=ue.zb.state.profileName,this.loading=Boolean(ue.zb.state.profileLoading),this.unsubscribeAccount=ue.zb.subscribe((({address:e,profileName:t,profileLoading:r})=>{this.address=e,this.name=t,this.loading=Boolean(r)}))}disconnectedCallback(){var e;null==(e=this.unsubscribeAccount)||e.call(this)}render(){var e;const t="button"===this.variant,r={"w3m-loading":this.loading};return j`<w3m-text class="${pe(r)}" variant="${t?"medium-normal":"large-bold"}" color="${t?"inverse":"primary"}">${this.name?this.name:ar.truncate(null!=(e=this.address)?e:"")}</w3m-text>`}};Ui.styles=[kt.globalCss,Mi],$i([ce()],Ui.prototype,"address",2),$i([ce()],Ui.prototype,"name",2),$i([ce()],Ui.prototype,"loading",2),$i([le()],Ui.prototype,"variant",2),Ui=$i([oe("w3m-address-text")],Ui);const ji=l`@keyframes scroll{0%{transform:translate3d(0,0,0)}100%{transform:translate3d(calc(-70px * 10),0,0)}}.w3m-slider{position:relative;overflow-x:hidden;padding:10px 0;margin:0 -20px}.w3m-slider::after,.w3m-slider::before{content:'';height:100%;width:50px;z-index:2;position:absolute;background:linear-gradient(to right,var(--color-bg-1) 0,transparent 100%);top:0}.w3m-slider::before{left:0}.w3m-slider::after{right:0;transform:rotateZ(180deg)}.w3m-track{display:flex;width:calc(70px * 20);animation:scroll 20s linear infinite}.w3m-action{padding:10px;display:flex;justify-content:center}w3m-wallet-image{width:60px;height:60px;margin:0 5px;box-shadow:0 2px 4px -2px rgba(0,0,0,.12),0 4px 4px -2px rgba(0,0,0,.08);border-radius:15px}`;Object.defineProperty,Object.getOwnPropertyDescriptor;let Di=class extends ne{onGoToQrcode(){ue.AV.push("Qrcode")}render(){const{previewWallets:e}=ue.uc.state,t=e.length,r=[...e,...e];return j`<w3m-modal-header title="Connect your wallet" .onAction="${this.onGoToQrcode}" .actionIcon="${Zt.QRCODE_ICON}"></w3m-modal-header><w3m-modal-content>${t?j`<div class="w3m-slider"><div class="w3m-track">${r.map((({image_url:e})=>j`<w3m-wallet-image src="${e.lg}"></w3m-wallet-image>`))}</div></div>`:null}<div class="w3m-action"><w3m-button-big @click="${ar.handleAndroidLinking}"><w3m-text variant="medium-normal" color="inverse">Select Wallet</w3m-text></w3m-button-big></div></w3m-modal-content>`}};Di.styles=[kt.globalCss,ji],Di=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-android-wallet-selection")],Di);const Bi=l`@keyframes slide{0%{transform:translateX(-50px)}100%{transform:translateX(200px)}}.w3m-placeholder,img{border-radius:50%;box-shadow:inset 0 0 0 1px var(--color-overlay);display:block;position:relative;overflow:hidden!important;background-color:var(--color-av-1);background-image:radial-gradient(at 66% 77%,var(--color-av-2) 0,transparent 50%),radial-gradient(at 29% 97%,var(--color-av-3) 0,transparent 50%),radial-gradient(at 99% 86%,var(--color-av-4) 0,transparent 50%),radial-gradient(at 29% 88%,var(--color-av-5) 0,transparent 50%);transform:translateZ(0)}.w3m-loader{width:50px;height:100%;background:linear-gradient(270deg,transparent 0,rgba(255,255,255,.4) 30%,transparent 100%);animation-name:slide;animation-duration:1.5s;transform:translateX(-50px);animation-iteration-count:infinite;animation-timing-function:linear;animation-delay:.55s}.w3m-small{width:24px;height:24px}.w3m-medium{width:60px;height:60px}`;var zi=Object.defineProperty,Wi=Object.getOwnPropertyDescriptor,Hi=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Wi(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&zi(t,r,s),s};let Vi=class extends ne{constructor(){super(),this.address=void 0,this.avatar=void 0,this.loading=!0,this.size="small",this.unsubscribeAccount=void 0,this.address=ue.zb.state.address,this.avatar=ue.zb.state.profileAvatar,this.loading=Boolean(ue.zb.state.profileLoading),this.unsubscribeAccount=ue.zb.subscribe((({address:e,profileAvatar:t,profileLoading:r})=>{this.address=e,this.avatar=t,this.loading=Boolean(r)}))}disconnectedCallback(){var e;null==(e=this.unsubscribeAccount)||e.call(this)}render(){const e={"w3m-placeholder":!0,"w3m-small":"small"===this.size,"w3m-medium":"medium"===this.size};return this.avatar?j`<img class="${pe(e)}" src="${this.avatar}">`:this.address?(ar.generateAvatarColors(this.address),j`<div class="${pe(e)}">${this.loading?j`<div class="w3m-loader"></div>`:null}</div>`):null}};Vi.styles=[kt.globalCss,Bi],Hi([ce()],Vi.prototype,"address",2),Hi([ce()],Vi.prototype,"avatar",2),Hi([ce()],Vi.prototype,"loading",2),Hi([le()],Vi.prototype,"size",2),Vi=Hi([oe("w3m-avatar")],Vi);const Fi=l`div{display:flex;align-items:center}w3m-token-image{width:28px;height:28px;margin-right:6px}`;var qi=Object.defineProperty,Ki=Object.getOwnPropertyDescriptor,Ji=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Ki(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&qi(t,r,s),s};let Zi=class extends ne{constructor(){var e,t;super(),this.symbol=void 0,this.amount=void 0,this.unsubscribeAccount=void 0,this.symbol=null==(e=ue.zb.state.balance)?void 0:e.symbol,this.amount=null==(t=ue.zb.state.balance)?void 0:t.amount,this.unsubscribeAccount=ue.zb.subscribe((({balance:e})=>{this.symbol=e?.symbol,this.amount=e?.amount}))}disconnectedCallback(){var e;null==(e=this.unsubscribeAccount)||e.call(this)}render(){let e="_._";return"0.0"===this.amount&&(e=0),this.amount&&this.amount.length>6&&(e=parseFloat(this.amount).toFixed(3)),j`<div><w3m-token-image symbol="${xt(this.symbol)}"></w3m-token-image><w3m-text variant="medium-normal" color="primary">${e} ${this.symbol}</w3m-text></div>`}};Zi.styles=[kt.globalCss,Fi],Ji([ce()],Zi.prototype,"symbol",2),Ji([ce()],Zi.prototype,"amount",2),Zi=Ji([oe("w3m-balance")],Zi);const Gi=l`.w3m-loading{padding:0 15px}svg{width:28px;height:20px;margin:-1px 3px 0 -5px}svg path{fill:var(--color-fg-inverse)}button:disabled svg path{fill:var(--color-fg-3)}w3m-spinner{margin:0 10px 0 0}`;var Yi=Object.defineProperty,Xi=Object.getOwnPropertyDescriptor,Qi=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Xi(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Yi(t,r,s),s};let en=class extends ne{constructor(){super(),this.loading=!1,this.label="Connect Wallet",this.icon="show",this.modalUnsub=void 0,ar.rejectStandaloneButtonComponent(),this.modalUnsub=ue.jb.subscribe((e=>{e.open&&(this.loading=!0),e.open||(this.loading=!1)}))}disconnectedCallback(){var e;null==(e=this.modalUnsub)||e.call(this)}iconTemplate(){return"show"===this.icon?Zt.WALLET_CONNECT_ICON:null}onOpen(){this.loading=!0;const{enableNetworkView:e}=ue.t0.state,{chains:t,selectedChain:r}=ue.zb.state,i=t?.length&&t.length>1;e||i&&!r?ue.jb.open({route:"SelectNetwork"}):ue.jb.open({route:"ConnectWallet"})}render(){const e={"w3m-loading":this.loading};return j`<w3m-button-big class="${pe(e)}" .disabled="${this.loading}" @click="${this.onOpen}">${this.loading?j`<w3m-spinner></w3m-spinner><w3m-text variant="medium-normal" color="accent">Connecting...</w3m-text>`:j`${this.iconTemplate()}<w3m-text variant="medium-normal" color="inverse">${this.label}</w3m-text>`}</w3m-button-big>`}};en.styles=[kt.globalCss,Gi],Qi([ce()],en.prototype,"loading",2),Qi([le()],en.prototype,"label",2),Qi([le()],en.prototype,"icon",2),en=Qi([oe("w3m-connect-button")],en);var tn=Object.defineProperty,rn=Object.getOwnPropertyDescriptor,nn=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?rn(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&tn(t,r,s),s};let sn=class extends ne{constructor(){super(),this.isConnected=!1,this.label="Connect Wallet",this.icon="show",this.balance="hide",this.unsubscribeAccount=void 0,ar.rejectStandaloneButtonComponent(),this.isConnected=ue.zb.state.isConnected,this.unsubscribeAccount=ue.zb.subscribe((({isConnected:e})=>{this.isConnected=e}))}disconnectedCallback(){var e;null==(e=this.unsubscribeAccount)||e.call(this)}render(){return this.isConnected?j`<w3m-account-button balance="${xt(this.balance)}"></w3m-account-button>`:j`<w3m-connect-button label="${xt(this.label)}" icon="${xt(this.icon)}"></w3m-connect-button>`}};nn([ce()],sn.prototype,"isConnected",2),nn([le()],sn.prototype,"label",2),nn([le()],sn.prototype,"icon",2),nn([le()],sn.prototype,"balance",2),sn=nn([oe("w3m-core-button")],sn);const on={allowedExplorerListings(e){const{explorerAllowList:t,explorerDenyList:r}=ue.t0.state;let i=[...e];return null!=t&&t.length&&(i=i.filter((e=>t.includes(e.id)))),null!=r&&r.length&&(i=i.filter((e=>!r.includes(e.id)))),i},walletsWithInjected(e){let t=[...e??[]];if(window.ethereum){const e=ar.getWalletName("");t=t.filter((({name:t})=>!ar.caseSafeIncludes(t,e)))}return t},connectorWallets(){const{isStandalone:e}=ue.zb.state;if(e)return[];let t=ue.Id.client().getConnectors();return!window.ethereum&&ue.zv.isMobile()&&(t=t.filter((({id:e})=>"injected"!==e&&e!==Xt.metaMask))),t},walletTemplatesWithRecent(e,t){let r=[...e];if(t){const e=ar.getRecentWallet();r=r.filter((t=>!t.values.includes(e?.name))),r.splice(1,0,t)}return r}},an=l`.w3m-grid{display:grid;grid-template-columns:repeat(4,80px);justify-content:space-between}.w3m-desktop-title,.w3m-mobile-title{display:flex;align-items:center}.w3m-mobile-title{justify-content:space-between;margin-bottom:20px;margin-top:-10px}.w3m-desktop-title{margin-bottom:10px;padding:0 10px}.w3m-subtitle{display:flex;align-items:center}.w3m-subtitle:last-child path{fill:var(--color-fg-3)}.w3m-desktop-title svg,.w3m-mobile-title svg{margin-right:6px}.w3m-desktop-title path,.w3m-mobile-title path{fill:var(--color-fg-accent)}`;Object.defineProperty,Object.getOwnPropertyDescriptor;let ln=class extends ne{onDesktopWallet(e){ue.AV.push("DesktopConnector",{DesktopConnector:e})}onInjectedWallet(){ue.AV.push("InjectedConnector")}onInstallConnector(){ue.AV.push("InstallConnector",{InstallConnector:{id:"metaMask",name:"MetaMask",isMobile:!0,url:"https://metamask.io"}})}async onConnectorWallet(e){window.ethereum?"injected"===e||e===Xt.metaMask?this.onInjectedWallet():await ar.handleConnectorConnection(e):this.onInstallConnector()}desktopWalletsTemplate(){const{desktopWallets:e}=ue.t0.state;return e?.map((({id:e,name:t,links:{universal:r,native:i}})=>j`<w3m-wallet-button walletId="${e}" name="${t}" .onClick="${()=>this.onDesktopWallet({name:t,walletId:e,universal:r,native:i})}"></w3m-wallet-button>`))}previewWalletsTemplate(){return on.allowedExplorerListings(ue.uc.state.previewWallets).map((({name:e,desktop:{universal:t,native:r},homepage:i,image_url:n,id:s})=>j`<w3m-wallet-button src="${n.lg}" name="${e}" .onClick="${()=>this.onDesktopWallet({walletId:s,name:e,native:r,universal:t||i,icon:n.lg})}"></w3m-wallet-button>`))}connectorWalletsTemplate(){return on.connectorWallets().map((({id:e,name:t,ready:r})=>j`<w3m-wallet-button .installed="${["injected","metaMask"].includes(e)&&r}" name="${t}" walletId="${e}" .onClick="${async()=>this.onConnectorWallet(e)}"></w3m-wallet-button>`))}recentWalletTemplate(){const e=ar.getRecentWallet();if(!e)return;const{id:t,name:r,links:i,image:n}=e;return j`<w3m-wallet-button .recent="${!0}" name="${r}" walletId="${xt(t)}" src="${xt(n)}" .onClick="${()=>this.onDesktopWallet({name:r,walletId:t,universal:i?.universal,native:i?.native,icon:n})}"></w3m-wallet-button>`}render(){const{standaloneUri:e}=ue.zb.state,t=this.desktopWalletsTemplate(),r=this.previewWalletsTemplate(),i=this.connectorWalletsTemplate(),n=this.recentWalletTemplate(),s=t??r;let o=[...i,...s];o=on.walletTemplatesWithRecent(o,n);const a=e?s:o,l=a.length>4;let c=[];c=l?a.filter((e=>!e.values.includes(Xt.coinbaseWallet))).slice(0,3):a;const h=Boolean(c.length);return j`<w3m-modal-header border="${!0}" title="Connect your wallet" .onAction="${ar.handleUriCopy}" .actionIcon="${Zt.COPY_ICON}"></w3m-modal-header><w3m-modal-content><div class="w3m-mobile-title"><div class="w3m-subtitle">${Zt.MOBILE_ICON}<w3m-text variant="small-normal" color="accent">Mobile</w3m-text></div><div class="w3m-subtitle">${Zt.SCAN_ICON}<w3m-text variant="small-normal" color="secondary">Scan with your wallet</w3m-text></div></div><w3m-walletconnect-qr></w3m-walletconnect-qr></w3m-modal-content>${h?j`<w3m-modal-footer><div class="w3m-desktop-title">${Zt.DESKTOP_ICON}<w3m-text variant="small-normal" color="accent">Desktop</w3m-text></div><div class="w3m-grid">${c} ${l?j`<w3m-view-all-wallets-button></w3m-view-all-wallets-button>`:null}</div></w3m-modal-footer>`:null}`}};ln.styles=[kt.globalCss,an],ln=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-desktop-wallet-selection")],ln);const cn=l`div{background-color:var(--color-bg-2);padding:10px 20px 15px 20px;border-top:1px solid var(--color-bg-3);text-align:center}a{color:var(--color-fg-accent);text-decoration:none;transition:opacity .2s ease-in-out}a:hover{opacity:.8}`;Object.defineProperty,Object.getOwnPropertyDescriptor;let hn=class extends ne{render(){const{termsOfServiceUrl:e,privacyPolicyUrl:t}=ue.t0.state;return e??t?j`<div><w3m-text variant="small-normal" color="secondary">By connecting your wallet, you agree to our<br>${e?j`<a href="${e}" target="_blank" rel="noopener noreferrer">Terms of Service</a>`:null} ${e&&t?"and":null} ${t?j`<a href="${t}" target="_blank" rel="noopener noreferrer">Privacy Policy</a>`:null}</w3m-text></div>`:null}};hn.styles=[kt.globalCss,cn],hn=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-legal-notice")],hn);const un=l`.w3m-grid{display:grid;grid-template-columns:repeat(4,80px);margin:0 -10px;justify-content:space-between;row-gap:10px}`;Object.defineProperty,Object.getOwnPropertyDescriptor;let dn=class extends ne{onGoToQrcode(){ue.AV.push("Qrcode")}async onConnectorWallet(e){await ar.handleConnectorConnection(e)}mobileWalletsTemplate(){const{mobileWallets:e}=ue.t0.state,t=on.walletsWithInjected(e);if(t.length)return t.map((({id:e,name:t,links:{universal:r,native:i}})=>j`<w3m-wallet-button name="${t}" walletId="${e}" .onClick="${async()=>ar.handleMobileLinking({links:{native:i,universal:r},name:t,id:e})}"></w3m-wallet-button>`))}previewWalletsTemplate(){const{previewWallets:e}=ue.uc.state;let t=on.walletsWithInjected(e);return t=on.allowedExplorerListings(t),t.map((({image_url:e,name:t,mobile:{native:r,universal:i},id:n})=>j`<w3m-wallet-button name="${t}" src="${e.lg}" .onClick="${async()=>ar.handleMobileLinking({links:{native:r,universal:i},name:t,id:n,image:e.lg})}"></w3m-wallet-button>`))}connectorWalletsTemplate(){let e=on.connectorWallets();return window.ethereum||(e=e.filter((({id:e})=>"injected"!==e&&e!==Xt.metaMask))),e.map((({name:e,id:t,ready:r})=>j`<w3m-wallet-button .installed="${["injected","metaMask"].includes(t)&&r}" name="${e}" walletId="${t}" .onClick="${async()=>this.onConnectorWallet(t)}"></w3m-wallet-button>`))}recentWalletTemplate(){const e=ar.getRecentWallet();if(!e)return;const{id:t,name:r,links:i,image:n}=e;return j`<w3m-wallet-button .recent="${!0}" name="${r}" walletId="${xt(t)}" src="${xt(n)}" .onClick="${async()=>ar.handleMobileLinking({name:r,id:t,links:i,image:n})}"></w3m-wallet-button>`}render(){const{standaloneUri:e}=ue.zb.state,t=this.connectorWalletsTemplate(),r=this.mobileWalletsTemplate(),i=this.previewWalletsTemplate(),n=this.recentWalletTemplate(),s=r??i;let o=[...t,...s];o=on.walletTemplatesWithRecent(o,n);const a=e?s:o,l=a.length>8;let c=[];c=l?a.filter((e=>!e.values.includes(Xt.coinbaseWallet))).slice(0,7):a;const h=c.slice(0,4),u=c.slice(4,8),d=Boolean(c.length);return j`<w3m-modal-header title="Connect your wallet" .onAction="${this.onGoToQrcode}" .actionIcon="${Zt.QRCODE_ICON}"></w3m-modal-header>${d?j`<w3m-modal-content><div class="w3m-grid">${h} ${u.length?j`${u} ${l?j`<w3m-view-all-wallets-button></w3m-view-all-wallets-button>`:null}`:null}</div></w3m-modal-content>`:null}`}};dn.styles=[kt.globalCss,un],dn=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-mobile-wallet-selection")],dn);const pn=l`.w3m-overlay{inset:0;position:fixed;z-index:var(--modal-z-index);overflow:hidden;display:flex;justify-content:center;align-items:center;background-color:rgba(0,0,0,.3);opacity:0;pointer-events:none}.w3m-open{pointer-events:auto}.w3m-container{position:relative;max-width:360px;width:100%;outline:0}.w3m-card{width:100%;position:relative;transform:translateY(5px);border-radius:30px;overflow:hidden;box-shadow:0 6px 14px -6px rgba(10,16,31,.12),0 10px 32px -4px rgba(10,16,31,.1),0 0 0 1px var(--color-overlay);background-color:var(--color-bg-1);color:var(--color-fg-1)}@media(max-width:600px){.w3m-container{max-width:440px}.w3m-card{border-radius:40px 40px 0 0}.w3m-overlay{align-items:flex-end}}@media(max-width:600px){.w3m-container{max-width:440px}.w3m-card{transform:translateY(5px);border-radius:40px 40px 0 0}.w3m-overlay{align-items:flex-end}}`;var fn=Object.defineProperty,gn=Object.getOwnPropertyDescriptor,mn=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?gn(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&fn(t,r,s),s};let vn=class extends ne{constructor(){if(super(),this.open=!1,this.preload=!0,this.activeChainId=void 0,this.unsubscribeModal=void 0,this.unsubscribeConfig=void 0,this.unwatchAccount=void 0,this.unwatchNetwork=void 0,this.abortController=void 0,kt.setTheme(),this.unsubscribeConfig=ue.t0.subscribe(kt.setTheme),this.unsubscribeModal=ue.jb.subscribe((e=>{e.open?this.onOpenModalEvent():this.onCloseModalEvent()})),!ue.zb.state.isStandalone){ue.zb.getAccount();const e=ue.zb.getSelectedChain();this.activeChainId=e?.id,this.fetchProfile(),this.fetchBalance(),this.unwatchNetwork=ue.Id.client().watchNetwork((e=>{const t=e.chain;t&&this.activeChainId!==t.id&&(ue.zb.setSelectedChain(t),this.activeChainId=t.id,ue.zb.resetProfile(),this.fetchProfile(),this.fetchBalance())})),this.unwatchAccount=ue.Id.client().watchAccount((e=>{const{address:t}=ue.zb.state;e.address!==t&&(this.fetchProfile(e.address),this.fetchBalance(e.address)),ue.zb.setAddress(e.address),ue.zb.setIsConnected(e.isConnected)}))}this.preloadModalData()}disconnectedCallback(){var e,t,r,i;null==(e=this.unsubscribeModal)||e.call(this),null==(t=this.unsubscribeConfig)||t.call(this),null==(r=this.unwatchAccount)||r.call(this),null==(i=this.unwatchNetwork)||i.call(this)}get overlayEl(){return ar.getShadowRootElement(this,".w3m-overlay")}get containerEl(){return ar.getShadowRootElement(this,".w3m-container")}async fetchProfile(e){try{ue.zb.setProfileLoading(!0);const t=e??ue.zb.state.address;if(t&&1===this.activeChainId){const[e,r]=await Promise.all([ue.Id.client().fecthEnsName({address:t}),ue.Id.client().fetchEnsAvatar({address:t})]);r&&await ar.preloadImage(r),ue.zb.setProfileName(e),ue.zb.setProfileAvatar(r)}}catch(e){ue.Vs.openToast(ar.getErrorMessage(e),"error")}finally{ue.zb.setProfileLoading(!1)}}async fetchBalance(e){try{ue.zb.setBalanceLoading(!0);const t=e??ue.zb.state.address;if(t){const e=await ue.Id.client().fetchBalance({address:t});ue.zb.setBalance({amount:e.formatted,symbol:e.symbol})}}catch(e){ue.Vs.openToast(ar.getErrorMessage(e),"error")}finally{ue.zb.setBalanceLoading(!1)}}toggleBodyScroll(e){document.querySelector("body")&&(e?document.getElementById("w3m-styles")?.remove():document.head.insertAdjacentHTML("beforeend",'<style id="w3m-styles">body{touch-action:none;overflow:hidden;overscroll-behavior:contain;}</style>'))}async preloadExplorerData(){var e;const{standaloneChains:t,chains:r,isExplorer:i}=ue.zb.state;if(i){const i=t?.join(",");await Promise.all([ue.uc.getPreviewWallets({page:1,entries:10,chains:i,device:ue.zv.isMobile()?"mobile":"desktop"}),ue.uc.getRecomendedWallets()]);const{previewWallets:n,recomendedWallets:s}=ue.uc.state,o=null!=(e=r?.map((e=>ar.getChainIcon(e.id))))?e:[],a=[...n,...s].map((e=>e.image_url.lg));await this.preloadExplorerImages([...o,...a])}}async preloadExplorerImages(e){e.length&&await Promise.all(e.map((async e=>ar.preloadImage(e))))}async preloadCustomImages(){const e=ar.getCustomImageUrls();e.length&&await Promise.all(e.map((async e=>ar.preloadImage(e))))}async preloadConnectorImages(){const e=ar.getConnectorImageUrls();e.length&&await Promise.all(e.map((async e=>ar.preloadImage(e))))}async preloadModalData(){try{this.preload&&(this.preload=!1,await Promise.all([this.preloadExplorerData(),this.preloadCustomImages(),this.preloadConnectorImages()]))}catch{ue.Vs.openToast("Failed preloading","error")}}onCloseModal(e){e.target===e.currentTarget&&ue.jb.close()}async onOpenModalEvent(){await this.preloadModalData(),this.toggleBodyScroll(!1),await bt(this.containerEl,{y:0},{duration:0}).finished,bt(this.overlayEl,{opacity:[0,1]},{duration:.2,delay:.2}),bt(this.containerEl,ar.isMobileAnimation()?{y:["50vh",0]}:{scale:[.98,1]},{scale:{easing:Et({velocity:.4})},y:{easing:Et({mass:.5})},delay:.2}),this.addKeyboardEvents(),this.open=!0}async onCloseModalEvent(){this.toggleBodyScroll(!0),this.removeKeyboardEvents(),await Promise.all([bt(this.containerEl,ar.isMobileAnimation()?{y:[0,"50vh"]}:{scale:[1,.98]},{scale:{easing:Et({velocity:0})},y:{easing:Et({mass:.5})}}).finished,bt(this.overlayEl,{opacity:[1,0]},{duration:.2}).finished]),this.open=!1}addKeyboardEvents(){this.abortController=new AbortController,window.addEventListener("keydown",(e=>{var t;"Escape"===e.key?ue.jb.close():"Tab"===e.key&&(null!=(t=e.target)&&t.tagName.includes("W3M-")||this.containerEl.focus())}),this.abortController),this.containerEl.focus()}removeKeyboardEvents(){var e;null==(e=this.abortController)||e.abort(),this.abortController=void 0}render(){const e={"w3m-overlay":!0,"w3m-open":this.open};return j`<div id="w3m-modal" class="${pe(e)}" @click="${this.onCloseModal}" role="alertdialog" aria-modal="true"><div class="w3m-container" tabindex="0">${this.open?j`<w3m-modal-backcard></w3m-modal-backcard><div class="w3m-card"><w3m-modal-router></w3m-modal-router><w3m-modal-toast></w3m-modal-toast></div>`:null}</div></div>`}};vn.styles=[kt.globalCss,pn],mn([ce()],vn.prototype,"open",2),mn([ce()],vn.prototype,"preload",2),mn([ce()],vn.prototype,"activeChainId",2),vn=mn([oe("w3m-modal")],vn);const bn=l`w3m-network-image{margin-left:-6px;margin-right:6px;width:28px;height:28px}`;var wn=Object.defineProperty,yn=Object.getOwnPropertyDescriptor,_n=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?yn(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&wn(t,r,s),s};let En=class extends ne{constructor(){super(),this.chainId="",this.label="",this.wrongNetwork=!1,this.unsubscribeNetwork=void 0,ar.rejectStandaloneButtonComponent();const{selectedChain:e}=ue.zb.state;this.onSetChainData(e),this.unsubscribeNetwork=ue.zb.subscribe((({selectedChain:e})=>{this.onSetChainData(e)}))}disconnectedCallback(){var e;null==(e=this.unsubscribeNetwork)||e.call(this)}onSetChainData(e){if(e){const{chains:t}=ue.zb.state,r=t?.map((e=>e.id));this.chainId=e.id.toString(),this.wrongNetwork=!(null!=r&&r.includes(e.id)),this.label=this.wrongNetwork?"Wrong Network":e.name}}onClick(){ue.jb.open({route:"SelectNetwork"})}render(){var e;const{chains:t}=ue.zb.state,r=t&&t.length>1;return j`<w3m-button-big @click="${this.onClick}" ?disabled="${!r}"><w3m-network-image chainId="${xt(this.chainId)}"></w3m-network-image><w3m-text variant="medium-normal" color="inverse">${null!=(e=this.label)&&e.length?this.label:"Select Network"}</w3m-text></w3m-button-big>`}};En.styles=[kt.globalCss,bn],_n([ce()],En.prototype,"chainId",2),_n([ce()],En.prototype,"label",2),_n([ce()],En.prototype,"wrongNetwork",2),En=_n([oe("w3m-network-switch")],En);const xn=l`button{display:flex;flex-direction:column;padding:5px 10px;border-radius:10px;transition:background-color .2s ease;height:100%;justify-content:flex-start}.w3m-icons{width:60px;height:60px;display:flex;flex-wrap:wrap;padding:7px;border-radius:15px;justify-content:space-between;align-items:center;margin-bottom:5px;background-color:var(--color-bg-2);box-shadow:inset 0 0 0 1px var(--color-overlay)}button:hover{background-color:var(--color-overlay)}.w3m-icons img{width:21px;height:21px;object-fit:cover;object-position:center;border-radius:8px;border:1px solid var(--color-overlay)}.w3m-icons svg{width:21px;height:21px}.w3m-icons img:nth-child(1),.w3m-icons img:nth-child(2),.w3m-icons svg:nth-child(1),.w3m-icons svg:nth-child(2){margin-bottom:4px}w3m-text{width:100%;text-align:center}#wallet-placeholder-fill{fill:var(--color-bg-3)}#wallet-placeholder-dash{stroke:var(--color-overlay)}`;Object.defineProperty,Object.getOwnPropertyDescriptor;let Cn=class extends ne{onClick(e,t){e?ue.AV.push("WalletExplorer"):t&&ue.AV.push("WalletFilter")}render(){const{previewWallets:e}=ue.uc.state,t=ar.getCustomWallets(),r=[...e].reverse().slice(0,4),i=[...t].reverse().slice(0,4),n=Boolean(r.length),s=Boolean(i.length);return j`<button @click="${()=>this.onClick(n,s)}"><div class="w3m-icons">${n?r.map((e=>j`<img src="${e.image_url.lg}">`)):null} ${s?i.map((e=>{const t=ar.getWalletId(e.id),r=ar.getWalletIcon(t);return r?j`<img src="${r}">`:Zt.WALLET_PLACEHOLDER})):null}</div><w3m-text variant="xsmall-normal">View All</w3m-text></button>`}};Cn.styles=[kt.globalCss,xn],Cn=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-view-all-wallets-button")],Cn);const Sn=l`.w3m-qr-container{width:100%;aspect-ratio:1/1}`;var In=Object.defineProperty,On=Object.getOwnPropertyDescriptor,An=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?On(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&In(t,r,s),s};let Rn=class extends ne{constructor(){super(),this.uri="",this.createConnectionAndWait()}get overlayEl(){return ar.getShadowRootElement(this,".w3m-qr-container")}async createConnectionAndWait(){var e;try{const{standaloneUri:t}=ue.zb.state;t?setTimeout((()=>this.uri=t),0):(await ue.Id.client().connectWalletConnect((e=>this.uri=e),null==(e=ue.zb.state.selectedChain)?void 0:e.id),ue.jb.close())}catch(e){ue.Vs.openToast(ar.getErrorMessage(e),"error"),this.createConnectionAndWait()}}render(){return j`<div class="w3m-qr-container">${this.uri?j`<w3m-qrcode size="${this.overlayEl.offsetWidth}" uri="${this.uri}"></w3m-qrcode>`:null}</div>`}};Rn.styles=[kt.globalCss,Sn],An([ce()],Rn.prototype,"uri",2),Rn=An([oe("w3m-walletconnect-qr")],Rn);const Pn=l`.w3m-profile{display:flex;justify-content:space-between;align-items:flex-start;padding-top:20px}.w3m-connection-badge{background-color:var(--color-bg-2);box-shadow:inset 0 0 0 1px var(--color-overlay);padding:6px 10px 6px 26px;position:relative;border-radius:28px}.w3m-connection-badge::before{content:'';position:absolute;width:10px;height:10px;left:10px;background-color:var(--color-success);border-radius:50%;top:50%;margin-top:-5px;box-shadow:0 1px 4px 1px var(--color-success),inset 0 0 0 1px var(--color-overlay)}.w3m-footer{display:flex;justify-content:space-between}w3m-address-text{margin-top:10px;display:block}.w3m-balance{border-top:1px solid var(--color-bg-2);padding:11px 20px}`;Object.defineProperty,Object.getOwnPropertyDescriptor;let kn=class extends ne{onDisconnect(){ue.jb.close(),ue.Id.client().disconnect(),ue.zb.resetAccount()}async onCopyAddress(){var e;await navigator.clipboard.writeText(null!=(e=ue.zb.state.address)?e:""),ue.Vs.openToast("Address copied","success")}render(){return j`<w3m-modal-content><div class="w3m-profile"><div class="w3m-info"><w3m-avatar size="medium"></w3m-avatar><w3m-address-text variant="modal"></w3m-address-text></div><div class="w3m-connection-badge"><w3m-text variant="small-normal" color="secondary">Connected</w3m-text></div></div></w3m-modal-content><div class="w3m-balance"><w3m-balance></w3m-balance></div><w3m-modal-footer><div class="w3m-footer"><w3m-account-network-button></w3m-account-network-button><w3m-box-button label="Copy Address" .onClick="${this.onCopyAddress}" .icon="${Zt.ACCOUNT_COPY}"></w3m-box-button><w3m-box-button label="Disconnect" .onClick="${this.onDisconnect}" .icon="${Zt.ACCOUNT_DISCONNECT}"></w3m-box-button></div></w3m-modal-footer>`}};kn.styles=[kt.globalCss,Pn],kn=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-account-view")],kn);Object.defineProperty,Object.getOwnPropertyDescriptor;let Nn=class extends ne{viewTemplate(){return ue.zv.isAndroid()?j`<w3m-android-wallet-selection></w3m-android-wallet-selection>`:ue.zv.isMobile()?j`<w3m-mobile-wallet-selection></w3m-mobile-wallet-selection>`:j`<w3m-desktop-wallet-selection></w3m-desktop-wallet-selection>`}render(){return j`${this.viewTemplate()}<w3m-legal-notice></w3m-legal-notice>`}};Nn.styles=[kt.globalCss],Nn=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-connect-wallet-view")],Nn);const Mn=l`.w3m-wrapper{display:flex;align-items:center;justify-content:center;width:100%;aspect-ratio:1/1;flex-direction:column}.w3m-connecting-title{display:flex;align-items:center;justify-content:center;margin-bottom:16px}w3m-spinner{margin-right:10px}w3m-wallet-image{border-radius:15px;width:25%;aspect-ratio:1/1;margin-bottom:20px}.w3m-install-actions{display:flex}.w3m-install-actions w3m-button{margin:0 5px;opacity:1}`;var Tn=Object.defineProperty,Ln=Object.getOwnPropertyDescriptor,$n=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Ln(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Tn(t,r,s),s};let Un=class extends ne{constructor(){super(),this.uri="",this.onConnect()}getRouterData(){var e;const t=null==(e=ue.AV.state.data)?void 0:e.DesktopConnector;if(!t)throw new Error("Missing router data");return t}onFormatAndRedirect(e){const{native:t,universal:r,name:i}=this.getRouterData();if(t){const r=ue.zv.formatNativeUrl(t,e,i);ue.zv.openHref(r)}else if(r){const t=ue.zv.formatUniversalUrl(r,e,i);ue.zv.openHref(t,"_blank")}}async onConnect(){var e;const{standaloneUri:t}=ue.zb.state;if(t)this.onFormatAndRedirect(t);else try{await ue.Id.client().connectWalletConnect((e=>{this.uri=e,this.onFormatAndRedirect(e)}),null==(e=ue.zb.state.selectedChain)?void 0:e.id);const{name:t,walletId:r,native:i,universal:n,icon:s}=this.getRouterData();ar.setRecentWallet({name:t,id:r,links:{native:i,universal:n},image:s}),ue.jb.close()}catch(e){ue.Vs.openToast(ar.getErrorMessage(e),"error"),this.onConnect()}}onConnectWithMobile(){ue.AV.push("Qrcode")}onGoToWallet(){const{universal:e,name:t}=this.getRouterData();if(e){const r=ue.zv.formatUniversalUrl(e,this.uri,t);ue.zv.openHref(r,"_blank")}}render(){const{name:e,icon:t,universal:r,walletId:i}=this.getRouterData(),n=ar.getWalletName(e);return j`<w3m-modal-header title="${n}"></w3m-modal-header><w3m-modal-content><div class="w3m-wrapper">${t?j`<w3m-wallet-image src="${t}" size="lg"></w3m-wallet-image>`:j`<w3m-wallet-image size="lg" walletid="${xt(i)}"></w3m-wallet-image>`}<div class="w3m-connecting-title"><w3m-spinner></w3m-spinner><w3m-text variant="large-bold" color="secondary">${`Continue in ${n}...`}</w3m-text></div><div class="w3m-install-actions"><w3m-button .onClick="${this.onConnect.bind(this)}" .iconRight="${Zt.RETRY_ICON}">Retry</w3m-button>${r?j`<w3m-button .onClick="${this.onGoToWallet.bind(this)}" .iconLeft="${Zt.ARROW_UP_RIGHT_ICON}">Go to Wallet</w3m-button>`:j`<w3m-button .onClick="${this.onConnectWithMobile}" .iconLeft="${Zt.MOBILE_ICON}">Connect with Mobile</w3m-button>`}</div></div></w3m-modal-content>`}};Un.styles=[kt.globalCss,Mn],$n([ce()],Un.prototype,"uri",2),Un=$n([oe("w3m-desktop-connector-view")],Un);const jn=l`.w3m-info-text{margin:5px 0 15px;max-width:320px}.w3m-wallet-item{margin:0 -20px 0 0;padding-right:20px;display:flex;align-items:center;border-bottom:1px solid var(--color-bg-2)}.w3m-wallet-item:last-child{margin-bottom:-20px;border-bottom:0}.w3m-wallet-content{margin-left:20px;height:60px;display:flex;flex:1;align-items:center;justify-content:space-between}.w3m-footer-actions{display:flex;flex-direction:column;align-items:center;padding:20px 0;border-top:1px solid var(--color-bg-2)}w3m-wallet-image{display:block;width:40px;height:40px;border-radius:10px}`;Object.defineProperty,Object.getOwnPropertyDescriptor;let Dn=class extends ne{constructor(){super(...arguments),this.explorerUrl="https://explorer.walletconnect.com/"}onGet(e){ue.zv.openHref(e,"_blank")}onExplore(){ue.zv.openHref(this.explorerUrl,"_blank")}render(){const{recomendedWallets:e}=ue.uc.state,t=ar.getCustomWallets().slice(0,6),r=e.length,i=t.length;return j`<w3m-modal-header title="Get a wallet"></w3m-modal-header><w3m-modal-content>${r?e.map((({name:e,image_url:t,homepage:r})=>j`<div class="w3m-wallet-item"><w3m-wallet-image src="${t.lg}"></w3m-wallet-image><div class="w3m-wallet-content"><w3m-text variant="medium-normal">${e}</w3m-text><w3m-button .iconRight="${Zt.ARROW_RIGHT_ICON}" .onClick="${()=>this.onGet(r)}">Get</w3m-button></div></div>`)):null} ${i?t.map((({name:e,id:t,links:r})=>j`<div class="w3m-wallet-item"><w3m-wallet-image walletId="${t}"></w3m-wallet-image><div class="w3m-wallet-content"><w3m-text variant="medium-normal">${e}</w3m-text><w3m-button .iconRight="${Zt.ARROW_RIGHT_ICON}" .onClick="${()=>this.onGet(r.universal)}">Get</w3m-button></div></div>`)):null}</w3m-modal-content><div class="w3m-footer-actions"><w3m-text variant="medium-normal">Not what you're looking for?</w3m-text><w3m-text variant="small-thin" align="center" color="secondary" class="w3m-info-text">With hundreds of wallets out there, there's something for everyone</w3m-text><w3m-button .onClick="${this.onExplore.bind(this)}" .iconRight="${Zt.ARROW_UP_RIGHT_ICON}">Explore Wallets</w3m-button></div>`}};Dn.styles=[kt.globalCss,jn],Dn=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-get-wallet-view")],Dn);const Bn=l`.w3m-footer-actions{display:flex;justify-content:center}.w3m-footer-actions w3m-button{margin:0 5px}.w3m-info-container{display:flex;flex-direction:column;justify-content:center;align-items:center;margin-bottom:20px}.w3m-info-container:last-child{margin-bottom:0}.w3m-info-text{margin-top:5px}.w3m-images svg{margin:0 2px 5px;width:55px;height:55px}.help-img-highlight{stroke:var(--color-overlay)}`;Object.defineProperty,Object.getOwnPropertyDescriptor;let zn=class extends ne{constructor(){super(...arguments),this.learnUrl="https://ethereum.org/en/wallets/"}onGet(){ue.AV.push("GetWallet")}onLearnMore(){ue.zv.openHref(this.learnUrl,"_blank")}render(){return j`<w3m-modal-header title="What is a wallet?"></w3m-modal-header><w3m-modal-content><div class="w3m-info-container"><div class="w3m-images">${Zt.HELP_CHART_IMG} ${Zt.HELP_PAINTING_IMG} ${Zt.HELP_ETH_IMG}</div><w3m-text variant="medium-normal">A home for your digital assets</w3m-text><w3m-text variant="small-thin" align="center" color="secondary" class="w3m-info-text">A wallet lets you store, send and receive digital assets like cryptocurrencies and NFTs.</w3m-text></div><div class="w3m-info-container"><div class="w3m-images">${Zt.HELP_KEY_IMG} ${Zt.HELP_USER_IMG} ${Zt.HELP_LOCK_IMG}</div><w3m-text variant="medium-normal">One login for all of web3</w3m-text><w3m-text variant="small-thin" align="center" color="secondary" class="w3m-info-text">Log in to any app by connecting your wallet. Say goodbye to countless passwords!</w3m-text></div><div class="w3m-info-container"><div class="w3m-images">${Zt.HELP_COMPAS_IMG} ${Zt.HELP_NOUN_IMG} ${Zt.HELP_DAO_IMG}</div><w3m-text variant="medium-normal">Your gateway to a new web</w3m-text><w3m-text variant="small-thin" align="center" color="secondary" class="w3m-info-text">With your wallet, you can explore and interact with DeFi, NFTs, DAOs, and much more.</w3m-text></div><div class="w3m-footer-actions"><w3m-button .onClick="${this.onGet.bind(this)}" .iconLeft="${Zt.WALLET_ICON}">Get a Wallet</w3m-button><w3m-button .onClick="${this.onLearnMore.bind(this)}" .iconRight="${Zt.ARROW_UP_RIGHT_ICON}">Learn More</w3m-button></div></w3m-modal-content>`}};zn.styles=[kt.globalCss,Bn],zn=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-help-view")],zn);const Wn=l`.w3m-injected-wrapper{display:flex;align-items:center;justify-content:center;width:100%;aspect-ratio:1/1;flex-direction:column}.w3m-connecting-title{display:flex;align-items:center;justify-content:center;margin-bottom:20px}w3m-spinner{margin-right:10px}w3m-wallet-image{border-radius:15px;width:25%;aspect-ratio:1/1;margin-bottom:20px}w3m-button{opacity:0}.w3m-injected-error w3m-button{opacity:1}`;var Hn=Object.defineProperty,Vn=Object.getOwnPropertyDescriptor,Fn=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?Vn(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Hn(t,r,s),s};let qn=class extends ne{constructor(){super(),this.connecting=!0,this.error=!1,this.connector=ue.Id.client().getConnectorById("injected"),this.onConnect()}async onConnect(){const{ready:e}=this.connector;e&&(this.error=!1,this.connecting=!0,await ar.handleConnectorConnection("injected",(()=>{this.error=!0,this.connecting=!1})))}render(){const e=ar.getWalletName(this.connector.name),t=ar.getWalletId(this.connector.id),r={"w3m-injected-wrapper":!0,"w3m-injected-error":this.error};return j`<w3m-modal-header title="${e}"></w3m-modal-header><w3m-modal-content><div class="${pe(r)}"><w3m-wallet-image walletId="${t}" size="lg"></w3m-wallet-image><div class="w3m-connecting-title">${this.connecting?j`<w3m-spinner></w3m-spinner>`:null}<w3m-text variant="large-bold" color="${this.error?"error":"secondary"}">${this.error?"Connection declined":`Continue in ${e}...`}</w3m-text></div><w3m-button .onClick="${this.onConnect.bind(this)}" .disabled="${!this.error}" .iconRight="${Zt.RETRY_ICON}">Try Again</w3m-button></div></w3m-modal-content>`}};qn.styles=[kt.globalCss,Wn],Fn([ce()],qn.prototype,"connecting",2),Fn([ce()],qn.prototype,"error",2),qn=Fn([oe("w3m-injected-connector-view")],qn);const Kn=l`.w3m-injected-wrapper{display:flex;align-items:center;justify-content:center;width:100%;aspect-ratio:1/1;flex-direction:column}.w3m-connecting-title{display:flex;align-items:center;justify-content:center;margin-bottom:16px}.w3m-install-title{display:flex;align-items:center;justify-content:center;flex-direction:column}.w3m-install-title w3m-text:last-child{margin-top:10px;max-width:240px}.w3m-install-actions{display:flex;margin-top:15px;align-items:center;flex-direction:column}@media(max-width:355px){.w3m-install-actions{flex-direction:column;align-items:center}}w3m-wallet-image{border-radius:15px;width:25%;aspect-ratio:1/1;margin-bottom:20px}w3m-button{opacity:0}.w3m-install-actions w3m-button{margin:5px;opacity:1}`;Object.defineProperty,Object.getOwnPropertyDescriptor;let Jn=class extends ne{getRouterData(){var e;const t=null==(e=ue.AV.state.data)?void 0:e.InstallConnector;if(!t)throw new Error("Missing router data");return t}onInstall(){const{url:e}=this.getRouterData();ue.zv.openHref(e,"_blank")}onMobile(){const{name:e}=this.getRouterData();ue.AV.push("ConnectWallet"),ue.Vs.openToast(`Scan the code with ${e}`,"success")}render(){const{name:e,id:t,isMobile:r}=this.getRouterData();return j`<w3m-modal-header title="${e}"></w3m-modal-header><w3m-modal-content><div class="w3m-injected-wrapper"><w3m-wallet-image walletId="${t}" size="lg"></w3m-wallet-image><div class="w3m-install-title"><w3m-text variant="large-bold">Install ${e}</w3m-text><w3m-text color="secondary" align="center" variant="medium-thin">To connect ${e}, install the browser extension.</w3m-text></div><div class="w3m-install-actions"><w3m-button .onClick="${this.onInstall.bind(this)}" .iconLeft="${Zt.ARROW_DOWN_ICON}">Install Extension</w3m-button>${r?j`<w3m-button .onClick="${this.onMobile.bind(this)}" .iconLeft="${Zt.MOBILE_ICON}">${e} Mobile</w3m-button>`:null}</div></div></w3m-modal-content>`}};Jn.styles=[kt.globalCss,Kn],Jn=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-install-connector-view")],Jn);Object.defineProperty,Object.getOwnPropertyDescriptor;let Zn=class extends ne{render(){return j`<w3m-modal-header title="Scan the code" .onAction="${ar.handleUriCopy}" .actionIcon="${Zt.COPY_ICON}"></w3m-modal-header><w3m-modal-content><w3m-walletconnect-qr></w3m-walletconnect-qr></w3m-modal-content>`}};Zn.styles=[kt.globalCss],Zn=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-qrcode-view")],Zn);const Gn=l`.w3m-grid{display:grid;grid-template-columns:repeat(4,80px);margin:-5px -10px;justify-content:space-between}`;Object.defineProperty,Object.getOwnPropertyDescriptor;let Yn=class extends ne{onSelectChain(e){const{isConnected:t,selectedChain:r}=ue.zb.state;t?r?.id===e.id?ue.AV.replace("Account"):ue.AV.push("SwitchNetwork",{SwitchNetwork:e}):(ue.AV.push("ConnectWallet"),ue.zb.setSelectedChain(e))}render(){const{chains:e}=ue.zb.state;return j`<w3m-modal-header title="Select network"></w3m-modal-header><w3m-modal-content><div class="w3m-grid">${e?.map((e=>j`<w3m-network-button name="${e.name}" chainId="${e.id}" .onClick="${()=>this.onSelectChain(e)}">${e.name}</w3m-network-button>`))}</div></w3m-modal-content>`}};Yn.styles=[kt.globalCss,Gn],Yn=((e,t,r,i)=>{for(var n,s=t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=n(s)||s);return s})([oe("w3m-select-network-view")],Yn);const Xn=l`.w3m-wrapper{display:flex;align-items:center;justify-content:center;width:100%;aspect-ratio:1/1;flex-direction:column}.w3m-connecting-title{display:flex;align-items:center;justify-content:center;margin-bottom:16px}w3m-spinner{margin-right:10px}w3m-network-image{width:96px;height:96px;margin-bottom:20px}w3m-button{opacity:0}.w3m-error w3m-button{opacity:1}`;var Qn=Object.defineProperty,es=Object.getOwnPropertyDescriptor,ts=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?es(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&Qn(t,r,s),s};let rs=class extends ne{constructor(){super(),this.error=!1,this.onSwitchNetwork()}getRouterData(){var e;const t=null==(e=ue.AV.state.data)?void 0:e.SwitchNetwork;if(!t)throw new Error("Missing router data");return t}async onSwitchNetwork(){try{this.error=!1;const e=this.getRouterData();await ue.Id.client().switchNetwork({chainId:e.id}),ue.zb.setSelectedChain(e),ue.AV.replace("Account")}catch{this.error=!0}}render(){const{id:e,name:t}=this.getRouterData(),r={"w3m-wrapper":!0,"w3m-error":this.error};return j`<w3m-modal-header title="${`Connect to ${t}`}"></w3m-modal-header><w3m-modal-content><div class="${pe(r)}"><w3m-network-image chainId="${e}"></w3m-network-image><div class="w3m-connecting-title">${this.error?null:j`<w3m-spinner></w3m-spinner>`}<w3m-text variant="large-bold" color="${this.error?"error":"secondary"}">${this.error?"Connection declined":"Approve in your wallet"}</w3m-text></div><w3m-button .onClick="${this.onSwitchNetwork.bind(this)}" .disabled="${!this.error}" .iconRight="${Zt.RETRY_ICON}">Try Again</w3m-button></div></w3m-modal-content>`}};rs.styles=[kt.globalCss,Xn],ts([ce()],rs.prototype,"error",2),rs=ts([oe("w3m-switch-network-view")],rs);const is=l`w3m-modal-content{height:clamp(200px,60vh,600px);display:block;overflow:scroll;scrollbar-width:none;position:relative;margin-top:1px}.w3m-grid{display:grid;grid-template-columns:repeat(4,80px);justify-content:space-between;margin:-15px -10px;padding-top:20px}w3m-modal-content::after,w3m-modal-content::before{content:'';position:fixed;pointer-events:none;z-index:1;width:100%;height:20px;opacity:1}w3m-modal-content::before{box-shadow:0 -1px 0 0 var(--color-bg-1);background:linear-gradient(var(--color-bg-1),rgba(255,255,255,0))}w3m-modal-content::after{box-shadow:0 1px 0 0 var(--color-bg-1);background:linear-gradient(rgba(255,255,255,0),var(--color-bg-1));top:calc(100% - 20px)}w3m-modal-content::-webkit-scrollbar{display:none}.w3m-placeholder-block{display:flex;justify-content:center;align-items:center;height:100px;overflow:hidden}.w3m-empty,.w3m-loading{display:flex}.w3m-loading .w3m-placeholder-block{height:100%}.w3m-end-reached .w3m-placeholder-block{height:0;opacity:0}.w3m-empty .w3m-placeholder-block{opacity:1;height:100%}w3m-wallet-button{margin:calc((100% - 60px)/ 3) 0}`;var ns=Object.defineProperty,ss=Object.getOwnPropertyDescriptor,os=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?ss(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&ns(t,r,s),s};let as=class extends ne{constructor(){super(...arguments),this.loading=!ue.uc.state.wallets.listings.length,this.firstFetch=!ue.uc.state.wallets.listings.length,this.search="",this.endReached=!1,this.intersectionObserver=void 0,this.searchDebounce=ar.debounce((e=>{e.length>=3?(this.firstFetch=!0,this.endReached=!1,this.search=e,ue.uc.resetSearch(),this.fetchWallets()):this.search&&(this.search="",this.endReached=this.isLastPage(),ue.uc.resetSearch())}))}firstUpdated(){this.createPaginationObserver()}disconnectedCallback(){var e;null==(e=this.intersectionObserver)||e.disconnect()}get placeholderEl(){return ar.getShadowRootElement(this,".w3m-placeholder-block")}createPaginationObserver(){this.intersectionObserver=new IntersectionObserver((([e])=>{e.isIntersecting&&(!this.search||!this.firstFetch)&&this.fetchWallets()})),this.intersectionObserver.observe(this.placeholderEl)}isLastPage(){const{wallets:e,search:t}=ue.uc.state,{listings:r,total:i}=this.search?t:e;return i<=40||r.length>=i}async fetchWallets(){var e;const{wallets:t,search:r}=ue.uc.state,i=ar.getExtensionWallets(),{listings:n,total:s,page:o}=this.search?r:t;if(!this.endReached&&(this.firstFetch||s>40&&n.length<s))try{this.loading=!0;const t=null==(e=ue.zb.state.standaloneChains)?void 0:e.join(","),{listings:r}=await ue.uc.getPaginatedWallets({page:this.firstFetch?1:o+1,entries:40,device:ue.zv.isMobile()?"mobile":"desktop",search:this.search,chains:t}),n=r.map((({image_url:e})=>e.lg)),s=i.map((({id:e})=>ar.getWalletIcon(e)));await Promise.all([...n.map((async e=>ar.preloadImage(e))),...s.map((async e=>ar.preloadImage(e))),ue.zv.wait(300)]),this.endReached=this.isLastPage()}catch(e){ue.Vs.openToast(ar.getErrorMessage(e),"error")}finally{this.loading=!1,this.firstFetch=!1}}async onConnectPlatform(e){if(ue.zv.isMobile()){const{id:t,image_url:r}=e,{native:i,universal:n}=e.mobile;await ar.handleMobileLinking({links:{native:i,universal:n},name:e.name,id:t,image:r.lg})}else ue.AV.push("DesktopConnector",{DesktopConnector:{name:e.name,icon:e.image_url.lg,universal:e.desktop.universal||e.homepage,native:e.desktop.native}})}onConnectExtension(e){ar.getWalletId("")===e.id?ue.AV.push("InjectedConnector"):ue.AV.push("InstallConnector",{InstallConnector:e})}onSearchChange(e){const{value:t}=e.target;this.searchDebounce(t)}coinbaseConnectorTemplate(){try{const e=ue.Id.client().getConnectorById(Xt.coinbaseWallet);return j`<w3m-wallet-button name="${e.name}" walletId="${e.id}" .onClick="${async()=>ar.handleConnectorConnection(Xt.coinbaseWallet)}"></w3m-wallet-button>`}catch{return null}}render(){const{wallets:e,search:t}=ue.uc.state,{isStandalone:r}=ue.zb.state;let{listings:i}=this.search?t:e;i=on.allowedExplorerListings(i);const n=this.loading&&!i.length,s=this.search.length>=3,o=!n&&(!s||ar.caseSafeIncludes(Xt.coinbaseWallet,this.search));let a=r||ue.zv.isMobile()?[]:ar.getExtensionWallets();s&&(a=a.filter((({name:e})=>ar.caseSafeIncludes(e,this.search))));const l=!(this.loading||i.length||a.length||o),c=Math.max(a.length,i.length),h={"w3m-loading":n,"w3m-end-reached":this.endReached||!this.loading,"w3m-empty":l};return j`<w3m-modal-header><w3m-search-input .onChange="${this.onSearchChange.bind(this)}"></w3m-search-input></w3m-modal-header><w3m-modal-content class="${pe(h)}"><div class="w3m-grid">${n?null:[...Array(c)].map(((e,t)=>j`${a[t]?j`<w3m-wallet-button name="${a[t].name}" walletId="${a[t].id}" .onClick="${()=>this.onConnectExtension(a[t])}"></w3m-wallet-button>`:null} ${i[t]?j`<w3m-wallet-button src="${i[t].image_url.lg}" name="${i[t].name}" walletId="${i[t].id}" .onClick="${async()=>this.onConnectPlatform(i[t])}"></w3m-wallet-button>`:null}`))} ${o?this.coinbaseConnectorTemplate():null}</div><div class="w3m-placeholder-block">${l?j`<w3m-text variant="large-bold" color="secondary">No results found</w3m-text>`:null} ${!l&&this.loading?j`<w3m-spinner></w3m-spinner>`:null}</div></w3m-modal-content>`}};as.styles=[kt.globalCss,is],os([ce()],as.prototype,"loading",2),os([ce()],as.prototype,"firstFetch",2),os([ce()],as.prototype,"search",2),os([ce()],as.prototype,"endReached",2),as=os([oe("w3m-wallet-explorer-view")],as);const ls=l`w3m-modal-content{display:flex;max-height:55vh;overflow:scroll;scrollbar-width:none;position:relative;margin-top:1px}w3m-modal-content::after,w3m-modal-content::before{content:'';position:fixed;pointer-events:none;z-index:1;width:100%;height:20px;opacity:1}w3m-modal-content::before{box-shadow:0 -1px 0 0 var(--color-bg-1);background:linear-gradient(var(--color-bg-1),transparent)}w3m-modal-content::after{box-shadow:0 1px 0 0 var(--color-bg-1);background:linear-gradient(transparent,var(--color-bg-1));top:calc(100% - 20px)}w3m-modal-content::-webkit-scrollbar{display:none}.w3m-grid{display:grid;grid-template-columns:repeat(4,80px);justify-content:space-between;margin:-15px -10px}w3m-wallet-button{margin:calc((100% - 60px)/ 3) 0}`;var cs=Object.defineProperty,hs=Object.getOwnPropertyDescriptor,us=(e,t,r,i)=>{for(var n,s=i>1?void 0:i?hs(t,r):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(i?n(t,r,s):n(s))||s);return i&&s&&cs(t,r,s),s};let ds=class extends ne{constructor(){super(...arguments),this.search=""}async onConnectPlatform({name:e,universal:t,native:r,walletId:i}){ue.zv.isMobile()?await ar.handleMobileLinking({links:{native:r,universal:t},name:e,id:i}):ue.AV.push("DesktopConnector",{DesktopConnector:{name:e,walletId:i,universal:t,native:r}})}onSearchChange(e){const{value:t}=e.target;this.search=t}render(){const e=ar.getCustomWallets(),t=this.search.length?e.filter((e=>ar.caseSafeIncludes(e.name,this.search))):e;return j`<w3m-modal-header><w3m-search-input .onChange="${this.onSearchChange.bind(this)}"></w3m-search-input></w3m-modal-header><w3m-modal-content><div class="w3m-grid">${t.map((({id:e,name:t,links:{native:r,universal:i}})=>j`<w3m-wallet-button walletId="${e}" name="${t}" .onClick="${async()=>this.onConnectPlatform({name:t,universal:i,native:r,walletId:e})}"></w3m-wallet-button>`))}</div></w3m-modal-content>`}};ds.styles=[kt.globalCss,ls],us([ce()],ds.prototype,"search",2),ds=us([oe("w3m-wallet-filter-view")],ds)}},t={};function r(i){var n=t[i];if(void 0!==n)return n.exports;var s=t[i]={id:i,loaded:!1,exports:{}};return e[i](s,s.exports,r),s.loaded=!0,s.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var i in t)r.o(t,i)&&!r.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e={};r.r(e),r.d(e,{identity:()=>ee});var t={};r.r(t),r.d(t,{base2:()=>te});var i={};r.r(i),r.d(i,{base8:()=>re});var n={};r.r(n),r.d(n,{base10:()=>ie});var s={};r.r(s),r.d(s,{base16:()=>ne,base16upper:()=>se});var o={};r.r(o),r.d(o,{base32:()=>oe,base32hex:()=>he,base32hexpad:()=>de,base32hexpadupper:()=>pe,base32hexupper:()=>ue,base32pad:()=>le,base32padupper:()=>ce,base32upper:()=>ae,base32z:()=>fe});var a={};r.r(a),r.d(a,{base36:()=>ge,base36upper:()=>me});var l={};r.r(l),r.d(l,{base58btc:()=>ve,base58flickr:()=>be});var c={};r.r(c),r.d(c,{base64:()=>we,base64pad:()=>ye,base64url:()=>_e,base64urlpad:()=>Ee});var h={};r.r(h),r.d(h,{base256emoji:()=>Ie});var u={};r.r(u),r.d(u,{sha256:()=>qe,sha512:()=>Ke});var d={};r.r(d),r.d(d,{identity:()=>Ze});var p={};r.r(p),r.d(p,{code:()=>Ye,decode:()=>Qe,encode:()=>Xe,name:()=>Ge});var f={};r.r(f),r.d(f,{code:()=>it,decode:()=>st,encode:()=>nt,name:()=>rt});var g=r(6559),m=r.n(g),v=r(7187),b=r.n(v),w=r(5150),y=r(772),_=r(9107),E=r(8200);class x extends E.q{constructor(e){super(),this.opts=e,this.protocol="wc",this.version=2}}class C extends E.q{constructor(e,t){super(),this.core=e,this.logger=t,this.records=new Map}}class S{constructor(e,t){this.logger=e,this.core=t}}class I extends E.q{constructor(e,t){super(),this.relayer=e,this.logger=t}}class O extends E.q{constructor(e){super()}}class A{constructor(e,t,r,i){this.core=e,this.logger=t,this.name=r}}class R extends E.q{constructor(e,t){super(),this.relayer=e,this.logger=t}}class P extends E.q{constructor(e,t){super(),this.core=e,this.logger=t}}class k{constructor(e){this.opts=e,this.protocol="wc",this.version=2}}class N{constructor(e){this.client=e}}function M(e){if("string"!=typeof e)throw new Error("Cannot safe json parse value of type "+typeof e);try{return JSON.parse(e)}catch(t){return e}}function T(e){return"string"==typeof e?e:JSON.stringify(e)}var L=r(1050),$=r(1416),U=r(6736);const j="base64url",D="did",B="key",z="base58btc";function W(e=0){return null!=globalThis.Buffer&&null!=globalThis.Buffer.allocUnsafe?globalThis.Buffer.allocUnsafe(e):new Uint8Array(e)}function H(e,t){t||(t=e.reduce(((e,t)=>e+t.length),0));const r=W(t);let i=0;for(const t of e)r.set(t,i),i+=t.length;return r}const V=function(e,t){if(e.length>=255)throw new TypeError("Alphabet too long");for(var r=new Uint8Array(256),i=0;i<r.length;i++)r[i]=255;for(var n=0;n<e.length;n++){var s=e.charAt(n),o=s.charCodeAt(0);if(255!==r[o])throw new TypeError(s+" is ambiguous");r[o]=n}var a=e.length,l=e.charAt(0),c=Math.log(a)/Math.log(256),h=Math.log(256)/Math.log(a);function u(e){if("string"!=typeof e)throw new TypeError("Expected String");if(0===e.length)return new Uint8Array;var t=0;if(" "!==e[t]){for(var i=0,n=0;e[t]===l;)i++,t++;for(var s=(e.length-t)*c+1>>>0,o=new Uint8Array(s);e[t];){var h=r[e.charCodeAt(t)];if(255===h)return;for(var u=0,d=s-1;(0!==h||u<n)&&-1!==d;d--,u++)h+=a*o[d]>>>0,o[d]=h%256>>>0,h=h/256>>>0;if(0!==h)throw new Error("Non-zero carry");n=u,t++}if(" "!==e[t]){for(var p=s-n;p!==s&&0===o[p];)p++;for(var f=new Uint8Array(i+(s-p)),g=i;p!==s;)f[g++]=o[p++];return f}}}return{encode:function(t){if(t instanceof Uint8Array||(ArrayBuffer.isView(t)?t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength):Array.isArray(t)&&(t=Uint8Array.from(t))),!(t instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(0===t.length)return"";for(var r=0,i=0,n=0,s=t.length;n!==s&&0===t[n];)n++,r++;for(var o=(s-n)*h+1>>>0,c=new Uint8Array(o);n!==s;){for(var u=t[n],d=0,p=o-1;(0!==u||d<i)&&-1!==p;p--,d++)u+=256*c[p]>>>0,c[p]=u%a>>>0,u=u/a>>>0;if(0!==u)throw new Error("Non-zero carry");i=d,n++}for(var f=o-i;f!==o&&0===c[f];)f++;for(var g=l.repeat(r);f<o;++f)g+=e.charAt(c[f]);return g},decodeUnsafe:u,decode:function(e){var r=u(e);if(r)return r;throw new Error(`Non-${t} character`)}}},F=(new Uint8Array(0),e=>{if(e instanceof Uint8Array&&"Uint8Array"===e.constructor.name)return e;if(e instanceof ArrayBuffer)return new Uint8Array(e);if(ArrayBuffer.isView(e))return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);throw new Error("Unknown type, must be binary type")});class q{constructor(e,t,r){this.name=e,this.prefix=t,this.baseEncode=r}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}}class K{constructor(e,t,r){if(this.name=e,this.prefix=t,void 0===t.codePointAt(0))throw new Error("Invalid prefix character");this.prefixCodePoint=t.codePointAt(0),this.baseDecode=r}decode(e){if("string"==typeof e){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(e.slice(this.prefix.length))}throw Error("Can only multibase decode strings")}or(e){return Z(this,e)}}class J{constructor(e){this.decoders=e}or(e){return Z(this,e)}decode(e){const t=e[0],r=this.decoders[t];if(r)return r.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}}const Z=(e,t)=>new J({...e.decoders||{[e.prefix]:e},...t.decoders||{[t.prefix]:t}});class G{constructor(e,t,r,i){this.name=e,this.prefix=t,this.baseEncode=r,this.baseDecode=i,this.encoder=new q(e,t,r),this.decoder=new K(e,t,i)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}}const Y=({name:e,prefix:t,encode:r,decode:i})=>new G(e,t,r,i),X=({prefix:e,name:t,alphabet:r})=>{const{encode:i,decode:n}=V(r,t);return Y({prefix:e,name:t,encode:i,decode:e=>F(n(e))})},Q=({name:e,prefix:t,bitsPerChar:r,alphabet:i})=>Y({prefix:t,name:e,encode:e=>((e,t,r)=>{const i="="===t[t.length-1],n=(1<<r)-1;let s="",o=0,a=0;for(let i=0;i<e.length;++i)for(a=a<<8|e[i],o+=8;o>r;)o-=r,s+=t[n&a>>o];if(o&&(s+=t[n&a<<r-o]),i)for(;s.length*r&7;)s+="=";return s})(e,i,r),decode:t=>((e,t,r,i)=>{const n={};for(let e=0;e<t.length;++e)n[t[e]]=e;let s=e.length;for(;"="===e[s-1];)--s;const o=new Uint8Array(s*r/8|0);let a=0,l=0,c=0;for(let t=0;t<s;++t){const s=n[e[t]];if(void 0===s)throw new SyntaxError(`Non-${i} character`);l=l<<r|s,a+=r,a>=8&&(a-=8,o[c++]=255&l>>a)}if(a>=r||255&l<<8-a)throw new SyntaxError("Unexpected end of data");return o})(t,i,r,e)}),ee=Y({prefix:"\0",name:"identity",encode:e=>{return t=e,(new TextDecoder).decode(t);var t},decode:e=>(e=>(new TextEncoder).encode(e))(e)}),te=Q({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1}),re=Q({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3}),ie=X({prefix:"9",name:"base10",alphabet:"0123456789"}),ne=Q({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),se=Q({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4}),oe=Q({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),ae=Q({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),le=Q({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),ce=Q({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),he=Q({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),ue=Q({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),de=Q({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),pe=Q({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),fe=Q({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5}),ge=X({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),me=X({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"}),ve=X({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),be=X({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"}),we=Q({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),ye=Q({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),_e=Q({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),Ee=Q({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6}),xe=Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂"),Ce=xe.reduce(((e,t,r)=>(e[r]=t,e)),[]),Se=xe.reduce(((e,t,r)=>(e[t.codePointAt(0)]=r,e)),[]),Ie=Y({prefix:"🚀",name:"base256emoji",encode:function(e){return e.reduce(((e,t)=>e+Ce[t]),"")},decode:function(e){const t=[];for(const r of e){const e=Se[r.codePointAt(0)];if(void 0===e)throw new Error(`Non-base256emoji character: ${r}`);t.push(e)}return new Uint8Array(t)}});var Oe=Math.pow(2,31),Ae=Math.pow(2,7),Re=Math.pow(2,14),Pe=Math.pow(2,21),ke=Math.pow(2,28),Ne=Math.pow(2,35),Me=Math.pow(2,42),Te=Math.pow(2,49),Le=Math.pow(2,56),$e=Math.pow(2,63);const Ue=function e(t,r,i){r=r||[];for(var n=i=i||0;t>=Oe;)r[i++]=255&t|128,t/=128;for(;-128&t;)r[i++]=255&t|128,t>>>=7;return r[i]=0|t,e.bytes=i-n+1,r},je=function(e){return e<Ae?1:e<Re?2:e<Pe?3:e<ke?4:e<Ne?5:e<Me?6:e<Te?7:e<Le?8:e<$e?9:10},De=(e,t,r=0)=>(Ue(e,t,r),t),Be=e=>je(e),ze=(e,t)=>{const r=t.byteLength,i=Be(e),n=i+Be(r),s=new Uint8Array(n+r);return De(e,s,0),De(r,s,i),s.set(t,n),new We(e,r,t,s)};class We{constructor(e,t,r,i){this.code=e,this.size=t,this.digest=r,this.bytes=i}}const He=({name:e,code:t,encode:r})=>new Ve(e,t,r);class Ve{constructor(e,t,r){this.name=e,this.code=t,this.encode=r}digest(e){if(e instanceof Uint8Array){const t=this.encode(e);return t instanceof Uint8Array?ze(this.code,t):t.then((e=>ze(this.code,e)))}throw Error("Unknown type, must be binary type")}}const Fe=e=>async t=>new Uint8Array(await crypto.subtle.digest(e,t)),qe=He({name:"sha2-256",code:18,encode:Fe("SHA-256")}),Ke=He({name:"sha2-512",code:19,encode:Fe("SHA-512")}),Je=F,Ze={code:0,name:"identity",encode:Je,digest:e=>ze(0,Je(e))},Ge="raw",Ye=85,Xe=e=>F(e),Qe=e=>F(e),et=new TextEncoder,tt=new TextDecoder,rt="json",it=512,nt=e=>et.encode(JSON.stringify(e)),st=e=>JSON.parse(tt.decode(e));class ot{constructor(e,t,r,i){this.code=t,this.version=e,this.multihash=r,this.bytes=i,this.byteOffset=i.byteOffset,this.byteLength=i.byteLength,this.asCID=this,this._baseCache=new Map,Object.defineProperties(this,{byteOffset:cid_hidden,byteLength:cid_hidden,code:readonly,version:readonly,multihash:readonly,bytes:readonly,_baseCache:cid_hidden,asCID:cid_hidden})}toV0(){if(0===this.version)return this;{const{code:e,multihash:t}=this;if(e!==DAG_PB_CODE)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(t.code!==SHA_256_CODE)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return ot.createV0(t)}}toV1(){switch(this.version){case 0:{const{code:e,digest:t}=this.multihash,r=Digest.create(e,t);return ot.createV1(this.code,r)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}equals(e){return e&&this.code===e.code&&this.version===e.version&&Digest.equals(this.multihash,e.multihash)}toString(e){const{bytes:t,version:r,_baseCache:i}=this;return 0===r?toStringV0(t,i,e||base58btc.encoder):toStringV1(t,i,e||base32.encoder)}toJSON(){return{code:this.code,version:this.version,hash:this.multihash.bytes}}get[Symbol.toStringTag](){return"CID"}[Symbol.for("nodejs.util.inspect.custom")](){return"CID("+this.toString()+")"}static isCID(e){return deprecate(/^0\.0/,IS_CID_DEPRECATION),!(!e||!e[cidSymbol]&&e.asCID!==e)}get toBaseEncodedString(){throw new Error("Deprecated, use .toString()")}get codec(){throw new Error('"codec" property is deprecated, use integer "code" property instead')}get buffer(){throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead")}get multibaseName(){throw new Error('"multibaseName" property is deprecated')}get prefix(){throw new Error('"prefix" property is deprecated')}static asCID(e){if(e instanceof ot)return e;if(null!=e&&e.asCID===e){const{version:t,code:r,multihash:i,bytes:n}=e;return new ot(t,r,i,n||encodeCID(t,r,i.bytes))}if(null!=e&&!0===e[cidSymbol]){const{version:t,multihash:r,code:i}=e,n=Digest.decode(r);return ot.create(t,i,n)}return null}static create(e,t,r){if("number"!=typeof t)throw new Error("String codecs are no longer supported");switch(e){case 0:if(t!==DAG_PB_CODE)throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);return new ot(e,t,r,r.bytes);case 1:{const i=encodeCID(e,t,r.bytes);return new ot(e,t,r,i)}default:throw new Error("Invalid version")}}static createV0(e){return ot.create(0,DAG_PB_CODE,e)}static createV1(e,t){return ot.create(1,e,t)}static decode(e){const[t,r]=ot.decodeFirst(e);if(r.length)throw new Error("Incorrect length");return t}static decodeFirst(e){const t=ot.inspectBytes(e),r=t.size-t.multihashSize,i=coerce(e.subarray(r,r+t.multihashSize));if(i.byteLength!==t.multihashSize)throw new Error("Incorrect length");const n=i.subarray(t.multihashSize-t.digestSize),s=new Digest.Digest(t.multihashCode,t.digestSize,n,i);return[0===t.version?ot.createV0(s):ot.createV1(t.codec,s),e.subarray(t.size)]}static inspectBytes(e){const t=()=>{const[t,r]=varint.decode(e.subarray(0));return t};let r=t(),i=DAG_PB_CODE;if(18===r||1===r&&t(),0!==r&&1!==r)throw new RangeError(`Invalid CID version ${r}`);const n=t(),s=t(),o=0+s;return{version:r,codec:i,multihashCode:n,digestSize:s,multihashSize:o-0,size:o}}static parse(e,t){const[r,i]=parseCIDtoBytes(e,t),n=ot.decode(i);return n._baseCache.set(r,e),n}}Symbol.for("@ipld/js-cid/CID");const at={...e,...t,...i,...n,...s,...o,...a,...l,...c,...h};function lt(e,t,r,i){return{name:e,prefix:t,encoder:{name:e,prefix:t,encode:r},decoder:{decode:i}}}const ct=lt("utf8","u",(e=>"u"+new TextDecoder("utf8").decode(e)),(e=>(new TextEncoder).encode(e.substring(1)))),ht=lt("ascii","a",(e=>{let t="a";for(let r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t}),(e=>{const t=W((e=e.substring(1)).length);for(let r=0;r<e.length;r++)t[r]=e.charCodeAt(r);return t})),ut={utf8:ct,"utf-8":ct,hex:at.base16,latin1:ht,ascii:ht,binary:ht,...at};function dt(e,t="utf8"){const r=ut[t];if(!r)throw new Error(`Unsupported encoding "${t}"`);return"utf8"!==t&&"utf-8"!==t||null==globalThis.Buffer||null==globalThis.Buffer.from?r.encoder.encode(e).substring(1):globalThis.Buffer.from(e.buffer,e.byteOffset,e.byteLength).toString("utf8")}function pt(e,t="utf8"){const r=ut[t];if(!r)throw new Error(`Unsupported encoding "${t}"`);return"utf8"!==t&&"utf-8"!==t||null==globalThis.Buffer||null==globalThis.Buffer.from?r.decoder.decode(`${r.prefix}${e}`):globalThis.Buffer.from(e,"utf8")}function ft(e){return dt(pt(T(e),"utf8"),j)}function gt(e){const t="z"+dt(H([pt("K36",z),e]),z);return[D,B,t].join(":")}function mt(e=(0,$.randomBytes)(32)){return L._w(e)}r(3014);var vt=r(5501),bt=r(512),wt=r(3294),yt=r(7664),_t=function(e,t,r){if(r||2===arguments.length)for(var i,n=0,s=t.length;n<s;n++)!i&&n in t||(i||(i=Array.prototype.slice.call(t,0,n)),i[n]=t[n]);return e.concat(i||Array.prototype.slice.call(t))},Et=function(e,t,r){this.name=e,this.version=t,this.os=r,this.type="browser"},xt=function(e){this.version=e,this.type="node",this.name="node",this.os=process.platform},Ct=function(e,t,r,i){this.name=e,this.version=t,this.os=r,this.bot=i,this.type="bot-device"},St=function(){this.type="bot",this.bot=!0,this.name="bot",this.version=null,this.os=null},It=function(){this.type="react-native",this.name="react-native",this.version=null,this.os=null},Ot=/(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/,At=[["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["edge-ios",/EdgiOS\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["samsung",/SamsungBrowser\/([0-9\.]+)/],["silk",/\bSilk\/([0-9._-]+)\b/],["miui",/MiuiBrowser\/([0-9\.]+)$/],["beaker",/BeakerBrowser\/([0-9\.]+)/],["edge-chromium",/EdgA?\/([0-9\.]+)/],["chromium-webview",/(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera-mini",/Opera Mini.*Version\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)/],["pie",/^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],["pie",/^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],["netfront",/^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/],["facebook",/FB[AS]V\/([0-9\.]+)/],["instagram",/Instagram\s([0-9\.]+)/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Mobile/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Gecko\)$/],["curl",/^curl\/([0-9\.]+)$/],["searchbot",/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/]],Rt=[["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Windows CE",/Windows CE|WinCE|Microsoft Pocket Internet Explorer/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Chrome OS",/CrOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/]];function Pt(e){var t=function(e){return""!==e&&At.reduce((function(t,r){var i=r[0],n=r[1];if(t)return t;var s=n.exec(e);return!!s&&[i,s]}),!1)}(e);if(!t)return null;var r=t[0],i=t[1];if("searchbot"===r)return new St;var n=i[1]&&i[1].split(".").join("_").split("_").slice(0,3);n?n.length<3&&(n=_t(_t([],n,!0),function(e){for(var t=[],r=0;r<e;r++)t.push("0");return t}(3-n.length),!0)):n=[];var s=n.join("."),o=function(e){for(var t=0,r=Rt.length;t<r;t++){var i=Rt[t],n=i[0];if(i[1].exec(e))return n}return null}(e),a=Ot.exec(e);return a&&a[1]?new Ct(r,s,o,a[1]):new Et(r,s,o)}var kt=r(8495),Nt=r(416),Mt=r(7338);r(1882);const Tt={waku:{publish:"waku_publish",subscribe:"waku_subscribe",subscription:"waku_subscription",unsubscribe:"waku_unsubscribe"},irn:{publish:"irn_publish",subscribe:"irn_subscribe",subscription:"irn_subscription",unsubscribe:"irn_unsubscribe"},iridium:{publish:"iridium_publish",subscribe:"iridium_subscribe",subscription:"iridium_subscription",unsubscribe:"iridium_unsubscribe"}},Lt="base10",$t="base16",Ut="base64pad",jt="utf8";function Dt(){return dt((0,$.randomBytes)(32),$t)}function Bt(e){return dt((0,wt.vp)(pt(e,jt)),$t)}function zt(e){return Number(dt(e,Lt))}function Wt(e){const t=pt(e,Ut),r=t.slice(0,1);if(1===zt(r)){const e=33,i=e+12,n=t.slice(1,e),s=t.slice(e,i);return{type:r,sealed:t.slice(i),iv:s,senderPublicKey:n}}const i=t.slice(1,13);return{type:r,sealed:t.slice(13),iv:i}}function Ht(e){const t=e?.type||0;if(1===t){if(typeof e?.senderPublicKey>"u")throw new Error("missing sender public key");if(typeof e?.receiverPublicKey>"u")throw new Error("missing receiver public key")}return{type:t,senderPublicKey:e?.senderPublicKey,receiverPublicKey:e?.receiverPublicKey}}function Vt(e){return 1===e.type&&"string"==typeof e.senderPublicKey&&"string"==typeof e.receiverPublicKey}var Ft=Object.defineProperty,qt=Object.getOwnPropertySymbols,Kt=Object.prototype.hasOwnProperty,Jt=Object.prototype.propertyIsEnumerable,Zt=(e,t,r)=>t in e?Ft(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Gt=(e,t)=>{for(var r in t||(t={}))Kt.call(t,r)&&Zt(e,r,t[r]);if(qt)for(var r of qt(t))Jt.call(t,r)&&Zt(e,r,t[r]);return e};const Yt="browser",Xt="js";function Qt(){return typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"}function er(e,t,r){const i=function(){const e=t?Pt(t):"undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product?new It:"undefined"!=typeof navigator?Pt(navigator.userAgent):"undefined"!=typeof process&&process.version?new xt(process.version.slice(1)):null;var t;if(null===e)return"unknown";const r=e.os?e.os.replace(" ","").toLowerCase():"unknown";return"browser"===e.type?[r,e.name,e.version].join("-"):[r,e.version].join("-")}(),n=function(){var e;const t=!(0,kt.getDocument)()&&(0,kt.getNavigator)()&&"ReactNative"===navigator.product?"react-native":Qt()?"node":!Qt()&&(0,kt.getNavigator)()?Yt:"unknown";return t===Yt?[t,(null==(e=(0,kt.getLocation)())?void 0:e.host)||"unknown"].join(":"):t}();return[[e,t].join("-"),[Xt,r].join("-"),i,n].join("/")}function tr(e,t){return e.filter((e=>t.includes(e))).length===e.length}function rr(e){return Object.fromEntries(e.entries())}function ir(e){return new Map(Object.entries(e))}function nr(e,t){return(0,U.fromMiliseconds)((t||Date.now())+(0,U.toMiliseconds)(e))}function sr(e){return(0,U.fromMiliseconds)(Date.now())>=(0,U.toMiliseconds)(e)}function or(){const e=(0,U.toMiliseconds)(U.FIVE_MINUTES);let t,r,i;return{resolve:e=>{i&&t&&(clearTimeout(i),t(e))},reject:e=>{i&&r&&(clearTimeout(i),r(e))},done:()=>new Promise(((n,s)=>{i=setTimeout(s,e),t=n,r=s}))}}function ar(e,t){return new Promise((async(r,i)=>{const n=setTimeout((()=>i()),t),s=await e;clearTimeout(n),r(s)}))}function lr(e,t){if("string"==typeof t&&t.startsWith(`${e}:`))return t;if("topic"===e.toLowerCase()){if("string"!=typeof t)throw new Error('Value must be "string" for expirer target type: topic');return`topic:${t}`}if("id"===e.toLowerCase()){if("number"!=typeof t)throw new Error('Value must be "number" for expirer target type: id');return`id:${t}`}throw new Error(`Unknown expirer target type: ${e}`)}function cr(e){const[t,r]=e.split(":"),i={id:void 0,topic:void 0};if("topic"===t&&"string"==typeof r)i.topic=r;else{if("id"!==t||!Number.isInteger(Number(r)))throw new Error(`Invalid target, expected id:number or topic:string, got ${t}:${r}`);i.id=Number(r)}return i}function hr(e,t){return`${e}${t?`:${t}`:""}`}function ur(e){return e?.relay||{protocol:"irn"}}function dr(e){const t=Tt[e];if(typeof t>"u")throw new Error(`Relay Protocol not supported: ${e}`);return t}var pr=Object.defineProperty,fr=Object.getOwnPropertySymbols,gr=Object.prototype.hasOwnProperty,mr=Object.prototype.propertyIsEnumerable,vr=(e,t,r)=>t in e?pr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;function br(e,t="-"){const r={},i="relay"+t;return Object.keys(e).forEach((t=>{if(t.startsWith(i)){const n=t.replace(i,""),s=e[t];r[n]=s}})),r}function wr(e){const t=[];return e.forEach((e=>{const[r,i]=e.split(":");t.push(`${r}:${i}`)})),t}const yr={INVALID_METHOD:{message:"Invalid method.",code:1001},INVALID_EVENT:{message:"Invalid event.",code:1002},INVALID_UPDATE_REQUEST:{message:"Invalid update request.",code:1003},INVALID_EXTEND_REQUEST:{message:"Invalid extend request.",code:1004},INVALID_SESSION_SETTLE_REQUEST:{message:"Invalid session settle request.",code:1005},UNAUTHORIZED_METHOD:{message:"Unauthorized method.",code:3001},UNAUTHORIZED_EVENT:{message:"Unauthorized event.",code:3002},UNAUTHORIZED_UPDATE_REQUEST:{message:"Unauthorized update request.",code:3003},UNAUTHORIZED_EXTEND_REQUEST:{message:"Unauthorized extend request.",code:3004},USER_REJECTED:{message:"User rejected.",code:5e3},USER_REJECTED_CHAINS:{message:"User rejected chains.",code:5001},USER_REJECTED_METHODS:{message:"User rejected methods.",code:5002},USER_REJECTED_EVENTS:{message:"User rejected events.",code:5003},UNSUPPORTED_CHAINS:{message:"Unsupported chains.",code:5100},UNSUPPORTED_METHODS:{message:"Unsupported methods.",code:5101},UNSUPPORTED_EVENTS:{message:"Unsupported events.",code:5102},UNSUPPORTED_ACCOUNTS:{message:"Unsupported accounts.",code:5103},UNSUPPORTED_NAMESPACE_KEY:{message:"Unsupported namespace key.",code:5104},USER_DISCONNECTED:{message:"User disconnected.",code:6e3},SESSION_SETTLEMENT_FAILED:{message:"Session settlement failed.",code:7e3},WC_METHOD_UNSUPPORTED:{message:"Unsupported wc_ method.",code:10001}},_r={NOT_INITIALIZED:{message:"Not initialized.",code:1},NO_MATCHING_KEY:{message:"No matching key.",code:2},RESTORE_WILL_OVERRIDE:{message:"Restore will override.",code:3},RESUBSCRIBED:{message:"Resubscribed.",code:4},MISSING_OR_INVALID:{message:"Missing or invalid.",code:5},EXPIRED:{message:"Expired.",code:6},UNKNOWN_TYPE:{message:"Unknown type.",code:7},MISMATCHED_TOPIC:{message:"Mismatched topic.",code:8},NON_CONFORMING_NAMESPACES:{message:"Non conforming namespaces.",code:9}};function Er(e,t){const{message:r,code:i}=_r[e];return{message:t?`${r} ${t}`:r,code:i}}function xr(e,t){const{message:r,code:i}=yr[e];return{message:t?`${r} ${t}`:r,code:i}}function Cr(e,t){return!!Array.isArray(e)&&(!(typeof t<"u"&&e.length)||e.every(t))}function Sr(e){return Object.getPrototypeOf(e)===Object.prototype&&Object.keys(e).length}function Ir(e){return typeof e>"u"}function Or(e,t){return!(!t||!Ir(e))||"string"==typeof e&&Boolean(e.trim().length)}function Ar(e,t){return!(!t||!Ir(e))||"number"==typeof e&&!isNaN(e)}function Rr(e){return!(!Or(e,!1)||!e.includes(":"))&&2===e.split(":").length}function Pr(e,t){let r=null;return Ir(e?.extension)||(!Cr(e.extension)||!e.extension.length)&&(r=Er("MISSING_OR_INVALID",`${t} extension should be an array of namespaces, or omitted`)),r}function kr(e){let t=!0;return Cr(e)?e.length&&(t=e.every((e=>Or(e,!1)))):t=!1,t}function Nr(e,t,r){let i=null;return Cr(t)?t.forEach((t=>{i||(!Rr(t)||!t.includes(e))&&(i=xr("UNSUPPORTED_CHAINS",`${r}, chain ${t} should be a string and conform to "namespace:chainId" format`))})):i=xr("UNSUPPORTED_CHAINS",`${r}, chains ${t} should be an array of strings conforming to "namespace:chainId" format`),i}function Mr(e,t){let r=null;return Cr(e)?e.forEach((e=>{r||function(e){if(Or(e,!1)&&e.includes(":")){const t=e.split(":");if(3===t.length){const e=t[0]+":"+t[1];return!!t[2]&&Rr(e)}}return!1}(e)||(r=xr("UNSUPPORTED_ACCOUNTS",`${t}, account ${e} should be a string and conform to "namespace:chainId:address" format`))})):r=xr("UNSUPPORTED_ACCOUNTS",`${t}, accounts should be an array of strings conforming to "namespace:chainId:address" format`),r}function Tr(e,t){let r=null;return kr(e?.methods)?kr(e?.events)||(r=xr("UNSUPPORTED_EVENTS",`${t}, events should be an array of strings or empty array for no events`)):r=xr("UNSUPPORTED_METHODS",`${t}, methods should be an array of strings or empty array for no methods`),r}function Lr(e,t){let r=null;return Object.values(e).forEach((e=>{if(r)return;const i=Tr(e,`${t}, namespace`),n=Pr(e,t);i?r=i:n?r=n:e.extension&&e.extension.forEach((e=>{if(r)return;const i=Tr(e,`${t}, extension`);i&&(r=i)}))})),r}function $r(e,t){let r=null;if(e&&Sr(e)){const i=Lr(e,t);i&&(r=i);const n=function(e,t){let r=null;return Object.values(e).forEach((e=>{if(r)return;const i=Mr(e?.accounts,`${t} namespace`),n=Pr(e,t);i?r=i:n?r=n:e.extension&&e.extension.forEach((e=>{if(r)return;const i=Mr(e.accounts,`${t} extension`);i&&(r=i)}))})),r}(e,t);n&&(r=n)}else r=Er("MISSING_OR_INVALID",`${t}, namespaces should be an object with data`);return r}function Ur(e){return Or(e.protocol,!0)}function jr(e){return typeof e<"u"&&null!==typeof e}function Dr(e,t){return!(!Rr(t)||!function(e){const t=[];return Object.values(e).forEach((e=>{t.push(...wr(e.accounts)),e.extension&&e.extension.forEach((e=>{t.push(...wr(e.accounts))}))})),t}(e).includes(t))}function Br(e,t,r){let i=null;const n=Object.keys(e);return tr(n,Object.keys(t))?n.forEach((n=>{var s;i||(tr(e[n].chains,wr(t[n].accounts))?tr(e[n].methods,t[n].methods)?tr(e[n].events,t[n].events)?e[n].extension&&!t[n].extension?i=Er("NON_CONFORMING_NAMESPACES",`${r} namespaces extension doesn't satisfy requiredNamespaces extension for ${n}`):e[n].extension&&t[n].extension&&(null==(s=e[n].extension)||s.forEach((({methods:e,events:s,chains:o})=>{var a;i||null!=(a=t[n].extension)&&a.find((t=>{const r=wr(t.accounts);return tr(o,r)&&tr(s,t.events)&&tr(e,t.methods)}))||(i=Er("NON_CONFORMING_NAMESPACES",`${r} namespaces extension doesn't satisfy requiredNamespaces extension for ${n}`))}))):i=Er("NON_CONFORMING_NAMESPACES",`${r} namespaces events don't satisfy requiredNamespaces events for ${n}`):i=Er("NON_CONFORMING_NAMESPACES",`${r} namespaces methods don't satisfy requiredNamespaces methods for ${n}`):i=Er("NON_CONFORMING_NAMESPACES",`${r} namespaces accounts don't satisfy requiredNamespaces chains for ${n}`))})):i=Er("NON_CONFORMING_NAMESPACES",`${r} namespaces keys don't satisfy requiredNamespaces`),i}var zr=r(6186);class Wr extends zr.IJsonRpcProvider{constructor(e){super(e),this.events=new v.EventEmitter,this.hasRegisteredEventListeners=!1,this.connection=this.setConnection(e),this.connection.connected&&this.registerEventListeners()}async connect(e=this.connection){await this.open(e)}async disconnect(){await this.close()}on(e,t){this.events.on(e,t)}once(e,t){this.events.once(e,t)}off(e,t){this.events.off(e,t)}removeListener(e,t){this.events.removeListener(e,t)}async request(e,t){return this.requestStrict((0,zr.formatJsonRpcRequest)(e.method,e.params||[]),t)}async requestStrict(e,t){return new Promise((async(r,i)=>{if(!this.connection.connected)try{await this.open()}catch(e){i(e)}this.events.on(`${e.id}`,(e=>{(0,zr.isJsonRpcError)(e)?i(e.error):r(e.result)}));try{await this.connection.send(e,t)}catch(e){i(e)}}))}setConnection(e=this.connection){return e}onPayload(e){this.events.emit("payload",e),(0,zr.isJsonRpcResponse)(e)?this.events.emit(`${e.id}`,e):this.events.emit("message",{type:e.method,data:e.params})}async open(e=this.connection){this.connection===e&&this.connection.connected||(this.connection.connected&&this.close(),"string"==typeof e&&(await this.connection.open(e),e=this.connection),this.connection=this.setConnection(e),await this.connection.open(),this.registerEventListeners(),this.events.emit("connect"))}async close(){await this.connection.close()}registerEventListeners(){this.hasRegisteredEventListeners||(this.connection.on("payload",(e=>this.onPayload(e))),this.connection.on("close",(()=>this.events.emit("disconnect"))),this.connection.on("error",(e=>this.events.emit("error",e))),this.hasRegisteredEventListeners=!0)}}const Hr=void 0!==r.g&&void 0!==r.g.WebSocket?r.g.WebSocket:"undefined"!=typeof window&&void 0!==window.WebSocket?window.WebSocket:r(7026);var Vr=r(2307),Fr=r.n(Vr),qr=function(e,t){if(e.length>=255)throw new TypeError("Alphabet too long");for(var r=new Uint8Array(256),i=0;i<r.length;i++)r[i]=255;for(var n=0;n<e.length;n++){var s=e.charAt(n),o=s.charCodeAt(0);if(255!==r[o])throw new TypeError(s+" is ambiguous");r[o]=n}var a=e.length,l=e.charAt(0),c=Math.log(a)/Math.log(256),h=Math.log(256)/Math.log(a);function u(e){if("string"!=typeof e)throw new TypeError("Expected String");if(0===e.length)return new Uint8Array;var t=0;if(" "!==e[t]){for(var i=0,n=0;e[t]===l;)i++,t++;for(var s=(e.length-t)*c+1>>>0,o=new Uint8Array(s);e[t];){var h=r[e.charCodeAt(t)];if(255===h)return;for(var u=0,d=s-1;(0!==h||u<n)&&-1!==d;d--,u++)h+=a*o[d]>>>0,o[d]=h%256>>>0,h=h/256>>>0;if(0!==h)throw new Error("Non-zero carry");n=u,t++}if(" "!==e[t]){for(var p=s-n;p!==s&&0===o[p];)p++;for(var f=new Uint8Array(i+(s-p)),g=i;p!==s;)f[g++]=o[p++];return f}}}return{encode:function(t){if(t instanceof Uint8Array||(ArrayBuffer.isView(t)?t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength):Array.isArray(t)&&(t=Uint8Array.from(t))),!(t instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(0===t.length)return"";for(var r=0,i=0,n=0,s=t.length;n!==s&&0===t[n];)n++,r++;for(var o=(s-n)*h+1>>>0,c=new Uint8Array(o);n!==s;){for(var u=t[n],d=0,p=o-1;(0!==u||d<i)&&-1!==p;p--,d++)u+=256*c[p]>>>0,c[p]=u%a>>>0,u=u/a>>>0;if(0!==u)throw new Error("Non-zero carry");i=d,n++}for(var f=o-i;f!==o&&0===c[f];)f++;for(var g=l.repeat(r);f<o;++f)g+=e.charAt(c[f]);return g},decodeUnsafe:u,decode:function(e){var r=u(e);if(r)return r;throw new Error(`Non-${t} character`)}}};const Kr=e=>{if(e instanceof Uint8Array&&"Uint8Array"===e.constructor.name)return e;if(e instanceof ArrayBuffer)return new Uint8Array(e);if(ArrayBuffer.isView(e))return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);throw new Error("Unknown type, must be binary type")};class Jr{constructor(e,t,r){this.name=e,this.prefix=t,this.baseEncode=r}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}}class Zr{constructor(e,t,r){if(this.name=e,this.prefix=t,void 0===t.codePointAt(0))throw new Error("Invalid prefix character");this.prefixCodePoint=t.codePointAt(0),this.baseDecode=r}decode(e){if("string"==typeof e){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(e.slice(this.prefix.length))}throw Error("Can only multibase decode strings")}or(e){return Yr(this,e)}}class Gr{constructor(e){this.decoders=e}or(e){return Yr(this,e)}decode(e){const t=e[0],r=this.decoders[t];if(r)return r.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}}const Yr=(e,t)=>new Gr({...e.decoders||{[e.prefix]:e},...t.decoders||{[t.prefix]:t}});class Xr{constructor(e,t,r,i){this.name=e,this.prefix=t,this.baseEncode=r,this.baseDecode=i,this.encoder=new Jr(e,t,r),this.decoder=new Zr(e,t,i)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}}const Qr=({name:e,prefix:t,encode:r,decode:i})=>new Xr(e,t,r,i),ei=({prefix:e,name:t,alphabet:r})=>{const{encode:i,decode:n}=qr(r,t);return Qr({prefix:e,name:t,encode:i,decode:e=>Kr(n(e))})},ti=({name:e,prefix:t,bitsPerChar:r,alphabet:i})=>Qr({prefix:t,name:e,encode:e=>((e,t,r)=>{const i="="===t[t.length-1],n=(1<<r)-1;let s="",o=0,a=0;for(let i=0;i<e.length;++i)for(a=a<<8|e[i],o+=8;o>r;)o-=r,s+=t[n&a>>o];if(o&&(s+=t[n&a<<r-o]),i)for(;s.length*r&7;)s+="=";return s})(e,i,r),decode:t=>((e,t,r,i)=>{const n={};for(let e=0;e<t.length;++e)n[t[e]]=e;let s=e.length;for(;"="===e[s-1];)--s;const o=new Uint8Array(s*r/8|0);let a=0,l=0,c=0;for(let t=0;t<s;++t){const s=n[e[t]];if(void 0===s)throw new SyntaxError(`Non-${i} character`);l=l<<r|s,a+=r,a>=8&&(a-=8,o[c++]=255&l>>a)}if(a>=r||255&l<<8-a)throw new SyntaxError("Unexpected end of data");return o})(t,i,r,e)}),ri=Qr({prefix:"\0",name:"identity",encode:e=>(e=>(new TextDecoder).decode(e))(e),decode:e=>(e=>(new TextEncoder).encode(e))(e)});var ii=Object.freeze({__proto__:null,identity:ri});const ni=ti({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1});var si=Object.freeze({__proto__:null,base2:ni});const oi=ti({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3});var ai=Object.freeze({__proto__:null,base8:oi});const li=ei({prefix:"9",name:"base10",alphabet:"0123456789"});var ci=Object.freeze({__proto__:null,base10:li});const hi=ti({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),ui=ti({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4});var di=Object.freeze({__proto__:null,base16:hi,base16upper:ui});const pi=ti({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),fi=ti({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),gi=ti({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),mi=ti({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),vi=ti({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),bi=ti({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),wi=ti({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),yi=ti({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),_i=ti({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5});var Ei=Object.freeze({__proto__:null,base32:pi,base32upper:fi,base32pad:gi,base32padupper:mi,base32hex:vi,base32hexupper:bi,base32hexpad:wi,base32hexpadupper:yi,base32z:_i});const xi=ei({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),Ci=ei({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"});var Si=Object.freeze({__proto__:null,base36:xi,base36upper:Ci});const Ii=ei({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),Oi=ei({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"});var Ai=Object.freeze({__proto__:null,base58btc:Ii,base58flickr:Oi});const Ri=ti({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),Pi=ti({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),ki=ti({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),Ni=ti({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6});var Mi=Object.freeze({__proto__:null,base64:Ri,base64pad:Pi,base64url:ki,base64urlpad:Ni});const Ti=Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂"),Li=Ti.reduce(((e,t,r)=>(e[r]=t,e)),[]),$i=Ti.reduce(((e,t,r)=>(e[t.codePointAt(0)]=r,e)),[]),Ui=Qr({prefix:"🚀",name:"base256emoji",encode:function(e){return e.reduce(((e,t)=>e+Li[t]),"")},decode:function(e){const t=[];for(const r of e){const e=$i[r.codePointAt(0)];if(void 0===e)throw new Error(`Non-base256emoji character: ${r}`);t.push(e)}return new Uint8Array(t)}});var ji=Object.freeze({__proto__:null,base256emoji:Ui}),Di=Math.pow(2,31),Bi=Math.pow(2,7),zi=Math.pow(2,14),Wi=Math.pow(2,21),Hi=Math.pow(2,28),Vi=Math.pow(2,35),Fi=Math.pow(2,42),qi=Math.pow(2,49),Ki=Math.pow(2,56),Ji=Math.pow(2,63),Zi=function e(t,r,i){r=r||[];for(var n=i=i||0;t>=Di;)r[i++]=255&t|128,t/=128;for(;-128&t;)r[i++]=255&t|128,t>>>=7;return r[i]=0|t,e.bytes=i-n+1,r},Gi=function(e){return e<Bi?1:e<zi?2:e<Wi?3:e<Hi?4:e<Vi?5:e<Fi?6:e<qi?7:e<Ki?8:e<Ji?9:10};const Yi=(e,t,r=0)=>(Zi(e,t,r),t),Xi=e=>Gi(e),Qi=(e,t)=>{const r=t.byteLength,i=Xi(e),n=i+Xi(r),s=new Uint8Array(n+r);return Yi(e,s,0),Yi(r,s,i),s.set(t,n),new en(e,r,t,s)};class en{constructor(e,t,r,i){this.code=e,this.size=t,this.digest=r,this.bytes=i}}const tn=({name:e,code:t,encode:r})=>new rn(e,t,r);class rn{constructor(e,t,r){this.name=e,this.code=t,this.encode=r}digest(e){if(e instanceof Uint8Array){const t=this.encode(e);return t instanceof Uint8Array?Qi(this.code,t):t.then((e=>Qi(this.code,e)))}throw Error("Unknown type, must be binary type")}}const nn=e=>async t=>new Uint8Array(await crypto.subtle.digest(e,t)),sn=tn({name:"sha2-256",code:18,encode:nn("SHA-256")}),on=tn({name:"sha2-512",code:19,encode:nn("SHA-512")});Object.freeze({__proto__:null,sha256:sn,sha512:on});const an=Kr,ln={code:0,name:"identity",encode:an,digest:e=>Qi(0,an(e))};Object.freeze({__proto__:null,identity:ln}),new TextEncoder,new TextDecoder;const cn={...ii,...si,...ai,...ci,...di,...Ei,...Si,...Ai,...Mi,...ji};function hn(e,t,r,i){return{name:e,prefix:t,encoder:{name:e,prefix:t,encode:r},decoder:{decode:i}}}const un=hn("utf8","u",(e=>"u"+new TextDecoder("utf8").decode(e)),(e=>(new TextEncoder).encode(e.substring(1)))),dn=hn("ascii","a",(e=>{let t="a";for(let r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t}),(e=>{const t=function(e=0){return null!=globalThis.Buffer&&null!=globalThis.Buffer.allocUnsafe?globalThis.Buffer.allocUnsafe(e):new Uint8Array(e)}((e=e.substring(1)).length);for(let r=0;r<e.length;r++)t[r]=e.charCodeAt(r);return t})),pn={utf8:un,"utf-8":un,hex:cn.base16,latin1:dn,ascii:dn,binary:dn,...cn},fn="core",gn=`wc@2:${fn}:`,mn={database:":memory:"},vn="client_ed25519_seed",bn=U.ONE_DAY,wn=U.SIX_HOURS,yn="relayer_message",_n="relayer_connect",En="relayer_disconnect",xn="relayer_connection_stalled",Cn="relayer_transport_closed",Sn=U.ONE_SECOND,In="subscription_created",On="subscription_deleted",An="subscription_resubscribed",Rn=1e3*U.FIVE_SECONDS,Pn={wc_pairingDelete:{req:{ttl:U.ONE_DAY,prompt:!1,tag:1e3},res:{ttl:U.ONE_DAY,prompt:!1,tag:1001}},wc_pairingPing:{req:{ttl:U.THIRTY_SECONDS,prompt:!1,tag:1002},res:{ttl:U.THIRTY_SECONDS,prompt:!1,tag:1003}},unregistered_method:{req:{ttl:U.ONE_DAY,prompt:!1,tag:0},res:{ttl:U.ONE_DAY,prompt:!1,tag:0}}},kn="history_created",Nn="history_updated",Mn="history_deleted",Tn="expirer_created",Ln="expirer_deleted",$n="expirer_expired";class Un{constructor(e,t){this.core=e,this.logger=t,this.keychain=new Map,this.name="keychain",this.version="0.3",this.initialized=!1,this.storagePrefix=gn,this.init=async()=>{if(!this.initialized){const e=await this.getKeyChain();typeof e<"u"&&(this.keychain=e),this.initialized=!0}},this.has=e=>(this.isInitialized(),this.keychain.has(e)),this.set=async(e,t)=>{this.isInitialized(),this.keychain.set(e,t),await this.persist()},this.get=e=>{this.isInitialized();const t=this.keychain.get(e);if(typeof t>"u"){const{message:t}=Er("NO_MATCHING_KEY",`${this.name}: ${e}`);throw new Error(t)}return t},this.del=async e=>{this.isInitialized(),this.keychain.delete(e),await this.persist()},this.core=e,this.logger=(0,_.generateChildLogger)(t,this.name)}get context(){return(0,_.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}async setKeyChain(e){await this.core.storage.setItem(this.storageKey,rr(e))}async getKeyChain(){const e=await this.core.storage.getItem(this.storageKey);return typeof e<"u"?ir(e):void 0}async persist(){await this.setKeyChain(this.keychain)}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}class jn{constructor(e,t,r){this.core=e,this.logger=t,this.name="crypto",this.initialized=!1,this.init=async()=>{this.initialized||(await this.keychain.init(),this.initialized=!0)},this.hasKeys=e=>(this.isInitialized(),this.keychain.has(e)),this.getClientId=async()=>(this.isInitialized(),gt(mt(await this.getClientSeed()).publicKey)),this.generateKeyPair=()=>{this.isInitialized();const e=function(){const e=yt.Au();return{privateKey:dt(e.secretKey,$t),publicKey:dt(e.publicKey,$t)}}();return this.setPrivateKey(e.publicKey,e.privateKey)},this.signJWT=async e=>{this.isInitialized();const t=mt(await this.getClientSeed()),r=Dt(),i=bn;return await async function(e,t,r,i,n=(0,U.fromMiliseconds)(Date.now())){const s={alg:"EdDSA",typ:"JWT"},o={iss:gt(i.publicKey),sub:e,aud:t,iat:n,exp:n+r},a=pt([ft((l={header:s,payload:o}).header),ft(l.payload)].join("."),"utf8");var l;return function(e){return[ft(e.header),ft(e.payload),(t=e.signature,dt(t,j))].join(".");var t}({header:s,payload:o,signature:L.Xx(i.secretKey,a)})}(r,e,i,t)},this.generateSharedKey=(e,t,r)=>{this.isInitialized();const i=function(e,t){const r=yt.gi(pt(e,$t),pt(t,$t));return dt(new bt.t(wt.mE,r).expand(32),$t)}(this.getPrivateKey(e),t);return this.setSymKey(i,r)},this.setSymKey=async(e,t)=>{this.isInitialized();const r=t||function(e){return dt((0,wt.vp)(pt(e,$t)),$t)}(e);return await this.keychain.set(r,e),r},this.deleteKeyPair=async e=>{this.isInitialized(),await this.keychain.del(e)},this.deleteSymKey=async e=>{this.isInitialized(),await this.keychain.del(e)},this.encode=async(e,t,r)=>{this.isInitialized();const i=Ht(r),n=T(t);if(Vt(i)){const t=i.senderPublicKey,r=i.receiverPublicKey;e=await this.generateSharedKey(t,r)}const s=this.getSymKey(e),{type:o,senderPublicKey:a}=i;return function(e){const t=function(e){return pt(`${e}`,Lt)}(typeof e.type<"u"?e.type:0);if(1===zt(t)&&typeof e.senderPublicKey>"u")throw new Error("Missing sender public key for type 1 envelope");const r=typeof e.senderPublicKey<"u"?pt(e.senderPublicKey,$t):void 0,i=typeof e.iv<"u"?pt(e.iv,$t):(0,$.randomBytes)(12);return function(e){if(1===zt(e.type)){if(typeof e.senderPublicKey>"u")throw new Error("Missing sender public key for type 1 envelope");return dt(H([e.type,e.senderPublicKey,e.iv,e.sealed]),Ut)}return dt(H([e.type,e.iv,e.sealed]),Ut)}({type:t,sealed:new vt.OK(pt(e.symKey,$t)).seal(i,pt(e.message,jt)),iv:i,senderPublicKey:r})}({type:o,symKey:s,message:n,senderPublicKey:a})},this.decode=async(e,t,r)=>{this.isInitialized();const i=function(e,t){const r=Wt(e);return Ht({type:zt(r.type),senderPublicKey:typeof r.senderPublicKey<"u"?dt(r.senderPublicKey,$t):void 0,receiverPublicKey:t?.receiverPublicKey})}(t,r);if(Vt(i)){const t=i.receiverPublicKey,r=i.senderPublicKey;e=await this.generateSharedKey(t,r)}const n=function(e){const t=new vt.OK(pt(e.symKey,$t)),{sealed:r,iv:i}=Wt(e.encoded),n=t.open(i,r);if(null===n)throw new Error("Failed to decrypt");return dt(n,jt)}({symKey:this.getSymKey(e),encoded:t});return M(n)},this.core=e,this.logger=(0,_.generateChildLogger)(t,this.name),this.keychain=r||new Un(this.core,this.logger)}get context(){return(0,_.getLoggerContext)(this.logger)}getPayloadType(e){return zt(Wt(e).type)}async setPrivateKey(e,t){return await this.keychain.set(e,t),e}getPrivateKey(e){return this.keychain.get(e)}async getClientSeed(){let e="";try{e=this.keychain.get(vn)}catch{e=Dt(),await this.keychain.set(vn,e)}return function(e,t="utf8"){const r=pn[t];if(!r)throw new Error(`Unsupported encoding "${t}"`);return"utf8"!==t&&"utf-8"!==t||null==globalThis.Buffer||null==globalThis.Buffer.from?r.decoder.decode(`${r.prefix}${e}`):globalThis.Buffer.from(e,"utf8")}(e,"base16")}getSymKey(e){return this.keychain.get(e)}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}class Dn extends S{constructor(e,t){super(e,t),this.logger=e,this.core=t,this.messages=new Map,this.name="messages",this.version="0.3",this.initialized=!1,this.storagePrefix=gn,this.init=async()=>{if(!this.initialized){this.logger.trace("Initialized");try{const e=await this.getRelayerMessages();typeof e<"u"&&(this.messages=e),this.logger.debug(`Successfully Restored records for ${this.name}`),this.logger.trace({type:"method",method:"restore",size:this.messages.size})}catch(e){this.logger.debug(`Failed to Restore records for ${this.name}`),this.logger.error(e)}finally{this.initialized=!0}}},this.set=async(e,t)=>{this.isInitialized();const r=Bt(t);let i=this.messages.get(e);return typeof i>"u"&&(i={}),typeof i[r]<"u"||(i[r]=t,this.messages.set(e,i),await this.persist()),r},this.get=e=>{this.isInitialized();let t=this.messages.get(e);return typeof t>"u"&&(t={}),t},this.has=(e,t)=>(this.isInitialized(),typeof this.get(e)[Bt(t)]<"u"),this.del=async e=>{this.isInitialized(),this.messages.delete(e),await this.persist()},this.logger=(0,_.generateChildLogger)(e,this.name),this.core=t}get context(){return(0,_.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}async setRelayerMessages(e){await this.core.storage.setItem(this.storageKey,rr(e))}async getRelayerMessages(){const e=await this.core.storage.getItem(this.storageKey);return typeof e<"u"?ir(e):void 0}async persist(){await this.setRelayerMessages(this.messages)}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}class Bn extends I{constructor(e,t){super(e,t),this.relayer=e,this.logger=t,this.events=new v.EventEmitter,this.name="publisher",this.queue=new Map,this.publishTimeout=1e4,this.publish=async(e,t,r)=>{this.logger.debug("Publishing Payload"),this.logger.trace({type:"method",method:"publish",params:{topic:e,message:t,opts:r}});try{const i=r?.ttl||wn,n=ur(r),s=r?.prompt||!1,o=r?.tag||0,a={topic:e,message:t,opts:{ttl:i,relay:n,prompt:s,tag:o}},l=Bt(t);this.queue.set(l,a);try{await await ar(this.rpcPublish(e,t,i,n,s,o),this.publishTimeout)}catch{return this.logger.debug("Publishing Payload stalled"),void this.relayer.events.emit(xn)}this.onPublish(l,a),this.logger.debug("Successfully Published Payload"),this.logger.trace({type:"method",method:"publish",params:{topic:e,message:t,opts:r}})}catch(e){throw this.logger.debug("Failed to Publish Payload"),this.logger.error(e),e}},this.on=(e,t)=>{this.events.on(e,t)},this.once=(e,t)=>{this.events.once(e,t)},this.off=(e,t)=>{this.events.off(e,t)},this.removeListener=(e,t)=>{this.events.removeListener(e,t)},this.relayer=e,this.logger=(0,_.generateChildLogger)(t,this.name),this.registerEventListeners()}get context(){return(0,_.getLoggerContext)(this.logger)}rpcPublish(e,t,r,i,n,s){var o,a,l,c;const h={method:dr(i.protocol).publish,params:{topic:e,message:t,ttl:r,prompt:n,tag:s}};return Ir(null==(o=h.params)?void 0:o.prompt)&&(null==(a=h.params)||delete a.prompt),Ir(null==(l=h.params)?void 0:l.tag)&&(null==(c=h.params)||delete c.tag),this.logger.debug("Outgoing Relay Payload"),this.logger.trace({type:"message",direction:"outgoing",request:h}),this.relayer.provider.request(h)}onPublish(e,t){this.queue.delete(e)}checkQueue(){this.queue.forEach((async e=>{const{topic:t,message:r,opts:i}=e;await this.publish(t,r,i)}))}registerEventListeners(){this.relayer.core.heartbeat.on(y.HEARTBEAT_EVENTS.pulse,(()=>{this.checkQueue()}))}}class zn{constructor(){this.map=new Map,this.set=(e,t)=>{const r=this.get(e);this.exists(e,t)||this.map.set(e,[...r,t])},this.get=e=>this.map.get(e)||[],this.exists=(e,t)=>this.get(e).includes(t),this.delete=(e,t)=>{if(typeof t>"u")return void this.map.delete(e);if(!this.map.has(e))return;const r=this.get(e);if(!this.exists(e,t))return;const i=r.filter((e=>e!==t));i.length?this.map.set(e,i):this.map.delete(e)},this.clear=()=>{this.map.clear()}}get topics(){return Array.from(this.map.keys())}}var Wn=Object.defineProperty,Hn=Object.defineProperties,Vn=Object.getOwnPropertyDescriptors,Fn=Object.getOwnPropertySymbols,qn=Object.prototype.hasOwnProperty,Kn=Object.prototype.propertyIsEnumerable,Jn=(e,t,r)=>t in e?Wn(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Zn=(e,t)=>{for(var r in t||(t={}))qn.call(t,r)&&Jn(e,r,t[r]);if(Fn)for(var r of Fn(t))Kn.call(t,r)&&Jn(e,r,t[r]);return e},Gn=(e,t)=>Hn(e,Vn(t));class Yn extends R{constructor(e,t){super(e,t),this.relayer=e,this.logger=t,this.subscriptions=new Map,this.topicMap=new zn,this.events=new v.EventEmitter,this.name="subscription",this.version="0.3",this.pending=new Map,this.cached=[],this.initialized=!1,this.pendingSubscriptionWatchLabel="pending_sub_watch_label",this.pendingSubInterval=20,this.storagePrefix=gn,this.subscribeTimeout=1e4,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restart(),this.registerEventListeners(),this.onEnable())},this.subscribe=async(e,t)=>{this.isInitialized(),this.logger.debug("Subscribing Topic"),this.logger.trace({type:"method",method:"subscribe",params:{topic:e,opts:t}});try{const r=ur(t),i={topic:e,relay:r};this.pending.set(e,i);const n=await this.rpcSubscribe(e,r);return this.onSubscribe(n,i),this.logger.debug("Successfully Subscribed Topic"),this.logger.trace({type:"method",method:"subscribe",params:{topic:e,opts:t}}),n}catch(e){throw this.logger.debug("Failed to Subscribe Topic"),this.logger.error(e),e}},this.unsubscribe=async(e,t)=>{this.isInitialized(),typeof t?.id<"u"?await this.unsubscribeById(e,t.id,t):await this.unsubscribeByTopic(e,t)},this.isSubscribed=async e=>!!this.topics.includes(e)||await new Promise(((t,r)=>{const i=new U.Watch;i.start(this.pendingSubscriptionWatchLabel);const n=setInterval((()=>{!this.pending.has(e)&&this.topics.includes(e)&&(clearInterval(n),i.stop(this.pendingSubscriptionWatchLabel),t(!0)),i.elapsed(this.pendingSubscriptionWatchLabel)>=Rn&&(clearInterval(n),i.stop(this.pendingSubscriptionWatchLabel),r(!1))}),this.pendingSubInterval)})),this.on=(e,t)=>{this.events.on(e,t)},this.once=(e,t)=>{this.events.once(e,t)},this.off=(e,t)=>{this.events.off(e,t)},this.removeListener=(e,t)=>{this.events.removeListener(e,t)},this.restart=async()=>{await this.restore(),await this.reset()},this.relayer=e,this.logger=(0,_.generateChildLogger)(t,this.name)}get context(){return(0,_.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get length(){return this.subscriptions.size}get ids(){return Array.from(this.subscriptions.keys())}get values(){return Array.from(this.subscriptions.values())}get topics(){return this.topicMap.topics}hasSubscription(e,t){let r=!1;try{r=this.getSubscription(e).topic===t}catch{}return r}onEnable(){this.cached=[],this.initialized=!0}onDisable(){this.cached=this.values,this.subscriptions.clear(),this.topicMap.clear(),this.initialized=!1}async unsubscribeByTopic(e,t){const r=this.topicMap.get(e);await Promise.all(r.map((async r=>await this.unsubscribeById(e,r,t))))}async unsubscribeById(e,t,r){this.logger.debug("Unsubscribing Topic"),this.logger.trace({type:"method",method:"unsubscribe",params:{topic:e,id:t,opts:r}});try{const i=ur(r);await this.rpcUnsubscribe(e,t,i);const n=xr("USER_DISCONNECTED",`${this.name}, ${e}`);await this.onUnsubscribe(e,t,n),this.logger.debug("Successfully Unsubscribed Topic"),this.logger.trace({type:"method",method:"unsubscribe",params:{topic:e,id:t,opts:r}})}catch(e){throw this.logger.debug("Failed to Unsubscribe Topic"),this.logger.error(e),e}}async rpcSubscribe(e,t){const r={method:dr(t.protocol).subscribe,params:{topic:e}};let i;this.logger.debug("Outgoing Relay Payload"),this.logger.trace({type:"payload",direction:"outgoing",request:r});try{i=await await ar(this.relayer.provider.request(r),this.subscribeTimeout)}catch{this.logger.debug("Outgoing Relay Payload stalled"),this.relayer.events.emit(xn)}return i}rpcUnsubscribe(e,t,r){const i={method:dr(r.protocol).unsubscribe,params:{topic:e,id:t}};return this.logger.debug("Outgoing Relay Payload"),this.logger.trace({type:"payload",direction:"outgoing",request:i}),this.relayer.provider.request(i)}onSubscribe(e,t){this.setSubscription(e,Gn(Zn({},t),{id:e})),this.pending.delete(t.topic)}onResubscribe(e,t){this.addSubscription(e,Gn(Zn({},t),{id:e})),this.pending.delete(t.topic)}async onUnsubscribe(e,t,r){this.events.removeAllListeners(t),this.hasSubscription(t,e)&&this.deleteSubscription(t,r),await this.relayer.messages.del(e)}async setRelayerSubscriptions(e){await this.relayer.core.storage.setItem(this.storageKey,e)}async getRelayerSubscriptions(){return await this.relayer.core.storage.getItem(this.storageKey)}setSubscription(e,t){this.subscriptions.has(e)||(this.logger.debug("Setting subscription"),this.logger.trace({type:"method",method:"setSubscription",id:e,subscription:t}),this.addSubscription(e,t))}addSubscription(e,t){this.subscriptions.set(e,Zn({},t)),this.topicMap.set(t.topic,e),this.events.emit(In,t)}getSubscription(e){this.logger.debug("Getting subscription"),this.logger.trace({type:"method",method:"getSubscription",id:e});const t=this.subscriptions.get(e);if(!t){const{message:t}=Er("NO_MATCHING_KEY",`${this.name}: ${e}`);throw new Error(t)}return t}deleteSubscription(e,t){this.logger.debug("Deleting subscription"),this.logger.trace({type:"method",method:"deleteSubscription",id:e,reason:t});const r=this.getSubscription(e);this.subscriptions.delete(e),this.topicMap.delete(r.topic,e),this.events.emit(On,Gn(Zn({},r),{reason:t}))}async persist(){await this.setRelayerSubscriptions(this.values),this.events.emit("subscription_sync")}async reset(){this.cached.length&&await Promise.all(this.cached.map((async e=>await this.resubscribe(e)))),this.events.emit(An)}async restore(){try{const e=await this.getRelayerSubscriptions();if(typeof e>"u"||!e.length)return;if(this.subscriptions.size){const{message:e}=Er("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(e),new Error(e)}this.cached=e,this.logger.debug(`Successfully Restored subscriptions for ${this.name}`),this.logger.trace({type:"method",method:"restore",subscriptions:this.values})}catch(e){this.logger.debug(`Failed to Restore subscriptions for ${this.name}`),this.logger.error(e)}}async resubscribe(e){if(!this.ids.includes(e.id)){const{topic:t,relay:r}=e,i={topic:t,relay:r};this.pending.set(i.topic,i);const n=await this.rpcSubscribe(i.topic,i.relay);this.onResubscribe(n,i)}}async onConnect(){await this.restart(),this.onEnable()}onDisconnect(){this.onDisable()}checkPending(){this.relayer.transportExplicitlyClosed||this.pending.forEach((async e=>{const t=await this.rpcSubscribe(e.topic,e.relay);this.onSubscribe(t,e)}))}registerEventListeners(){this.relayer.core.heartbeat.on(y.HEARTBEAT_EVENTS.pulse,(()=>{this.checkPending()})),this.relayer.on(_n,(async()=>{await this.onConnect()})),this.relayer.on(En,(()=>{this.onDisconnect()})),this.events.on(In,(async e=>{const t=In;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),await this.persist()})),this.events.on(On,(async e=>{const t=On;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),await this.persist()}))}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}var Xn=Object.defineProperty,Qn=Object.getOwnPropertySymbols,es=Object.prototype.hasOwnProperty,ts=Object.prototype.propertyIsEnumerable,rs=(e,t,r)=>t in e?Xn(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;class is extends O{constructor(e){super(e),this.protocol="wc",this.version=2,this.events=new v.EventEmitter,this.name="relayer",this.transportExplicitlyClosed=!1,this.initialized=!1,this.core=e.core,this.logger=typeof e.logger<"u"&&"string"!=typeof e.logger?(0,_.generateChildLogger)(e.logger,this.name):m()((0,_.getDefaultLoggerOptions)({level:e.logger||"error"})),this.messages=new Dn(this.logger,e.core),this.subscriber=new Yn(this,this.logger),this.publisher=new Bn(this,this.logger),this.relayUrl=e?.relayUrl||"wss://relay.walletconnect.com",this.projectId=e.projectId,this.provider={}}async init(){this.logger.trace("Initialized"),this.provider=await this.createProvider(),await Promise.all([this.messages.init(),this.transportOpen(),this.subscriber.init()]),this.registerEventListeners(),this.initialized=!0}get context(){return(0,_.getLoggerContext)(this.logger)}get connected(){return this.provider.connection.connected}get connecting(){return this.provider.connection.connecting}async publish(e,t,r){this.isInitialized(),await this.publisher.publish(e,t,r),await this.recordMessageEvent({topic:e,message:t})}async subscribe(e,t){this.isInitialized();let r="";return await Promise.all([new Promise((t=>{this.subscriber.once(In,(r=>{r.topic===e&&t()}))})),new Promise((async i=>{r=await this.subscriber.subscribe(e,t),i()}))]),r}async unsubscribe(e,t){this.isInitialized(),await this.subscriber.unsubscribe(e,t)}on(e,t){this.events.on(e,t)}once(e,t){this.events.once(e,t)}off(e,t){this.events.off(e,t)}removeListener(e,t){this.events.removeListener(e,t)}async transportClose(){this.transportExplicitlyClosed=!0,this.connected&&await this.provider.disconnect(),this.events.emit(Cn)}async transportOpen(e){this.relayUrl=e||this.relayUrl,this.transportExplicitlyClosed=!1;try{await Promise.all([new Promise((e=>{this.initialized||e(),this.subscriber.once(An,(()=>{e()}))})),await Promise.race([this.provider.connect(),new Promise(((e,t)=>this.once(Cn,(()=>{t()}))))])])}catch(e){const t=e;if(!/socket hang up/i.test(t.message))throw new Error(t.message);this.logger.error(t),this.events.emit(Cn)}}async restartTransport(e){await this.transportClose(),await new Promise((e=>setTimeout(e,Sn))),await this.transportOpen(e)}async createProvider(){const e=await this.core.crypto.signJWT(this.relayUrl);return new Wr(new class{constructor(e){if(this.url=e,this.events=new v.EventEmitter,this.registering=!1,!(0,zr.isWsUrl)(e))throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);this.url=e}get connected(){return void 0!==this.socket}get connecting(){return this.registering}on(e,t){this.events.on(e,t)}once(e,t){this.events.once(e,t)}off(e,t){this.events.off(e,t)}removeListener(e,t){this.events.removeListener(e,t)}async open(e=this.url){await this.register(e)}async close(){if(void 0===this.socket)throw new Error("Connection already closed");this.socket.close(),this.onClose()}async send(e,t){void 0===this.socket&&(this.socket=await this.register());try{this.socket.send(T(e))}catch(t){this.onError(e.id,t)}}register(e=this.url){if(!(0,zr.isWsUrl)(e))throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);if(this.registering){const e=this.events.getMaxListeners();return(this.events.listenerCount("register_error")>=e||this.events.listenerCount("open")>=e)&&this.events.setMaxListeners(e+1),new Promise(((e,t)=>{this.events.once("register_error",(e=>{this.resetMaxListeners(),t(e)})),this.events.once("open",(()=>{if(this.resetMaxListeners(),void 0===this.socket)return t(new Error("WebSocket connection is missing or invalid"));e(this.socket)}))}))}return this.url=e,this.registering=!0,new Promise(((t,r)=>{const i=(0,zr.isReactNative)()?void 0:{rejectUnauthorized:!(0,zr.isLocalhostUrl)(e)},n=new Hr(e,[],i);"undefined"!=typeof window?n.onerror=e=>{const t=e;r(this.emitError(t.error))}:n.on("error",(e=>{r(this.emitError(e))})),n.onopen=()=>{this.onOpen(n),t(n)}}))}onOpen(e){e.onmessage=e=>this.onPayload(e),e.onclose=()=>this.onClose(),this.socket=e,this.registering=!1,this.events.emit("open")}onClose(){this.socket=void 0,this.registering=!1,this.events.emit("close")}onPayload(e){if(void 0===e.data)return;const t="string"==typeof e.data?M(e.data):e.data;this.events.emit("payload",t)}onError(e,t){const r=this.parseError(t),i=r.message||r.toString(),n=(0,zr.formatJsonRpcError)(e,i);this.events.emit("payload",n)}parseError(e,t=this.url){return(0,zr.parseConnectionError)(e,t,"WS")}resetMaxListeners(){this.events.getMaxListeners()>10&&this.events.setMaxListeners(10)}emitError(e){const t=this.parseError(new Error((null==e?void 0:e.message)||`WebSocket connection failed for URL: ${this.url}`));return this.events.emit("register_error",t),t}}(function({protocol:e,version:t,relayUrl:r,sdkVersion:i,auth:n,projectId:s}){const o=r.split("?"),a={auth:n,ua:er(e,t,i),projectId:s},l=function(e,t){let r=Mt.parse(e);return r=Gt(Gt({},r),t),Mt.stringify(r)}(o[1]||"",a);return o[0]+"?"+l}({sdkVersion:"2.1.3",protocol:this.protocol,version:this.version,relayUrl:this.relayUrl,projectId:this.projectId,auth:e})))}async recordMessageEvent(e){const{topic:t,message:r}=e;await this.messages.set(t,r)}async shouldIgnoreMessageEvent(e){const{topic:t,message:r}=e;return!await this.subscriber.isSubscribed(t)||this.messages.has(t,r)}async onProviderPayload(e){if(this.logger.debug("Incoming Relay Payload"),this.logger.trace({type:"payload",direction:"incoming",payload:e}),(0,zr.isJsonRpcRequest)(e)){if(!e.method.endsWith("_subscription"))return;const t=e.params,{topic:r,message:i}=t.data,n={topic:r,message:i};this.logger.debug("Emitting Relayer Payload"),this.logger.trace(((e,t)=>{for(var r in t||(t={}))es.call(t,r)&&rs(e,r,t[r]);if(Qn)for(var r of Qn(t))ts.call(t,r)&&rs(e,r,t[r]);return e})({type:"event",event:t.id},n)),this.events.emit(t.id,n),await this.acknowledgePayload(e),await this.onMessageEvent(n)}}async onMessageEvent(e){await this.shouldIgnoreMessageEvent(e)||(this.events.emit(yn,e),await this.recordMessageEvent(e))}async acknowledgePayload(e){const t=(0,zr.formatJsonRpcResult)(e.id,!0);await this.provider.connection.send(t)}registerEventListeners(){this.provider.on("payload",(e=>this.onProviderPayload(e))),this.provider.on("connect",(()=>{this.events.emit(_n)})),this.provider.on("disconnect",(()=>{this.events.emit(En),this.attemptToReconnect()})),this.provider.on("error",(e=>this.events.emit("relayer_error",e))),this.events.on(xn,(async()=>{await this.restartTransport()}))}attemptToReconnect(){this.transportExplicitlyClosed||setTimeout((async()=>{await this.transportOpen()}),(0,U.toMiliseconds)(Sn))}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}var ns=Object.defineProperty,ss=Object.getOwnPropertySymbols,os=Object.prototype.hasOwnProperty,as=Object.prototype.propertyIsEnumerable,ls=(e,t,r)=>t in e?ns(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,cs=(e,t)=>{for(var r in t||(t={}))os.call(t,r)&&ls(e,r,t[r]);if(ss)for(var r of ss(t))as.call(t,r)&&ls(e,r,t[r]);return e};class hs extends A{constructor(e,t,r,i=gn,n){super(e,t,r,i),this.core=e,this.logger=t,this.name=r,this.map=new Map,this.version="0.3",this.cached=[],this.initialized=!1,this.storagePrefix=gn,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restore(),this.cached.forEach((e=>{!function(e){var t;return null==(t=e?.proposer)?void 0:t.publicKey}(e)?function(e){return e?.topic}(e)?this.map.set(e.topic,e):this.getKey&&null!==e&&!Ir(e)&&this.map.set(this.getKey(e),e):this.map.set(e.id,e)})),this.cached=[],this.initialized=!0)},this.set=async(e,t)=>{this.isInitialized(),this.map.has(e)?await this.update(e,t):(this.logger.debug("Setting value"),this.logger.trace({type:"method",method:"set",key:e,value:t}),this.map.set(e,t),await this.persist())},this.get=e=>(this.isInitialized(),this.logger.debug("Getting value"),this.logger.trace({type:"method",method:"get",key:e}),this.getData(e)),this.getAll=e=>(this.isInitialized(),e?this.values.filter((t=>Object.keys(e).every((r=>Fr()(t[r],e[r]))))):this.values),this.update=async(e,t)=>{this.isInitialized(),this.logger.debug("Updating value"),this.logger.trace({type:"method",method:"update",key:e,update:t});const r=cs(cs({},this.getData(e)),t);this.map.set(e,r),await this.persist()},this.delete=async(e,t)=>{this.isInitialized(),this.map.has(e)&&(this.logger.debug("Deleting value"),this.logger.trace({type:"method",method:"delete",key:e,reason:t}),this.map.delete(e),await this.persist())},this.logger=(0,_.generateChildLogger)(t,this.name),this.storagePrefix=i,this.getKey=n}get context(){return(0,_.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get length(){return this.map.size}get keys(){return Array.from(this.map.keys())}get values(){return Array.from(this.map.values())}async setDataStore(e){await this.core.storage.setItem(this.storageKey,e)}async getDataStore(){return await this.core.storage.getItem(this.storageKey)}getData(e){const t=this.map.get(e);if(!t){const{message:t}=Er("NO_MATCHING_KEY",`${this.name}: ${e}`);throw this.logger.error(t),new Error(t)}return t}async persist(){await this.setDataStore(this.values)}async restore(){try{const e=await this.getDataStore();if(typeof e>"u"||!e.length)return;if(this.map.size){const{message:e}=Er("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(e),new Error(e)}this.cached=e,this.logger.debug(`Successfully Restored value for ${this.name}`),this.logger.trace({type:"method",method:"restore",value:this.values})}catch(e){this.logger.debug(`Failed to Restore value for ${this.name}`),this.logger.error(e)}}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}class us{constructor(e,t){this.core=e,this.logger=t,this.name="pairing",this.version="0.3",this.events=new(b()),this.initialized=!1,this.storagePrefix=gn,this.ignoredPayloadTypes=[1],this.registeredMethods=[],this.init=async()=>{this.initialized||(await this.pairings.init(),await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.initialized=!0,this.logger.trace("Initialized"))},this.register=({methods:e})=>{this.isInitialized(),this.registeredMethods=[...new Set([...this.registeredMethods,...e])]},this.create=async()=>{this.isInitialized();const e=Dt(),t=await this.core.crypto.setSymKey(e),r=nr(U.FIVE_MINUTES),i={protocol:"irn"},n={topic:t,expiry:r,relay:i,active:!1},s=function(e){return`${e.protocol}:${e.topic}@${e.version}?`+Mt.stringify(((e,t)=>{for(var r in t||(t={}))gr.call(t,r)&&vr(e,r,t[r]);if(fr)for(var r of fr(t))mr.call(t,r)&&vr(e,r,t[r]);return e})({symKey:e.symKey},function(e,t="-"){const r={};return Object.keys(e).forEach((i=>{const n="relay"+t+i;e[i]&&(r[n]=e[i])})),r}(e.relay)))}({protocol:this.core.protocol,version:this.core.version,topic:t,symKey:e,relay:i});return await this.pairings.set(t,n),await this.core.relayer.subscribe(t),this.core.expirer.set(t,r),{topic:t,uri:s}},this.pair=async e=>{this.isInitialized(),this.isValidPair(e);const{topic:t,symKey:r,relay:i}=function(e){const t=e.indexOf(":"),r=-1!==e.indexOf("?")?e.indexOf("?"):void 0,i=e.substring(0,t),n=e.substring(t+1,r).split("@"),s=typeof r<"u"?e.substring(r):"",o=Mt.parse(s);return{protocol:i,topic:n[0],version:parseInt(n[1],10),symKey:o.symKey,relay:br(o)}}(e.uri),n=nr(U.FIVE_MINUTES),s={topic:t,relay:i,expiry:n,active:!1};return await this.pairings.set(t,s),await this.core.crypto.setSymKey(r,t),await this.core.relayer.subscribe(t,{relay:i}),this.core.expirer.set(t,n),e.activatePairing&&await this.activate({topic:t}),s},this.activate=async({topic:e})=>{this.isInitialized();const t=nr(U.THIRTY_DAYS);await this.pairings.update(e,{active:!0,expiry:t}),this.core.expirer.set(e,t)},this.ping=async e=>{this.isInitialized(),await this.isValidPing(e);const{topic:t}=e;if(this.pairings.keys.includes(t)){const e=await this.sendRequest(t,"wc_pairingPing",{}),{done:r,resolve:i,reject:n}=or();this.events.once(hr("pairing_ping",e),(({error:e})=>{e?n(e):i()})),await r()}},this.updateExpiry=async({topic:e,expiry:t})=>{this.isInitialized(),await this.pairings.update(e,{expiry:t})},this.updateMetadata=async({topic:e,metadata:t})=>{this.isInitialized(),await this.pairings.update(e,{peerMetadata:t})},this.getPairings=()=>(this.isInitialized(),this.pairings.values),this.disconnect=async e=>{this.isInitialized(),await this.isValidDisconnect(e);const{topic:t}=e;this.pairings.keys.includes(t)&&(await this.sendRequest(t,"wc_pairingDelete",xr("USER_DISCONNECTED")),await this.deletePairing(t))},this.sendRequest=async(e,t,r)=>{const i=(0,zr.formatJsonRpcRequest)(t,r),n=await this.core.crypto.encode(e,i),s=Pn[t].req;return this.core.history.set(e,i),await this.core.relayer.publish(e,n,s),i.id},this.sendResult=async(e,t,r)=>{const i=(0,zr.formatJsonRpcResult)(e,r),n=await this.core.crypto.encode(t,i),s=await this.core.history.get(t,e),o=Pn[s.request.method].res;await this.core.relayer.publish(t,n,o),await this.core.history.resolve(i)},this.sendError=async(e,t,r)=>{const i=(0,zr.formatJsonRpcError)(e,r),n=await this.core.crypto.encode(t,i),s=await this.core.history.get(t,e),o=Pn[s.request.method]?Pn[s.request.method].res:Pn.unregistered_method.res;await this.core.relayer.publish(t,n,o),await this.core.history.resolve(i)},this.deletePairing=async(e,t)=>{await this.core.relayer.unsubscribe(e),await Promise.all([this.pairings.delete(e,xr("USER_DISCONNECTED")),this.core.crypto.deleteSymKey(e),t?Promise.resolve():this.core.expirer.del(e)])},this.cleanup=async()=>{const e=this.pairings.getAll().filter((e=>sr(e.expiry)));await Promise.all(e.map((e=>this.deletePairing(e.topic))))},this.onRelayEventRequest=e=>{const{topic:t,payload:r}=e;switch(r.method){case"wc_pairingPing":return this.onPairingPingRequest(t,r);case"wc_pairingDelete":return this.onPairingDeleteRequest(t,r);default:return this.onUnknownRpcMethodRequest(t,r)}},this.onRelayEventResponse=async e=>{const{topic:t,payload:r}=e,i=(await this.core.history.get(t,r.id)).request.method;return"wc_pairingPing"===i?this.onPairingPingResponse(t,r):this.onUnknownRpcMethodResponse(i)},this.onPairingPingRequest=async(e,t)=>{const{id:r}=t;try{this.isValidPing({topic:e}),await this.sendResult(r,e,!0),this.events.emit("pairing_ping",{id:r,topic:e})}catch(t){await this.sendError(r,e,t),this.logger.error(t)}},this.onPairingPingResponse=(e,t)=>{const{id:r}=t;setTimeout((()=>{(0,zr.isJsonRpcResult)(t)?this.events.emit(hr("pairing_ping",r),{}):(0,zr.isJsonRpcError)(t)&&this.events.emit(hr("pairing_ping",r),{error:t.error})}),500)},this.onPairingDeleteRequest=async(e,t)=>{const{id:r}=t;try{this.isValidDisconnect({topic:e}),await this.sendResult(r,e,!0),await this.deletePairing(e),this.events.emit("pairing_delete",{id:r,topic:e})}catch(t){await this.sendError(r,e,t),this.logger.error(t)}},this.onUnknownRpcMethodRequest=async(e,t)=>{const{id:r,method:i}=t;try{if(this.registeredMethods.includes(i))return;const t=xr("WC_METHOD_UNSUPPORTED",i);await this.sendError(r,e,t),this.logger.error(t)}catch(t){await this.sendError(r,e,t),this.logger.error(t)}},this.onUnknownRpcMethodResponse=e=>{this.registeredMethods.includes(e)||this.logger.error(xr("WC_METHOD_UNSUPPORTED",e))},this.isValidPair=e=>{if(!jr(e)){const{message:t}=Er("MISSING_OR_INVALID",`pair() params: ${e}`);throw new Error(t)}if(!function(e){if(Or(e,!1))try{return typeof new URL(e)<"u"}catch{return!1}return!1}(e.uri)){const{message:t}=Er("MISSING_OR_INVALID",`pair() uri: ${e.uri}`);throw new Error(t)}},this.isValidPing=async e=>{if(!jr(e)){const{message:t}=Er("MISSING_OR_INVALID",`ping() params: ${e}`);throw new Error(t)}const{topic:t}=e;await this.isValidPairingTopic(t)},this.isValidDisconnect=async e=>{if(!jr(e)){const{message:t}=Er("MISSING_OR_INVALID",`disconnect() params: ${e}`);throw new Error(t)}const{topic:t}=e;await this.isValidPairingTopic(t)},this.isValidPairingTopic=async e=>{if(!Or(e,!1)){const{message:t}=Er("MISSING_OR_INVALID",`pairing topic should be a string: ${e}`);throw new Error(t)}if(!this.pairings.keys.includes(e)){const{message:t}=Er("NO_MATCHING_KEY",`pairing topic doesn't exist: ${e}`);throw new Error(t)}if(sr(this.pairings.get(e).expiry)){await this.deletePairing(e);const{message:t}=Er("EXPIRED",`pairing topic: ${e}`);throw new Error(t)}},this.core=e,this.logger=(0,_.generateChildLogger)(t,this.name),this.pairings=new hs(this.core,this.logger,this.name,this.storagePrefix)}get context(){return(0,_.getLoggerContext)(this.logger)}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}registerRelayerEvents(){this.core.relayer.on(yn,(async e=>{const{topic:t,message:r}=e;if(this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(r)))return;const i=await this.core.crypto.decode(t,r);(0,zr.isJsonRpcRequest)(i)?(this.core.history.set(t,i),this.onRelayEventRequest({topic:t,payload:i})):(0,zr.isJsonRpcResponse)(i)&&(await this.core.history.resolve(i),this.onRelayEventResponse({topic:t,payload:i}))}))}registerExpirerEvents(){this.core.expirer.on($n,(async e=>{const{topic:t}=cr(e.target);t&&this.pairings.keys.includes(t)&&(await this.deletePairing(t,!0),this.events.emit("pairing_expire",{topic:t}))}))}}class ds extends C{constructor(e,t){super(e,t),this.core=e,this.logger=t,this.records=new Map,this.events=new v.EventEmitter,this.name="history",this.version="0.3",this.cached=[],this.initialized=!1,this.storagePrefix=gn,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restore(),this.cached.forEach((e=>this.records.set(e.id,e))),this.cached=[],this.registerEventListeners(),this.initialized=!0)},this.set=(e,t,r)=>{if(this.isInitialized(),this.logger.debug("Setting JSON-RPC request history record"),this.logger.trace({type:"method",method:"set",topic:e,request:t,chainId:r}),this.records.has(t.id))return;const i={id:t.id,topic:e,request:{method:t.method,params:t.params||null},chainId:r};this.records.set(i.id,i),this.events.emit(kn,i)},this.resolve=async e=>{if(this.isInitialized(),this.logger.debug("Updating JSON-RPC response history record"),this.logger.trace({type:"method",method:"update",response:e}),!this.records.has(e.id))return;const t=await this.getRecord(e.id);typeof t.response>"u"&&(t.response=(0,zr.isJsonRpcError)(e)?{error:e.error}:{result:e.result},this.records.set(t.id,t),this.events.emit(Nn,t))},this.get=async(e,t)=>(this.isInitialized(),this.logger.debug("Getting record"),this.logger.trace({type:"method",method:"get",topic:e,id:t}),await this.getRecord(t)),this.delete=(e,t)=>{this.isInitialized(),this.logger.debug("Deleting record"),this.logger.trace({type:"method",method:"delete",id:t}),this.values.forEach((r=>{if(r.topic===e){if(typeof t<"u"&&r.id!==t)return;this.records.delete(r.id),this.events.emit(Mn,r)}}))},this.exists=async(e,t)=>(this.isInitialized(),!!this.records.has(t)&&(await this.getRecord(t)).topic===e),this.on=(e,t)=>{this.events.on(e,t)},this.once=(e,t)=>{this.events.once(e,t)},this.off=(e,t)=>{this.events.off(e,t)},this.removeListener=(e,t)=>{this.events.removeListener(e,t)},this.logger=(0,_.generateChildLogger)(t,this.name)}get context(){return(0,_.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get size(){return this.records.size}get keys(){return Array.from(this.records.keys())}get values(){return Array.from(this.records.values())}get pending(){const e=[];return this.values.forEach((t=>{if(typeof t.response<"u")return;const r={topic:t.topic,request:(0,zr.formatJsonRpcRequest)(t.request.method,t.request.params,t.id),chainId:t.chainId};return e.push(r)})),e}async setJsonRpcRecords(e){await this.core.storage.setItem(this.storageKey,e)}async getJsonRpcRecords(){return await this.core.storage.getItem(this.storageKey)}getRecord(e){this.isInitialized();const t=this.records.get(e);if(!t){const{message:t}=Er("NO_MATCHING_KEY",`${this.name}: ${e}`);throw new Error(t)}return t}async persist(){await this.setJsonRpcRecords(this.values),this.events.emit("history_sync")}async restore(){try{const e=await this.getJsonRpcRecords();if(typeof e>"u"||!e.length)return;if(this.records.size){const{message:e}=Er("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(e),new Error(e)}this.cached=e,this.logger.debug(`Successfully Restored records for ${this.name}`),this.logger.trace({type:"method",method:"restore",records:this.values})}catch(e){this.logger.debug(`Failed to Restore records for ${this.name}`),this.logger.error(e)}}registerEventListeners(){this.events.on(kn,(e=>{const t=kn;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,record:e}),this.persist()})),this.events.on(Nn,(e=>{const t=Nn;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,record:e}),this.persist()})),this.events.on(Mn,(e=>{const t=Mn;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,record:e}),this.persist()}))}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}class ps extends P{constructor(e,t){super(e,t),this.core=e,this.logger=t,this.expirations=new Map,this.events=new v.EventEmitter,this.name="expirer",this.version="0.3",this.cached=[],this.initialized=!1,this.storagePrefix=gn,this.init=async()=>{this.initialized||(this.logger.trace("Initialized"),await this.restore(),this.cached.forEach((e=>this.expirations.set(e.target,e))),this.cached=[],this.registerEventListeners(),this.initialized=!0)},this.has=e=>{try{const t=this.formatTarget(e);return typeof this.getExpiration(t)<"u"}catch{return!1}},this.set=(e,t)=>{this.isInitialized();const r=this.formatTarget(e),i={target:r,expiry:t};this.expirations.set(r,i),this.checkExpiry(r,i),this.events.emit(Tn,{target:r,expiration:i})},this.get=e=>{this.isInitialized();const t=this.formatTarget(e);return this.getExpiration(t)},this.del=e=>{this.isInitialized();const t=this.formatTarget(e);if(this.has(t)){const e=this.getExpiration(t);this.expirations.delete(t),this.events.emit(Ln,{target:t,expiration:e})}},this.on=(e,t)=>{this.events.on(e,t)},this.once=(e,t)=>{this.events.once(e,t)},this.off=(e,t)=>{this.events.off(e,t)},this.removeListener=(e,t)=>{this.events.removeListener(e,t)},this.logger=(0,_.generateChildLogger)(t,this.name)}get context(){return(0,_.getLoggerContext)(this.logger)}get storageKey(){return this.storagePrefix+this.version+"//"+this.name}get length(){return this.expirations.size}get keys(){return Array.from(this.expirations.keys())}get values(){return Array.from(this.expirations.values())}formatTarget(e){if("string"==typeof e)return function(e){return lr("topic",e)}(e);if("number"==typeof e)return function(e){return lr("id",e)}(e);const{message:t}=Er("UNKNOWN_TYPE","Target type: "+typeof e);throw new Error(t)}async setExpirations(e){await this.core.storage.setItem(this.storageKey,e)}async getExpirations(){return await this.core.storage.getItem(this.storageKey)}async persist(){await this.setExpirations(this.values),this.events.emit("expirer_sync")}async restore(){try{const e=await this.getExpirations();if(typeof e>"u"||!e.length)return;if(this.expirations.size){const{message:e}=Er("RESTORE_WILL_OVERRIDE",this.name);throw this.logger.error(e),new Error(e)}this.cached=e,this.logger.debug(`Successfully Restored expirations for ${this.name}`),this.logger.trace({type:"method",method:"restore",expirations:this.values})}catch(e){this.logger.debug(`Failed to Restore expirations for ${this.name}`),this.logger.error(e)}}getExpiration(e){const t=this.expirations.get(e);if(!t){const{message:t}=Er("NO_MATCHING_KEY",`${this.name}: ${e}`);throw this.logger.error(t),new Error(t)}return t}checkExpiry(e,t){const{expiry:r}=t;(0,U.toMiliseconds)(r)-Date.now()<=0&&this.expire(e,t)}expire(e,t){this.expirations.delete(e),this.events.emit($n,{target:e,expiration:t})}checkExpirations(){this.expirations.forEach(((e,t)=>this.checkExpiry(t,e)))}registerEventListeners(){this.core.heartbeat.on(y.HEARTBEAT_EVENTS.pulse,(()=>this.checkExpirations())),this.events.on(Tn,(e=>{const t=Tn;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),this.persist()})),this.events.on($n,(e=>{const t=$n;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),this.persist()})),this.events.on(Ln,(e=>{const t=Ln;this.logger.info(`Emitting ${t}`),this.logger.debug({type:"event",event:t,data:e}),this.persist()}))}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}}var fs=Object.defineProperty,gs=Object.getOwnPropertySymbols,ms=Object.prototype.hasOwnProperty,vs=Object.prototype.propertyIsEnumerable,bs=(e,t,r)=>t in e?fs(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,ws=(e,t)=>{for(var r in t||(t={}))ms.call(t,r)&&bs(e,r,t[r]);if(gs)for(var r of gs(t))vs.call(t,r)&&bs(e,r,t[r]);return e};class ys extends x{constructor(e){super(e),this.protocol="wc",this.version=2,this.name=fn,this.events=new v.EventEmitter,this.initialized=!1,this.on=(e,t)=>this.events.on(e,t),this.once=(e,t)=>this.events.once(e,t),this.off=(e,t)=>this.events.off(e,t),this.removeListener=(e,t)=>this.events.removeListener(e,t),this.projectId=e?.projectId;const t=typeof e?.logger<"u"&&"string"!=typeof e?.logger?e.logger:m()((0,_.getDefaultLoggerOptions)({level:e?.logger||"error"}));this.logger=(0,_.generateChildLogger)(t,this.name),this.heartbeat=new y.HeartBeat,this.crypto=new jn(this,this.logger,e?.keychain),this.history=new ds(this,this.logger),this.expirer=new ps(this,this.logger),this.storage=null!=e&&e.storage?e.storage:new w.ZP(ws(ws({},mn),e?.storageOptions)),this.relayer=new is({core:this,logger:this.logger,relayUrl:e?.relayUrl,projectId:this.projectId}),this.pairing=new us(this,this.logger)}static async init(e){const t=new ys(e);return await t.initialize(),t}get context(){return(0,_.getLoggerContext)(this.logger)}async start(){this.initialized||await this.initialize()}async initialize(){this.logger.trace("Initialized");try{await this.crypto.init(),await this.history.init(),await this.expirer.init(),await this.relayer.init(),await this.heartbeat.init(),await this.pairing.init(),this.initialized=!0,this.logger.info("Core Initilization Success")}catch(e){throw this.logger.warn(`Core Initilization Failure at epoch ${Date.now()}`,e),this.logger.error(e.message),e}}}const _s=ys,Es="client",xs=`wc@2:${Es}:`,Cs=Es,Ss=U.SEVEN_DAYS,Is={wc_sessionPropose:{req:{ttl:U.FIVE_MINUTES,prompt:!0,tag:1100},res:{ttl:U.FIVE_MINUTES,prompt:!1,tag:1101}},wc_sessionSettle:{req:{ttl:U.FIVE_MINUTES,prompt:!1,tag:1102},res:{ttl:U.FIVE_MINUTES,prompt:!1,tag:1103}},wc_sessionUpdate:{req:{ttl:U.ONE_DAY,prompt:!1,tag:1104},res:{ttl:U.ONE_DAY,prompt:!1,tag:1105}},wc_sessionExtend:{req:{ttl:U.ONE_DAY,prompt:!1,tag:1106},res:{ttl:U.ONE_DAY,prompt:!1,tag:1107}},wc_sessionRequest:{req:{ttl:U.FIVE_MINUTES,prompt:!0,tag:1108},res:{ttl:U.FIVE_MINUTES,prompt:!1,tag:1109}},wc_sessionEvent:{req:{ttl:U.FIVE_MINUTES,prompt:!0,tag:1110},res:{ttl:U.FIVE_MINUTES,prompt:!1,tag:1111}},wc_sessionDelete:{req:{ttl:U.ONE_DAY,prompt:!1,tag:1112},res:{ttl:U.ONE_DAY,prompt:!1,tag:1113}},wc_sessionPing:{req:{ttl:U.THIRTY_SECONDS,prompt:!1,tag:1114},res:{ttl:U.THIRTY_SECONDS,prompt:!1,tag:1115}}};var Os=Object.defineProperty,As=Object.defineProperties,Rs=Object.getOwnPropertyDescriptors,Ps=Object.getOwnPropertySymbols,ks=Object.prototype.hasOwnProperty,Ns=Object.prototype.propertyIsEnumerable,Ms=(e,t,r)=>t in e?Os(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Ts=(e,t)=>{for(var r in t||(t={}))ks.call(t,r)&&Ms(e,r,t[r]);if(Ps)for(var r of Ps(t))Ns.call(t,r)&&Ms(e,r,t[r]);return e},Ls=(e,t)=>As(e,Rs(t));class $s extends N{constructor(e){super(e),this.name="engine",this.events=new(b()),this.initialized=!1,this.ignoredPayloadTypes=[1],this.init=async()=>{this.initialized||(await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.client.core.pairing.register({methods:Object.keys(Is)}),this.initialized=!0)},this.connect=async e=>{this.isInitialized(),await this.isValidConnect(e);const{pairingTopic:t,requiredNamespaces:r,relays:i}=e;let n,s=t,o=!1;if(s&&(o=this.client.core.pairing.pairings.get(s).active),!s||!o){const{topic:e,uri:t}=await this.client.core.pairing.create();s=e,n=t}const a=await this.client.core.crypto.generateKeyPair(),l={requiredNamespaces:r,relays:i??[{protocol:"irn"}],proposer:{publicKey:a,metadata:this.client.metadata}},{reject:c,resolve:h,done:u}=or();if(this.events.once(hr("session_connect"),(async({error:e,session:t})=>{if(e)c(e);else if(t){t.self.publicKey=a;const e=Ls(Ts({},t),{requiredNamespaces:r});await this.client.session.set(t.topic,e),await this.setExpiry(t.topic,t.expiry),s&&await this.client.core.pairing.updateMetadata({topic:s,metadata:t.peer.metadata}),h(e)}})),!s){const{message:e}=Er("NO_MATCHING_KEY",`connect() pairing topic: ${s}`);throw new Error(e)}const d=await this.sendRequest(s,"wc_sessionPropose",l),p=nr(U.FIVE_MINUTES);return await this.setProposal(d,Ts({id:d,expiry:p},l)),{uri:n,approval:u}},this.pair=async e=>(this.isInitialized(),await this.client.core.pairing.pair(e)),this.approve=async e=>{this.isInitialized(),await this.isValidApprove(e);const{id:t,relayProtocol:r,namespaces:i}=e,{pairingTopic:n,proposer:s,requiredNamespaces:o}=this.client.proposal.get(t),a=await this.client.core.crypto.generateKeyPair(),l=s.publicKey,c=await this.client.core.crypto.generateSharedKey(a,l),h={relay:{protocol:r??"irn"},namespaces:i,requiredNamespaces:o,controller:{publicKey:a,metadata:this.client.metadata},expiry:nr(Ss)};await this.client.core.relayer.subscribe(c);const u=await this.sendRequest(c,"wc_sessionSettle",h),{done:d,resolve:p,reject:f}=or();this.events.once(hr("session_approve",u),(({error:e})=>{e?f(e):p(this.client.session.get(c))}));const g=Ls(Ts({},h),{topic:c,acknowledged:!1,self:h.controller,peer:{publicKey:s.publicKey,metadata:s.metadata},controller:a});return await this.client.session.set(c,g),await this.setExpiry(c,nr(Ss)),n&&await this.client.core.pairing.updateMetadata({topic:n,metadata:g.peer.metadata}),n&&t&&(await this.sendResult(t,n,{relay:{protocol:r??"irn"},responderPublicKey:a}),await this.client.proposal.delete(t,xr("USER_DISCONNECTED")),await this.client.core.pairing.activate({topic:n})),{topic:c,acknowledged:d}},this.reject=async e=>{this.isInitialized(),await this.isValidReject(e);const{id:t,reason:r}=e,{pairingTopic:i}=this.client.proposal.get(t);i&&(await this.sendError(t,i,r),await this.client.proposal.delete(t,xr("USER_DISCONNECTED")))},this.update=async e=>{this.isInitialized(),await this.isValidUpdate(e);const{topic:t,namespaces:r}=e,i=await this.sendRequest(t,"wc_sessionUpdate",{namespaces:r}),{done:n,resolve:s,reject:o}=or();return this.events.once(hr("session_update",i),(({error:e})=>{e?o(e):s()})),await this.client.session.update(t,{namespaces:r}),{acknowledged:n}},this.extend=async e=>{this.isInitialized(),await this.isValidExtend(e);const{topic:t}=e,r=await this.sendRequest(t,"wc_sessionExtend",{}),{done:i,resolve:n,reject:s}=or();return this.events.once(hr("session_extend",r),(({error:e})=>{e?s(e):n()})),await this.setExpiry(t,nr(Ss)),{acknowledged:i}},this.request=async e=>{this.isInitialized(),await this.isValidRequest(e);const{chainId:t,request:r,topic:i}=e,n=await this.sendRequest(i,"wc_sessionRequest",{request:r,chainId:t}),{done:s,resolve:o,reject:a}=or();return this.events.once(hr("session_request",n),(({error:e,result:t})=>{e?a(e):o(t)})),await s()},this.respond=async e=>{this.isInitialized(),await this.isValidRespond(e);const{topic:t,response:r}=e,{id:i}=r;(0,zr.isJsonRpcResult)(r)?await this.sendResult(i,t,r.result):(0,zr.isJsonRpcError)(r)&&await this.sendError(i,t,r.error),this.deletePendingSessionRequest(e.response.id,{message:"fulfilled",code:0})},this.ping=async e=>{this.isInitialized(),await this.isValidPing(e);const{topic:t}=e;if(this.client.session.keys.includes(t)){const e=await this.sendRequest(t,"wc_sessionPing",{}),{done:r,resolve:i,reject:n}=or();this.events.once(hr("session_ping",e),(({error:e})=>{e?n(e):i()})),await r()}else this.client.core.pairing.pairings.keys.includes(t)&&await this.client.core.pairing.ping({topic:t})},this.emit=async e=>{this.isInitialized(),await this.isValidEmit(e);const{topic:t,event:r,chainId:i}=e;await this.sendRequest(t,"wc_sessionEvent",{event:r,chainId:i})},this.disconnect=async e=>{this.isInitialized(),await this.isValidDisconnect(e);const{topic:t}=e;this.client.session.keys.includes(t)?(await this.sendRequest(t,"wc_sessionDelete",xr("USER_DISCONNECTED")),await this.deleteSession(t)):await this.client.core.pairing.disconnect({topic:t})},this.find=e=>(this.isInitialized(),this.client.session.getAll().filter((t=>function(e,t){const{requiredNamespaces:r}=t,i=Object.keys(e.namespaces),n=Object.keys(r);let s=!0;return!!tr(n,i)&&(i.forEach((t=>{const{accounts:i,methods:n,events:o,extension:a}=e.namespaces[t],l=wr(i),c=r[t];tr(c.chains,l)&&tr(c.methods,n)&&tr(c.events,o)||(s=!1),s&&a&&a.forEach((e=>{var t;const{accounts:r,methods:i,events:n}=e,o=wr(r);null!=(t=c.extension)&&t.find((e=>tr(e.chains,o)&&tr(e.methods,i)&&tr(e.events,n)))||(s=!1)}))})),s)}(t,e)))),this.getPendingSessionRequests=()=>(this.isInitialized(),this.client.pendingRequest.getAll()),this.deleteSession=async(e,t)=>{const{self:r}=this.client.session.get(e);await this.client.core.relayer.unsubscribe(e),await Promise.all([this.client.session.delete(e,xr("USER_DISCONNECTED")),this.client.core.crypto.deleteKeyPair(r.publicKey),this.client.core.crypto.deleteSymKey(e),t?Promise.resolve():this.client.core.expirer.del(e)])},this.deleteProposal=async(e,t)=>{await Promise.all([this.client.proposal.delete(e,xr("USER_DISCONNECTED")),t?Promise.resolve():this.client.core.expirer.del(e)])},this.deletePendingSessionRequest=async(e,t,r=!1)=>{await Promise.all([this.client.pendingRequest.delete(e,t),r?Promise.resolve():this.client.core.expirer.del(e)])},this.setExpiry=async(e,t)=>{this.client.session.keys.includes(e)&&await this.client.session.update(e,{expiry:t}),this.client.core.expirer.set(e,t)},this.setProposal=async(e,t)=>{await this.client.proposal.set(e,t),this.client.core.expirer.set(e,t.expiry)},this.setPendingSessionRequest=async e=>{const t=Is.wc_sessionRequest.req.ttl,{id:r,topic:i,params:n}=e;await this.client.pendingRequest.set(r,{id:r,topic:i,params:n}),t&&this.client.core.expirer.set(r,t)},this.sendRequest=async(e,t,r)=>{const i=(0,zr.formatJsonRpcRequest)(t,r),n=await this.client.core.crypto.encode(e,i),s=Is[t].req;return this.client.core.history.set(e,i),this.client.core.relayer.publish(e,n,s),i.id},this.sendResult=async(e,t,r)=>{const i=(0,zr.formatJsonRpcResult)(e,r),n=await this.client.core.crypto.encode(t,i),s=await this.client.core.history.get(t,e),o=Is[s.request.method].res;this.client.core.relayer.publish(t,n,o),await this.client.core.history.resolve(i)},this.sendError=async(e,t,r)=>{const i=(0,zr.formatJsonRpcError)(e,r),n=await this.client.core.crypto.encode(t,i),s=await this.client.core.history.get(t,e),o=Is[s.request.method].res;this.client.core.relayer.publish(t,n,o),await this.client.core.history.resolve(i)},this.cleanup=async()=>{const e=[],t=[];this.client.session.getAll().forEach((t=>{sr(t.expiry)&&e.push(t.topic)})),this.client.proposal.getAll().forEach((e=>{sr(e.expiry)&&t.push(e.id)})),await Promise.all([...e.map((e=>this.deleteSession(e))),...t.map((e=>this.deleteProposal(e)))])},this.onRelayEventRequest=e=>{const{topic:t,payload:r}=e,i=r.method;switch(i){case"wc_sessionPropose":return this.onSessionProposeRequest(t,r);case"wc_sessionSettle":return this.onSessionSettleRequest(t,r);case"wc_sessionUpdate":return this.onSessionUpdateRequest(t,r);case"wc_sessionExtend":return this.onSessionExtendRequest(t,r);case"wc_sessionPing":return this.onSessionPingRequest(t,r);case"wc_sessionDelete":return this.onSessionDeleteRequest(t,r);case"wc_sessionRequest":return this.onSessionRequest(t,r);case"wc_sessionEvent":return this.onSessionEventRequest(t,r);default:return this.client.logger.info(`Unsupported request method ${i}`)}},this.onRelayEventResponse=async e=>{const{topic:t,payload:r}=e,i=(await this.client.core.history.get(t,r.id)).request.method;switch(i){case"wc_sessionPropose":return this.onSessionProposeResponse(t,r);case"wc_sessionSettle":return this.onSessionSettleResponse(t,r);case"wc_sessionUpdate":return this.onSessionUpdateResponse(t,r);case"wc_sessionExtend":return this.onSessionExtendResponse(t,r);case"wc_sessionPing":return this.onSessionPingResponse(t,r);case"wc_sessionRequest":return this.onSessionRequestResponse(t,r);default:return this.client.logger.info(`Unsupported response method ${i}`)}},this.onSessionProposeRequest=async(e,t)=>{const{params:r,id:i}=t;try{this.isValidConnect(Ts({},t.params));const n=nr(U.FIVE_MINUTES),s=Ts({id:i,pairingTopic:e,expiry:n},r);await this.setProposal(i,s),this.client.events.emit("session_proposal",{id:i,params:s})}catch(t){await this.sendError(i,e,t),this.client.logger.error(t)}},this.onSessionProposeResponse=async(e,t)=>{const{id:r}=t;if((0,zr.isJsonRpcResult)(t)){const{result:i}=t;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",result:i});const n=this.client.proposal.get(r);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",proposal:n});const s=n.proposer.publicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",selfPublicKey:s});const o=i.responderPublicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",peerPublicKey:o});const a=await this.client.core.crypto.generateSharedKey(s,o);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",sessionTopic:a});const l=await this.client.core.relayer.subscribe(a);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",subscriptionId:l}),await this.client.core.pairing.activate({topic:e})}else(0,zr.isJsonRpcError)(t)&&(await this.client.proposal.delete(r,xr("USER_DISCONNECTED")),this.events.emit(hr("session_connect"),{error:t.error}))},this.onSessionSettleRequest=async(e,t)=>{const{id:r,params:i}=t;try{this.isValidSessionSettleRequest(i);const{relay:r,controller:n,expiry:s,namespaces:o}=t.params,a={topic:e,relay:r,expiry:s,namespaces:o,acknowledged:!0,controller:n.publicKey,self:{publicKey:"",metadata:this.client.metadata},peer:{publicKey:n.publicKey,metadata:n.metadata}};await this.sendResult(t.id,e,!0),this.events.emit(hr("session_connect"),{session:a})}catch(t){await this.sendError(r,e,t),this.client.logger.error(t)}},this.onSessionSettleResponse=async(e,t)=>{const{id:r}=t;(0,zr.isJsonRpcResult)(t)?(await this.client.session.update(e,{acknowledged:!0}),this.events.emit(hr("session_approve",r),{})):(0,zr.isJsonRpcError)(t)&&(await this.client.session.delete(e,xr("USER_DISCONNECTED")),this.events.emit(hr("session_approve",r),{error:t.error}))},this.onSessionUpdateRequest=async(e,t)=>{const{params:r,id:i}=t;try{this.isValidUpdate(Ts({topic:e},r)),await this.client.session.update(e,{namespaces:r.namespaces}),await this.sendResult(i,e,!0),this.client.events.emit("session_update",{id:i,topic:e,params:r})}catch(t){await this.sendError(i,e,t),this.client.logger.error(t)}},this.onSessionUpdateResponse=(e,t)=>{const{id:r}=t;(0,zr.isJsonRpcResult)(t)?this.events.emit(hr("session_update",r),{}):(0,zr.isJsonRpcError)(t)&&this.events.emit(hr("session_update",r),{error:t.error})},this.onSessionExtendRequest=async(e,t)=>{const{id:r}=t;try{this.isValidExtend({topic:e}),await this.setExpiry(e,nr(Ss)),await this.sendResult(r,e,!0),this.client.events.emit("session_extend",{id:r,topic:e})}catch(t){await this.sendError(r,e,t),this.client.logger.error(t)}},this.onSessionExtendResponse=(e,t)=>{const{id:r}=t;(0,zr.isJsonRpcResult)(t)?this.events.emit(hr("session_extend",r),{}):(0,zr.isJsonRpcError)(t)&&this.events.emit(hr("session_extend",r),{error:t.error})},this.onSessionPingRequest=async(e,t)=>{const{id:r}=t;try{this.isValidPing({topic:e}),await this.sendResult(r,e,!0),this.client.events.emit("session_ping",{id:r,topic:e})}catch(t){await this.sendError(r,e,t),this.client.logger.error(t)}},this.onSessionPingResponse=(e,t)=>{const{id:r}=t;setTimeout((()=>{(0,zr.isJsonRpcResult)(t)?this.events.emit(hr("session_ping",r),{}):(0,zr.isJsonRpcError)(t)&&this.events.emit(hr("session_ping",r),{error:t.error})}),500)},this.onSessionDeleteRequest=async(e,t)=>{const{id:r}=t;try{this.isValidDisconnect({topic:e,reason:t.params}),await this.sendResult(r,e,!0),await this.deleteSession(e),this.client.events.emit("session_delete",{id:r,topic:e})}catch(t){await this.sendError(r,e,t),this.client.logger.error(t)}},this.onSessionRequest=async(e,t)=>{const{id:r,params:i}=t;try{this.isValidRequest(Ts({topic:e},i)),await this.setPendingSessionRequest({id:r,topic:e,params:i}),this.client.events.emit("session_request",{id:r,topic:e,params:i})}catch(t){await this.sendError(r,e,t),this.client.logger.error(t)}},this.onSessionRequestResponse=(e,t)=>{const{id:r}=t;(0,zr.isJsonRpcResult)(t)?this.events.emit(hr("session_request",r),{result:t.result}):(0,zr.isJsonRpcError)(t)&&this.events.emit(hr("session_request",r),{error:t.error})},this.onSessionEventRequest=async(e,t)=>{const{id:r,params:i}=t;try{this.isValidEmit(Ts({topic:e},i)),this.client.events.emit("session_event",{id:r,topic:e,params:i})}catch(t){await this.sendError(r,e,t),this.client.logger.error(t)}},this.isValidConnect=async e=>{if(!jr(e)){const{message:t}=Er("MISSING_OR_INVALID",`connect() params: ${JSON.stringify(e)}`);throw new Error(t)}const{pairingTopic:t,requiredNamespaces:r,relays:i}=e;Ir(t)||await this.isValidPairingTopic(t);const n=function(e,t){let r=null;if(e&&Sr(e)){const i=Lr(e,t);i&&(r=i);const n=function(e,t){let r=null;return Object.entries(e).forEach((([e,i])=>{if(r)return;const n=Nr(e,i?.chains,`${t} requiredNamespace`),s=Pr(i,t);n?r=n:s?r=s:i.extension&&i.extension.forEach((i=>{if(r)return;const n=Nr(e,i.chains,`${t} extension`);n&&(r=n)}))})),r}(e,t);n&&(r=n)}else r=Er("MISSING_OR_INVALID",`${t}, requiredNamespaces should be an object with data`);return r}(r,"connect()");if(n)throw new Error(n.message);if(!function(e,t){let r=!1;return e?e&&Cr(e)&&e.length&&e.forEach((e=>{r=Ur(e)})):r=!0,r}(i)){const{message:e}=Er("MISSING_OR_INVALID",`connect() relays: ${i}`);throw new Error(e)}},this.isValidApprove=async e=>{if(!jr(e))throw new Error(Er("MISSING_OR_INVALID",`approve() params: ${e}`).message);const{id:t,namespaces:r,relayProtocol:i}=e;await this.isValidProposalId(t);const n=this.client.proposal.get(t),s=$r(r,"approve()");if(s)throw new Error(s.message);const o=Br(n.requiredNamespaces,r,"update()");if(o)throw new Error(o.message);if(!Or(i,!0)){const{message:e}=Er("MISSING_OR_INVALID",`approve() relayProtocol: ${i}`);throw new Error(e)}},this.isValidReject=async e=>{if(!jr(e)){const{message:t}=Er("MISSING_OR_INVALID",`reject() params: ${e}`);throw new Error(t)}const{id:t,reason:r}=e;if(await this.isValidProposalId(t),!function(e){return!!(e&&"object"==typeof e&&e.code&&Ar(e.code,!1)&&e.message&&Or(e.message,!1))}(r)){const{message:e}=Er("MISSING_OR_INVALID",`reject() reason: ${JSON.stringify(r)}`);throw new Error(e)}},this.isValidSessionSettleRequest=e=>{if(!jr(e)){const{message:t}=Er("MISSING_OR_INVALID",`onSessionSettleRequest() params: ${e}`);throw new Error(t)}const{relay:t,controller:r,namespaces:i,expiry:n}=e;if(!Ur(t)){const{message:e}=Er("MISSING_OR_INVALID","onSessionSettleRequest() relay protocol should be a string");throw new Error(e)}const s=function(e,t){let r=null;return Or(e?.publicKey,!1)||(r=Er("MISSING_OR_INVALID","onSessionSettleRequest() controller public key should be a string")),r}(r);if(s)throw new Error(s.message);const o=$r(i,"onSessionSettleRequest()");if(o)throw new Error(o.message);if(sr(n)){const{message:e}=Er("EXPIRED","onSessionSettleRequest()");throw new Error(e)}},this.isValidUpdate=async e=>{if(!jr(e)){const{message:t}=Er("MISSING_OR_INVALID",`update() params: ${e}`);throw new Error(t)}const{topic:t,namespaces:r}=e;await this.isValidSessionTopic(t);const i=this.client.session.get(t),n=$r(r,"update()");if(n)throw new Error(n.message);const s=Br(i.requiredNamespaces,r,"update()");if(s)throw new Error(s.message)},this.isValidExtend=async e=>{if(!jr(e)){const{message:t}=Er("MISSING_OR_INVALID",`extend() params: ${e}`);throw new Error(t)}const{topic:t}=e;await this.isValidSessionTopic(t)},this.isValidRequest=async e=>{if(!jr(e)){const{message:t}=Er("MISSING_OR_INVALID",`request() params: ${e}`);throw new Error(t)}const{topic:t,request:r,chainId:i}=e;await this.isValidSessionTopic(t);const{namespaces:n}=this.client.session.get(t);if(!Dr(n,i)){const{message:e}=Er("MISSING_OR_INVALID",`request() chainId: ${i}`);throw new Error(e)}if(!function(e){return!(Ir(e)||!Or(e.method,!1))}(r)){const{message:e}=Er("MISSING_OR_INVALID",`request() ${JSON.stringify(r)}`);throw new Error(e)}if(!function(e,t,r){return!!Or(r,!1)&&function(e,t){const r=[];return Object.values(e).forEach((e=>{wr(e.accounts).includes(t)&&r.push(...e.methods),e.extension&&e.extension.forEach((e=>{wr(e.accounts).includes(t)&&r.push(...e.methods)}))})),r}(e,t).includes(r)}(n,i,r.method)){const{message:e}=Er("MISSING_OR_INVALID",`request() method: ${r.method}`);throw new Error(e)}},this.isValidRespond=async e=>{if(!jr(e)){const{message:t}=Er("MISSING_OR_INVALID",`respond() params: ${e}`);throw new Error(t)}const{topic:t,response:r}=e;if(await this.isValidSessionTopic(t),!function(e){return!(Ir(e)||Ir(e.result)&&Ir(e.error)||!Ar(e.id,!1)||!Or(e.jsonrpc,!1))}(r)){const{message:e}=Er("MISSING_OR_INVALID",`respond() response: ${JSON.stringify(r)}`);throw new Error(e)}},this.isValidPing=async e=>{if(!jr(e)){const{message:t}=Er("MISSING_OR_INVALID",`ping() params: ${e}`);throw new Error(t)}const{topic:t}=e;await this.isValidSessionOrPairingTopic(t)},this.isValidEmit=async e=>{if(!jr(e)){const{message:t}=Er("MISSING_OR_INVALID",`emit() params: ${e}`);throw new Error(t)}const{topic:t,event:r,chainId:i}=e;await this.isValidSessionTopic(t);const{namespaces:n}=this.client.session.get(t);if(!Dr(n,i)){const{message:e}=Er("MISSING_OR_INVALID",`emit() chainId: ${i}`);throw new Error(e)}if(!function(e){return!(Ir(e)||!Or(e.name,!1))}(r)){const{message:e}=Er("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(r)}`);throw new Error(e)}if(!function(e,t,r){return!!Or(r,!1)&&function(e,t){const r=[];return Object.values(e).forEach((e=>{wr(e.accounts).includes(t)&&r.push(...e.events),e.extension&&e.extension.forEach((e=>{wr(e.accounts).includes(t)&&r.push(...e.events)}))})),r}(e,t).includes(r)}(n,i,r.name)){const{message:e}=Er("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(r)}`);throw new Error(e)}},this.isValidDisconnect=async e=>{if(!jr(e)){const{message:t}=Er("MISSING_OR_INVALID",`disconnect() params: ${e}`);throw new Error(t)}const{topic:t}=e;await this.isValidSessionOrPairingTopic(t)}}isInitialized(){if(!this.initialized){const{message:e}=Er("NOT_INITIALIZED",this.name);throw new Error(e)}}registerRelayerEvents(){this.client.core.relayer.on(yn,(async e=>{const{topic:t,message:r}=e;if(this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(r)))return;const i=await this.client.core.crypto.decode(t,r);(0,zr.isJsonRpcRequest)(i)?(this.client.core.history.set(t,i),this.onRelayEventRequest({topic:t,payload:i})):(0,zr.isJsonRpcResponse)(i)&&(await this.client.core.history.resolve(i),this.onRelayEventResponse({topic:t,payload:i}))}))}registerExpirerEvents(){this.client.core.expirer.on($n,(async e=>{const{topic:t,id:r}=cr(e.target);if(r&&this.getPendingSessionRequests()[r])return await this.deletePendingSessionRequest(r,Er("EXPIRED"),!0);t?this.client.session.keys.includes(t)&&(await this.deleteSession(t,!0),this.client.events.emit("session_expire",{topic:t})):r&&await this.deleteProposal(r,!0)}))}isValidPairingTopic(e){if(!Or(e,!1)){const{message:t}=Er("MISSING_OR_INVALID",`pairing topic should be a string: ${e}`);throw new Error(t)}if(!this.client.core.pairing.pairings.keys.includes(e)){const{message:t}=Er("NO_MATCHING_KEY",`pairing topic doesn't exist: ${e}`);throw new Error(t)}if(sr(this.client.core.pairing.pairings.get(e).expiry)){const{message:t}=Er("EXPIRED",`pairing topic: ${e}`);throw new Error(t)}}async isValidSessionTopic(e){if(!Or(e,!1)){const{message:t}=Er("MISSING_OR_INVALID",`session topic should be a string: ${e}`);throw new Error(t)}if(!this.client.session.keys.includes(e)){const{message:t}=Er("NO_MATCHING_KEY",`session topic doesn't exist: ${e}`);throw new Error(t)}if(sr(this.client.session.get(e).expiry)){await this.deleteSession(e);const{message:t}=Er("EXPIRED",`session topic: ${e}`);throw new Error(t)}}async isValidSessionOrPairingTopic(e){if(this.client.session.keys.includes(e))await this.isValidSessionTopic(e);else{if(!this.client.core.pairing.pairings.keys.includes(e)){if(Or(e,!1)){const{message:t}=Er("NO_MATCHING_KEY",`session or pairing topic doesn't exist: ${e}`);throw new Error(t)}{const{message:t}=Er("MISSING_OR_INVALID",`session or pairing topic should be a string: ${e}`);throw new Error(t)}}this.isValidPairingTopic(e)}}async isValidProposalId(e){if("number"!=typeof e){const{message:t}=Er("MISSING_OR_INVALID",`proposal id should be a number: ${e}`);throw new Error(t)}if(!this.client.proposal.keys.includes(e)){const{message:t}=Er("NO_MATCHING_KEY",`proposal id doesn't exist: ${e}`);throw new Error(t)}if(sr(this.client.proposal.get(e).expiry)){await this.deleteProposal(e);const{message:t}=Er("EXPIRED",`proposal id: ${e}`);throw new Error(t)}}}class Us extends hs{constructor(e,t){super(e,t,"proposal",xs),this.core=e,this.logger=t}}class js extends hs{constructor(e,t){super(e,t,"session",xs),this.core=e,this.logger=t}}class Ds extends hs{constructor(e,t){super(e,t,"request",xs),this.core=e,this.logger=t}}class Bs extends k{constructor(e){super(e),this.protocol="wc",this.version=2,this.name=Cs,this.events=new v.EventEmitter,this.on=(e,t)=>this.events.on(e,t),this.once=(e,t)=>this.events.once(e,t),this.off=(e,t)=>this.events.off(e,t),this.removeListener=(e,t)=>this.events.removeListener(e,t),this.removeAllListeners=e=>this.events.removeAllListeners(e),this.connect=async e=>{try{return await this.engine.connect(e)}catch(e){throw this.logger.error(e.message),e}},this.pair=async e=>{try{return await this.engine.pair(e)}catch(e){throw this.logger.error(e.message),e}},this.approve=async e=>{try{return await this.engine.approve(e)}catch(e){throw this.logger.error(e.message),e}},this.reject=async e=>{try{return await this.engine.reject(e)}catch(e){throw this.logger.error(e.message),e}},this.update=async e=>{try{return await this.engine.update(e)}catch(e){throw this.logger.error(e.message),e}},this.extend=async e=>{try{return await this.engine.extend(e)}catch(e){throw this.logger.error(e.message),e}},this.request=async e=>{try{return await this.engine.request(e)}catch(e){throw this.logger.error(e.message),e}},this.respond=async e=>{try{return await this.engine.respond(e)}catch(e){throw this.logger.error(e.message),e}},this.ping=async e=>{try{return await this.engine.ping(e)}catch(e){throw this.logger.error(e.message),e}},this.emit=async e=>{try{return await this.engine.emit(e)}catch(e){throw this.logger.error(e.message),e}},this.disconnect=async e=>{try{return await this.engine.disconnect(e)}catch(e){throw this.logger.error(e.message),e}},this.find=e=>{try{return this.engine.find(e)}catch(e){throw this.logger.error(e.message),e}},this.getPendingSessionRequests=()=>{try{return this.engine.getPendingSessionRequests()}catch(e){throw this.logger.error(e.message),e}},this.name=e?.name||Cs,this.metadata=e?.metadata||(0,Nt.D)()||{name:"",description:"",url:"",icons:[""]};const t=typeof e?.logger<"u"&&"string"!=typeof e?.logger?e.logger:m()((0,_.getDefaultLoggerOptions)({level:e?.logger||"error"}));this.core=e?.core||new _s(e),this.logger=(0,_.generateChildLogger)(t,this.name),this.session=new js(this.core,this.logger),this.proposal=new Us(this.core,this.logger),this.pendingRequest=new Ds(this.core,this.logger),this.engine=new $s(this)}static async init(e){const t=new Bs(e);return await t.initialize(),t}get context(){return(0,_.getLoggerContext)(this.logger)}get pairing(){return this.core.pairing.pairings}async initialize(){this.logger.trace("Initialized");try{await this.core.start(),await this.session.init(),await this.proposal.init(),await this.pendingRequest.init(),await this.engine.init(),this.logger.info("SignClient Initilization Success")}catch(e){throw this.logger.info("SignClient Initilization Failure"),this.logger.error(e.message),e}}}const zs=Bs;var Ws=r(9342),Hs=Object.defineProperty,Vs=Object.getOwnPropertySymbols,Fs=Object.prototype.hasOwnProperty,qs=Object.prototype.propertyIsEnumerable,Ks=(e,t,r)=>t in e?Hs(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;const Js=document.getElementById("connect-button"),Zs="60cf9dfdf386049c53600eed828699a4",Gs={eip155:{methods:["eth_sign"],chains:["eip155:1"],events:["accountsChanged"]}},Ys=new class{constructor(e){this.openModal=Ws.jb.open,this.closeModal=Ws.jb.close,this.subscribeModal=Ws.jb.subscribe,this.setTheme=Ws.t0.setThemeConfig,Ws.t0.setConfig(((e,t)=>{for(var r in t||(t={}))Fs.call(t,r)&&Ks(e,r,t[r]);if(Vs)for(var r of Vs(t))qs.call(t,r)&&Ks(e,r,t[r]);return e})({enableStandaloneMode:!0},e)),this.initUi()}async initUi(){if(typeof window<"u"){await Promise.resolve().then(r.bind(r,6030));const e=document.createElement("w3m-modal");document.body.insertAdjacentElement("beforeend",e)}}}({projectId:Zs,standaloneChains:Gs.eip155.chains});let Xs;!async function(){try{Js.disabled=!0,Xs=await zs.init({projectId:Zs}),Js.disabled=!1,Js.innerText="Connect Wallet"}catch(e){console.error(e)}}(),Js.addEventListener("click",(async()=>{try{if(Xs){const{uri:e,approval:t}=await Xs.connect({requiredNamespaces:Gs});e&&(Ys.openModal({uri:e}),await t(),Ys.closeModal())}}catch(e){console.error(e)}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,